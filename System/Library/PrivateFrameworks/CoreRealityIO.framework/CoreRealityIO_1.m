void sub_22FF8E1E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

std::string *std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&this[1], (_QWORD *)a3);
  v6 = *(_OWORD *)(a3 + 24);
  v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v7;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  return this;
}

void sub_22FF8E2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::LiveSessionPrimDescriptor>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_CopyInit(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Move(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Hash(double *a1)
{
  double v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_Equal(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_EqualPtr(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetTypeid()
{
  return MEMORY[0x24BEDB780];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB780];
}

double pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<double,double,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<double>>::_GetProxiedAsVtValue@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  a2[1] = &unk_24FDE5B2B;
  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Destroy(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Hash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_EqualPtr(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedTypeid()
{
}

unsigned int **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetProxiedAsVtValue@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  a2[1] = (unsigned int *)((char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                         + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetAttr> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery> &>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetAttr> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery> &>(int a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(this);
}

uint64_t *std::map<float,std::string>::map[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = (float *)(a2 + 1);
  v5 = (float *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(a1, v3, (uint64_t)(v5 + 8), v5[8]);
      v6 = (float *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(float **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (float *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_22FF8E768(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;

  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x2348B2320]();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::assign<std::string const*>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6[2];
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(a1);
  v6[0] = &v8;
  v6[1] = &v7;
  _ZN32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6resizeIZNS8_6assignIPKS7_EENS1_9enable_ifIXntsr3std11is_integralIT_EE5valueEvE4typeESE_SE_E7_CopierEEvmOSE_(a1, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3), v6);
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
    }
    else if (*a1)
    {
      v4 = a1[4];
      v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void _ZN32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE6resizeIZNS8_6assignIPKS7_EENS1_9enable_ifIXntsr3std11is_integralIT_EE5valueEvE4typeESE_SE_E7_CopierEEvmOSE_(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *New;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  New = (_QWORD *)a1[4];
  if (New)
  {
    if (!a1[3])
    {
      v8 = atomic_load(New - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 3 * a2;
          do
          {
            if (SHIBYTE(New[v13 + 2]) < 0)
              operator delete((void *)New[v13]);
            v13 += 3;
          }
          while (3 * v3 != v13);
          goto LABEL_23;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
          std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v9, v9 + 24 * v3, (uint64_t)New);
        }
LABEL_17:
        v10 = &New[3 * v3];
        goto LABEL_18;
      }
      New = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)New;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
    std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v11, v11 + 24 * v12, (uint64_t)New);
    if (v3 >= a2)
      goto LABEL_23;
    goto LABEL_17;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
  {
LABEL_11:
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(a1);
    return;
  }
  v10 = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
  New = v10;
LABEL_18:
  std::uninitialized_copy[abi:ne180100]<std::string const*,std::string*>(**a3, *a3[1], (uint64_t)v10);
LABEL_23:
  if (New != (_QWORD *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
    a1[4] = (unint64_t)New;
  }
  *a1 = a2;
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::string const*,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (std::string *)(a3 + v6);
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22FF8EAD0(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_22FF8EAFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
    }
    else if (*a1)
    {
      v4 = (_QWORD *)a1[4];
      v5 = &v4[*a1];
      do
      {
        if ((*v4 & 7) != 0)
        {
          v6 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        ++v4;
      }
      while (v4 != v5);
    }
    *a1 = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(unint64_t **a1)
{
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (uint64_t *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = (v4 & 0xFFFFFFFFFFFFFFF8)
         + (((v4 & 0xFFFFFFFFFFFFFFF8) + v1 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v1) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (uint64_t *)a1[4];
  v6 = *(uint64_t **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *v6++;
    result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;

  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[3];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  result = a1[1];
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v10;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

_QWORD *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    for (v6[2] = &result[5 * v8]; a2 != a3; v7 += 5)
    {
      v9 = std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 40;
      result = (_QWORD *)(v9 + 40);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_22FF8F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::GetValue(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::TfToken>(a2, *(uint64_t **)(a1 + 8));
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return (*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) == (**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
        + 1;
  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_22FF8F4FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    for (v6[2] = &result[7 * v8]; a2 != a3; v7 += 7)
    {
      v9 = std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 56;
      result = (_QWORD *)(v9 + 56);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_22FF8F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4;
  unint64_t v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = LODWORD(v4);
  if (*(_BYTE *)(a1 + 8))
    v5 = ((*(_QWORD *)a1 + LODWORD(v4) + (*(_QWORD *)a1 + LODWORD(v4)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v4))) >> 1)
       + LODWORD(v4);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&>(uint64_t result, float *a2, float *a3)
{
  float v3;
  unint64_t v4;
  float v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(result + 8))
    v4 = ((*(_QWORD *)result
         + LODWORD(v3)
         + (*(_QWORD *)result + LODWORD(v3)) * (*(_QWORD *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_Streamer>(_QWORD *a1)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF8FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB798];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<int>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<int>::_Streamer>(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_CopyInit(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Move(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Hash(float *a1)
{
  float v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_Equal(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_EqualPtr(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetTypeid()
{
  return MEMORY[0x24BEDB788];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB788];
}

float pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<float,float,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<float>>::_GetProxiedAsVtValue@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24FDE5F5B;
  result = *a1;
  *(float *)a2 = *a1;
  return result;
}

void realityio::TransformAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, const pxrInternal__aapl__pxrReserved__::VtValue **a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *NameToken;
  realityio::TargetPaths *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  realityio::TargetPaths *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 *v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 *v28;
  int v29;
  float v30;
  void **v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  const pxrInternal__aapl__pxrReserved__::TfToken *v36;
  pxrInternal__aapl__pxrReserved__::TfToken *v37;
  const pxrInternal__aapl__pxrReserved__::TfToken *v38;
  double v39;
  double v40;
  uint64_t EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v42;
  uint64_t v43;
  const char *v44;
  int v45;
  size_t v46;
  size_t v47;
  _BOOL4 v48;
  size_t v49;
  const char *v50;
  unsigned int *v51;
  unsigned int v52;
  const pxrInternal__aapl__pxrReserved__::VtValue *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  const pxrInternal__aapl__pxrReserved__::VtValue *v58;
  uint64_t v59;
  unint64_t v60;
  void **v61;
  void *v62;
  void *v63;
  unint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  unint64_t v70;
  pxrInternal__aapl__pxrReserved__::TfToken *v71;
  uint64_t *v72;
  uint64_t v73;
  pxrInternal__aapl__pxrReserved__::TfToken *v74;
  uint64_t v75;
  const char *v76;
  int v77;
  size_t v78;
  size_t v79;
  BOOL v80;
  size_t v81;
  const char *v82;
  unsigned int *v83;
  unsigned int v84;
  void *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t ServiceLocator;
  char v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t *v96;
  _QWORD *v97[2];
  void *v98[3];
  _QWORD v99[3];
  _QWORD v100[3];
  _QWORD v101[3];
  _OWORD v102[4];
  _OWORD v103[4];
  _BYTE v104[4];
  int v105;
  _OWORD v106[2];
  const pxrInternal__aapl__pxrReserved__::TfToken *v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  void *__p[2];
  __int128 v118;
  uint64_t v119;
  _BYTE v120[16];
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v120, a1);
  v107 = 0;
  memset(v106, 0, sizeof(v106));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v103, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v102, 1.0);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v90 = 0;
    v8 = (unint64_t *)MEMORY[0x24BEE7FE8];
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v113, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + 16 * v7));
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v7);
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      v11 = (realityio::TargetPaths *)MEMORY[0x2348B274C](__p, "xformOpOrder");
      v12 = *NameToken;
      v13 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      if ((unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v104, (int *)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v105);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v113);
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
        {
          if (((uint64_t)__p[1] & 4) != 0)
            v28 = (__int128 *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                 + 168))(__p);
          else
            v28 = (__int128 *)__p[0];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v106, v28);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        goto LABEL_38;
      }
      v15 = (realityio::TargetPaths *)realityio::TargetPaths::upAxisPath(v11);
      if (*(_QWORD *)v9 == *(_QWORD *)v15)
        break;
      if (*(_QWORD *)v9 == *(_QWORD *)realityio::TargetPaths::metersPerUnitPath(v15))
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + 16 * v7));
        v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        v30 = 0.01;
        if (v29)
        {
          if (((uint64_t)__p[1] & 4) != 0)
            v31 = (void **)(*(uint64_t (**)(void **, float))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                     + 168))(__p, 0.01);
          else
            v31 = __p;
          v30 = *(double *)v31;
        }
        *(float *)&v109 = v30;
        *((float *)&v109 + 1) = v30;
        *((float *)&v109 + 2) = v30;
        v32 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
        v33 = *v32;
        v34 = v32[1];
        v35 = v32[3];
        v102[2] = v32[2];
        v102[3] = v35;
        v102[0] = v33;
        v102[1] = v34;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        goto LABEL_37;
      }
LABEL_38:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v113);
      ++v7;
      v6 = *a2;
      if (v7 >= (a2[1] - *a2) >> 3)
        goto LABEL_44;
    }
    Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v8);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v8);
    v17 = *((_QWORD *)Data + 168);
    *(_QWORD *)&v92 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)&v92 = v92 & 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109, (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)*a3 + 16 * v7));
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v109))
    {
      if ((BYTE8(v109) & 4) != 0)
        v20 = (__int128 *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v109);
      else
        v20 = &v109;
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v92, v20);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v8);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v8);
    if ((v92 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v21 + 169) & 0xFFFFFFFFFFFFFFF8))
    {
      __p[1] = 0;
      *(_QWORD *)&v118 = 0;
      __p[0] = (void *)0x3FF0000000000000;
      *((_QWORD *)&v118 + 1) = 0xC056800000000000;
      v22 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v103, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__p);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[3];
      v103[2] = v22[2];
      v103[3] = v25;
      v103[0] = v23;
      v103[1] = v24;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
    if ((v92 & 7) != 0)
    {
      v26 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
LABEL_37:
    v90 = 1;
    goto LABEL_38;
  }
  v90 = 0;
LABEL_44:
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
  v36 = v107;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
  v38 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v107 + 8 * *(_QWORD *)&v106[0]);
  if (v36 == v38)
  {
    v40 = -1000000.0;
    v39 = 1000000.0;
  }
  else
  {
    v39 = 1000000.0;
    v40 = -1000000.0;
    do
    {
      if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
      v42 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](__p, "!invert!xformOp:");
      if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        v43 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v43 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
      if (*(char *)(v43 + 23) >= 0)
        v44 = (const char *)v43;
      else
        v44 = *(const char **)v43;
      v45 = *(char *)(EmptyString + 23);
      if (v45 >= 0)
        v46 = *(unsigned __int8 *)(EmptyString + 23);
      else
        v46 = *(_QWORD *)(EmptyString + 8);
      v47 = strlen(v44);
      if (v46 >= v47)
      {
        v49 = v47;
        if (v45 >= 0)
          v50 = (const char *)EmptyString;
        else
          v50 = *(const char **)EmptyString;
        v48 = strncmp(v50, v44, v49) == 0;
      }
      else
      {
        v48 = 0;
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v51 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if (v48)
      {
        __p[1] = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v101, __p);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        __p[1] = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v100, __p);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        __p[1] = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v99, __p);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v104, v36);
        std::string::basic_string[abi:ne180100]<0>(__p, "/__timeSamples");
        MEMORY[0x2348B26F8](&v113, __p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
        if (SBYTE7(v118) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
        v53 = *a3;
        v54 = a3[1] - *a3;
        if (v54)
        {
          v55 = v54 >> 4;
          v56 = (uint64_t *)*a2;
          if (v55 <= 1)
            v55 = 1;
          while (1)
          {
            v57 = *v56++;
            if (v57 == (_QWORD)v92)
              break;
            v53 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v53 + 16);
            if (!--v55)
              goto LABEL_76;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, v53);
        }
        else
        {
LABEL_76:
          __p[1] = 0;
        }
        *((_QWORD *)&v113 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v104, v36);
        v58 = *a3;
        v59 = a3[1] - *a3;
        if (v59)
        {
          v60 = v59 >> 4;
          v61 = (void **)*a2;
          if (v60 <= 1)
            v60 = 1;
          while (1)
          {
            v62 = *v61++;
            if (v62 == v98[0])
              break;
            v58 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v58 + 16);
            if (!--v60)
              goto LABEL_83;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109, v58);
        }
        else
        {
LABEL_83:
          *((_QWORD *)&v109 + 1) = 0;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v98);
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
        {
          if (((uint64_t)__p[1] & 4) != 0)
            v63 = (void *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
          else
            v63 = __p[0];
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v113, (_QWORD *)v63 + 3);
          if (v39 >= *(double *)v63)
            v39 = *(double *)v63;
          if (*((double *)v63 + 1) >= v40)
            v40 = *((double *)v63 + 1);
        }
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v101, __p);
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v100, &v113);
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](v99, &v109);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v113);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
      }
      v36 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v36 + 8);
    }
    while (v36 != v38);
  }
  __p[0] = 0;
  *(_QWORD *)&v113 = 0;
  *(_QWORD *)&v92 = 0;
  v98[0] = 0;
  realityio::getAnimInputControlsFromInputs(a2, a3, (double *)__p, &v113, &v92, (double *)v98);
  if (v40 >= v39)
    v64 = (unint64_t)((v40 - v39) * *(double *)__p + 1.0 + 0.5);
  else
    v64 = 0;
  if (v40 >= v39)
    v65 = v39;
  else
    v65 = 0.0;
  if (v40 >= v39)
    v66 = v40;
  else
    v66 = 0.0;
  std::vector<RESRT>::vector(v98, v64);
  v91 = v64;
  if (v64)
  {
    v67 = 0;
    v68 = (v66 - v65) / ((double)v64 + -1.0);
    v69 = v65;
    do
    {
      v97[0] = 0;
      v97[1] = 0;
      v96 = (uint64_t *)v97;
      if (*(_QWORD *)&v106[0])
      {
        v70 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
          v72 = (uint64_t *)((char *)v107 + 8 * v70);
          if ((*v72 & 0xFFFFFFFFFFFFFFF8) != 0)
            v73 = (*v72 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v73 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v71);
          v74 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](__p, "!invert!xformOp:");
          if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            v75 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v75 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v74);
          if (*(char *)(v75 + 23) >= 0)
            v76 = (const char *)v75;
          else
            v76 = *(const char **)v75;
          v77 = *(char *)(v73 + 23);
          if (v77 >= 0)
            v78 = *(unsigned __int8 *)(v73 + 23);
          else
            v78 = *(_QWORD *)(v73 + 8);
          v79 = strlen(v76);
          if (v78 >= v79)
          {
            v81 = v79;
            if (v77 >= 0)
              v82 = (const char *)v73;
            else
              v82 = *(const char **)v73;
            v80 = strncmp(v82, v76, v81) == 0;
          }
          else
          {
            v80 = 0;
          }
          if (((uint64_t)__p[0] & 7) != 0)
          {
            v83 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v84 = __ldxr(v83);
            while (__stlxr(v84 - 2, v83));
          }
          if (!v80)
          {
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v101[0] + 16 * v70));
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v113, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v100[0] + 16 * v70));
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
            {
              if (((uint64_t)__p[1] & 4) != 0)
                v85 = (void *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                                                                 + 168))(__p);
              else
                v85 = __p[0];
              realityio::getSampledValueAtTime((uint64_t)v85, &v109, v69);
              *(_QWORD *)&v92 = v72;
              v86 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v96, v72, (uint64_t)&std::piecewise_construct, (uint64_t **)&v92);
              pxrInternal__aapl__pxrReserved__::VtValue::operator=(v86 + 5, &v109);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v99[0] + 16 * v70));
              *(_QWORD *)&v92 = v72;
              v87 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v96, v72, (uint64_t)&std::piecewise_construct, (uint64_t **)&v92);
              pxrInternal__aapl__pxrReserved__::VtValue::operator=(v87 + 5, &v109);
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v109);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v113);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          }
          ++v70;
        }
        while (*(_QWORD *)&v106[0] > v70);
      }
      v108 = 0;
      if (getLocalTransformation((uint64_t)__p, &v108, v106, (uint64_t)&v96))
      {
        MEMORY[0x2348B199C](&v113, __p);
        if ((v90 & 1) != 0)
        {
          v92 = v113;
          v93 = v114;
          v94 = v115;
          v95 = v116;
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
          v109 = v92;
          v110 = v93;
          v111 = v94;
          v112 = v95;
          pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
          v113 = v109;
          v114 = v110;
          v115 = v111;
          v116 = v112;
        }
        REDecomposeMatrix();
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v96, v97[0]);
      ++v67;
      v69 = v68 + v69;
    }
    while (v67 != v91);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v104);
  RETimelineDefinitionCreateSampledSRTAnimation();
  RETimelineDefinitionSetInterpolationEnabled();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetFrameInterval();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  RETimelineDefinitionSetSRTValues();
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v119 = 0;
  *(_OWORD *)__p = 0u;
  v118 = 0u;
  *(_QWORD *)&v113 = RETimelineDefinitionCreateTimelineAsset();
  if ((_QWORD)v113)
    RERetain();
  pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>((uint64_t)__p, &v113);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v113);
  RERelease();
  RERelease();
  a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a4, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(__p);
  if (v98[0])
  {
    v98[1] = v98[0];
    operator delete(v98[0]);
  }
  __p[0] = v99;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v100;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v101;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v104);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v106);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v120);
}

void sub_22FF90D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a71);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a56);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a57);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v71 - 160));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v9);
  }
  return a1;
}

void sub_22FF91104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

void *realityio::TargetPaths::upAxisPath(realityio::TargetPaths *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/upAxis]");
    MEMORY[0x2348B26F8](&realityio::TargetPaths::upAxisPath(void)::kUpAxisPath, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  return &realityio::TargetPaths::upAxisPath(void)::kUpAxisPath;
}

void sub_22FF911A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *realityio::TargetPaths::metersPerUnitPath(realityio::TargetPaths *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/metersPerUnit]");
    MEMORY[0x2348B26F8](&realityio::TargetPaths::metersPerUnitPath(void)::kMetersPerUnitPath, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  return &realityio::TargetPaths::metersPerUnitPath(void)::kMetersPerUnitPath;
}

void sub_22FF91260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[16 * v10];
    v18 = &v14[16 * v13];
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v16, a2);
    v17 = v16 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*(_QWORD **)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_22FF9137C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 - 16));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  result = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(result - 2, v4);
  }
  a2[1] = result;
  v7 = (_QWORD *)*a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 5));
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x38uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[6] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t RIOPxrSdfReferenceGetTypeID()
{
  if (RIOPxrSdfReferenceGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
  return RIOPxrSdfReferenceGetTypeID::typeID;
}

uint64_t RIOPxrSdfReferenceIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::SdfReference::operator<();
  else
    return 0;
}

uint64_t RIOPxrSdfReferenceIsEqual(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::SdfReference::operator==();
  else
    return 0;
}

uint64_t RIOPxrSdfReferenceCreateFromCStringWithAssetPathAndPrimPath(char *__s, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[16];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  char v11;
  _BYTE v12[24];
  uint64_t v13;

  if (__s && a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, __s);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
    v7 = 0;
    MEMORY[0x2348B1B88](__p, v8, a2 + 16, v6, &v7);
    v3 = RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>((__int128 *)__p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    if (v11 < 0)
      operator delete(__p[0]);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v7, 0);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    v9 = 0;
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
    v5 = 0;
    MEMORY[0x2348B1B88](__p, v8, &v7, v6, &v5);
    v3 = RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>((__int128 *)__p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    if (v11 < 0)
      operator delete(__p[0]);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v5, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  return v3;
}

void sub_22FF91880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::SdfReference::~SdfReference((pxrInternal__aapl__pxrReserved__::SdfReference *)&a19);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfReferenceCreate<pxrInternal__aapl__pxrReserved__::SdfReference>(__int128 *a1)
{
  uint64_t Instance;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (RIOPxrSdfReferenceGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    v4 = *a1;
    *(_QWORD *)(Instance + 32) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(Instance + 16) = v4;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 40), (_DWORD *)a1 + 6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 44), (_DWORD *)a1 + 7);
    *(_OWORD *)(v3 + 48) = a1[2];
    v5 = *((_QWORD *)a1 + 6);
    *((_QWORD *)a1 + 6) = 0;
    *(_QWORD *)(v3 + 64) = v5;
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::SdfReference::~SdfReference(pxrInternal__aapl__pxrReserved__::SdfReference *this)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)this + 6, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

CFStringRef RIOPxrSdfReferenceCopyAssetPathString(uint64_t a1)
{
  const char *v1;

  if (!a1)
    return &stru_24FDFD990;
  v1 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

void RIOPxrSdfReferenceSetAssetPath(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *__p;
  char v4;

  if (a1 && a2)
  {
    v2 = a1 + 16;
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(v2);
    if (v4 < 0)
      operator delete(__p);
  }
}

void sub_22FF91A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(uint64_t a1)
{
  std::string v2;
  void *__p;
  char v4;
  std::string v5;

  MEMORY[0x2348B1B64](&v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v5, v2.__r_.__value_.__l.__data_, v2.__r_.__value_.__l.__size_);
  else
    v5 = v2;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v5;
  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 0;
  v5.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0)
    operator delete(__p);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_22FF91B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfReferenceCopyPrimPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 40));
  return result;
}

uint64_t RIOPxrSdfReferenceSetPrimPath(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(result + 40, (_DWORD *)(a2 + 16));
      return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v3 + 44, (_DWORD *)(a2 + 20));
    }
  }
  return result;
}

void _RIOPxrSdfReferenceCFFinalize(char *a1)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)a1 + 8, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 40));
  if (a1[39] < 0)
    operator delete(*((void **)a1 + 2));
}

BOOL _RIOPxrSdfReferenceCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfReferenceCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfReferenceCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfReference %p>"), a1);
}

CFStringRef _RIOPxrSdfReferenceCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfReference %p>"), a1);
}

realityio::TextComponentBuilder *realityio::TextComponentBuilder::TextComponentBuilder(realityio::TextComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TextComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextComponentBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE6150;
  v21 = v20;
  v18[0] = &off_24FDE6260;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE60D8;
  return this;
}

void sub_22FF91DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextComponentBuilder::run(realityio::TextComponentBuilder *this, std::__shared_weak_count **a2)
{
  uint64_t v3;
  realityio::TextMeshAssetBuilder *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  NSObject *v20;
  std::string *v21;
  __int128 v22;
  uint64_t String;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  realityio *v30;
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::mutex *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const void **EmptyString;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  pxrInternal__aapl__pxrReserved__::UsdStage *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  __int128 *size;
  uint64_t v50;
  NSObject *v51;
  unsigned int *v52;
  unsigned int v53;
  char v55[8];
  __int128 v56;
  std::string v57;
  uint64_t v58;
  char v59[8];
  uint64_t v60;
  realityio::Inputs *v61;
  _BYTE buf[48];
  std::string v63;
  std::string v64;
  std::string v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  __int128 v69;
  std::string v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v61 = (realityio::Inputs *)a2;
  v3 = realityio::TextEntityBuilder::kOutputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v59);
  if (v59[0])
  {
    v58 = v60;
    if (v60)
    {
      v5 = realityio::TextMeshAssetBuilder::kOutputName(v4);
      v66 = 0;
      v67 = 0;
      v6 = a2[3];
      if (v6)
      {
        v67 = std::__shared_weak_count::lock(v6);
        if (v67)
          v66 = a2[2];
      }
      MEMORY[0x2348B2764](&v68, v5);
      v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v66);
      if (v7 == v8)
      {
        std::operator+<char>();
        v21 = std::string::append(&v63, ") at prim path (");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
        v24 = *(char *)(String + 23);
        if (v24 >= 0)
          v25 = (const std::string::value_type *)String;
        else
          v25 = *(const std::string::value_type **)String;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(String + 23);
        else
          v26 = *(_QWORD *)(String + 8);
        v27 = std::string::append(&v64, v25, v26);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v65, ")");
      }
      else
      {
        v9 = 1;
        v10 = v7;
        do
        {
          v10 = (_QWORD *)*v10;
          --v9;
        }
        while (v10 != v8);
        if (!v9)
        {
          v32 = v7[5];
          v34 = *(std::mutex **)(v32 + 16);
          v33 = *(std::__shared_weak_count **)(v32 + 24);
          *(_QWORD *)&v69 = v34;
          *((_QWORD *)&v69 + 1) = v33;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
          }
          if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
          realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>(v34, EmptyString, (std::string *)buf);
          if (v33)
          {
            v38 = (unint64_t *)&v33->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          if (buf[0])
          {
            v40 = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            v55[0] = 1;
            *(_QWORD *)&v56 = v40;
            *(_QWORD *)&v69 = 0;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v69);
          }
          else
          {
            v69 = *(_OWORD *)&buf[8];
            if ((buf[47] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
            else
              v70 = *(std::string *)&buf[24];
            v55[0] = 0;
            v56 = v69;
            v57 = v70;
          }
          v30 = (realityio *)realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)buf);
LABEL_52:
          if ((v68 & 7) != 0)
          {
            v41 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
            do
              v42 = __ldxr(v41);
            while (__stlxr(v42 - 2, v41));
          }
          v43 = v67;
          if (v67)
          {
            v44 = (unint64_t *)&v67->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (!v55[0] || (v66 = (std::__shared_weak_count *)v56) == 0)
          {
            v51 = *(NSObject **)(realityio::logObjects(v30) + 24);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_22FF26000, v51, OS_LOG_TYPE_ERROR, "Stopping operation to set text, mesh, and transform components because text mesh does not exist", buf, 2u);
            }
            goto LABEL_74;
          }
          v46 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
          v47 = a2[6];
          v48 = operator new(0x28uLL);
          *v48 = &off_24FDE62E0;
          v48[1] = buf;
          v48[2] = &v58;
          v48[3] = &v66;
          v48[4] = &v61;
          v70.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
          ((void (*)(std::__shared_weak_count *, __int128 *))v47->__on_zero_shared)(v47, &v69);
          size = (__int128 *)v70.__r_.__value_.__l.__size_;
          if ((__int128 *)v70.__r_.__value_.__l.__size_ == &v69)
          {
            v50 = 4;
            size = &v69;
          }
          else
          {
            if (!v70.__r_.__value_.__l.__size_)
            {
LABEL_69:
              if ((buf[24] & 7) != 0)
              {
                v52 = (unsigned int *)(*(_QWORD *)&buf[24] & 0xFFFFFFFFFFFFFFF8);
                do
                  v53 = __ldxr(v52);
                while (__stlxr(v53 - 2, v52));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[16]);
              if (*(_QWORD *)&buf[8])
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
LABEL_74:
              realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v55);
              return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v59);
            }
            v50 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)size + 8 * v50))();
          goto LABEL_69;
        }
        std::operator+<char>();
        v11 = std::string::append(&v63, ") at prim path (");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4));
        v14 = *(char *)(v13 + 23);
        if (v14 >= 0)
          v15 = (const std::string::value_type *)v13;
        else
          v15 = *(const std::string::value_type **)v13;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v13 + 23);
        else
          v16 = *(_QWORD *)(v13 + 8);
        v17 = std::string::append(&v64, v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v65, ") because more than one connected builder produced the same output type");
      }
      v29 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
      v69 = v29;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v30 = (realityio *)realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v69);
      v56 = *(_OWORD *)buf;
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
      *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&buf[31];
      v31 = buf[39];
      memset(&buf[16], 0, 24);
      v55[0] = 0;
      *((_BYTE *)&v57.__r_.__value_.__s + 23) = v31;
      if (v70.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v69);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      goto LABEL_52;
    }
  }
  v20 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_22FF26000, v20, OS_LOG_TYPE_ERROR, "Stopping operation to set text, mesh, and transform components because text entity no longer exists", buf, 2u);
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v59);
}

void sub_22FF92434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;

  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a23);
  v37 = *(_QWORD *)(v35 - 88);
  if ((v37 & 7) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v35 - 104);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22FF92568()
{
  JUMPOUT(0x22FF92560);
}

void realityio::TextComponentBuilder::~TextComponentBuilder(realityio::TextComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6150;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6150;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::TextMeshAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  realityio::MaterialAssetBuilder *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::TextEntityBuilder::kOutputName((realityio::TextEntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v40) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 35, (int *)&v40, &v42);
  v6 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::TextMeshAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v42);
  v10 = v43;
  if (v43)
  {
    v11 = (unint64_t *)&v43->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::TextMeshAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v38) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 36, (int *)&v38, &v40);
  v15 = v41;
  if (v41)
  {
    v16 = (unint64_t *)&v41->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (realityio::MaterialAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v40);
  v19 = v41;
  if (v41)
  {
    v20 = (unint64_t *)&v41->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = realityio::MaterialAssetBuilder::kMaterialDataName(v18);
  v23 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v36) = 1;
  std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v22, (uint64_t *)v23 + 22, (int *)&v36, &v38);
  v36 = v38;
  v37 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v36);
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v15)
  {
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v34 = (unint64_t *)&v6->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF928F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (a13)
  {
    v24 = (unint64_t *)&a13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (v19)
  {
    v26 = (unint64_t *)&v19->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v18)
  {
    v28 = (unint64_t *)&v18->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  do
    v30 = __ldaxr(v20);
  while (__stlxr(v30 - 1, v20));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_22FF92B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE61C0;
  std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_22FF92B7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE61C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE61C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF92C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE6210;
  return a1;
}

void sub_22FF92D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::~MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor(realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  pxrInternal__aapl__pxrReserved__ *v14;
  uint64_t *v15;
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *IsValid;
  uint64_t IsA;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t *v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v7 = a3 + 48;
  result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3 + 48, a2);
  if (a3 + 56 != result && *(_QWORD *)(*(_QWORD *)(a3 + 24) + 104 * *(_QWORD *)(result + 40) + 24) == *(_QWORD *)a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, a2);
    realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)&v59, a4);
    if ((BYTE8(v61) & 7) != 0)
    {
      v9 = (unsigned int *)(*((_QWORD *)&v61 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    if (v60)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
    result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, a2);
    if (a3 + 56 == result)
      v11 = 0;
    else
      v11 = *(_QWORD *)(a3 + 24) + 104 * *(_QWORD *)(result + 40);
    v12 = *(_QWORD **)(v11 + 56);
    v44 = v11;
    v45 = (_QWORD *)(v11 + 64);
    if (v12 != (_QWORD *)(v11 + 64))
    {
      v13 = &v56;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 28));
        v14 = (pxrInternal__aapl__pxrReserved__ *)realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v68, a4);
        v15 = v13;
        UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v14);
        v18 = *UsdPrimAllPrimsPredicate;
        v17 = UsdPrimAllPrimsPredicate[1];
        v19 = UsdPrimAllPrimsPredicate[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v18 & 0x2000) != 0 || (v17 & 0x2000) == 0))
        {
          v18 |= 0x2000uLL;
          v17 &= ~0x2000uLL;
        }
        v55 = v18;
        v56 = v17;
        *(_QWORD *)&v57 = v19;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v68, &v55, (uint64_t)&v59);
        v55 = v59;
        v13 = v15;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, &v60);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v56 + 1, (_DWORD *)&v60 + 1);
        v57 = v61;
        v58 = v62;
        v51 = v63;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v52, &v64);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v52 + 1, &v65);
        v53 = v66;
        v54 = v67;
        while (v55 != v51
             || v56 != v52
             || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v57, (uint64_t)&v53))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v55, (uint64_t)v47);
          IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v47);
          if ((_DWORD)IsValid)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(IsValid);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((IsA & 1) != 0
              || (pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)IsA),
                  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
                  pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()))
            {
              realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v47, a4);
            }
          }
          if ((v50 & 7) != 0)
          {
            v22 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stlxr(v23 - 2, v22));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
          if (v48)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v55);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if ((v71 & 7) != 0)
        {
          v24 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
        result = v69;
        if (v69)
          result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v69);
        v26 = (_QWORD *)v12[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v12[2];
            v28 = *v27 == (_QWORD)v12;
            v12 = v27;
          }
          while (!v28);
        }
        v12 = v27;
      }
      while (v27 != v45);
    }
    v29 = *(_QWORD **)(v44 + 80);
    if (v29 != (_QWORD *)(v44 + 88))
    {
      v30 = &v56;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v29 + 28));
        v31 = (pxrInternal__aapl__pxrReserved__ *)realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v68, a4);
        v32 = v30;
        v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v31);
        v34 = *v33;
        v35 = v33[1];
        v36 = v33[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v34 & 0x2000) != 0 || (v35 & 0x2000) == 0))
        {
          v34 |= 0x2000uLL;
          v35 &= ~0x2000uLL;
        }
        v55 = v34;
        v56 = v35;
        *(_QWORD *)&v57 = v36;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v68, &v55, (uint64_t)&v59);
        v55 = v59;
        v30 = v32;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v32, &v60);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v56 + 1, (_DWORD *)&v60 + 1);
        v57 = v61;
        v58 = v62;
        v51 = v63;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v52, &v64);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v52 + 1, &v65);
        v53 = v66;
        v54 = v67;
        while (v55 != v51
             || v56 != v52
             || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v57, (uint64_t)&v53))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v55, (uint64_t)v47);
          v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v47);
          if ((_DWORD)v37)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v37);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
              realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper((uint64_t)v47, a4);
          }
          if ((v50 & 7) != 0)
          {
            v38 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v39 = __ldxr(v38);
            while (__stlxr(v39 - 2, v38));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
          if (v48)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v55);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if ((v71 & 7) != 0)
        {
          v40 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
        result = v69;
        if (v69)
          result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v69);
        v42 = (_QWORD *)v29[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (_QWORD *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v29[2];
            v28 = *v43 == (_QWORD)v29;
            v29 = v43;
          }
          while (!v28);
        }
        v29 = v43;
      }
      while (v43 != (_QWORD *)(v44 + 88));
    }
  }
  return result;
}

void sub_22FF93428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor::appendToHashSetHelper(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _BYTE v39[4];
  _BYTE v40[4];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  char v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v44 = 0;
  v42 = MEMORY[0x24BEE9DC8] + 16;
  v37 = 4;
  v38 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v41 = 0;
  if (v43 && (*(_BYTE *)(v43 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v42 + 32))(&v42))
  {
    Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v42, Data, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v37);
    MEMORY[0x2348B20B0](&v47);
  }
  else
  {
    MEMORY[0x2348B274C](&v34, "material:binding");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    v37 = (int)v47;
    v5 = v48;
    v48 = 0;
    v6 = v38;
    v38 = v5;
    if (v6)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v39, (int *)&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v40);
    if ((v41 & 7) != 0)
    {
      v7 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    v41 = v50;
    v50 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v34 & 7) != 0)
    {
      v9 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37) & 1) == 0)
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      LODWORD(v47) = *(_DWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v48 = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 48);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v49 + 1, (_DWORD *)(a1 + 20));
      v14 = *(_QWORD *)(a1 + 24);
      v50 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          v50 &= 0xFFFFFFFFFFFFFFF8;
      }
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v45 = &v30;
      v46 = 0;
      v30 = (char *)operator new(0x20uLL);
      v31 = (uint64_t)v30;
      v32 = v30 + 32;
      v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>((uint64_t)&v32, (uint64_t)&v47, (uint64_t)&v51, (uint64_t)v30);
      if (!atomic_load(MEMORY[0x24BEE8128]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials();
      v45 = &v30;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      if ((v50 & 7) != 0)
      {
        v18 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      if (v48)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
      v20 = v34;
      if ((void **)v34 != v35)
      {
        v37 = *(_DWORD *)v34;
        v21 = *(unint64_t **)(v34 + 8);
        if (v21)
        {
          v22 = v21 + 6;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = v38;
        v38 = (uint64_t)v21;
        if (v24)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v39, (_DWORD *)(v20 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v40, (_DWORD *)(v20 + 20));
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v41, (_QWORD *)(v20 + 24));
      }
      v47 = (void **)&v33;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v47);
      v47 = (void **)&v34;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v47);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37))
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v25 = (unsigned int *)v47;
    v26 = v48;
    while (v25 != (unsigned int *)v26)
    {
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, v25, v25);
      v25 += 2;
    }
    v34 = (unint64_t)&v47;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  }
  if ((v41 & 7) != 0)
  {
    v27 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v39);
  if (v38)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  return MEMORY[0x2348B24C4](&v42);
}

void sub_22FF9396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  MEMORY[0x2348B24C4](va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22FF93B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 32;
      result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6260;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6260;
}

char *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextComponentBuilder::TextComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE62E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE62E0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  realityio *v13;
  realityio *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  realityio::MaterialAssetBuilder *v29;
  void *v30[2];
  char v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[24];
  realityio *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  realityio::textInformationFromPrim(*(realityio **)(a1 + 8), (uint64_t)v30);
  REStatic3DTextComponentGetComponentType();
  v44[0] = &off_24FDE6350;
  v44[1] = v30;
  v45 = v44;
  v26 = REEntityGetOrAddComponentByClass();
  if (!v45)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v45 + 48))(v45, &v26);
  RENetworkMarkComponentDirty();
  v2 = v45;
  if (v45 == v44)
  {
    v3 = 4;
    v2 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  REMeshComponentGetComponentType();
  v4 = *(_QWORD *)(a1 + 24);
  v42[0] = &off_24FDE63D0;
  v42[1] = v4;
  v43 = v42;
  v26 = REEntityGetOrAddComponentByClass();
  if (!v43)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v43 + 48))(v43, &v26);
  RENetworkMarkComponentDirty();
  v5 = v43;
  if (v43 == v42)
  {
    v6 = 4;
    v5 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  RETransformComponentGetComponentType();
  v40[0] = &off_24FDE6450;
  v40[1] = v30;
  v41 = v40;
  v26 = REEntityGetOrAddComponentByClass();
  if (!v41)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v41 + 48))(v41, &v26);
  RENetworkMarkComponentDirty();
  v7 = v41;
  if (v41 == v40)
  {
    v8 = 4;
    v7 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_19;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_19:
  v29 = 0;
  v29 = (realityio::MaterialAssetBuilder *)realityio::Inputs::assetManager(**(realityio::Inputs ***)(a1 + 32));
  v9 = **(_QWORD **)(a1 + 32);
  v10 = realityio::MaterialAssetBuilder::kMaterialDataName(v29);
  realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>(v9, v10, (uint64_t)&v26);
  __p = 0;
  v24 = 0;
  v25 = 0;
  if ((_BYTE)v26)
    std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(&__p, v27, v28, (v28 - (uint64_t)v27) >> 3);
  REMeshComponentGetComponentType();
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v39 = 0;
  v13 = (realityio *)operator new(0x28uLL);
  *(_QWORD *)v13 = &off_24FDE64D0;
  *((_QWORD *)v13 + 1) = v12;
  *((_QWORD *)v13 + 2) = &__p;
  *((_QWORD *)v13 + 3) = v11;
  *((_QWORD *)v13 + 4) = &v29;
  v39 = v13;
  *(_QWORD *)buf = REEntityGetOrAddComponentByClass();
  if (!v39)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(realityio *, uint8_t *))(*(_QWORD *)v39 + 48))(v39, buf);
  RENetworkMarkComponentDirty();
  v14 = v39;
  if (v39 == (realityio *)v38)
  {
    v15 = 4;
    v14 = (realityio *)v38;
  }
  else
  {
    if (!v39)
      goto LABEL_27;
    v15 = 5;
  }
  v14 = (realityio *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_27:
  v16 = *(NSObject **)(realityio::logObjects(v14) + 24);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_INFO, "Created entity text, mesh, and transform components", buf, 2u);
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v26);
  if ((v36 & 7) != 0)
  {
    v17 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((v35 & 7) != 0)
  {
    v19 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  if ((v34 & 7) != 0)
  {
    v21 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30[0]);
}

void sub_22FF9421C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&a12);
  if ((a37 & 7) != 0)
  {
    v38 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  if ((a36 & 7) != 0)
  {
    v40 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  if ((a35 & 7) != 0)
  {
    v42 = (unsigned int *)(a35 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::mutex *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void **EmptyString;
  int v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  char *v29;
  std::string::size_type v30;
  uint64_t v31;
  void *v32;
  std::string *v33;
  __int128 v34;
  uint64_t String;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string::size_type v43;
  unsigned int *v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  void *__p[2];
  std::string v57;
  _BYTE v58[24];
  std::string v59;

  v53 = 0;
  v54 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v54 = std::__shared_weak_count::lock(v6);
    if (v54)
      v53 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v55, a2);
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v53);
  v8 = v7;
  v10 = v9;
  v11 = v58;
  if (v7 != v9)
  {
    memset(&v52, 0, sizeof(v52));
    v49 = a3;
    while (1)
    {
      v12 = *((_QWORD *)v8 + 5);
      v14 = *(std::mutex **)(v12 + 16);
      v13 = *(std::__shared_weak_count **)(v12 + 24);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      v51.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      if ((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const void **)((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v14, EmptyString, (uint64_t)v58);
      v18 = v58[0];
      if (v58[0])
      {
        v19 = *(void **)&v58[8];
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)&v58[8];
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
          v19 = __p[0];
          v11 = (_BYTE *)v57.__r_.__value_.__r.__words[0];
          LOBYTE(a3) = *((_BYTE *)&v57.__r_.__value_.__s + 23);
          if (!v58[0] && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
        }
        else
        {
          v57 = v59;
          v19 = __p[0];
          v11 = (_BYTE *)v59.__r_.__value_.__r.__words[0];
          LOBYTE(a3) = *((_BYTE *)&v59.__r_.__value_.__s + 23);
        }
      }
      if (!v13)
        goto LABEL_23;
      v20 = (unint64_t *)&v13->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (!v18)
        {
LABEL_35:
          if ((a3 & 0x80) != 0)
            operator delete(v11);
          goto LABEL_44;
        }
      }
      else
      {
LABEL_23:
        if (!v18)
          goto LABEL_35;
      }
      size = v52.__r_.__value_.__l.__size_;
      if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
      {
        v23 = (uint64_t)(v52.__r_.__value_.__l.__size_ - v52.__r_.__value_.__r.__words[0]) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v25 = v52.__r_.__value_.__r.__words[2] - v52.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v52.__r_.__value_.__r.__words[2] - v52.__r_.__value_.__r.__words[0]) >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
          v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v52.__r_.__value_.__r.__words[2], v26);
        else
          v7 = 0;
        v27 = (_QWORD *)((char *)v7 + 8 * v23);
        *v27 = v19;
        v28 = (std::string::size_type)(v27 + 1);
        v29 = (char *)v52.__r_.__value_.__l.__size_;
        v30 = v52.__r_.__value_.__r.__words[0];
        if (v52.__r_.__value_.__l.__size_ != v52.__r_.__value_.__r.__words[0])
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v27 = v31;
          }
          while (v29 != (char *)v30);
          v29 = (char *)v52.__r_.__value_.__r.__words[0];
        }
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        v52.__r_.__value_.__l.__size_ = v28;
        v52.__r_.__value_.__r.__words[2] = (std::string::size_type)v7 + 8 * v26;
        if (v29)
          operator delete(v29);
        v52.__r_.__value_.__l.__size_ = v28;
      }
      else
      {
        *(_QWORD *)v52.__r_.__value_.__l.__size_ = v19;
        v52.__r_.__value_.__l.__size_ = size + 8;
      }
LABEL_44:
      v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
      if (v8 == v10)
      {
        memset(v58, 0, sizeof(v58));
        std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(v58, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_, (uint64_t)(v52.__r_.__value_.__l.__size_ - v52.__r_.__value_.__r.__words[0]) >> 3);
        *(_BYTE *)v49 = 1;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)v58;
        *(_QWORD *)(v49 + 24) = *(_QWORD *)&v58[16];
        v32 = (void *)v52.__r_.__value_.__r.__words[0];
        if (v52.__r_.__value_.__r.__words[0])
        {
          v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
        goto LABEL_62;
      }
    }
  }
  std::operator+<char>();
  v33 = std::string::append(&v50, ") at prim path (");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
  v36 = *(char *)(String + 23);
  if (v36 >= 0)
    v37 = (const std::string::value_type *)String;
  else
    v37 = *(const std::string::value_type **)String;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(String + 23);
  else
    v38 = *(_QWORD *)(String + 8);
  v39 = std::string::append(&v51, v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v52, ")");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[0] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  realityio::DetailedError::DetailedError(v58, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v58;
  v43 = v59.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v58[16];
  *(_QWORD *)(a3 + 32) = v43;
  *(_QWORD *)(a3 + 39) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
  LOBYTE(v43) = v59.__r_.__value_.__s.__data_[15];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)&v58[16] = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v43;
  if (v57.__r_.__value_.__s.__data_[7] < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_61:
    operator delete(v32);
  }
LABEL_62:
  if ((v55 & 7) != 0)
  {
    v44 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  v46 = v54;
  if (v54)
  {
    v47 = (unint64_t *)&v54->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_22FF9482C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  unsigned int *v34;
  unsigned int v35;

  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if ((a33 & 7) != 0)
  {
    v34 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE6350;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE6350;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  REStatic3DTextComponentSetText();
  REStatic3DTextComponentSetFont();
  REStatic3DTextComponentSetFontSize();
  REStatic3DTextComponentSetExtrusionDepth();
  REStatic3DTextComponentSetTextFrameSize();
  REStatic3DTextComponentSetTextAlignment();
  REStatic3DTextComponentSetLineBreakMode();
  return REStatic3DTextComponentSetVerticalTextAlignment();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE63D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE63D0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return REMeshComponentSetMesh();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE6450;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE6450;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v4;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v5;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v10;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v17;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v18;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v19;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v20;
  NSObject *v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  __int128 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v27, 1.0);
  REDecomposeMatrix();
  v2 = *(_QWORD **)(a1 + 8);
  Data = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)Data + 10) & 0xFFFFFFFFFFFFFFF8))
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v4)
      v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v4 + 15) & 0xFFFFFFFFFFFFFFF8))
    {
      v5 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
      if (!v5)
        v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
      if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v5 + 2) & 0xFFFFFFFFFFFFFFF8))
      {
        v6 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
        if (!v6)
          v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
        if ((v2[11] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFFFF8))
        {
          v7 = *(NSObject **)(realityio::logObjects(v6) + 24);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            v8 = v2[11] & 0xFFFFFFFFFFFFFFF8;
            if (v8)
            {
              v9 = (const char *)(v8 + 16);
              if (*(char *)(v8 + 39) < 0)
                v9 = *(const char **)v9;
            }
            else
            {
              v9 = "";
            }
            *(_DWORD *)buf = 136315138;
            v29 = v9;
            _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_DEFAULT, "Unknown text horizontal alignment value \"%s\" defaulting to \"left\"", buf, 0xCu);
          }
        }
      }
    }
  }
  v10 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  if ((v2[10] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v16 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      v17 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
      if (!v17)
        v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
      if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v17 + 12) & 0xFFFFFFFFFFFFFFF8))
      {
        v18 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
        if (!v18)
          v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
        if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v18 + 1) & 0xFFFFFFFFFFFFFFF8))
        {
          v19 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
          if (!v19)
            v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
          if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v19 + 11) & 0xFFFFFFFFFFFFFFF8))
          {
            v20 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
            if (!v20)
              v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
            if ((v2[12] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8))
            {
              v21 = *(NSObject **)(realityio::logObjects(v20) + 24);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                v22 = v2[12] & 0xFFFFFFFFFFFFFFF8;
                if (v22)
                {
                  v23 = (const char *)(v22 + 16);
                  if (*(char *)(v22 + 39) < 0)
                    v23 = *(const char **)v23;
                }
                else
                {
                  v23 = "";
                }
                v24 = v2[10] & 0xFFFFFFFFFFFFFFF8;
                if (v24)
                {
                  v25 = (const char *)(v24 + 16);
                  if (*(char *)(v24 + 39) < 0)
                    v25 = *(const char **)v25;
                }
                else
                {
                  v25 = "";
                }
                *(_DWORD *)buf = 136315394;
                v29 = v23;
                v30 = 2080;
                v31 = v25;
                _os_log_impl(&dword_22FF26000, v21, OS_LOG_TYPE_DEFAULT, "Unknown text vertical alignment value \"%s\" for wrap mode \"%s\"; defaulting to \"bottom\"",
                  buf,
                  0x16u);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-0.5 }
  }
  return RETransformComponentSetLocalSRT();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E1_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E1_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E1_;
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::~UsdMediaTokensType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(a1);
}

realityio::tokens::TextBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::TextBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::TextBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::TextBuilderTokens_StaticTokenType::TextBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF950D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4095517265);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22FF95154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE64D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE64D0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *_ZNSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  _QWORD *v2;
  uint64_t AssetHandle;
  uint64_t v5;
  uint64_t v6;

  REMeshComponentSetMesh();
  v2 = *(_QWORD **)(a1 + 16);
  if (*v2 != v2[1] && *(_QWORD *)*v2)
  {
    REMeshComponentRemoveAllMaterials();
    return (_QWORD *)REMeshComponentAddMaterial();
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 40) + 16) + 248);
  if (v6)
  {
    RERetain();
  }
  else
  {
    AssetHandle = REAssetManagerCreateAssetHandle();
    v5 = AssetHandle;
    if (AssetHandle)
      RERetain();
    if (v6 != AssetHandle)
    {
      v5 = v6;
      v6 = AssetHandle;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
    if (!v6)
      return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
    RERelease();
    if (!v6)
      return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
  }
  REMeshComponentAddMaterial();
  REMeshComponentRemoveAllMaterials();
  REMeshComponentAddMaterial();
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
}

void sub_22FF95310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E2_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20TextComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E2_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20TextComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E2_;
}

void realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::~ConeMeshBuilderTokens_StaticTokenType(realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  void **v16;

  v16 = (void **)((char *)this + 40);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v16);
  v2 = *((_QWORD *)this + 4);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 3);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 2);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v14 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
}

realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::ConeMeshBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "Cone", 0) + 8);
  MEMORY[0x2348B2758](v2, "axis", 0);
  MEMORY[0x2348B2758](this + 2, "height", 0);
  MEMORY[0x2348B2758](this + 3, "radius", 0);
  MEMORY[0x2348B2758](this + 4, "material:binding", 0);
  v3 = *this;
  v29 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v29 = v4;
  }
  v6 = *v2;
  v30 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v30 = v7;
  }
  v9 = this[2];
  v31 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v31 = v10;
  }
  v12 = this[3];
  v32 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v32 = v13;
  }
  v15 = this[4];
  v33 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v33 = v16;
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  v18 = (unsigned int *)operator new(0x28uLL);
  v19 = 0;
  this[5] = v18;
  this[6] = v18;
  this[7] = v18 + 10;
  do
  {
    v20 = (&v29)[v19];
    *(_QWORD *)v18 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        *(_QWORD *)v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 5);
  v23 = (unsigned int **)&v34;
  this[6] = v18;
  do
  {
    v25 = (uint64_t)*--v23;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
  }
  while (v23 != &v29);
  return (realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *)this;
}

void sub_22FF956A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v22 = &a16;
  while (1)
  {
    v24 = *--v22;
    v23 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (v22 == (uint64_t *)&a11)
    {
      if ((*v20 & 7) != 0)
      {
        v27 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((*v19 & 7) != 0)
      {
        v29 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((*v18 & 7) != 0)
      {
        v31 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v17 & 7) != 0)
      {
        v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v16 & 7) != 0)
      {
        v35 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getConeMeshBuilderDirtyStageDescriptor(uint64_t *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  unsigned int **v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  unsigned int **v10;
  uint64_t v11;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  unsigned int **v13;
  uint64_t v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  unsigned int **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36[3];
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42[3];
  void **v43;
  char v44;
  void **v45[11];

  v45[10] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = operator new();
  memset(v42, 0, sizeof(v42));
  v4 = (std::__shared_weak_count_vtbl *)operator new();
  Data = (uint64_t *)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
  if (!Data)
    Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
  memset(v36, 0, sizeof(v36));
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v45[0] = (void **)v6;
  v45[1] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 2));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v45[2] = (void **)v9;
  v45[3] = (void **)v11;
  v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v13 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 3));
  v14 = operator new();
  *(_QWORD *)v14 = &off_24FDE24C0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  v45[4] = (void **)v12;
  v45[5] = (void **)v14;
  v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v16 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 4));
  v17 = operator new();
  *(_QWORD *)v17 = &off_24FDE24C0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v15;
  v45[6] = (void **)v15;
  v45[7] = (void **)v17;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v43 = (void **)&v33;
  v44 = 0;
  v18 = operator new(0x40uLL);
  v19 = 0;
  v33 = v18;
  v34 = v18;
  v35 = v18 + 8;
  do
  {
    v20 = *(_OWORD *)&v45[2 * v19];
    *(_OWORD *)v18 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 4);
  v34 = v18;
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v4, Data, v36, &v33);
  v37 = v4;
  v23 = (std::__shared_weak_count *)operator new();
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2538;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = v4;
  v45[8] = (void **)&v4->~__shared_weak_count;
  v45[9] = (void **)&v23->__vftable;
  v37 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v43 = (void **)&v39;
  v44 = 0;
  v25 = operator new(0x10uLL);
  v39 = v25;
  v41 = v25 + 2;
  *v25 = v4;
  v25[1] = v23;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v40 = v25 + 2;
  realityio::DirtyStageDescriptor::DirtyStageDescriptor(v3, v42, &v39);
  v27 = (_QWORD *)operator new();
  *v27 = &off_24FDE25B0;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v3;
  *a1 = v3;
  a1[1] = (uint64_t)v27;
  v43 = (void **)&v39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v43 = (void **)&v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  for (i = 6; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45[i]);
  v45[0] = (void **)v36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
  v45[0] = (void **)v42;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
}

void sub_22FF95D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x2348B4E1C](v30, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v31 - 168) = &a29;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 168));
  MEMORY[0x2348B4E1C](v29, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::~ConeMeshBuilderTokens_StaticTokenType((realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::ConeMeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF96090(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

void realityio::FoundationErrorCategoryImpl::~FoundationErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2348B4E1CLL);
}

const char *realityio::FoundationErrorCategoryImpl::name(realityio::FoundationErrorCategoryImpl *this)
{
  return "CoreRealityIO Foundation Error";
}

_QWORD *realityio::FoundationErrorCategoryImpl::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  switch(a1)
  {
    case 200:
      v3 = "Unable to get value of USD property";
      break;
    case 201:
      v3 = "Unable to get the entry for the builder";
      break;
    case 202:
      v3 = "Unable to get the inputs descriptor";
      break;
    case 203:
      v3 = "Unable to get the inputs descriptor for name";
      break;
    case 204:
      v3 = "Unable to get the inputs value";
      break;
    case 205:
      v3 = "Unable to get the outputs descriptor";
      break;
    case 206:
      v3 = "Unable to get the ouput descriptor";
      break;
    case 207:
      v3 = "Unable to get the output value";
      break;
    case 208:
      v3 = "Unable to find mapper for entry";
      break;
    case 209:
      v3 = "Texture import error";
      break;
    default:
      if (a1 == 100)
        v3 = "Unexpected error";
      else
        v3 = "Unknown CoreRealityIO Foundation error";
      break;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void markPrimAsEntityProducing(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1, _BOOL4 a2, int a3)
{
  BOOL v4;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39[8];
  void *v40;
  uint64_t v41;

  v4 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  v40 = &unk_24FDE59C3;
  v39[0] = a2;
  Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (a2)
  {
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(a1, (realityio::tokens::EntityBuilderTokens_StaticTokenType *)((char *)Data + 24));
  }
  else
  {
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, (realityio::tokens::EntityBuilderTokens_StaticTokenType *)((char *)Data + 24));
  }
  MEMORY[0x2348B274C](&v29, "customData");
  v7 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
  v8 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, (realityio::tokens::EntityBuilderTokens_StaticTokenType *)((char *)v7 + 48), (const pxrInternal__aapl__pxrReserved__::VtValue *)v39);
  if ((v29 & 7) != 0)
  {
    v9 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if (a3)
  {
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v8);
    v13 = *UsdPrimDefaultPredicate;
    v12 = UsdPrimDefaultPredicate[1];
    v14 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v13 & 0x2000) != 0 || (v12 & 0x2000) == 0))
    {
      v13 |= 0x2000uLL;
      v12 &= ~0x2000uLL;
    }
    v25 = v13;
    v26 = v12;
    *(_QWORD *)&v27 = v14;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a1, &v25, (uint64_t)&v29);
    v25 = v29;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v30);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v26 + 1, &v31);
    v27 = v32;
    v28 = v33;
    v21 = v34;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, &v35);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v22 + 1, &v36);
    v23 = v37;
    v24 = v38;
    while (v25 != v21
         || v26 != v22
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v27, (uint64_t)&v23))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v25, (uint64_t)v17);
      markPrimAsEntityProducing((const pxrInternal__aapl__pxrReserved__::UsdPrim *)v17, v4, 1);
      if ((v20 & 7) != 0)
      {
        v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
      if (v18)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v25);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v39);
}

void sub_22FF964B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageGetEntityTaggingEditMode(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v3);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v14);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v4);
  v5 = v15;
  if (v15)
  {
    v6 = (unsigned int *)(v15 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
  if ((*((_QWORD *)Data + 5) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
  ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v10 = (uint64_t)ValueAtPath;
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      v12 = *(_QWORD *)(v10 + 8);
      if ((v12 & 4) != 0)
        v10 = (*(uint64_t (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      v10 = *(_BYTE *)v10 != 0;
    }
    else
    {
      v10 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v16, 0);
  return v10;
}

void sub_22FF9666C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetEntityTaggingEditMode(uint64_t *a1, char a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  char *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  pxrInternal__aapl__pxrReserved__::UsdStage *v26;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = (unsigned int *)EditTarget[1];
    v35 = *EditTarget;
    v36 = v9;
    if (v9)
    {
      v10 = v9 + 2;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v35);
  v14 = v13;
  v15 = (char *)v36;
  if (v36)
  {
    v16 = v36 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(char *, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  std::recursive_mutex::lock(v14);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v19);
  v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v35);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v20);
  v21 = (char *)v36;
  if (v36)
  {
    v22 = v36 + 2;
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
  }
  v36 = (unsigned int *)&unk_24FDE59C3;
  LOBYTE(v35) = a2;
  Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
  if ((*((_QWORD *)Data + 5) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  v26 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v26);
  v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v32);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v27, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v34);
  v28 = v33;
  if (v33)
  {
    v29 = (unsigned int *)(v33 + 8);
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v34, 0);
  std::recursive_mutex::unlock(v14);
}

void sub_22FF968B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdPrimIsEntityConvertible(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  realityio *v2;

  if (a1)
    v2 = (realityio *)(a1 + 24);
  else
    v2 = 0;
  return realityio::isEntityConvertible(v2, a2);
}

unint64_t RIOPxrUsdPrimEvaluateEntityInEditMode(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  realityio *v2;

  if (a1)
    v2 = (realityio *)(a1 + 24);
  else
    v2 = 0;
  return realityio::calculateIsEntityProviding(v2, a2);
}

unint64_t RIOPxrUsdPrimEvaluateEntityOnExport(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  realityio *v2;

  if (a1)
    v2 = (realityio *)(a1 + 24);
  else
    v2 = 0;
  return realityio::calculateIsEntityProvidingAtExportTime(v2, a2);
}

uint64_t RIOPxrUsdPrimGetTaggedAsEntity(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  realityio *v2;

  if (a1)
    v2 = (realityio *)(a1 + 24);
  else
    v2 = 0;
  return realityio::getPrimEntityProvidingSetting(v2, a2);
}

void RIOPxrUsdPrimSetTaggedAsEntity(realityio::UsdLayerMutexTracker *a1, _BOOL4 a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  void *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __n128 v16;
  std::recursive_mutex *v17;
  std::recursive_mutex *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (realityio::UsdLayerMutexTracker *)((char *)a1 + 24);
  if (a1)
    v5 = (realityio::UsdLayerMutexTracker *)((char *)a1 + 24);
  else
    v5 = 0;
  v6 = realityio::UsdLayerMutexTracker::instance(a1);
  if (a1 && (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v4) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v4);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v25);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = EditTarget[1];
    v23 = *EditTarget;
    v24 = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v26;
    if (v26)
    {
      v13 = (unsigned int *)(v26 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v16.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v23);
  v18 = v17;
  v19 = v24;
  if (v24)
  {
    v20 = (unsigned int *)(v24 + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v19 + 8))(v19, v16);
  }
  std::recursive_mutex::lock(v18);
  markPrimAsEntityProducing(v5, a2, 0);
  std::recursive_mutex::unlock(v18);
}

void sub_22FF96AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a12)
  {
    v13 = a12 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

char *RIOPxrUsdUtilsEntityProducingPrimsCopyPaths(char *a1)
{
  char *Mutable;
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  BOOL v3;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v4;
  int IsEntityProviding;
  unsigned int *v6;
  unsigned int v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  char *v13;
  void **p_p;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  void *__p;
  char *v23;
  uint64_t v24;
  unsigned int *v25;

  Mutable = a1;
  if (a1)
  {
    v23 = 0;
    v24 = 0;
    __p = &v23;
    pxrInternal__aapl__pxrReserved__::usd_initialize();
    std::__tree<std::string>::destroy((uint64_t)&__p, v23);
    std::string::basic_string[abi:ne180100]<0>(&__p, Mutable);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
    if (v25)
    {
      Mutable = (char *)CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v25);
      pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v2);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&__p, (uint64_t)v17);
      while (1)
      {
        v13 = v23;
        p_p = &__p;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        LODWORD(v16) = 0;
        WORD2(v16) = 0;
        if ((void **)v17[1] == p_p && (char *)v17[0] == v13)
        {
          v3 = 1;
          if (v18 == v15 && !v19 && !v20)
            v3 = v21 != 0;
        }
        else
        {
          v3 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
        if (!v3)
          break;
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v17, (uint64_t)&v13);
        IsEntityProviding = realityio::calculateIsEntityProviding((realityio *)&v13, v4);
        if ((v16 & 7) != 0)
        {
          v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
        if (p_p)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)p_p);
        if (IsEntityProviding)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v17, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v13);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13, &v12);
          v8 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
          if ((v16 & 7) != 0)
          {
            v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
            do
              v10 = __ldxr(v9);
            while (__stlxr(v10 - 2, v9));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
          if (p_p)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)p_p);
          CFArrayAppendValue((CFMutableArrayRef)Mutable, v8);
          CFRelease(v8);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v17);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    }
    else
    {
      Mutable = 0;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v25);
  }
  return Mutable;
}

void sub_22FF96E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(v27 - 72));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(_DWORD *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrSdfPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), a1 + 1);
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::~_PtrProxy(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
}

void realityio::TexcoordID::getNormalizedName(realityio::TexcoordID *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

void realityio::`anonymous namespace'::ProcessMtlxActionInputs(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  const char *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  NSError *v20;

  if (a1 != a2)
  {
    v5 = a1;
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(v5))
        goto LABEL_28;
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(v5) & 1) == 0)
        break;
      v6 = *((_QWORD *)v5 + 1);
      if ((v6 & 4) != 0)
      {
        v17 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        goto LABEL_32;
      }
      v7 = *(_QWORD *)v5;
LABEL_7:
      realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)&v18, v7);
      if (v20)
      {
        v8 = (void *)MEMORY[0x24BDD17C8];
        v9 = v19;
        if ((v19 & 7) != 0)
        {
          v10 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 2, v10));
          if ((v11 & 1) == 0)
            v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        v12 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v13 = (const char *)(v12 + 16);
          if (*(char *)(v12 + 39) < 0)
            v13 = *(const char **)v13;
        }
        else
        {
          v13 = "";
        }
        objc_msgSend(v8, "stringWithUTF8String:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if ((v9 & 7) != 0)
        {
          do
            v15 = __ldxr((unsigned int *)v12);
          while (__stlxr(v15 - 2, (unsigned int *)v12));
        }
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to import from %@"), v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (*(_QWORD *)(a3 + 32))
          realityio::mtlx::MtlxActionPayload::addChildError((id *)a3, v20);
        else
          realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, v16, 4u, v20);

      }
      if (!*(_QWORD *)(a3 + 32))
      {
        if (!realityio::mtlx::MtlxActionPayload::collectInputsAndOutputs((realityio::mtlx::MtlxActionPayload *)a3, &v18)|| !realityio::mtlx::MtlxActionPayload::collectNodes((realityio::mtlx::MtlxActionPayload *)a3, (id *)&v18))
        {
          realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)&v18);
          return;
        }
        realityio::mtlx::MtlxActionPayload::collectTextureInfo(a3, (uint64_t)&v18);
      }
      realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)&v18);
LABEL_28:
      v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v5 + 16);
      if (v5 == a2)
        return;
    }
    v17 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
LABEL_32:
    v7 = v17;
    goto LABEL_7;
  }
}

void sub_22FF971F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)va);
  _Unwind_Resume(a1);
}

void realityio::MaterialActionResult::~MaterialActionResult(id *this)
{
  void **v2;

  v2 = this + 3;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](&v2);

}

void realityio::generateMtlxInputsDescriptorPaths(realityio *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (***v14)(realityio::mtlx::NeoDataSource *__hidden);
  int v15;
  uint64_t (**v16)(realityio::mtlx::NeoDataSource *__hidden);
  uint64_t v17;
  _QWORD *v18[3];
  uint64_t (**v19)();
  __int128 v20;
  uint64_t (***v21)();
  uint64_t (**v22)();
  __int128 v23;
  uint64_t (***v24)();
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t (**v27)();
  __int128 v28;
  void ***v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  realityio::mtlx::USDDataSource::USDDataSource((realityio::mtlx::USDDataSource *)&v16, this);
  v14 = &v16;
  v15 = 0;
  v19 = &off_24FDE6800;
  *(_QWORD *)&v20 = &v16;
  *((_QWORD *)&v20 + 1) = a2;
  v21 = &v19;
  v29 = (void ***)&v27;
  v26 = 0;
  v27 = &off_24FDE6800;
  v28 = v20;
  v24 = &v22;
  v22 = &off_24FDE6800;
  v23 = v20;
  v4 = operator new(0x28uLL);
  *v4 = &off_24FDE65D0;
  v4[1] = &off_24FDE6800;
  v4[4] = v4 + 1;
  *((_OWORD *)v4 + 1) = v20;
  v26 = v4;
  realityio::foreachConnected((unsigned int *)&v14, (uint64_t)v25);
  v6 = v26;
  if (v26 == v25)
  {
    v7 = 4;
    v6 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 8 * v7))(v6, v5);
LABEL_6:
  v8 = v24;
  if (v24 == &v22)
  {
    v9 = 4;
    v8 = &v22;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v9 = 5;
  }
  ((void (*)(uint64_t (***)(), uint64_t))(*v8)[v9])(v8, v5);
LABEL_11:
  v10 = (uint64_t (***)())v29;
  if (v29 == (void ***)&v27)
  {
    v11 = 4;
    v10 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_16;
    v11 = 5;
  }
  ((void (*)(uint64_t (***)(), uint64_t))(*v10)[v11])(v10, v5);
LABEL_16:
  v12 = v21;
  if (v21 == &v19)
  {
    v13 = 4;
    v12 = &v19;
    goto LABEL_20;
  }
  if (v21)
  {
    v13 = 5;
LABEL_20:
    ((void (*)(uint64_t (***)(), uint64_t))(*v12)[v13])(v12, v5);
  }
  v16 = &off_24FDE1AF0;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)v18, v18[1]);
  v27 = (uint64_t (**)())&v17;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_22FF97460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v29 = *(_QWORD **)(v27 - 96);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 120);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  v31 = a25;
  if (a25 == &a22)
  {
    v32 = 4;
    v31 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  v33 = *(_QWORD **)(v27 - 64);
  if (v33 == (_QWORD *)(v27 - 88))
  {
    v34 = 4;
    v33 = (_QWORD *)(v27 - 88);
  }
  else
  {
    if (!v33)
      goto LABEL_16;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_16:
  v35 = a21;
  if (a21 == &a18)
  {
    v36 = 4;
    v35 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_21;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_21:
  realityio::mtlx::USDDataSource::~USDDataSource((realityio::mtlx::USDDataSource *)&a11);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v25);
  _Unwind_Resume(a1);
}

void realityio::mtlx::USDDataSource::~USDDataSource(realityio::mtlx::USDDataSource *this)
{
  void **v2;

  *(_QWORD *)this = &off_24FDE1AF0;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = (void **)((char *)this + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t realityio::_hasCyclesHelper(uint64_t **a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  int v33;
  int v34;
  int v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v36;
  pxrInternal__aapl__pxrReserved__::SdfPath *v37;
  uint64_t v38;
  void **v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int *v45;
  pxrInternal__aapl__pxrReserved__::SdfPath **v46;

  v44 = *(_OWORD *)(*(_QWORD *)(a2[1] + (((unint64_t)(a2[5] + a2[4] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (*((_BYTE *)a2 + 40) + *((_BYTE *)a2 + 32) - 1));
  realityio::mtlx::NeoShadeConnectable::GetInputs((realityio::mtlx::NeoShadeConnectable *)&v44, (uint64_t)&v42);
  v4 = v42;
  if (v42 == v43)
  {
    LOBYTE(v5) = 0;
LABEL_27:
    (*(void (**)(void ***__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v44 + 16))(&v39, v44, DWORD2(v44));
    v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39;
    *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (_DWORD **)&v36)+ 9) = 2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    v25 = a2[1];
    v24 = a2[2];
    v26 = v24 - v25;
    v27 = v24 == v25;
    v29 = a2[4];
    v28 = a2[5];
    a2[5] = v28 - 1;
    v30 = 32 * v26 - 1;
    if (v27)
      v30 = 0;
    if ((unint64_t)(v30 - (v28 + v29) - 511) <= 0xFFFFFFFFFFFFFDFFLL)
    {
      operator delete(*(void **)(v24 - 8));
      a2[2] -= 8;
    }
  }
  else
  {
    v5 = 0;
    while (1)
    {
      v6 = *(void ***)v4;
      v40 = *(_DWORD *)(v4 + 8);
      v39 = v6;
      v7 = *(_QWORD *)(v4 + 16);
      v41 = v7;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          v41 &= 0xFFFFFFFFFFFFFFF8;
      }
      v36 = 0;
      v37 = 0;
      v38 = 0;
      if (!(*((unsigned int (**)(void **, _QWORD, uint64_t *, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath **))*v39
             + 10))(v39, v40, &v41, 1, &v36)|| v36 == v37)
      {
        goto LABEL_19;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v36);
      v45 = &v34;
      v10 = *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v45)+ 9);
      if (v10 != 1)
      {
        v45 = &v34;
        if (!*((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v45)+ 9))
        {
          v11 = v5;
          v12 = v44;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, &v34);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, &v35);
          v13 = realityio::mtlx::NeoDataSource::primFromPath(v12, &v32);
          v15 = v14;
          v16 = a2[2];
          v17 = a2[1];
          v18 = 32 * (v16 - v17) - 1;
          if (v16 == v17)
            v18 = 0;
          v19 = a2[5] + a2[4];
          if (v18 == v19)
          {
            std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(a2);
            v17 = a2[1];
            v19 = a2[5] + a2[4];
          }
          v20 = *(_QWORD *)(v17 + ((v19 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v19;
          *(_QWORD *)v20 = v13;
          *(_DWORD *)(v20 + 8) = v15;
          ++a2[5];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
          v45 = &v34;
          *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, &v45)+ 9) = 1;
          v5 = v11 | realityio::_hasCyclesHelper(a1, a2);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
      if (v10 == 1)
        v21 = 0;
      else
LABEL_19:
        v21 = 1;
      v46 = &v36;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if ((v41 & 7) != 0)
      {
        v22 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((v21 & 1) == 0)
        break;
      v4 += 24;
      if (v4 == v43)
        goto LABEL_27;
    }
    LOBYTE(v5) = 1;
  }
  v39 = (void **)&v42;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v39);
  return v5 & 1;
}

void sub_22FF9790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, char a18)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  a15 = (void **)&a18;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void realityio::buildMaterialXAsset(realityio *a1@<X0>, uint64_t (***a2)(_QWORD)@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *i;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  std::string *data;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::string::size_type v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  unint64_t v43;
  __int128 *v44;
  __int128 *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  realityio *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  realityio *v68;
  NSObject *v69;
  uint64_t v70;
  realityio::mtlx::USDDataSource *v71;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v72;
  __int16 v73;
  unsigned int *v74;
  unsigned int v75;
  char v76;
  NSObject *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  int v81;
  NSObject *v82;
  uint64_t v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  pxrInternal__aapl__pxrReserved__::VtValue *v88;
  NSObject *v89;
  uint64_t Text;
  std::string::size_type size;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t EmptyString;
  __int128 v110;
  unsigned int v111;
  int v112;
  NSObject *v113;
  _BYTE *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  const std::string *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  realityio *v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  std::string *v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint8_t *v134;
  uint64_t v135;
  std::string *v136;
  std::string *v137;
  uint64_t *v138;
  std::string *v139;
  std::string::size_type v140;
  char v141;
  uint8_t *v142;
  std::string *v143;
  uint64_t v144;
  NSObject *v145;
  _BYTE *v146;
  NSObject *v147;
  _BYTE *v148;
  const char *v149;
  char v150;
  void *v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  unint64_t v155;
  const char *v156;
  void *v157;
  unsigned int v158;
  void *v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  void *v163;
  void *v164;
  id v165;
  NSObject *v166;
  unint64_t v167;
  unsigned __int8 v168;
  __int128 *v169;
  __int128 *v170;
  __int128 *v171;
  __int128 *v172;
  unint64_t v173;
  uint64_t *v174;
  _QWORD *v175;
  char *v176;
  _QWORD *v177;
  _OWORD *v178;
  uint64_t **v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t **v182;
  uint64_t *v183;
  uint64_t **v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t **v187;
  uint64_t **v188;
  uint64_t *v189;
  __int128 v190;
  __int128 v191;
  uint64_t **v192;
  uint64_t *v193;
  uint64_t *v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  realityio *v201;
  NSObject *v202;
  void *v203;
  void *v204;
  unsigned int *v205;
  unsigned int v206;
  void *v207;
  void *v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t j;
  void *v213;
  void *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  id v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  id v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *NameToken;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  unint64_t v233;
  unint64_t v234;
  uint8x8_t v235;
  id **v236;
  id *k;
  unint64_t v238;
  _QWORD *v239;
  float v240;
  _BOOL8 v241;
  unint64_t v242;
  unint64_t v243;
  int8x8_t prime;
  void *v245;
  void *v246;
  uint64_t v247;
  _QWORD **v248;
  unint64_t v249;
  uint8x8_t v250;
  unint64_t v251;
  uint8x8_t v252;
  uint64_t v253;
  _QWORD *m;
  unint64_t v255;
  id **v256;
  unint64_t v257;
  std::string::size_type v258;
  std::string::size_type v259;
  unsigned int *v260;
  unsigned int v261;
  void *v262;
  uint64_t v263;
  std::string::size_type v264;
  std::string::size_type v265;
  unint64_t v266;
  unsigned int *v267;
  unint64_t v268;
  uint8x8_t v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  realityio *v276;
  NSObject *v277;
  void *v278;
  void *v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t String;
  uint64_t v284;
  uint8_t *v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v291;
  realityio *v292;
  void *v293;
  char *v295;
  void *v296;
  void *v297;
  char *v298;
  uint64_t v299;
  id v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  int v310;
  void *lpsrc;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  int v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  std::vector<int>::size_type __n;
  uint64_t v323;
  uint8_t buf[16];
  __int128 v325;
  __int128 v326;
  uint64_t v327[3];
  uint64_t v328[3];
  _QWORD v329[3];
  _BYTE v330[24];
  uint64_t v331[6];
  uint64_t v332[6];
  uint64_t v333[6];
  uint64_t v334[6];
  uint64_t v335[6];
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  __int16 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  id v343;
  uint64_t v344;
  void *v345;
  unsigned int v346;
  uint64_t **v347;
  uint64_t *v348;
  uint64_t v349;
  std::string v350;
  uint64_t **v351;
  _BYTE v352[24];
  _BYTE *v353;
  _BYTE v354[128];
  __int128 v355;
  _OWORD v356[2];
  uint64_t CullMode;
  __int16 v358;
  id v359[2];
  std::string __str;
  uint64_t v361;
  _BYTE v362[40];
  char v363;
  std::string __x[10];
  uint64_t v365;
  __int16 v366;
  uint64_t v367;

  v367 = *MEMORY[0x24BDAC8D0];
  v3 = *(NSObject **)(realityio::logObjects(a1) + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v3, OS_LOG_TYPE_INFO, "#####\n##### buildMaterialXAsset called", buf, 2u);
  }
  v344 = 0;
  v344 = (**(uint64_t (***)(realityio *))a1)(a1);
  if (!v344)
  {
    v286 = realityio::internal::assertHandler(1u, "engine", "buildMaterialXAsset", 1149, 0, v4, v5, v6, v287, v288);
    if (v286 == 1)
    {
      raise(5);
    }
    else if (v286 == 2)
    {
      abort();
    }
  }
  v343 = 0;
  v341 = 0;
  v340 = 0;
  v342 = 0;
  v338 = 2;
  v339 = 256;
  v336 = (**a2)(a2);
  v337 = v7;
  realityio::mtlx::NeoShadeNodeGraph::GetOutputs((realityio::mtlx::NeoShadeNodeGraph *)&v336, (uint64_t)&v316);
  v9 = (unsigned int *)*((_QWORD *)&v316 + 1);
  for (i = (unsigned int *)v316; i != v9; i += 6)
  {
    v355 = 0uLL;
    *(_QWORD *)&v356[0] = 0;
    v10 = (uint64_t *)(i + 4);
    if ((*(unsigned int (**)(_QWORD, _QWORD, unsigned int *, _QWORD, __int128 *))(**(_QWORD **)i + 80))(*(_QWORD *)i, i[2], i + 4, 0, &v355)&& *((_QWORD *)&v355 + 1) != (_QWORD)v355)
    {
      v11 = *v10;
      if ((*v10 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::mtlx::NeoShadeOutput::GetValueProducingAttributes((realityio::mtlx::NeoShadeOutput *)i, (uint64_t)v362);
      if (*(_QWORD *)&v362[8] != *(_QWORD *)v362)
      {
        v14 = v336;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)v362);
        v15 = realityio::mtlx::NeoDataSource::primFromPath(v14, &v350);
        v17 = v16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v350);
        *(_OWORD *)&__x[0].__r_.__value_.__r.__words[1] = 0uLL;
        __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__x[0].__r_.__value_.__l.__size_;
        v325 = 0u;
        v326 = 0u;
        *(_OWORD *)buf = 0u;
        std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(buf);
        v18 = *(_QWORD *)(*(_QWORD *)&buf[8] + ((((_QWORD)v326 + *((_QWORD *)&v326 + 1)) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (v326 + BYTE8(v326));
        *(_QWORD *)v18 = v15;
        *(_DWORD *)(v18 + 8) = v17;
        ++*((_QWORD *)&v326 + 1);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(&v313, v15, v17);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
        *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)__x, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v313, &__str)+ 9) = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v313);
        LOBYTE(v15) = realityio::_hasCyclesHelper((uint64_t **)__x, buf);
        std::deque<realityio::mtlx::NeoShadeConnectable>::~deque[abi:ne180100]((uint64_t)buf);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy((_QWORD *)__x[0].__r_.__value_.__l.__size_);
        if ((v15 & 1) != 0)
        {
          *(_QWORD *)buf = v362;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if ((v11 & 7) != 0)
          {
            v205 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
            do
              v206 = __ldxr(v205);
            while (__stlxr(v206 - 2, v205));
          }
          *(_QWORD *)buf = &v355;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          *(_QWORD *)buf = &v316;
          std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          *a3 = 0;
          a3[1] = 0;
          goto LABEL_525;
        }
      }
      *(_QWORD *)buf = v362;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if ((v11 & 7) != 0)
      {
        v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
    }
    *(_QWORD *)buf = &v355;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  *(_QWORD *)buf = &v316;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "texcoord");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v325 + 1, "");
  std::string::basic_string[abi:ne180100]<0>(&v327, "texcoord1");
  std::string::basic_string[abi:ne180100]<0>(&v328, "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(v329, "uv2");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v331, "uv3");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v332, "uv4");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v333, "uv5");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v334, "uv6");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(&v335, "uv7");
  v323 = 0;
  *(_QWORD *)&v316 = (char *)&v316 + 8;
  *((_QWORD *)&v316 + 1) = 0;
  v318 = 0uLL;
  *(_QWORD *)&v317 = 0;
  *((_QWORD *)&v317 + 1) = &v318;
  v319 = 0u;
  v320 = 0u;
  v321 = 0u;
  __n = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v336 + 16))(__x, v336, v337);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v336 + 16))(&v355, v336, v337);
  realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode((uint64_t)&v316, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__x, &v355);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v355);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__x);
  __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE6660;
  __x[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v316;
  __x[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__x;
  realityio::foreachConnected((unsigned int *)&v336, (uint64_t)__x);
  data = (std::string *)__x[1].__r_.__value_.__l.__data_;
  if ((std::string *)__x[1].__r_.__value_.__l.__data_ == __x)
  {
    v22 = 4;
    data = __x;
    goto LABEL_22;
  }
  if (__x[1].__r_.__value_.__r.__words[0])
  {
    v22 = 5;
LABEL_22:
    (*(void (**)(void))(data->__r_.__value_.__r.__words[0] + 8 * v22))();
  }
  LODWORD(__x[0].__r_.__value_.__l.__data_) = 0;
  std::vector<int>::vector((std::vector<int> *)&v355, __n, (const std::vector<int>::value_type *)__x);
  v23 = (_QWORD *)*((_QWORD *)&v320 + 1);
  v24 = (_QWORD *)v321;
  if (*((_QWORD *)&v320 + 1) != (_QWORD)v321)
  {
    v25 = 0;
    do
    {
      v26 = (_QWORD *)*v23;
      if ((_QWORD *)*v23 != v23 + 1)
      {
        v27 = v355;
        do
        {
          v28 = v26[4];
          if (v28 != v25)
            ++*(_DWORD *)(v27 + 4 * v28);
          v29 = (_QWORD *)v26[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v26[2];
              v31 = *v30 == (_QWORD)v26;
              v26 = v30;
            }
            while (!v31);
          }
          v26 = v30;
        }
        while (v30 != v23 + 1);
      }
      v23 += 3;
      ++v25;
    }
    while (v23 != v24);
  }
  memset(__x, 0, 48);
  *(_QWORD *)v362 = 0;
  v32 = *((_QWORD *)&v355 + 1);
  v33 = v355;
  if (*((_QWORD *)&v355 + 1) != (_QWORD)v355)
  {
    v34 = 0;
    do
    {
      if (!*(_DWORD *)(v33 + 4 * v34))
      {
        std::deque<unsigned long>::push_back(__x, v362);
        v34 = *(_QWORD *)v362;
        v32 = *((_QWORD *)&v355 + 1);
        v33 = v355;
      }
      *(_QWORD *)v362 = ++v34;
    }
    while (v34 < (v32 - v33) >> 2);
  }
  realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
  v35 = __x[1].__r_.__value_.__r.__words[2];
  if (__x[1].__r_.__value_.__r.__words[2])
  {
    v36 = 0;
    v295 = 0;
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(*(_QWORD *)(__x[0].__r_.__value_.__l.__size_
                                  + ((__x[1].__r_.__value_.__l.__size_ >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (__x[1].__r_.__value_.__r.__words[1] & 0x1FF));
      __x[1].__r_.__value_.__r.__words[2] = v35 - 1;
      if (++__x[1].__r_.__value_.__l.__size_ >= 0x400)
      {
        operator delete(*(void **)__x[0].__r_.__value_.__l.__size_);
        __x[0].__r_.__value_.__l.__size_ += 8;
        __x[1].__r_.__value_.__l.__size_ -= 512;
      }
      v39 = (__int128 *)v318;
      if (!(_QWORD)v318)
        goto LABEL_55;
      v40 = &v318;
      do
      {
        v41 = v39;
        v42 = v40;
        v43 = *((_QWORD *)v39 + 4);
        v44 = (__int128 *)((char *)v39 + 8);
        if (v43 >= v38)
        {
          v44 = v41;
          v40 = v41;
        }
        v39 = *(__int128 **)v44;
      }
      while (v39);
      if (v40 != &v318 && (v43 >= v38 ? (v45 = v41) : (v45 = v42), *((_QWORD *)v45 + 4) <= v38))
      {
        if (v43 < v38)
          v41 = v42;
        v54 = (void *)*((_QWORD *)v41 + 5);
        if (v54 != &unk_255E545B8)
        {
          if (v295 >= v37)
          {
            v55 = (v295 - v36) >> 3;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 61)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if ((v37 - v36) >> 2 > v56)
              v56 = (v37 - v36) >> 2;
            if ((unint64_t)(v37 - v36) >= 0x7FFFFFFFFFFFFFF8)
              v57 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v57 = v56;
            if (v57)
            {
              if (v57 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v58 = (char *)operator new(8 * v57);
              v59 = v36;
            }
            else
            {
              v59 = v36;
              v58 = 0;
            }
            v60 = v295;
            v36 = &v58[8 * v55];
            *(_QWORD *)v36 = v54;
            v61 = v36 + 8;
            while (v60 != v59)
            {
              v62 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v36 - 1) = v62;
              v36 -= 8;
            }
            v37 = &v58[8 * v57];
            if (v59)
              operator delete(v59);
            v295 = v61;
          }
          else
          {
            *(_QWORD *)v295 = v54;
            v295 += 8;
          }
        }
      }
      else
      {
LABEL_55:
        realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
      }
      v46 = (_QWORD *)(*((_QWORD *)&v320 + 1) + 24 * v38);
      v49 = (_QWORD *)*v46;
      v47 = v46 + 1;
      v48 = v49;
      if (v49 != v47)
      {
        do
        {
          v50 = v48[4];
          v51 = *(_DWORD *)(v355 + 4 * v50) - 1;
          *(_DWORD *)(v355 + 4 * v50) = v51;
          if (!v51)
            std::deque<unsigned long>::push_back(__x, v48 + 4);
          v52 = (_QWORD *)v48[1];
          if (v52)
          {
            do
            {
              v53 = v52;
              v52 = (_QWORD *)*v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              v53 = (_QWORD *)v48[2];
              v31 = *v53 == (_QWORD)v48;
              v48 = v53;
            }
            while (!v31);
          }
          v48 = v53;
        }
        while (v53 != v47);
      }
      v35 = __x[1].__r_.__value_.__r.__words[2];
    }
    while (__x[1].__r_.__value_.__r.__words[2]);
  }
  else
  {
    v36 = 0;
    v295 = 0;
  }
  std::deque<unsigned long>::~deque[abi:ne180100](__x);
  if ((_QWORD)v355)
  {
    *((_QWORD *)&v355 + 1) = v355;
    operator delete((void *)v355);
  }
  v313 = 0u;
  v314 = 0u;
  v315 = 1065353216;
  if (v36 == v295)
  {
    v64 = 0;
    v291 = 0;
    v293 = 0;
    goto LABEL_352;
  }
  v63 = v36;
  v293 = 0;
  v291 = 0;
  v64 = 0;
  do
  {
    v298 = v63;
    v65 = *(_QWORD *)v63;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v309, (_DWORD *)(*(_QWORD *)v63 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v310, (_DWORD *)(v65 + 12));
    lpsrc = (void *)realityio::mtlx::NeoDataSource::primFromPath((uint64_t)a2, &v309);
    v312 = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v309);
    *(_OWORD *)&__x[0].__r_.__value_.__l.__data_ = *(unint64_t *)(*(_QWORD *)v298 + 24);
    __x[0].__r_.__value_.__r.__words[2] = 0;
    __x[1].__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v356[0] = 0;
    v355 = 0uLL;
    v67 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>((uint64_t *)&v313, __x[0].__r_.__value_.__r.__words[0], (uint64_t)__x);
    *(_QWORD *)v362 = &__x[0].__r_.__value_.__l.__size_;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)v362);
    *(_QWORD *)v362 = &v355;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)v362);
    v359[1] = 0;
    v68 = (realityio *)(*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)lpsrc + 192))(lpsrc, v312);
    if ((_DWORD)v68 == 2)
    {
      v89 = *(id *)(realityio::logObjects(v68) + 48);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(__int128 *__return_ptr, void *, _QWORD))(*(_QWORD *)lpsrc + 16))(&v355, lpsrc, v312);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v355);
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = Text;
        _os_log_impl(&dword_22FF26000, v89, OS_LOG_TYPE_INFO, "*** Shader %s", (uint8_t *)__x, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v355);
      }

      *(_QWORD *)&v355 = lpsrc;
      DWORD2(v355) = v312;
      realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)__x, (unsigned int *)&v355);
      *(_QWORD *)&v362[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy((uint64_t *)v362, (uint64_t)__x);
      realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v359, v362);
      v88 = (pxrInternal__aapl__pxrReserved__::VtValue *)v362;
      goto LABEL_124;
    }
    if ((_DWORD)v68 == 1)
    {
      v82 = *(id *)(realityio::logObjects(v68) + 48);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(__int128 *__return_ptr, void *, _QWORD))(*(_QWORD *)lpsrc + 16))(&v355, lpsrc, v312);
        v83 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v355);
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = v83;
        _os_log_impl(&dword_22FF26000, v82, OS_LOG_TYPE_INFO, "*** NodeGraph %s", (uint8_t *)__x, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v355);
      }

      *(_QWORD *)v362 = lpsrc;
      *(_DWORD *)&v362[8] = v312;
      realityio::mtlx::MtlxActionPayload::MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x, (realityio::mtlx::NeoShadeNodeGraph *)v362);
      realityio::mtlx::MtlxActionPayload::populateSubgraph((id *)&__x[0].__r_.__value_.__l.__data_);
      realityio::mtlx::MtlxActionPayload::connectSubgraph(__x, (uint64_t *)&lpsrc);
      realityio::mtlx::MtlxActionPayload::nodeFromGraph((id *)&__x[0].__r_.__value_.__l.__data_);
      (*(void (**)(__int128 *__return_ptr, void *, void **))(*(_QWORD *)lpsrc + 200))(&v355, lpsrc, &lpsrc);
      v84 = __x[1].__r_.__value_.__l.__data_;
      objc_msgSend(v84, "inputs");
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      realityio::mtlx::MtlxActionPayload::addSiblingInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)__x, (unsigned int **)&v355, v85);

      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355;
      std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      (*(void (**)(__int128 *__return_ptr, void *, void **))(*(_QWORD *)lpsrc + 208))(&v355, lpsrc, &lpsrc);
      v86 = __x[1].__r_.__value_.__l.__data_;
      objc_msgSend(v86, "outputs");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      realityio::mtlx::MtlxActionPayload::addSiblingOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)__x, (unsigned int **)&v355, v87);

      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355;
      std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      *((_QWORD *)&v355 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy((uint64_t *)&v355, (uint64_t)__x);
      realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v359, &v355);
      v88 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v355;
LABEL_124:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v88);
      goto LABEL_268;
    }
    if ((_DWORD)v68)
      goto LABEL_268;
    *(_QWORD *)&v355 = 0;
    DWORD2(v355) = 0;
    memset(v356, 0, sizeof(v356));
    CullMode = 2;
    v358 = 256;
    v69 = *(id *)(realityio::logObjects(v68) + 48);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(_BYTE *__return_ptr, void *, _QWORD))(*(_QWORD *)lpsrc + 16))(v362, lpsrc, v312);
      v70 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v362);
      LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = v70;
      _os_log_impl(&dword_22FF26000, v69, OS_LOG_TYPE_INFO, "*** Material %s", (uint8_t *)__x, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v362);
    }

    v345 = lpsrc;
    v346 = v312;
    realityio::mtlx::MtlxActionPayload::MtlxActionPayload((uint64_t)__x, (unsigned int *)&v345);
    v71 = (realityio::mtlx::USDDataSource *)lpsrc;
    if (lpsrc)
    {
      if (v71)
      {
        realityio::mtlx::USDDataSource::getPrim(v71, v346, (uint64_t)v362);
        CullMode = realityio::getCullMode((realityio *)v362, v72);
        v358 = v73;
        if ((v362[24] & 7) != 0)
        {
          v74 = (unsigned int *)(*(_QWORD *)&v362[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v75 = __ldxr(v74);
          while (__stlxr(v75 - 2, v74));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v362[16]);
        v71 = *(realityio::mtlx::USDDataSource **)&v362[8];
        if (*(_QWORD *)&v362[8])
          v71 = (realityio::mtlx::USDDataSource *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v362[8]);
      }
    }
    v76 = v366;
    if ((v366 & 3) != 0)
    {
      if ((v366 & 8) != 0)
      {
        v77 = *(id *)(realityio::logObjects(v71) + 48);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(std::string *__return_ptr, void *, _QWORD))(*(_QWORD *)lpsrc + 16))(&__str, lpsrc, v312);
          v78 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
          *(_DWORD *)v362 = 136315138;
          *(_QWORD *)&v362[4] = v78;
          _os_log_impl(&dword_22FF26000, v77, OS_LOG_TYPE_DEFAULT, "Non-occlusion Shader prim found in occlusion material '%s'. All prims except the occlusion prim will be ignored.", v362, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
        }

        v76 = v366;
      }
      if ((v76 & 4) != 0)
      {
        v79 = *(id *)(realityio::logObjects(v71) + 48);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(std::string *__return_ptr, void *, _QWORD))(*(_QWORD *)lpsrc + 16))(&__str, lpsrc, v312);
          v80 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
          *(_DWORD *)v362 = 136315138;
          *(_QWORD *)&v362[4] = v80;
          _os_log_impl(&dword_22FF26000, v79, OS_LOG_TYPE_DEFAULT, "Multiple occlusion Shader prims found in occlusion material '%s'. All but one will be ignored, with priority going to 'ND_realitykit_occlusion_surfaceshader'.", v362, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
        }

        v76 = v366;
      }
      if ((v76 & 1) != 0)
        v81 = 1;
      else
        v81 = 2;
      goto LABEL_117;
    }
    realityio::mtlx::MtlxActionPayload::populateSubgraph((id *)&__x[0].__r_.__value_.__l.__data_);
    realityio::mtlx::MtlxActionPayload::connectSubgraph(__x, (uint64_t *)&lpsrc);
    size = __x[1].__r_.__value_.__l.__size_;
    objc_storeStrong((id *)v356, (id)__x[1].__r_.__value_.__l.__size_);
    if (!size)
    {
      std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map((uint64_t)&__str, (uint64_t)&v365);
      if (v361)
      {
        v179 = &v348;
        v348 = 0;
        v349 = 0;
        v347 = &v348;
        v180 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
        if (__str.__r_.__value_.__r.__words[2])
        {
          while (1)
          {
            realityio::TexcoordID::TexcoordID((uint64_t)v362, (uint64_t)(v180 + 3));
            v181 = v362[39];
            if (v362[39] < 0)
              v181 = *(_QWORD *)&v362[24];
            if (v181)
            {
              if ((v362[39] & 0x80) == 0)
                goto LABEL_296;
            }
            else
            {
              realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)v362);
              if ((v362[39] & 0x80) == 0)
              {
LABEL_296:
                v350 = *(std::string *)&v362[16];
                goto LABEL_299;
              }
            }
            std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)&v362[16], *(std::string::size_type *)&v362[24]);
LABEL_299:
            if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v350.__r_.__value_.__l.__data_);
            if (&v348 == v179
              || realityio::TexcoordID::operator<((realityio::TexcoordID *)v362, (realityio::TexcoordID *)(v179 + 4)))
            {
              v182 = v179;
              if (v347 == v179)
                goto LABEL_536;
              v183 = *v179;
              v184 = v179;
              if (*v179)
              {
                do
                {
                  v182 = (uint64_t **)v183;
                  v183 = (uint64_t *)v183[1];
                }
                while (v183);
              }
              else
              {
                do
                {
                  v182 = (uint64_t **)v184[2];
                  v31 = *v182 == (uint64_t *)v184;
                  v184 = v182;
                }
                while (v31);
              }
              if (realityio::TexcoordID::operator<((realityio::TexcoordID *)(v182 + 4), (realityio::TexcoordID *)v362))
              {
LABEL_536:
                if (*v179)
                {
                  v351 = v182;
                  v179 = v182 + 1;
                }
                else
                {
                  v351 = v179;
                }
                goto LABEL_327;
              }
LABEL_322:
              v179 = (uint64_t **)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)&v347, &v351, (realityio::TexcoordID *)v362);
              goto LABEL_327;
            }
            if (realityio::TexcoordID::operator<((realityio::TexcoordID *)(v179 + 4), (realityio::TexcoordID *)v362))
            {
              v185 = v179[1];
              v186 = v185;
              v187 = v179;
              if (v185)
              {
                do
                {
                  v188 = (uint64_t **)v186;
                  v186 = (uint64_t *)*v186;
                }
                while (v186);
              }
              else
              {
                do
                {
                  v188 = (uint64_t **)v187[2];
                  v31 = *v188 == (uint64_t *)v187;
                  v187 = v188;
                }
                while (!v31);
              }
              if (v188 != &v348)
              {
                if (!realityio::TexcoordID::operator<((realityio::TexcoordID *)v362, (realityio::TexcoordID *)(v188 + 4)))goto LABEL_322;
                v185 = v179[1];
              }
              if (v185)
              {
                v351 = v188;
                v179 = v188;
              }
              else
              {
                v351 = v179++;
              }
LABEL_327:
              v189 = *v179;
              if (!*v179)
              {
                v189 = (uint64_t *)operator new(0x50uLL);
                v350.__r_.__value_.__l.__size_ = (std::string::size_type)&v348;
                v190 = *(_OWORD *)v362;
                *(_QWORD *)&v362[8] = 0;
                v191 = *(_OWORD *)&v362[16];
                *((_OWORD *)v189 + 2) = v190;
                *((_OWORD *)v189 + 3) = v191;
                v189[8] = *(_QWORD *)&v362[32];
                memset(&v362[16], 0, 24);
                *((_BYTE *)v189 + 72) = v363;
                v350.__r_.__value_.__s.__data_[16] = 1;
                v192 = v351;
                *v189 = 0;
                v189[1] = 0;
                v189[2] = (uint64_t)v192;
                *v179 = v189;
                v193 = v189;
                if (*v347)
                {
                  v347 = (uint64_t **)*v347;
                  v193 = *v179;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v348, v193);
                ++v349;
                v350.__r_.__value_.__r.__words[0] = 0;
                std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)&v350, 0);
              }
              goto LABEL_331;
            }
            v189 = (uint64_t *)v179;
LABEL_331:
            v194 = (uint64_t *)v189[1];
            if (v194)
            {
              do
              {
                v179 = (uint64_t **)v194;
                v194 = (uint64_t *)*v194;
              }
              while (v194);
            }
            else
            {
              do
              {
                v179 = (uint64_t **)v189[2];
                v31 = *v179 == v189;
                v189 = (uint64_t *)v179;
              }
              while (!v31);
            }
            if ((v362[39] & 0x80000000) != 0)
              operator delete(*(void **)&v362[16]);
            if ((v362[8] & 7) != 0)
            {
              v195 = (unsigned int *)(*(_QWORD *)&v362[8] & 0xFFFFFFFFFFFFFFF8);
              do
                v196 = __ldxr(v195);
              while (__stlxr(v196 - 2, v195));
            }
            v180 = (_QWORD *)*v180;
            if (!v180)
            {
              v197 = v349;
              goto LABEL_345;
            }
          }
        }
        v197 = 0;
LABEL_345:
        memset(v362, 0, 24);
        if (v197 >= 8)
          v197 = 8;
        v198 = v197;
        std::vector<realityio::TexcoordID>::reserve((uint64_t *)v362, v197);
        v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v347;
        std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>(&v350, v198);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v351, v347, v350.__r_.__value_.__l.__data_, (uint64_t *)v362);
        std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v347, v348);
      }
      else
      {
        memset(v362, 0, 24);
      }
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table((uint64_t)&__str);
      std::vector<realityio::TexcoordID>::__vdeallocate((uint64_t *)v356 + 1);
      *(_OWORD *)((char *)v356 + 8) = *(_OWORD *)v362;
      *((_QWORD *)&v356[1] + 1) = *(_QWORD *)&v362[16];
      memset(v362, 0, 24);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v362;
      std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      objc_storeStrong((id *)&v355, (id)__x[0].__r_.__value_.__r.__words[2]);
      v81 = 0;
LABEL_117:
      DWORD2(v355) = v81;
    }
    realityio::mtlx::MtlxActionPayload::~MtlxActionPayload((realityio::mtlx::MtlxActionPayload *)__x);
    objc_storeStrong(&v343, (id)v355);
    v291 = DWORD2(v355);
    v292 = (realityio *)*(id *)&v356[0];

    v92 = *((_QWORD *)&v356[0] + 1);
    v93 = *(_QWORD *)&v356[1];
    v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v356[1] - *((_QWORD *)&v356[0] + 1)) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v342 - v340) >> 4) >= v94)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v341 - v340) >> 4) >= v94)
      {
        v100 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(*((char **)&v356[0] + 1), *(char **)&v356[1], v340);
        std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v340, v100);
        v99 = v341;
        goto LABEL_138;
      }
      v98 = (char *)(*((_QWORD *)&v356[0] + 1) + 16 * ((v341 - v340) >> 4));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(*((char **)&v356[0] + 1), v98, v340);
      v97 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v342, (uint64_t)v98, v93, v341);
    }
    else
    {
      std::vector<realityio::TexcoordID>::__vdeallocate(&v340);
      if (v94 > 0x555555555555555)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v95 = 0x5555555555555556 * ((v342 - v340) >> 4);
      if (v95 <= v94)
        v95 = v94;
      if (0xAAAAAAAAAAAAAAABLL * ((v342 - v340) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v96 = 0x555555555555555;
      else
        v96 = v95;
      std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](&v340, v96);
      v97 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v342, v92, v93, v341);
    }
    v99 = v97;
    v341 = v97;
LABEL_138:
    v338 = CullMode;
    v339 = v358;
    v307 = 0;
    v308 = 0;
    v306 = 0;
    v101 = v340;
    __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
    __x[0].__r_.__value_.__s.__data_[8] = 0;
    if (v99 != v340)
    {
      std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](&v306, 0xAAAAAAAAAAAAAAABLL * ((v99 - v340) >> 4));
      v307 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>((uint64_t)&v308, v101, v99, v307);
    }
    v323 = 0;
    v102 = objc_opt_new();
    v297 = (void *)v102;
    v104 = v306;
    v103 = v307;
    while (v104 != v103)
    {
      v105 = *(_QWORD *)(v104 + 8);
      if ((v105 & 7) != 0)
      {
        v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 2, v106));
        if ((v107 & 1) == 0)
          v105 &= 0xFFFFFFFFFFFFFFF8;
      }
      v108 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      if ((v105 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t)(v108 + 4);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v102);
      if (*(char *)(EmptyString + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v362, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
      }
      else
      {
        v110 = *(_OWORD *)EmptyString;
        *(_QWORD *)&v362[16] = *(_QWORD *)(EmptyString + 16);
        *(_OWORD *)v362 = v110;
      }
      if ((v105 & 7) != 0)
      {
        do
          v111 = __ldxr(v108);
        while (__stlxr(v111 - 2, v108));
      }
      v112 = *(_DWORD *)(v104 + 4);
      if (v112 == -1)
      {
        v115 = *(_QWORD *)(v104 + 8);
        if ((v115 & 7) != 0)
        {
          v116 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 2, v116));
          if ((v117 & 1) == 0)
            v115 &= 0xFFFFFFFFFFFFFFF8;
        }
        v118 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
        if ((v115 & 0xFFFFFFFFFFFFFFF8) != 0)
          v119 = (const std::string *)(v118 + 4);
        else
          v119 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        std::string::operator=((std::string *)v362, v119);
        if ((v115 & 7) != 0)
        {
          do
            v125 = __ldxr(v118);
          while (__stlxr(v125 - 2, v118));
        }
        v126 = (realityio *)std::operator+<char>();
        if (*(_BYTE *)(v104 + 40))
          v127 = 0;
        else
          v127 = SHIDWORD(v323) <= 1;
        if (!v127)
        {
          if ((int)v323 > 5)
          {
            v147 = *(NSObject **)(realityio::logObjects(v126) + 48);
            v102 = os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v102)
            {
              if (v362[23] >= 0)
                v148 = v362;
              else
                v148 = *(_BYTE **)v362;
              v149 = "";
              if (*(_BYTE *)(v104 + 40))
                v149 = " (which requires a 4D buffer)";
              LODWORD(__x[0].__r_.__value_.__l.__data_) = 136316418;
              *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v148;
              WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v149;
              HIWORD(__x[0].__r_.__value_.__r.__words[2]) = 1024;
              LODWORD(__x[1].__r_.__value_.__l.__data_) = 2 - HIDWORD(v323);
              WORD2(__x[1].__r_.__value_.__r.__words[0]) = 1024;
              *(_DWORD *)((char *)__x[1].__r_.__value_.__r.__words + 6) = 2;
              WORD1(__x[1].__r_.__value_.__r.__words[1]) = 1024;
              HIDWORD(__x[1].__r_.__value_.__r.__words[1]) = 6 - v323;
              LOWORD(__x[1].__r_.__value_.__r.__words[2]) = 1024;
              *(_DWORD *)((char *)&__x[1].__r_.__value_.__r.__words[2] + 2) = 6;
              _os_log_impl(&dword_22FF26000, v147, OS_LOG_TYPE_DEFAULT, "No material buffer available for '%s'%s.  %d of %d 2D float buffers, and %d of %d 4D float buffers are available.", (uint8_t *)__x, 0x2Eu);
            }
            v150 = 0;
            v112 = -1;
          }
          else
          {
            v128 = 0;
            while (1)
            {
              v129 = v330[v128 * 8 + 23];
              if ((v129 & 0x80u) != 0)
                v129 = *(_QWORD *)&v330[v128 * 8 + 8];
              if (!v129)
                break;
              v128 += 6;
              if (v128 == 36)
              {
                v130 = (std::string *)&v336;
                goto LABEL_237;
              }
            }
            v130 = (std::string *)&v329[v128];
LABEL_237:
            v102 = (uint64_t)std::string::operator=(v130 + 1, &__str);
            v138 = &v323;
LABEL_238:
            ++*(_DWORD *)v138;
            v112 = -1431655765 * ((unint64_t)((char *)v130 - (char *)buf) >> 4);
            v150 = 1;
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            if ((v150 & 1) == 0)
              goto LABEL_262;
          }
          else if ((v150 & 1) == 0)
          {
            goto LABEL_262;
          }
LABEL_243:
          v151 = (void *)MEMORY[0x24BDD17C8];
          v152 = *(_QWORD *)(v104 + 8);
          if ((v152 & 7) != 0)
          {
            v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 2, v153));
            if ((v154 & 1) == 0)
              v152 &= 0xFFFFFFFFFFFFFFF8;
          }
          v155 = v152 & 0xFFFFFFFFFFFFFFF8;
          if ((v152 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v156 = (const char *)(v155 + 16);
            if (*(char *)(v155 + 39) < 0)
              v156 = *(const char **)v156;
          }
          else
          {
            v156 = "";
          }
          objc_msgSend(v151, "stringWithUTF8String:", v156);
          v157 = (void *)objc_claimAutoreleasedReturnValue();
          if ((v152 & 7) != 0)
          {
            do
              v158 = __ldxr((unsigned int *)v155);
            while (__stlxr(v158 - 2, (unsigned int *)v155));
          }
          v159 = (void *)MEMORY[0x24BDD17C8];
          std::to_string(&__str, v112);
          v160 = std::string::insert(&__str, 0, "UV");
          v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
          __x[0].__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__x[0].__r_.__value_.__l.__data_ = v161;
          v160->__r_.__value_.__l.__size_ = 0;
          v160->__r_.__value_.__r.__words[2] = 0;
          v160->__r_.__value_.__r.__words[0] = 0;
          if ((__x[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v162 = __x;
          else
            v162 = (std::string *)__x[0].__r_.__value_.__r.__words[0];
          objc_msgSend(v159, "stringWithUTF8String:", v162);
          v163 = (void *)objc_claimAutoreleasedReturnValue();
          if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__x[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          objc_msgSend(MEMORY[0x24BE8F5F8], "geometryPropertyWithName:mappingTo:", v157, v163);
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v297, "addObject:", v164);

          goto LABEL_262;
        }
        v131 = 0;
        v132 = 0;
        do
        {
          v133 = v132;
          v134 = &buf[48 * v132];
          v135 = v134[47];
          if ((v135 & 0x80u) != 0)
            v135 = *((_QWORD *)v134 + 4);
          if ((v131 & 1) != 0)
            break;
          v131 = 1;
          v132 = 1;
        }
        while (v135);
        if (v135)
          v130 = (std::string *)v329;
        else
          v130 = (std::string *)v134;
        v136 = (std::string *)((char *)&v325 + 48 * v133 + 8);
        if (v135)
          v137 = (std::string *)v330;
        else
          v137 = v136;
        v102 = (uint64_t)std::string::operator=(v137, &__str);
        v138 = (uint64_t *)((char *)&v323 + 4);
        goto LABEL_238;
      }
      if (v112 >= 8)
      {
        v113 = *(NSObject **)(realityio::logObjects((realityio *)EmptyString) + 48);
        v102 = os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v102)
        {
          if (v362[23] >= 0)
            v114 = v362;
          else
            v114 = *(_BYTE **)v362;
          LODWORD(__x[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v114;
          WORD2(__x[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = v112;
          _os_log_impl(&dword_22FF26000, v113, OS_LOG_TYPE_DEFAULT, "Texcoord specification '%s' specifies buffer '%d', which does not exist.", (uint8_t *)__x, 0x12u);
        }
        goto LABEL_262;
      }
      v120 = *(_QWORD *)(v104 + 8);
      if ((v120 & 7) != 0)
      {
        v121 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 2, v121));
        if ((v122 & 1) == 0)
          v120 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v120 & 7) != 0)
      {
        v123 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if (v120)
      {
        realityio::TexcoordID::getNormalizedName((realityio::TexcoordID *)v104, __x);
        if ((v362[23] & 0x80000000) != 0)
          operator delete(*(void **)v362);
        *(std::string *)v362 = __x[0];
      }
      else
      {
        std::to_string(__x, *(_DWORD *)(v104 + 4));
        v139 = std::string::insert(__x, 0, "UV");
        v140 = v139->__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = v139->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v139->__r_.__value_.__r.__words[1] + 7);
        v141 = HIBYTE(v139->__r_.__value_.__r.__words[2]);
        v139->__r_.__value_.__l.__size_ = 0;
        v139->__r_.__value_.__r.__words[2] = 0;
        v139->__r_.__value_.__r.__words[0] = 0;
        if ((v362[23] & 0x80000000) != 0)
          operator delete(*(void **)v362);
        *(_QWORD *)v362 = v140;
        *(_QWORD *)&v362[8] = __str.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v362[15] = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
        v362[23] = v141;
        if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x[0].__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      v142 = &buf[48 * v112];
      v143 = (std::string *)(v142 + 24);
      if ((char)v142[47] < 0)
      {
        v144 = *((_QWORD *)v142 + 4);
        if (!v144)
        {
LABEL_221:
          v102 = (uint64_t)std::string::operator=(v143, __x);
          if (v112 > 1)
            LODWORD(v323) = v323 + 1;
          else
            ++HIDWORD(v323);
          goto LABEL_232;
        }
      }
      else
      {
        v144 = v142[47];
        if (!v142[47])
          goto LABEL_221;
      }
      v145 = *(NSObject **)(realityio::logObjects((realityio *)v143) + 48);
      v102 = os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v102)
      {
        if (v362[23] >= 0)
          v146 = v362;
        else
          v146 = *(_BYTE **)v362;
        if ((char)v142[23] < 0)
          v142 = *(uint8_t **)v142;
        LODWORD(__str.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
        WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v142;
        _os_log_impl(&dword_22FF26000, v145, OS_LOG_TYPE_DEFAULT, "Texcoord specification '%s' specifies buffer '%s', which has already been assigned.", (uint8_t *)&__str, 0x16u);
      }
LABEL_232:
      if (SHIBYTE(__x[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x[0].__r_.__value_.__l.__data_);
      if (!v144)
        goto LABEL_243;
LABEL_262:
      if ((v362[23] & 0x80000000) != 0)
        operator delete(*(void **)v362);
      v104 += 48;
    }
    v165 = objc_alloc_init(MEMORY[0x24BE8F610]);
    v166 = *(NSObject **)(realityio::logObjects((realityio *)objc_msgSend(v165, "setCustomGeometryProperties:", v297))
                        + 48);
    if (os_log_type_enabled(v166, OS_LOG_TYPE_INFO))
    {
      LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v297;
      _os_log_impl(&dword_22FF26000, v166, OS_LOG_TYPE_INFO, "SG property definitions %@", (uint8_t *)__x, 0xCu);
    }

    __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
    std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
    __x[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v356 + 8;
    std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);

    v64 = v292;
    v293 = v165;
LABEL_268:
    v167 = *(_QWORD *)(*(_QWORD *)v298 + 24);
    v168 = atomic_load((unsigned __int8 *)&_MergedGlobals_5);
    if ((v168 & 1) == 0 && __cxa_guard_acquire((__guard *)&_MergedGlobals_5))
    {
      qword_255E545B0 = 0;
      qword_255E545A8 = 0;
      qword_255E545A0 = (uint64_t)&qword_255E545A8;
      __cxa_guard_release((__guard *)&_MergedGlobals_5);
    }
    v169 = (__int128 *)v318;
    if (!(_QWORD)v318)
      goto LABEL_280;
    v170 = &v318;
    do
    {
      v171 = v169;
      v172 = v170;
      v173 = *((_QWORD *)v169 + 4);
      if (v173 >= v167)
        v170 = v169;
      else
        v169 = (__int128 *)((char *)v169 + 8);
      v169 = *(__int128 **)v169;
    }
    while (v169);
    if (v170 == &v318)
    {
LABEL_280:
      v174 = &qword_255E545A0;
    }
    else
    {
      if (v173 < v167)
        v171 = v172;
      v174 = &qword_255E545A0;
      if (*((_QWORD *)v171 + 4) <= v167)
        v174 = (uint64_t *)(*((_QWORD *)&v320 + 1) + 24 * v167);
    }
    std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v355, (uint64_t)v174);
    v175 = (_QWORD *)v355;
    if ((__int128 *)v355 != (__int128 *)((char *)&v355 + 8))
    {
      do
      {
        __x[0].__r_.__value_.__r.__words[0] = v175[4];
        __x[1].__r_.__value_.__r.__words[0] = 0;
        *(_OWORD *)&__x[0].__r_.__value_.__r.__words[1] = 0uLL;
        memset(v362, 0, 24);
        v176 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>((uint64_t *)&v313, __x[0].__r_.__value_.__r.__words[0], (uint64_t)__x);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x[0].__r_.__value_.__l.__size_;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v362;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100]((_QWORD *)v176 + 3, (pxrInternal__aapl__pxrReserved__::VtValue *)v359);
        v177 = (_QWORD *)v175[1];
        if (v177)
        {
          do
          {
            v178 = v177;
            v177 = (_QWORD *)*v177;
          }
          while (v177);
        }
        else
        {
          do
          {
            v178 = (_OWORD *)v175[2];
            v31 = *(_QWORD *)v178 == (_QWORD)v175;
            v175 = v178;
          }
          while (!v31);
        }
        v175 = v178;
      }
      while (v178 != (__int128 *)((char *)&v355 + 8));
    }
    std::__tree<unsigned int>::destroy((uint64_t)&v355, *((_QWORD **)&v355 + 1));
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v359);
    v63 = v298 + 8;
  }
  while (v298 + 8 != v295);
LABEL_352:
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::~__hash_table((uint64_t)&v313);
  if (v36)
    operator delete(v36);
  realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)&v316);
  if (!v64)
  {
    if (v291 == 1)
    {
      v199 = "engine:occlusionMaterial.rematerial";
      goto LABEL_360;
    }
    if (v291 == 2)
    {
      v199 = "engine:shadowReceiver.rematerial";
LABEL_360:
      v64 = 0;
      goto LABEL_518;
    }
    v305 = 0;
    objc_msgSend(MEMORY[0x24BE8F630], "materialFromGraph:configuration:error:", v343, v293, &v305);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    v201 = (realityio *)v305;
    lpsrc = v200;
    if (v201)
    {
      v64 = v201;
      v202 = *(id *)(realityio::logObjects(v201) + 48);
      if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v343, "name");
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        -[realityio localizedDescription](v64, "localizedDescription");
        v204 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v203;
        WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v204;
        _os_log_impl(&dword_22FF26000, v202, OS_LOG_TYPE_DEFAULT, "Error attempting to validate '%@': %@", (uint8_t *)__x, 0x16u);

      }
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_517;
    }
    objc_msgSend(v200, "uniforms");
    v359[0] = (id)objc_claimAutoreleasedReturnValue();
    v207 = (void *)MEMORY[0x24BDBCED8];
    objc_msgSend(lpsrc, "textures");
    v208 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v207, "dictionaryWithDictionary:", v208);
    v296 = (void *)objc_claimAutoreleasedReturnValue();

    v303 = 0u;
    v304 = 0u;
    v301 = 0u;
    v302 = 0u;
    v209 = v359[0];
    v210 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v301, v354, 16);
    if (v210)
    {
      v211 = *(_QWORD *)v302;
      do
      {
        for (j = 0; j != v210; ++j)
        {
          if (*(_QWORD *)v302 != v211)
            objc_enumerationMutation(v209);
          v213 = *(void **)(*((_QWORD *)&v301 + 1) + 8 * j);
          if (objc_msgSend(v213, "type") == 13)
          {
            v214 = (void *)MEMORY[0x24BDD17C8];
            (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v336 + 16))(__x, v336, v337);
            v215 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
            objc_msgSend(v213, "name");
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v214, "stringWithFormat:", CFSTR("%s.inputs:%@"), v215, v216);
            v217 = (void *)objc_claimAutoreleasedReturnValue();

            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__x);
            objc_msgSend(v213, "name");
            v218 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v296, "setObject:forKey:", v217, v218);

          }
        }
        v210 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v301, v354, 16);
      }
      while (v210);
    }

    v219 = v296;
    v355 = 0u;
    v356[0] = 0u;
    LODWORD(v356[1]) = 1065353216;
    memset(&__str, 0, sizeof(__str));
    v316 = 0u;
    v317 = 0u;
    v318 = 0u;
    v319 = 0u;
    v220 = v219;
    v221 = objc_msgSend(v220, "countByEnumeratingWithState:objects:count:", &v316, __x, 16);
    if (v221)
    {
      v299 = *(_QWORD *)v317;
      do
      {
        v222 = 0;
        do
        {
          if (*(_QWORD *)v317 != v299)
            objc_enumerationMutation(v220);
          v223 = *(_QWORD *)(*((_QWORD *)&v316 + 1) + 8 * v222);
          objc_msgSend(v220, "objectForKeyedSubscript:", v223);
          v224 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(v362, (char *)objc_msgSend(v224, "UTF8String"));
          MEMORY[0x2348B26F8](&v347, v362);
          if ((v362[23] & 0x80000000) != 0)
            operator delete(*(void **)v362);
          v225 = v336;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v347);
          v226 = realityio::mtlx::NeoDataSource::primFromPath(v225, &v345);
          v228 = v227;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v345);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v226 + 176))(v226, v228))
          {
            NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v347);
            *(_QWORD *)&v313 = v226;
            DWORD2(v313) = v228;
            v230 = *NameToken;
            *(_QWORD *)&v314 = v230;
            if ((v230 & 7) != 0)
            {
              v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
              do
                v232 = __ldxr(v231);
              while (__stxr(v232 + 2, v231));
              if ((v232 & 1) == 0)
                *(_QWORD *)&v314 = v231;
            }
            if ((*(unsigned int (**)(_QWORD, _QWORD, __int128 *))(*(_QWORD *)v313 + 184))(v313, DWORD2(v313), &v314))
            {
              memset(&v350, 0, 17);
              v350.__r_.__value_.__s.__data_[16] = (*(uint64_t (**)(_QWORD, _QWORD, __int128 *))(*(_QWORD *)v313 + 32))(v313, DWORD2(v313), &v314);
              objc_storeStrong((id *)&v350.__r_.__value_.__l.__data_, (id)v223);
              v233 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v347)+ ((HIDWORD(v347)+ (unint64_t)v347+ (HIDWORD(v347) + (unint64_t)v347)* (HIDWORD(v347) + (unint64_t)v347)) >> 1)));
              v234 = *((_QWORD *)&v355 + 1);
              if (*((_QWORD *)&v355 + 1))
              {
                v235 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v355 + 8));
                v235.i16[0] = vaddlv_u8(v235);
                if (v235.u32[0] > 1uLL)
                {
                  v223 = v233;
                  if (v233 >= *((_QWORD *)&v355 + 1))
                    v223 = v233 % *((_QWORD *)&v355 + 1);
                }
                else
                {
                  v223 = v233 & (*((_QWORD *)&v355 + 1) - 1);
                }
                v236 = *(id ***)(v355 + 8 * v223);
                if (v236)
                {
                  for (k = *v236; k; k = (id *)*k)
                  {
                    v238 = (unint64_t)k[1];
                    if (v238 == v233)
                    {
                      if (k[2] == v347)
                        goto LABEL_464;
                    }
                    else
                    {
                      if (v235.u32[0] > 1uLL)
                      {
                        if (v238 >= *((_QWORD *)&v355 + 1))
                          v238 %= *((_QWORD *)&v355 + 1);
                      }
                      else
                      {
                        v238 &= *((_QWORD *)&v355 + 1) - 1;
                      }
                      if (v238 != v223)
                        break;
                    }
                  }
                }
              }
              v239 = operator new(0x30uLL);
              *(_QWORD *)v362 = v239;
              *(_QWORD *)&v362[8] = v356;
              *v239 = 0;
              v239[1] = v233;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v239 + 4, &v347);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v239 + 5, (_DWORD *)&v347 + 1);
              v239[3] = 0;
              v239[4] = 0;
              v239[5] = 0;
              v362[16] = 1;
              v240 = (float)(unint64_t)(*((_QWORD *)&v356[0] + 1) + 1);
              if (!v234 || (float)(*(float *)&v356[1] * (float)v234) < v240)
              {
                v241 = (v234 & (v234 - 1)) != 0;
                if (v234 < 3)
                  v241 = 1;
                v242 = v241 | (2 * v234);
                v243 = vcvtps_u32_f32(v240 / *(float *)&v356[1]);
                if (v242 <= v243)
                  prime = (int8x8_t)v243;
                else
                  prime = (int8x8_t)v242;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                }
                v234 = *((_QWORD *)&v355 + 1);
                if (*(_QWORD *)&prime <= *((_QWORD *)&v355 + 1))
                {
                  if (*(_QWORD *)&prime < *((_QWORD *)&v355 + 1))
                  {
                    v251 = vcvtps_u32_f32((float)*((unint64_t *)&v356[0] + 1) / *(float *)&v356[1]);
                    if (*((_QWORD *)&v355 + 1) < 3uLL
                      || (v252 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v355 + 8)),
                          v252.i16[0] = vaddlv_u8(v252),
                          v252.u32[0] > 1uLL))
                    {
                      v251 = std::__next_prime(v251);
                    }
                    else
                    {
                      v253 = 1 << -(char)__clz(v251 - 1);
                      if (v251 >= 2)
                        v251 = v253;
                    }
                    if (*(_QWORD *)&prime <= v251)
                      prime = (int8x8_t)v251;
                    if (*(_QWORD *)&prime >= v234)
                    {
                      v234 = *((_QWORD *)&v355 + 1);
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_420;
                      v262 = (void *)v355;
                      *(_QWORD *)&v355 = 0;
                      if (v262)
                        operator delete(v262);
                      v234 = 0;
                      *((_QWORD *)&v355 + 1) = 0;
                    }
                  }
                }
                else
                {
LABEL_420:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v245 = operator new(8 * *(_QWORD *)&prime);
                  v246 = (void *)v355;
                  *(_QWORD *)&v355 = v245;
                  if (v246)
                    operator delete(v246);
                  v247 = 0;
                  *((int8x8_t *)&v355 + 1) = prime;
                  do
                    *(_QWORD *)(v355 + 8 * v247++) = 0;
                  while (*(_QWORD *)&prime != v247);
                  v248 = *(_QWORD ***)&v356[0];
                  if (*(_QWORD *)&v356[0])
                  {
                    v249 = *(_QWORD *)(*(_QWORD *)&v356[0] + 8);
                    v250 = (uint8x8_t)vcnt_s8(prime);
                    v250.i16[0] = vaddlv_u8(v250);
                    if (v250.u32[0] > 1uLL)
                    {
                      if (v249 >= *(_QWORD *)&prime)
                        v249 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v249 &= *(_QWORD *)&prime - 1;
                    }
                    *(_QWORD *)(v355 + 8 * v249) = v356;
                    for (m = *v248; m; v249 = v255)
                    {
                      v255 = m[1];
                      if (v250.u32[0] > 1uLL)
                      {
                        if (v255 >= *(_QWORD *)&prime)
                          v255 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v255 &= *(_QWORD *)&prime - 1;
                      }
                      if (v255 != v249)
                      {
                        if (!*(_QWORD *)(v355 + 8 * v255))
                        {
                          *(_QWORD *)(v355 + 8 * v255) = v248;
                          goto LABEL_445;
                        }
                        *v248 = (_QWORD *)*m;
                        *m = **(_QWORD **)(v355 + 8 * v255);
                        **(_QWORD **)(v355 + 8 * v255) = m;
                        m = v248;
                      }
                      v255 = v249;
LABEL_445:
                      v248 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v234 = (unint64_t)prime;
                }
                if ((v234 & (v234 - 1)) != 0)
                {
                  if (v233 >= v234)
                    v223 = v233 % v234;
                  else
                    v223 = v233;
                }
                else
                {
                  v223 = (v234 - 1) & v233;
                }
              }
              v256 = *(id ***)(v355 + 8 * v223);
              k = *(id **)v362;
              if (v256)
              {
                **(_QWORD **)v362 = *v256;
                goto LABEL_462;
              }
              **(_QWORD **)v362 = *(_QWORD *)&v356[0];
              *(_QWORD *)&v356[0] = k;
              *(_QWORD *)(v355 + 8 * v223) = v356;
              if (*k)
              {
                v257 = *((_QWORD *)*k + 1);
                if ((v234 & (v234 - 1)) != 0)
                {
                  if (v257 >= v234)
                    v257 %= v234;
                }
                else
                {
                  v257 &= v234 - 1;
                }
                v256 = (id **)(v355 + 8 * v257);
LABEL_462:
                *v256 = k;
              }
              *(_QWORD *)v362 = 0;
              ++*((_QWORD *)&v356[0] + 1);
              std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>>>>::reset[abi:ne180100]((uint64_t)v362);
LABEL_464:
              objc_storeStrong(k + 3, v350.__r_.__value_.__l.__data_);
              realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)k + 4, (uint64_t *)&v350.__r_.__value_.__l.__size_);
              *((_BYTE *)k + 40) = v350.__r_.__value_.__s.__data_[16];
              v258 = __str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
              {
                v259 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&__str, &v347);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__str.__r_.__value_.__l.__size_, &v347);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v258 + 4), (_DWORD *)&v347 + 1);
                v259 = v258 + 8;
              }
              __str.__r_.__value_.__l.__size_ = v259;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v350.__r_.__value_.__l.__size_);

            }
            if ((v314 & 7) != 0)
            {
              v260 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFFFF8);
              do
                v261 = __ldxr(v260);
              while (__stlxr(v261 - 2, v260));
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v347);

          ++v222;
        }
        while (v222 != v221);
        v263 = objc_msgSend(v220, "countByEnumeratingWithState:objects:count:", &v316, __x, 16);
        v221 = v263;
      }
      while (v263);
    }

    if (*((_QWORD *)&v356[0] + 1))
    {
      (*(void (**)(_BYTE *__return_ptr, realityio *, std::string *))(*(_QWORD *)a1 + 40))(v362, a1, &__str);
      v264 = __str.__r_.__value_.__l.__size_;
      v265 = __str.__r_.__value_.__r.__words[0];
      if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
      {
        v266 = 0;
        do
        {
          if (*((_QWORD *)&v355 + 1))
          {
            v267 = (unsigned int *)(v265 + 8 * v266);
            v268 = bswap64(0x9E3779B97F4A7C55* (v267[1]+ ((v267[1]+ (unint64_t)*v267+ (v267[1] + (unint64_t)*v267) * (v267[1] + (unint64_t)*v267)) >> 1)));
            v269 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v355 + 8));
            v269.i16[0] = vaddlv_u8(v269);
            if (v269.u32[0] > 1uLL)
            {
              v270 = v268;
              if (v268 >= *((_QWORD *)&v355 + 1))
                v270 = v268 % *((_QWORD *)&v355 + 1);
            }
            else
            {
              v270 = v268 & (*((_QWORD *)&v355 + 1) - 1);
            }
            v271 = *(_QWORD **)(v355 + 8 * v270);
            if (v271)
            {
              v272 = (_QWORD *)*v271;
              if (v272)
              {
                v273 = *(_QWORD *)v267;
                do
                {
                  v274 = v272[1];
                  if (v274 == v268)
                  {
                    if (v272[2] == v273)
                    {
                      realityio::WrappedRERef<REAsset *>::operator=(v272 + 4, (uint64_t *)(*(_QWORD *)v362 + 8 * v266));
                      v264 = __str.__r_.__value_.__l.__size_;
                      v265 = __str.__r_.__value_.__r.__words[0];
                      break;
                    }
                  }
                  else
                  {
                    if (v269.u32[0] > 1uLL)
                    {
                      if (v274 >= *((_QWORD *)&v355 + 1))
                        v274 %= *((_QWORD *)&v355 + 1);
                    }
                    else
                    {
                      v274 &= *((_QWORD *)&v355 + 1) - 1;
                    }
                    if (v274 != v270)
                      break;
                  }
                  v272 = (_QWORD *)*v272;
                }
                while (v272);
              }
            }
          }
          ++v266;
        }
        while (v266 < (uint64_t)(v264 - v265) >> 3);
      }
      *(_QWORD *)&v313 = v362;
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v313);
    }
    *(_QWORD *)v362 = &__str;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v362);

    v300 = 0;
    objc_msgSend(MEMORY[0x24BE8F630], "archiveMaterial:error:", lpsrc, &v300);
    v275 = objc_claimAutoreleasedReturnValue();
    v276 = (realityio *)v300;
    v64 = v276;
    *(_QWORD *)&v316 = v275;
    if (v276)
    {
      v277 = *(id *)(realityio::logObjects(v276) + 48);
      if (os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v343, "name");
        v278 = (void *)objc_claimAutoreleasedReturnValue();
        -[realityio localizedDescription](v64, "localizedDescription");
        v279 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(__x[0].__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__x[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v278;
        WORD2(__x[0].__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&__x[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v279;
        _os_log_impl(&dword_22FF26000, v277, OS_LOG_TYPE_DEFAULT, "Error attempting to archive '%@': %@", (uint8_t *)__x, 0x16u);

      }
      *a3 = 0;
      a3[1] = 0;
LABEL_516:

      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table((uint64_t)&v355);
LABEL_517:

      goto LABEL_518;
    }
    *a3 = 0;
    a3[1] = 0;
    v353 = 0;
    v280 = operator new(0x70uLL);
    *v280 = &off_24FDE6890;
    v280[1] = &v344;
    v280[2] = a3;
    v280[3] = &v316;
    v280[4] = &v343;
    v280[5] = &lpsrc;
    v280[6] = a1;
    v280[7] = &v336;
    v280[8] = v359;
    v280[9] = &v355;
    v280[10] = &v323;
    v280[11] = (char *)&v323 + 4;
    v280[12] = buf;
    v280[13] = &v338;
    v353 = v280;
    (*(void (**)(realityio *, _BYTE *))(*(_QWORD *)a1 + 8))(a1, v352);
    v281 = v353;
    if (v353 == v352)
    {
      v282 = 4;
      v281 = v352;
    }
    else
    {
      if (!v353)
        goto LABEL_514;
      v282 = 5;
    }
    (*(void (**)(void))(*v281 + 8 * v282))();
LABEL_514:
    if (*a3)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v336 + 16))(__x, v336, v337);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
      (*(void (**)(realityio *, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, String, *a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__x);
    }
    goto LABEL_516;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_518:
  v284 = 384;
  do
  {
    v285 = &buf[v284];
    if ((char)buf[v284 - 1] < 0)
      operator delete(*((void **)v285 - 3));
    if ((char)*(v285 - 25) < 0)
      operator delete(*((void **)v285 - 6));
    v284 -= 48;
  }
  while (v284);

LABEL_525:
  *(_QWORD *)buf = &v340;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

}

void sub_22FF9A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a71;
  void *v71;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a14 + 1);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a14);

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table((uint64_t)&STACK[0x510]);
  std::array<std::pair<std::string,std::string>,8ul>::~array((uint64_t)&STACK[0x260]);

  STACK[0x260] = (unint64_t)&STACK[0x400];
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);

  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v14[16 * v10];
    v18 = &v14[16 * v13];
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v16, a2);
    v17 = (char *)v16 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*(pxrInternal__aapl__pxrReserved__::VtValue **)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_22FF9AC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void realityio::`anonymous namespace'::logErrors(realityio::_anonymous_namespace_ *this, NSError *a2)
{
  int v2;
  realityio::_anonymous_namespace_ *v3;
  void *v4;
  void *v5;
  realityio *v6;
  realityio *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSError *v13;
  uint64_t i;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t v21[128];
  uint8_t buf[4];
  realityio *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v2 = (int)a2;
  v26 = *MEMORY[0x24BDAC8D0];
  v3 = this;
  -[realityio::_anonymous_namespace_ userInfo](v3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("NSMultipleUnderlyingErrorsKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(&stru_24FDFD990, "stringByPaddingToLength:withString:startingAtIndex:", v2, CFSTR(" "), 0);
  v6 = (realityio *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
  {
    v8 = *(id *)(realityio::logObjects(v6) + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      -[realityio::_anonymous_namespace_ localizedDescription](v3, "localizedDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v7;
      v24 = 2112;
      v25 = v15;
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "%@%@ possibly due to the following:", buf, 0x16u);

    }
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = v5;
    v11 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v18;
      v13 = (NSError *)(v2 + 1);
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v18 != v12)
            objc_enumerationMutation(v9);
        }
        v11 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v11);
    }
  }
  else
  {
    v9 = *(id *)(realityio::logObjects(v6) + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      -[realityio::_anonymous_namespace_ localizedDescription](v3, "localizedDescription");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v7;
      v24 = 2112;
      v25 = v16;
      _os_log_error_impl(&dword_22FF26000, v9, OS_LOG_TYPE_ERROR, "%@%@", buf, 0x16u);

    }
  }

}

void sub_22FF9AE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t std::array<std::pair<std::string,std::string>,8ul>::~array(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 384;
  do
  {
    v3 = a1 + v2;
    if (*(char *)(a1 + v2 - 1) < 0)
      operator delete(*(void **)(v3 - 24));
    if (*(char *)(v3 - 25) < 0)
      operator delete(*(void **)(v3 - 48));
    v2 -= 48;
  }
  while (v2);
  return a1;
}

uint64_t realityio::buildMaterialXAsset@<X0>(realityio *this@<X0>, _QWORD *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t (**v9)(realityio::mtlx::NeoDataSource *__hidden);
  uint64_t v10;
  _QWORD *v11[3];
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  void **v17;

  v16[0] = &off_24FDE66E0;
  v16[1] = this;
  v4 = (realityio *)((char *)this + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)this + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  realityio::mtlx::USDDataSource::USDDataSource((realityio::mtlx::USDDataSource *)&v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v12);
  realityio::buildMaterialXAsset((realityio *)v16, (uint64_t (***)(_QWORD))&v9, a2);
  v9 = &off_24FDE1AF0;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)v11, v11[1]);
  v17 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](&v17);
  if ((v15 & 7) != 0)
  {
    v6 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  result = v13;
  if (v13)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  return result;
}

void sub_22FF9B018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  realityio::mtlx::USDDataSource::~USDDataSource((realityio::mtlx::USDDataSource *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::mtlx::MtlxActionPayload>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio4mtlx17MtlxActionPayloadE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::mtlx::MtlxActionPayload>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_QWORD *)(v2 + 288) = 0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 1065353216;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_DWORD *)(v2 + 152) = 1065353216;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_DWORD *)(v2 + 192) = 1065353216;
  *(_QWORD *)(v2 + 200) = objc_opt_new();
  *(_QWORD *)(v2 + 208) = objc_opt_new();
  v3 = objc_opt_new();
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 216) = v3;
  *(_QWORD *)(v2 + 224) = v2 + 232;
  result = 0.0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 240) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 280) = 1065353216;
  *(_WORD *)(v2 + 288) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::mtlx::MtlxActionPayload>;
  return result;
}

void sub_22FF9B204(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v4);

  v7 = *(_QWORD *)(v1 + 8);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v10 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  MEMORY[0x2348B4E1C](v10, 0x10E0C4080940666);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void **v9;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 40);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v9 = (void **)(a1 + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void **v9;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 40);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v9 = (void **)(a1 + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

realityio::mtlx::MtlxActionPayload *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::mtlx::MtlxActionPayload>(realityio::mtlx::MtlxActionPayload *result)
{
  if (result)
  {
    realityio::mtlx::MtlxActionPayload::~MtlxActionPayload(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::MtlxActionPayload(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  id v8;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(a1 + 40, a2 + 40);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(a1 + 80, a2 + 80);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(a1 + 120, a2 + 120);
  std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(a1 + 160, a2 + 160);
  *(_QWORD *)(a1 + 200) = *(id *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(id *)(a2 + 208);
  v8 = *(id *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 216) = v8;
  *(_QWORD *)(a1 + 240) = 0;
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 224), *(const void ***)(a2 + 224), (const void ***)(a2 + 232));
  std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map(a1 + 248, a2 + 248);
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
  return a1;
}

void sub_22FF9B65C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  std::__tree<std::string>::destroy(v6, *(char **)(v1 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v2);

  v8 = *(_QWORD *)(v1 + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
  _Unwind_Resume(a1);
}

void sub_22FF9B708()
{
  JUMPOUT(0x22FF9B6C0);
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_22FF9B76C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_22FF9B9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22FF9BA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  realityio::mtlx::MtlxActionPayload::Connectable::Connectable(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 80) = *(id *)(a2 + 80);
  return a1;
}

void sub_22FF9BAB0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 56));
  return a1;
}

void sub_22FF9BBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a2);
  v4 = *((_QWORD *)v2 + 5);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = *((_QWORD *)v2 + 4);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22FF9BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_22FF9BD30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_22FF9BF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22FF9C010(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  realityio::mtlx::MtlxActionPayload::Connectable::Connectable(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 80) = *(id *)(a2 + 80);
  return a1;
}

void sub_22FF9C074(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::unordered_map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_22FF9C1AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(a1, v6, a3, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)v21, 0);
  return v10;
}

void sub_22FF9C410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__construct_node_hash<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>::pair[abi:ne180100](v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22FF9C484(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::TexcoordID::TexcoordID((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void realityio::mtlx::MtlxActionPayload::~MtlxActionPayload(realityio::mtlx::MtlxActionPayload *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table((uint64_t)this + 248);
  std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table((uint64_t)this + 40);

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::foreachConnected(unsigned int *a1, uint64_t a2)
{
  uint64_t v4[3];
  uint64_t v5;
  _OWORD v6[2];
  int v7;
  char v8;

  v5 = a2;
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  v8 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 16))(v4, *(_QWORD *)a1, a1[2]);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v6, (unsigned int *)v4, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v4);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v6);
}

void sub_22FF9C798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::`anonymous namespace'::ForeachConnectedWorker::traverse(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  int v15;

  v13 = 0u;
  v14 = 0u;
  v15 = 1065353216;
  realityio::mtlx::NeoDataSource::gatherSources(*a2, (uint64_t)a2, (uint64_t)&v13);
  v4 = (uint64_t *)v14;
  if ((_QWORD)v14)
  {
    while (1)
    {
      if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)(a1 + 8), (unsigned int *)v4 + 4))
      {
        if ((*(_BYTE *)(a1 + 48) & 1) == 0)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a2 + 16))(v12, *a2, *((unsigned int *)a2 + 2));
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 8, (unsigned int *)v12, v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
        }
        v5 = *a2;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, (_DWORD *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, (_DWORD *)v4 + 5);
        v12[0] = realityio::mtlx::NeoDataSource::primFromPath(v5, &v10);
        v12[1] = v6;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
        v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, v12, a2) & 1) == 0
        {
          break;
        }
      }
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_9;
    }
    v8 = 0;
  }
  else
  {
LABEL_9:
    v8 = 1;
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v13);
  return v8;
}

void sub_22FF9C928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 - 1);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *(_QWORD *)a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24FDE65D0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24FDE65D0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24FDE65D0;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22FF9CB54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE65D0;
  return std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0,std::allocator<realityio::foreachConnected(realityio::mtlx::NeoShadeMaterial const&,realityio::`anonymous namespace'::ForeachConnectedOptions,std::function<BOOL ()(realityio::mtlx::NeoPrim const&)>)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target_type()
{
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[1],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "");
  return a1;
}

void sub_22FF9CCA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  void **v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 v34;

  v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2);
  v7 = v6;
  if ((uint64_t **)(a1 + 8) != v6)
    return v6[8];
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v8 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, a3 + 1);
  LOBYTE(v34) = 0;
  *((_QWORD *)&v34 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v30);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v31);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, &v32);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, &v33);
  v29 = v34;
  v9 = *v7;
  if (*v7)
  {
    v10 = (void **)v7;
    while (1)
    {
      while (1)
      {
        v11 = v9;
        v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4)))break;
        v9 = (uint64_t *)*v11;
        v10 = (void **)v11;
        if (!*v11)
          goto LABEL_12;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23))break;
      v10 = (void **)(v11 + 1);
      v9 = (uint64_t *)v11[1];
      if (!v9)
        goto LABEL_12;
    }
    v13 = (char *)*v10;
    if (*v10)
      goto LABEL_15;
  }
  else
  {
    v10 = (void **)v7;
    v11 = v7;
  }
LABEL_12:
  v13 = (char *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 8, &v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 9, &v24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 10, &v25);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 11, &v26);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 12, &v27);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v13 + 13, &v28);
  *(_OWORD *)(v13 + 56) = v29;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v11;
  *v10 = v13;
  v14 = **(_QWORD **)a1;
  v15 = (uint64_t *)v13;
  if (v14)
  {
    *(_QWORD *)a1 = v14;
    v15 = (uint64_t *)*v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v7, v15);
  ++*(_QWORD *)(a1 + 16);
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  v17 = (uint64_t **)(a1 + 32);
  v16 = *(uint64_t **)(a1 + 32);
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v16;
        v19 = v16[4];
        if (v19 <= v8)
          break;
        v16 = *v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_23;
      }
      if (v19 >= v8)
        break;
      v16 = v18[1];
      if (!v16)
      {
        v17 = v18 + 1;
        goto LABEL_23;
      }
    }
  }
  else
  {
    v18 = (uint64_t **)(a1 + 32);
LABEL_23:
    v20 = (uint64_t *)operator new(0x30uLL);
    v20[4] = v8;
    v20[5] = (uint64_t)(v13 + 40);
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v18;
    *v17 = v20;
    v21 = **(_QWORD **)(a1 + 24);
    if (v21)
    {
      *(_QWORD *)(a1 + 24) = v21;
      v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v20);
    ++*(_QWORD *)(a1 + 40);
  }
  std::vector<std::set<unsigned long>>::resize((uint64_t *)(a1 + 72), *(_QWORD *)(a1 + 96));
  std::vector<std::set<unsigned long>>::resize((uint64_t *)(a1 + 48), *(_QWORD *)(a1 + 96));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  return (uint64_t *)v8;
}

void sub_22FF9CFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<std::set<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<unsigned int>::destroy(v3 - 24, *(_QWORD **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void **std::vector<std::set<unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::set<unsigned long>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<unsigned long>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_22FF9D2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>,std::reverse_iterator<std::set<unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<unsigned long>>,std::reverse_iterator<std::set<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<unsigned int>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<unsigned long>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::set<unsigned long>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::set<unsigned long>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<unsigned int>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

void std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE6660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE6660;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v18, *(_QWORD *)a2, a2[2]);
  v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
  if ((_QWORD *)(v6 + 8) == v7)
    v8 = (uint64_t **)&realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  else
    v8 = (uint64_t **)(v7 + 8);
  v9 = *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v9 == (uint64_t *)-1)
  {
    v10 = *(_QWORD *)(a1 + 8);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v18, *(_QWORD *)a2, a2[2]);
    (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v17, *(_QWORD *)a2, a2[2]);
    v9 = realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::addNode(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  }
  v11 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a3 + 16))(&v18, *(_QWORD *)a3, a3[2]);
  v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
  if ((_QWORD *)(v11 + 8) == v12)
    v13 = (uint64_t *)&realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  else
    v13 = v12 + 8;
  v14 = *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v14 != -1)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v17 = v9;
    v18 = v14;
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(_QWORD *)(v15 + 48) + 24 * v14), (unint64_t *)&v17, (uint64_t *)&v17);
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(_QWORD *)(v15 + 72) + 24 * (_QWORD)v17), (unint64_t *)&v18, &v18);
  }
  return 1;
}

void sub_22FF9D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0,std::allocator<realityio::`anonymous namespace'::createDependencyGraph(realityio::mtlx::NeoShadeMaterial const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&,realityio::mtlx::NeoPrim const&)>::target_type()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 16));

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::ContextFromSession::engine(realityio::ContextFromSession *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 16) + 16);
}

uint64_t realityio::ContextFromSession::performBlockSyncOnEngineQueue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 48) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48));
}

BOOL realityio::ContextFromSession::addExtraAsset(uint64_t a1, const void **a2, uint64_t a3)
{
  return realityio::ImportSessionImpl::addExtraAsset(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 16), a2, a3);
}

void realityio::ContextFromSession::addOrReplaceExtraAsset(uint64_t a1, __int128 *a2, uint64_t a3)
{
  realityio::ImportSessionImpl::addOrReplaceExtraAsset(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 16), a2, a3);
}

void realityio::ContextFromSession::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 16) + 40);
  if (v2)
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
}

void realityio::ContextFromSession::resolveImageAssets(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  realityio::TextureBuilder *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *v24;
  void **v25;
  uint64_t **v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  void *v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  int v44;
  uint64_t *v45;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  uint64_t *v47;
  _QWORD *v49;
  _QWORD *v50;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[8];
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  std::string v78;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  v4 = a2[1];
  v65 = 0;
  v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0)
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    v7 = v6 >> 3;
    v77 = a3 + 2;
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 2), v6 >> 3);
    v73 = v8;
    v74 = v8;
    v75 = v8;
    v76 = &v8[v9];
    v10 = &v8[v7];
    v11 = 8 * v7;
    do
    {
      v12 = v65;
      *v8 = v65;
      if (v12)
        RERetain();
      ++v8;
      v11 -= 8;
    }
    while (v11);
    v75 = v10;
    std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a3, &v73);
    std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&v73);
  }
  v13 = (realityio::TextureBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v65);
  v14 = realityio::TextureBuilder::kOutputName(v13);
  if (*(char *)(v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
  }
  else
  {
    v15 = *(_OWORD *)v14;
    v78.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v15;
  }
  v47 = a2;
  realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>(*(_QWORD *)(a1 + 8), (uint64_t)&v78, (uint64_t)&v73);
  v71 = 0;
  v72 = 0;
  v70 = &v71;
  if ((_BYTE)v73)
  {
    v16 = v74;
    v49 = v75;
    if (v74 != v75)
    {
      do
      {
        v50 = v16;
        v17 = *(_QWORD **)(*v16 + 16);
        v18 = *v16 + 24;
        if (v17 != (_QWORD *)v18)
        {
          do
          {
            MEMORY[0x2348B26F8](v69, v17 + 4);
            v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(_QWORD **)(a1 + 8) + 8));
            pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v69);
            pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&v65, (uint64_t)&v52);
            MEMORY[0x2348B1DA4](v57, &v52);
            realityio::TextureBuilder::findSourceInput((uint64_t)v57, (uint64_t)v61);
            if ((v60 & 7) != 0)
            {
              v20 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
              do
                v21 = __ldxr(v20);
              while (__stlxr(v21 - 2, v20));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
            if (v58)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
            if ((v56 & 7) != 0)
            {
              v22 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
              do
                v23 = __ldxr(v22);
              while (__stlxr(v23 - 2, v22));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
            if (v54)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v61))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v61, &v52);
              v24 = v71;
              v25 = (void **)&v71;
              v26 = &v71;
              if (!v71)
                goto LABEL_34;
              v25 = (void **)&v71;
              while (1)
              {
                while (1)
                {
                  v26 = (uint64_t **)v24;
                  v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 + 4);
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 + 4)))break;
                  v24 = *v26;
                  v25 = (void **)v26;
                  if (!*v26)
                    goto LABEL_34;
                }
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52))break;
                v25 = (void **)(v26 + 1);
                v24 = v26[1];
                if (!v24)
                  goto LABEL_34;
              }
              v28 = *v25;
              if (!*v25)
              {
LABEL_34:
                v28 = operator new(0x30uLL);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v28 + 8, &v52);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v28 + 9, &v53);
                *((_QWORD *)v28 + 5) = 0;
                *(_QWORD *)v28 = 0;
                *((_QWORD *)v28 + 1) = 0;
                *((_QWORD *)v28 + 2) = v26;
                *v25 = v28;
                v29 = (uint64_t *)v28;
                if (*v70)
                {
                  v70 = (uint64_t **)*v70;
                  v29 = (uint64_t *)*v25;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v71, v29);
                ++v72;
              }
              realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)v28 + 5, v17 + 7);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
            }
            if ((v64 & 7) != 0)
            {
              v30 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
              do
                v31 = __ldxr(v30);
              while (__stlxr(v31 - 2, v30));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
            if (v62)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
            if ((v68 & 7) != 0)
            {
              v32 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
            if (v66)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v69);
            v34 = (_QWORD *)v17[1];
            if (v34)
            {
              do
              {
                v35 = v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v17[2];
                v36 = *v35 == (_QWORD)v17;
                v17 = v35;
              }
              while (!v36);
            }
            v17 = v35;
          }
          while (v35 != (_QWORD *)v18);
        }
        v16 = v50 + 1;
      }
      while (v50 + 1 != v49);
    }
  }
  v37 = *v47;
  if (v47[1] != *v47)
  {
    v38 = 0;
    do
    {
      v39 = v71;
      if (v71)
      {
        v40 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v37 + 8 * v38);
        v41 = &v71;
        do
        {
          v42 = v41;
          v43 = v39 + 4;
          v44 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 4), v40);
          v45 = v39 + 1;
          if (!v44)
          {
            v45 = v39;
            v41 = (uint64_t **)v39;
          }
          v39 = (uint64_t *)*v45;
        }
        while (*v45);
        if (v41 != &v71)
        {
          v46 = v44
              ? (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v42 + 4)
              : (const pxrInternal__aapl__pxrReserved__::SdfPath *)v43;
          if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v40, v46) & 1) == 0)
            realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)(*a3 + 8 * v38), (uint64_t *)v41 + 5);
        }
      }
      ++v38;
      v37 = *v47;
    }
    while (v38 < (v47[1] - *v47) >> 3);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(v71);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v73);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_22FF9DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  uint64_t v33;

  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer(v33 - 160);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a33);
  a33 = a11;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(_DWORD *)a1 == 3)
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::~UsdObject(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  *(_DWORD *)a1 = a2;
  v8 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (_QWORD *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a4 + 1);
  v12 = *a5;
  *(_QWORD *)(a1 + 24) = *a5;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 && (*(_BYTE *)(v15 + 57) & 8) == 0 && *(_QWORD *)(v15 + 16) == *v11)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_22FF9E04C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REAsset *>>>>::destroy(a1[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::TextureAssetData>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::TextureAssetData>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 72);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 48);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<unsigned int>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 296);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

realityio::mtlx::MtlxActionPayload **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Move(realityio::mtlx::MtlxActionPayload **a1, realityio::mtlx::MtlxActionPayload **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

realityio::mtlx::MtlxActionPayload **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_MakeMutable(realityio::mtlx::MtlxActionPayload **result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  realityio::mtlx::MtlxActionPayload *v6;

  v1 = atomic_load((unsigned int *)*result + 74);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    realityio::mtlx::MtlxActionPayload::MtlxActionPayload(v3, *v2);
    v4 = (unsigned int *)(v3 + 296);
    atomic_store(0, (unsigned int *)(v3 + 296));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (realityio::mtlx::MtlxActionPayload *)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_22FF9E3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E0C405B0E7B2ALL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio4mtlx17MtlxActionPayloadE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::mtlx::MtlxActionPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::mtlx::MtlxActionPayload>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy(a2, v2);
}

realityio::mtlx::MtlxActionPayload **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::mtlx::MtlxActionPayload>>::~intrusive_ptr(realityio::mtlx::MtlxActionPayload **a1)
{
  realityio::mtlx::MtlxActionPayload *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)((char *)v2 + 296);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      realityio::mtlx::MtlxActionPayload::~MtlxActionPayload(v2);
      MEMORY[0x2348B4E1C]();
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::mtlx::MtlxActionPayload>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = realityio::mtlx::MtlxActionPayload::MtlxActionPayload(v4, a2);
  v6 = (unsigned int *)(v4 + 296);
  atomic_store(0, (unsigned int *)(v4 + 296));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FF9E598(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E0C405B0E7B2ALL);
  _Unwind_Resume(a1);
}

void std::vector<realityio::TexcoordID>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDE6800;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE6800;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::operator()(uint64_t a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  realityio::mtlx::USDDataSource::getPrim(*(realityio::mtlx::USDDataSource **)(a1 + 8), *(_DWORD *)(a2 + 8), (uint64_t)v9);
  if (realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)v9, v3))
  {
    v4 = *(_QWORD *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v9, &v8);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4, &v8, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return 1;
}

void sub_22FF9E720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a10);
  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a13);
  if (a12)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0,std::allocator<realityio::generateMtlxInputsDescriptorPaths(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0>,BOOL ()(realityio::mtlx::NeoPrim const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD **a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _DWORD *v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v12, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    v8 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, v8 + 1);
    *((_DWORD *)v6 + 9) = 0;
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>((uint64_t)v1 + 28);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::deque<realityio::mtlx::NeoShadeConnectable>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_22FF9ED1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD **a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _DWORD *v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v12, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    v8 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, v8 + 1);
    *((_DWORD *)v6 + 9) = 0;
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v6;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::CycleState>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::CycleState>,0>((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

uint64_t std::deque<realityio::mtlx::NeoShadeConnectable>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage();
    }
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_22FF9F02C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22FF9F350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage()
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  byte_255E545C8 = 0;
  qword_255E545D0 = 0;
  return result;
}

uint64_t std::deque<unsigned long>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = a1[1];
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_22FF9FD8C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<pxrInternal__aapl__pxrReserved__::VtValue>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*,realityio::TexcoordID*,realityio::TexcoordID*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      realityio::TexcoordID::TexcoordID(v4, v6);
      v6 += 48;
      v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22FF9FE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,realityio::TexcoordID*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v5 = *(_QWORD *)(v3 - 40);
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      v3 -= 48;
    }
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,realityio::TexcoordID *,realityio::TexcoordID *,realityio::TexcoordID *,0>(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  const std::string *v6;

  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      v5 = a3;
      *(_BYTE *)a3 = *v4;
      *(_DWORD *)(a3 + 4) = *((_DWORD *)v4 + 1);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a3 + 8), (_QWORD *)v4 + 1);
      v6 = (const std::string *)(v4 + 16);
      std::string::operator=((std::string *)(v5 + 16), v6);
      *(_BYTE *)(v5 + 40) = v6[1].__r_.__value_.__s.__data_[0];
      v4 = &v6[1].__r_.__value_.__s.__data_[8];
      a3 = v5 + 48;
    }
    while (v4 != a2);
    return v5 + 48;
  }
  return a3;
}

uint64_t *std::set<unsigned long>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FF9FFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_24FDE6890;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_24FDE6890;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0::operator()(a1 + 8);
}

uint64_t std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0,std::allocator<realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0>,void ()(void)>::target_type()
{
}

void realityio::buildMaterialXAsset(realityio::MtlxSupportContext &,realityio::mtlx::NeoDataSource &)::$_0::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  unsigned int *v7;
  id v8;
  void *v9;
  id v10;
  unsigned int *v11;
  unsigned int v12;
  id v13;
  id v14;
  char *v15;
  void *v16;
  uint64_t *i;
  void *v18;
  _BYTE *v19;
  id v20;
  NSObject *v21;
  uint64_t String;
  uint64_t v23;
  __CFString *v24;
  NSObject *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  realityio *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  realityio *v40;
  NSObject *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id obj;
  uint64_t v46;
  uint64_t v47;
  uint64_t AssetHandle;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _OWORD v52[4];
  char v53;
  std::string v54;
  void *v55[2];
  char v56;
  char v57[8];
  uint64_t v58;
  _BYTE __p[22];
  char v60;
  __int128 buf;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v44 = a1;
  objc_msgSend(**(id **)(a1 + 24), "name");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v3, "UTF8String");
  *(_QWORD *)__p = REAssetManagerShaderGraphMemoryAssetCreate();
  realityio::WrappedRERef<REAsset *>::operator=((_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t *)__p);

  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
  {
    RERelease();
    v4 = **(id **)(a1 + 32);
    v5 = objc_msgSend(v4, "lightingModel");
    if (v5 == 1)
    {
      objc_msgSend(v4, "blending");
    }
    else if (v5 == 2 || v5 == 3)
    {
      objc_msgSend(v4, "blending");
    }

    AssetHandle = REAssetManagerCreateAssetHandle();
    if (AssetHandle)
      RERetain();
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), &AssetHandle);
    v47 = REMaterialAssetBuilderCreate();
    if (v47)
      RERetain();
    RERelease();
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 48) + 16))(__p, **(_QWORD **)(a1 + 48), *(unsigned int *)(*(_QWORD *)(a1 + 48) + 8));
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    REMaterialAssetBuilderSetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    if (objc_msgSend(**(id **)(a1 + 32), "hasSurfaceShaderUniforms"))
      REMaterialAssetBuilderSetFunctionConstant();
    if (objc_msgSend(**(id **)(a1 + 32), "hasGeometryModifierUniforms"))
      REMaterialAssetBuilderSetFunctionConstant();
    if (objc_msgSend(**(id **)(a1 + 32), "hasPremultipliedAlpha"))
      REMaterialAssetBuilderSetFunctionConstant();
    if (objc_msgSend(**(id **)(a1 + 32), "hasBackgroundBlur"))
      REMaterialAssetBuilderSetNeedsVCABlur();
    if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(**(id **)(a1 + 32), "matchUnlitColor"))
      REMaterialAssetBuilderSetFunctionConstant();
    v7 = *(unsigned int **)(a1 + 48);
    v8 = **(id **)(a1 + 56);
    memset(v52, 0, sizeof(v52));
    obj = v8;
    if (objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v52, v55, 16))
    {
      v9 = (void *)**((_QWORD **)&v52[0] + 1);
      objc_msgSend(**((id **)&v52[0] + 1), "name");
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MEMORY[0x2348B274C](__p, objc_msgSend(v10, "UTF8String"));
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)v7 + 144))(&v49, *(_QWORD *)v7, v7[2], __p);
      if ((__p[0] & 7) != 0)
      {
        v11 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }

      v13 = v9;
      v58 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t *, char *))(*(_QWORD *)v49 + 56))(v49, v50, &v51, v57);
      std::string::basic_string[abi:ne180100]<0>(&v54, "$1.");
      objc_msgSend(v13, "name");
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::append(&v54, (const std::string::value_type *)objc_msgSend(v14, "UTF8String"));

      v53 = 1;
      v15 = (char *)&loc_22FFA06C8 + 4 * word_230205DE8[objc_msgSend(v13, "type") - 1];
      __asm { BR              X9 }
    }

    REMaterialCreateDefaultSamplerDescriptor();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    REMaterialAssetBuilderSetSampler();

    v46 = v47;
    if (v47)
      RERetain();
    for (i = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 16); i; i = (uint64_t *)*i)
    {
      v18 = (void *)i[3];
      if (v18)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v18, "UTF8String"));
        if (v60 >= 0)
          v19 = __p;
        else
          v19 = *(_BYTE **)__p;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("$1.%s"), v19);
        v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(v55, (char *)objc_msgSend(v20, "UTF8String"));

        if (*((_BYTE *)i + 40) && i[4])
        {
          REMaterialAssetBuilderSetTextureFromAsset();
          REMaterialAssetBuilderBindTextureToSampler();
        }
        else
        {
          REMaterialAssetBuilderSetTextureFromBinding();
        }
        if (v56 < 0)
          operator delete(v55[0]);
        if (v60 < 0)
          operator delete(*(void **)__p);
      }
      else
      {
        v21 = *(id *)(realityio::logObjects(0) + 48);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2));
          if (*(char *)(String + 23) >= 0)
            v23 = String;
          else
            v23 = *(_QWORD *)String;
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v23;
          _os_log_impl(&dword_22FF26000, v21, OS_LOG_TYPE_DEFAULT, "Error: ShaderGraphKey not found for %s.", __p, 0xCu);
        }

      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v46);
    REMaterialAssetBuilderSetMaterialDefinition();
    v55[0] = (void *)0x200000001;
    *(_QWORD *)&buf = REAssetManagerCreateAssetHandle();
    if ((_QWORD)buf)
      RERetain();
    RERelease();
    objc_msgSend(**(id **)(v44 + 32), "surfaceShaderFunctionName");
    v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      v25 = *(id *)(realityio::logObjects(0) + 48);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_22FF26000, v25, OS_LOG_TYPE_DEFAULT, "The surface shader hasn't been built.", __p, 2u);
      }

      v24 = CFSTR("surfaceShader");
    }
    v26 = objc_retainAutorelease(v24);
    -[__CFString UTF8String](v26, "UTF8String");
    REMaterialAssetBuilderAddFunctionLink();
    objc_msgSend(**(id **)(v44 + 32), "geometryModifierFunctionName");
    v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v27)
      v27 = CFSTR("geometryModifier");
    *(_QWORD *)&v52[0] = 0x800000004;
    v28 = objc_retainAutorelease(v27);
    -[__CFString UTF8String](v28, "UTF8String");
    v29 = (realityio *)REMaterialAssetBuilderAddFunctionLink();
    if (**(int **)(v44 + 72) >= 1)
      v29 = (realityio *)REMaterialAssetBuilderSetFunctionConstant();
    if (**(int **)(v44 + 80) <= 1 && **(int **)(v44 + 72) <= 0)
    {
      v30 = *(_QWORD *)(v44 + 88);
      if (*(char *)(v30 + 95) < 0)
      {
        if (!*(_QWORD *)(v30 + 80))
          goto LABEL_66;
      }
      else if (!*(_BYTE *)(v30 + 95))
      {
        goto LABEL_66;
      }
    }
    v29 = (realityio *)REMaterialAssetBuilderSetFunctionConstant();
    v30 = *(_QWORD *)(v44 + 88);
LABEL_66:
    v31 = 0;
    while (1)
    {
      v32 = (uint64_t *)(v30 + v31);
      if (*(char *)(v30 + v31 + 47) < 0)
      {
        if (v32[4])
        {
LABEL_71:
          v33 = *(id *)(realityio::logObjects(v29) + 48);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            v34 = v30 + v31;
            if (*(char *)(v30 + v31 + 23) < 0)
              v34 = *v32;
            v35 = v32 + 3;
            if (*((char *)v32 + 47) < 0)
              v35 = (uint64_t *)v32[3];
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = v34;
            *(_WORD *)&__p[12] = 2080;
            *(_QWORD *)&__p[14] = v35;
            _os_log_impl(&dword_22FF26000, v33, OS_LOG_TYPE_INFO, "key: %s, binding: %s", __p, 0x16u);
          }

          v29 = (realityio *)REMaterialAssetBuilderSetBufferFromBinding();
        }
      }
      else if (*(_BYTE *)(v30 + v31 + 47))
      {
        goto LABEL_71;
      }
      v31 += 48;
      if (v31 == 384)
      {
        v36 = *(_QWORD *)(v44 + 96);
        if (!*(_BYTE *)(v36 + 8) && !*(_BYTE *)(v36 + 9))
          REMaterialAssetBuilderSetMTLCullMode();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        v37 = REAssetManagerMaterialAssetBuilderBuild();
        *(_QWORD *)__p = v37;
        if (v37)
          RERetain();
        v38 = *(uint64_t **)(v44 + 8);
        v39 = *v38;
        if (*v38 != v37)
        {
          *v38 = v37;
          *(_QWORD *)__p = v39;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(__p);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v44 + 40) + 32))(*(_QWORD *)(v44 + 40), *(_QWORD *)(v44 + 8));
        v40 = **(realityio ***)(v44 + 8);
        if (v40)
          v40 = (realityio *)RERelease();
        v41 = *(id *)(realityio::logObjects(v40) + 48);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__p = 0;
          _os_log_impl(&dword_22FF26000, v41, OS_LOG_TYPE_INFO, "Done.", __p, 2u);
        }

        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf);
        realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v47);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&AssetHandle);
        return;
      }
    }
  }
  v6 = *(id *)(realityio::logObjects(0) + 48);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(**(id **)(a1 + 24), "name");
    v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v43 = objc_msgSend(v42, "UTF8String");
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v43;
    _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Error creating ShaderGraph asset for node \"%s\"", __p, 0xCu);

  }
}

void sub_22FFA207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v43 - 192));
  realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&a42);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a43);
  _Unwind_Resume(a1);
}

double _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec3fEDv3_fEET0_RNS2_7VtValueERb(pxrInternal__aapl__pxrReserved__::VtValue *a1, _BYTE *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  double result;
  __int128 v13;
  double v14[3];
  uint64_t v15;
  int v16;
  _BYTE v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1))
  {
    v4 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    v15 = *(_QWORD *)v4;
    v16 = *(_DWORD *)(v4 + 8);
    *a2 = 0;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    {
      *a2 = 1;
      return 0.0;
    }
    v7 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    v8 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1);
    v15 = *(_QWORD *)v8;
    v16 = *(_DWORD *)(v8 + 8);
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  }
  v9 = 0;
  v10 = 0uLL;
  do
  {
    v11 = *((_DWORD *)&v15 + v9);
    *(_OWORD *)v14 = v10;
    *(_DWORD *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) = v11;
    result = v14[0];
    v13 = *(_OWORD *)v14;
    HIDWORD(v13) = HIDWORD(v10);
    ++v9;
    v10 = v13;
  }
  while (v9 != 3);
  return result;
}

void sub_22FFA2484(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double _ZN9realityio12_GLOBAL__N_112toSimdVectorIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fEET0_RNS2_7VtValueERb(pxrInternal__aapl__pxrReserved__::VtValue *a1, _BYTE *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v11;
  __int128 v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1))
  {
    v12 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    *a2 = 0;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    {
      *a2 = 1;
      *(_QWORD *)&v8 = 0;
      return *(double *)&v8;
    }
    v6 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    v12 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1);
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  }
  v7 = 0;
  v8 = 0uLL;
  do
  {
    v9 = *(_DWORD *)&v13[4 * v7 - 8];
    v11 = v8;
    *(_DWORD *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3))) = v9;
    v8 = v11;
    ++v7;
  }
  while (v7 != 4);
  return *(double *)&v8;
}

void sub_22FFA258C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB770], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB798]);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB798], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<int>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<int>;
  a1[2] = MEMORY[0x24BEDB798];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<int>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7A0]);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7A0], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned int>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned int>;
  a1[2] = MEMORY[0x24BEDB7A0];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned int>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 63)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 62)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 61)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 78)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 75)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 77)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 74)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeleton_pose_definition");
    realityio::SkeletonPoseDefinitionBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SkeletonPoseDefinitionBuilder::kOutputName(void)::kOutputName;
}

void sub_22FFA3554(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255E545E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E545E0))
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeleton_animation_asset");
    _MergedGlobals_6 = (uint64_t)v3;
    __cxa_guard_release(&qword_255E545E0);
  }
  return _MergedGlobals_6;
}

void sub_22FFA3608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E545E0);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(realityio::SkeletonPoseDefinitionBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeleton_animation_library_asset");
    realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(void)::kOutputName;
}

void sub_22FFA36BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SkeletonPoseDefinitionBuilder *realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(realityio::SkeletonPoseDefinitionBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "SkeletonPoseDefinitionBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletonPoseDefinitionBuilderIdentifier);
  realityio::generateSkeletonDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE6A18;
  v21 = v20;
  v18[0] = &off_24FDE6C48;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE69A0;
  *((_QWORD *)this + 35) = 0;
  return this;
}

void sub_22FFA3888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletonPoseDefinitionBuilder::run(realityio::SkeletonPoseDefinitionBuilder *this, realityio::Inputs *a2)
{
  NSObject *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *PrimAtPath;
  uint64_t *v7;
  _QWORD *v8;
  realityio::SkeletalAnimationAssetBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  const char **v14;
  uint64_t i;
  unint64_t v16;
  int v17;
  const char *v18;
  unint64_t v19;
  realityio *NumElements;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  realityio *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  realityio *v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  unsigned int *v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  realityio::SkeletonPoseDefinitionBuilder *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 *v55;
  realityio::SkeletonPoseDefinitionBuilder *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 *v63;
  _QWORD *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 *v75;
  _QWORD *v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t result;
  unsigned int *v86;
  unsigned int v87;
  uint64_t Text;
  uint64_t v89;
  __int128 v90;
  _QWORD v91[3];
  _BYTE v92[8];
  uint64_t v93;
  void *v94;
  char v95;
  char v96[8];
  __int128 v97;
  __int128 __p;
  uint64_t v99;
  _BYTE v100[16];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108[5];
  uint8_t buf[8];
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE v113[8];
  std::__shared_weak_count *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[8];
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[8];
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)(realityio::logObjects(this) + 24);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v4, OS_LOG_TYPE_INFO, "Creating skeleton pose definition", buf, 2u);
  }

  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, (realityio::Inputs *)((char *)a2 + 32));
  v7 = (uint64_t *)((char *)this + 280);
  v8 = (_QWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v8)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v8);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(PrimAtPath);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
  {
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v100, 2030, (uint64_t)this);
    std::string::basic_string[abi:ne180100]<0>(buf, "SkeletalAnimationViaRelationship");
    realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>((uint64_t)v96, (uint64_t)a2, (uint64_t)buf);
    if (SHIBYTE(v110) < 0)
      operator delete(*(void **)buf);
    if (!v96[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v128, "SkeletalAnimationViaChildren");
      realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>((uint64_t)buf, (uint64_t)a2, (uint64_t)&v128);
      if (buf[0])
      {
        if (SHIBYTE(v99) < 0)
          operator delete((void *)__p);
        v96[0] = 1;
        *(_QWORD *)&v97 = v110;
      }
      else
      {
        v97 = v110;
        if (SHIBYTE(v99) < 0)
          operator delete((void *)__p);
        __p = v111;
        v99 = v112;
      }
      if ((v129[7] & 0x80000000) != 0)
        operator delete((void *)v128);
    }
    v10 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v9);
    realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>((uint64_t)a2, v10, (uint64_t)v92);
    if (v92[0])
      v11 = v93;
    else
      v11 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v91[0] = MEMORY[0x24BEE9D50] + 16;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    MEMORY[0x2348B1C0C](v113);
    pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v113, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v91);
    if (!*(_QWORD *)buf)
    {
      v36 = 0;
LABEL_55:
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v111 + 8);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((unsigned int **)&v110);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((unsigned int **)buf);
      v43 = v114;
      if (v114)
      {
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      if (v36)
      {
        if (v96[0])
          v46 = v97;
        else
          v46 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v91, &v128);
        v47 = operator new();
        *(_QWORD *)v47 = v36;
        RERetain();
        *(_QWORD *)(v47 + 8) = v46;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v47 + 16), &v128);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v47 + 20), (_DWORD *)&v128 + 1);
        *(_QWORD *)buf = 0;
        v48 = (_QWORD *)*v7;
        *v7 = v47;
        if (v48)
        {
          std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v48);
          v49 = *(_QWORD **)buf;
          *(_QWORD *)buf = 0;
          if (v49)
            std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)buf, v49);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v128);
        v50 = (realityio::SkeletonPoseDefinitionBuilder *)RERelease();
        v52 = *((_QWORD *)this + 2);
        v51 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        *(_QWORD *)buf = v52;
        *(_QWORD *)&v110 = v51;
        if (v51)
        {
          v53 = (unint64_t *)&v51->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        v55 = (__int128 *)realityio::SkeletonPoseDefinitionBuilder::kOutputName(v50);
        *(_QWORD *)&v128 = *v7;
        realityio::Outputs::storeValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v52, v55, &v128);
        if (v51)
        {
          v57 = (unint64_t *)&v51->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (v96[0])
        {
          v60 = *((_QWORD *)this + 2);
          v59 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
          *(_QWORD *)&v128 = v60;
          *((_QWORD *)&v128 + 1) = v59;
          if (v59)
          {
            v61 = (unint64_t *)&v59->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          v63 = (__int128 *)realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v56);
          std::mutex::lock((std::mutex *)(v60 + 64));
          v64 = operator new(0x28uLL);
          v64[1] = 0;
          v64[2] = 0;
          *v64 = &off_24FDE20E0;
          v64[3] = &off_24FDE2130;
          v64[4] = v97;
          *(_QWORD *)buf = v64 + 3;
          *(_QWORD *)&v110 = v64;
          v108[0] = v63;
          v65 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v60 + 40), (const void **)v63, (uint64_t)&std::piecewise_construct, v108);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v65 + 7), (__int128 *)buf);
          v66 = (std::__shared_weak_count *)v110;
          if ((_QWORD)v110)
          {
            v67 = (unint64_t *)(v110 + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v60, (unsigned __int8 *)v63, (uint64_t)v63);
          std::mutex::unlock((std::mutex *)(v60 + 64));
          if (v59)
          {
            v69 = (unint64_t *)&v59->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
        if (v11)
        {
          v72 = *((_QWORD *)this + 2);
          v71 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
          *(_QWORD *)&v128 = v72;
          *((_QWORD *)&v128 + 1) = v71;
          if (v71)
          {
            v73 = (unint64_t *)&v71->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v75 = (__int128 *)realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v56);
          std::mutex::lock((std::mutex *)(v72 + 64));
          v76 = operator new(0x28uLL);
          v76[1] = 0;
          v76[2] = 0;
          v76[3] = &off_24FDE20A0;
          *v76 = &off_24FDE2050;
          v76[4] = v11;
          *(_QWORD *)buf = v76 + 3;
          *(_QWORD *)&v110 = v76;
          v108[0] = v75;
          v77 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v72 + 40), (const void **)v75, (uint64_t)&std::piecewise_construct, v108);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v77 + 7), (__int128 *)buf);
          v78 = (std::__shared_weak_count *)v110;
          if ((_QWORD)v110)
          {
            v79 = (unint64_t *)(v110 + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v72, (unsigned __int8 *)v75, (uint64_t)v75);
          std::mutex::unlock((std::mutex *)(v72 + 64));
          if (v71)
          {
            v81 = (unint64_t *)&v71->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
      }
      MEMORY[0x2348B1F9C](v91);
      if (!v92[0] && v95 < 0)
        operator delete(v94);
      if (!v96[0] && SHIBYTE(v99) < 0)
        operator delete((void *)__p);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v100);
      goto LABEL_116;
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)buf);
    v12 = v108[0];
    std::vector<char const*>::resize((uint64_t)&v121, (unint64_t)v108[0]);
    if (v108[0])
    {
      v13 = v108[4];
      v14 = (const char **)v121;
      for (i = 8 * (uint64_t)v108[0]; i; i -= 8)
      {
        v16 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          v17 = *(char *)(v16 + 39);
          if (v17 < 0)
          {
            v19 = v16 + 16;
            v18 = *(const char **)(v16 + 16);
            if (*(_QWORD *)(v19 + 8) > 1uLL)
            {
LABEL_30:
              if (*v18 == 47)
                ++v18;
            }
          }
          else
          {
            v18 = (const char *)(v16 + 16);
            if (v17 >= 2u)
              goto LABEL_30;
          }
        }
        else
        {
          v18 = "";
        }
        *v14++ = v18;
        v13 = (__int128 *)((char *)v13 + 8);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v91);
    v125 = 0;
    NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    if (!(_DWORD)NumElements
      || (NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v124),
          NumElements != (realityio *)v12)
      || (NumElements = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v124),
          !(_DWORD)NumElements))
    {
      v40 = *(id *)(realityio::logObjects(NumElements) + 24);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v91, &v127);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v127);
        LODWORD(v128) = 136315138;
        *(_QWORD *)((char *)&v128 + 4) = Text;
        _os_log_error_impl(&dword_22FF26000, v40, OS_LOG_TYPE_ERROR, "Skeleton at path (%s) does not have any rest transforms property.\n", (uint8_t *)&v128, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
      }

      v36 = 0;
      goto LABEL_48;
    }
    std::vector<RESRT>::resize((uint64_t)&v118, (unint64_t)v12);
    v21 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v124);
    if (*v21)
    {
      v22 = v21[4];
      v23 = v118;
      v24 = *v21 << 7;
      __asm { FMOV            V0.4S, #1.0 }
      v90 = _Q0;
      do
      {
        MEMORY[0x2348B199C](&v128, v22);
        v127 = xmmword_230204CF0;
        v128 = v90;
        v126 = 0uLL;
        REDecomposeMatrix();
        v31 = v127;
        v30 = v128;
        v32 = v126;
        v23[2] = DWORD2(v128);
        *(_QWORD *)v23 = v30;
        *((_OWORD *)v23 + 1) = v31;
        v23[10] = DWORD2(v32);
        *((_QWORD *)v23 + 4) = v32;
        v22 += 128;
        v23 += 12;
        v24 -= 128;
      }
      while (v24);
    }
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v91);
    *((_QWORD *)&v127 + 1) = 0;
    v33 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    if ((_DWORD)v33
      && (v33 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)&v127),
          v33 == (realityio *)v12)
      && (v33 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v127),
          (_DWORD)v33))
    {
      std::vector<simd_float4x4>::resize((uint64_t)&v115, (unint64_t)v12);
      v34 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v127);
      v35 = RESkeletonDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v91, &v126);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v126);
      RESkeletonDefinitionSetName();
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v126);
      RESkeletonDefinitionSetJointNames();
      RESkeletonDefinitionSetLocalRestPoses();
      RESkeletonDefinitionSetInverseBindPoses();
      v36 = MEMORY[0x2348B12DC](v35, 0);
      v37 = (realityio *)RERelease();
      if (v36)
      {
LABEL_124:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v127);
        if ((v130 & 7) != 0)
        {
          v86 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
          do
            v87 = __ldxr(v86);
          while (__stlxr(v87 - 2, v86));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v129);
        if (*((_QWORD *)&v128 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v128 + 1));
LABEL_48:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v124);
        if ((v107 & 7) != 0)
        {
          v41 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
        if (v105)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v105);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v108);
        goto LABEL_55;
      }
      v38 = *(id *)(realityio::logObjects(v37) + 24);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v91, &v104);
        v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
        LODWORD(v126) = 136315138;
        *(_QWORD *)((char *)&v126 + 4) = v39;
        _os_log_impl(&dword_22FF26000, v38, OS_LOG_TYPE_DEFAULT, "Could not create skeleton geom from definition for (Prim \"%s\")", (uint8_t *)&v126, 0xCu);
LABEL_130:
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
      }
    }
    else
    {
      v38 = *(id *)(realityio::logObjects(v33) + 24);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v91, &v104);
        v89 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
        LODWORD(v126) = 136315138;
        *(_QWORD *)((char *)&v126 + 4) = v89;
        _os_log_error_impl(&dword_22FF26000, v38, OS_LOG_TYPE_ERROR, "Skeleton at path (%s) does not have any bind transforms property.\n", (uint8_t *)&v126, 0xCu);
        goto LABEL_130;
      }
    }

    v36 = 0;
    goto LABEL_124;
  }
LABEL_116:
  if ((v103 & 7) != 0)
  {
    v83 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
  result = v101;
  if (v101)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
  return result;
}

void sub_22FFA4478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *__p;
  uint64_t a66;
  void *v66;
  uint64_t v67;
  void *v69;
  void *v70;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a41);

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 176));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v67 - 160));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 208));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a43);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a47);
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery((unsigned int **)&a52);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  if (__p)
  {
    a66 = (uint64_t)__p;
    operator delete(__p);
  }
  v69 = *(void **)(v67 - 256);
  if (v69)
  {
    *(_QWORD *)(v67 - 248) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(v67 - 232);
  if (v70)
  {
    *(_QWORD *)(v67 - 224) = v70;
    operator delete(v70);
  }
  MEMORY[0x2348B1F9C](&a14);
  if (!a17 && a25 < 0)
    operator delete(a20);
  if (!a26 && a34 < 0)
    operator delete(a29);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a35);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a37);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE6CC8;
  v7[3] = &off_24FDE6D18;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_22FFA4818(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::SkeletonPoseDefinitionBuilder::clear(realityio::SkeletonPoseDefinitionBuilder *this, realityio::Inputs *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  realityio::SkeletonPoseDefinitionBuilder *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const void **v16;
  realityio::SkeletonPoseDefinitionBuilder *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::mutex *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  realityio::SkeletonPoseDefinitionBuilder *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  const void **v32;
  realityio::SkeletonPoseDefinitionBuilder *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::mutex *v37;
  unint64_t *v38;
  unint64_t v39;
  const void **v40;
  realityio::SkeletonPoseDefinitionBuilder *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const void **v48;
  unint64_t *v49;
  unint64_t v50;
  std::mutex *v51;
  std::__shared_weak_count *v52;
  void *__p;
  char v54;
  std::mutex *v55;
  std::__shared_weak_count *v56;
  void *v57;
  char v58;
  _BYTE v59[24];
  void *v60;
  char v61;

  v3 = (_QWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v3);
  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v55 = v5;
  v56 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v5, v8, (uint64_t)v59);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v59[0])
    goto LABEL_67;
  v13 = *((_QWORD *)this + 2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v55 = (std::mutex *)v13;
  v56 = v12;
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kOutputName(v9);
  std::mutex::lock((std::mutex *)(v13 + 64));
  if (v13 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v13 + 40, v16))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v13 + 40), v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v13, (unsigned __int8 *)v16);
  std::mutex::unlock((std::mutex *)(v13 + 64));
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = (std::mutex *)*((_QWORD *)this + 2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v51 = v21;
  v52 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v17);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(v21, v24, (uint64_t)&v55);
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!(_BYTE)v55)
    goto LABEL_64;
  v29 = *((_QWORD *)this + 2);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v51 = (std::mutex *)v29;
  v52 = v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName(v25);
  std::mutex::lock((std::mutex *)(v29 + 64));
  if (v29 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v29 + 40, v32))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v29 + 40), v32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v29, (unsigned __int8 *)v32);
  std::mutex::unlock((std::mutex *)(v29 + 64));
  if (v28)
  {
    v34 = (unint64_t *)&v28->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v37 = (std::mutex *)*((_QWORD *)this + 2);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v33);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v37, v40, (uint64_t)&v51);
  if (v36)
  {
    v42 = (unint64_t *)&v36->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (!(_BYTE)v51)
    goto LABEL_61;
  v45 = *((_QWORD *)this + 2);
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (const void **)realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v41);
  std::mutex::lock((std::mutex *)(v45 + 64));
  if (v45 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v45 + 40, v48))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v45 + 40), v48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v45, (unsigned __int8 *)v48);
  std::mutex::unlock((std::mutex *)(v45 + 64));
  if (v44)
  {
    v49 = (unint64_t *)&v44->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (!(_BYTE)v51)
  {
LABEL_61:
    if (v54 < 0)
      operator delete(__p);
  }
  if (!(_BYTE)v55)
  {
LABEL_64:
    if (v58 < 0)
      operator delete(v57);
  }
  if (!v59[0])
  {
LABEL_67:
    if (v61 < 0)
      operator delete(v60);
  }
}

void sub_22FFA4C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::mutex *v28;
  uint64_t v29;

  std::mutex::unlock(v28);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (!a11 && a19 < 0)
    operator delete(__p);
  if (!a20 && a28 < 0)
    operator delete(a23);
  if (!*(_BYTE *)(v29 - 96) && *(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FFA4E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::SkeletonPoseDefinitionBuilder::~SkeletonPoseDefinitionBuilder(realityio::SkeletonPoseDefinitionBuilder *this)
{
  _QWORD *v2;
  realityio::SkeletonPoseDefinitionBuilder *v3;
  uint64_t v4;
  realityio::SkeletonPoseDefinitionBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDE69A0;
  v2 = (_QWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v2);
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::SkeletonPoseDefinitionBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::SkeletonPoseDefinitionBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

{
  _QWORD *v2;
  realityio::SkeletonPoseDefinitionBuilder *v3;
  uint64_t v4;
  realityio::SkeletonPoseDefinitionBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDE69A0;
  v2 = (_QWORD *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)this + 280, v2);
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::SkeletonPoseDefinitionBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::SkeletonPoseDefinitionBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::SkeletonPoseDefinitionBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::vector<simd_float4x4>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 6);
  }
  else
  {
    std::vector<simd_float4x4>::__append((void **)a1, a2 - v2);
  }
}

double std::transform[abi:ne180100]<pxrInternal__aapl__pxrReserved__::GfMatrix4d const*,std::__wrap_iter<simd_float4x4 *>,`anonymous namespace'::createGeomSkeletonFromUsdSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton const&)::$_2>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];
  _OWORD v13[8];
  uint64_t v14;
  uint64_t v15;

  if (this != a2)
  {
    v14 = v3;
    v15 = v4;
    v7 = this;
    do
    {
      memset(v13, 0, sizeof(v13));
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v7, 0, 0.0);
      MEMORY[0x2348B199C](v12, v13);
      result = *(double *)v12;
      v9 = v12[1];
      v10 = v12[2];
      v11 = v12[3];
      *a3 = v12[0];
      a3[1] = v9;
      a3[2] = v10;
      a3[3] = v11;
      v7 = (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v7 + 128);
      a3 += 4;
    }
    while (v7 != a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::~UsdSkelSkeletonQuery(unsigned int **this)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)(this + 4));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(this + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(this);
}

void std::vector<simd_float4x4>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[64 * v10];
    v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    v16 = &v14[64 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 4);
        v20 = *((_OWORD *)v17 - 3);
        v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr(unsigned int **a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, *a1);
  return a1;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6A18;
  return result;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6A18;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t *v4;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v18;
  unsigned int **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  realityio::SkeletalAnimationAssetBuilder *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v35;
  realityio::SkeletalAnimationAssetBuilder *v36;
  void *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v40;
  uint64_t *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t i;
  realityio::SkeletalAnimationAssetBuilder *v56;
  uint64_t v57;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  void **v79;
  char v80;
  void *__p;
  std::__shared_weak_count *v82;
  void *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v1 = (char *)operator new(0x40uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = &off_24FDE1E30;
  *(_OWORD *)(v1 + 24) = 0u;
  v2 = (uint64_t)(v1 + 24);
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v4 = (unint64_t *)MEMORY[0x24BEE8040];
  v5 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
  if (!v5)
    v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  v6 = (std::__shared_weak_count *)operator new(0x50uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6A88;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SkeletalAnimationViaRelationship");
  v8 = *((_QWORD *)v5 + 17);
  v72 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v72 = (unint64_t)v9;
  }
  realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(&v6[1].__vftable, (uint64_t)&__p, (uint64_t *)Data + 25, (uint64_t *)&v72, 1);
  if ((v72 & 7) != 0)
  {
    v11 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if (SHIBYTE(v83) < 0)
    operator delete(__p);
  v77 = v6 + 1;
  v78 = v6;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  realityio::InputsDescriptor::addInputDescriptor(v2, &v77);
  v14 = v78;
  if (v78)
  {
    v15 = (unint64_t *)&v78->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v18 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v18)
    v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v19 = (unsigned int **)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v19)
    v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  v20 = (std::__shared_weak_count *)operator new(0x50uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6B18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SkeletalAnimationViaChildren");
  v22 = (unint64_t)*v19;
  v72 = v22;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      v72 = (unint64_t)v23;
  }
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v20[1].__vftable, (uint64_t)&__p, (uint64_t *)v18 + 25, (uint64_t *)&v72, 1);
  if ((v72 & 7) != 0)
  {
    v25 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  if (SHIBYTE(v83) < 0)
    operator delete(__p);
  v75 = v20 + 1;
  v76 = v20;
  do
    v27 = __ldxr(v21);
  while (__stxr(v27 + 1, v21));
  v28 = (realityio::SkeletalAnimationAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v2, &v75);
  v29 = v76;
  if (v76)
  {
    v30 = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  do
    v32 = __ldaxr(v21);
  while (__stlxr(v32 - 1, v21));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v33 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v28);
  v34 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v34)
    v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v35 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v4);
  if (!v35)
    v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  LODWORD(v72) = 1;
  v36 = (realityio::SkeletalAnimationAssetBuilder *)std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v33, (uint64_t *)v34 + 26, (uint64_t *)v35 + 17, (int *)&v72, &__p);
  v37 = __p;
  v38 = v82;
  v39 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v36);
  v40 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v40)
    v40 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v41 = (uint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v41)
    v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  LODWORD(v72) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v39, (uint64_t *)v40 + 26, v41, (int *)&v72, &__p);
  v42 = __p;
  v43 = v82;
  __p = v37;
  v82 = v38;
  if (v38)
  {
    v44 = (unint64_t *)&v38->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v83 = v42;
  v84 = v43;
  if (v43)
  {
    v46 = (unint64_t *)&v43->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v79 = (void **)&v72;
  v80 = 0;
  v48 = operator new(0x20uLL);
  v49 = 0;
  v50 = 0;
  v72 = (unint64_t)v48;
  v73 = v48;
  v74 = v48 + 4;
  do
  {
    v51 = v49;
    v52 = *((_OWORD *)&__p + v50);
    *(_OWORD *)v48 = v52;
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v48 += 2;
    v49 = 1;
    v50 = 1;
  }
  while ((v51 & 1) == 0);
  v73 = v48;
  for (i = 16; i != -16; i -= 16)
    v56 = (realityio::SkeletalAnimationAssetBuilder *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&__p + i);
  v57 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v56);
  v58 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v58)
    v58 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v79) = 1;
  std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>(v57, (uint64_t *)v58 + 26, (int *)&v79, (_QWORD **)&v72, &__p);
  v59 = v82;
  if (v82)
  {
    v60 = (unint64_t *)&v82->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  realityio::InputsDescriptor::addInputDescriptor(v2, &__p);
  v62 = v82;
  if (v82)
  {
    v63 = (unint64_t *)&v82->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v59)
  {
    v65 = (unint64_t *)&v59->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v79 = (void **)&v72;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v79);
  if (v43)
  {
    v67 = (unint64_t *)&v43->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v38)
  {
    v69 = (unint64_t *)&v38->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *a1 = v2;
  a1[1] = (uint64_t)v1;
}

void sub_22FFA5930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v28;

  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 - 1, v26));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE6AD8;
  v9 = *a4;
  a1[6] = *a4;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      a1[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_22FFA5D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::RelatedPrimInputDescriptor::~RelatedPrimInputDescriptor(realityio::RelatedPrimInputDescriptor *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDE6AD8;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDE6AD8;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::RelatedPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v41) & 1) != 0)
  {
    v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 48);
    v6 = _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_((uint64_t)&v40, &v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 48));
    if ((v6 & 1) != 0)
    {
      if ((v44 & 7) != 0)
      {
        v7 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    else
    {
      UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate((pxrInternal__aapl__pxrReserved__ *)v6);
      v13 = *(_QWORD *)UsdPrimDefaultPredicate;
      v12 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
      v14 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v13 & 0x2000) != 0 || (v12 & 0x2000) == 0))
      {
        v13 |= 0x2000uLL;
        v12 &= ~0x2000uLL;
      }
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v13;
      v27 = v12;
      *(_QWORD *)&v28 = v14;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v41, (uint64_t *)&v26, (uint64_t)&v30);
      v26 = v30;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, &v31);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v27 + 1, &v32);
      v28 = v33;
      v29 = v34;
      while (1)
      {
        v22 = v35;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v36);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v23 + 1, &v37);
        v24 = v38;
        v25 = v39;
        if (v26 == v22 && v27 == v23)
          v15 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v28, (uint64_t)&v24) ^ 1;
        else
          v15 = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
        if ((v15 & 1) == 0)
          break;
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v26, (uint64_t)&v22);
        v16 = _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_((uint64_t)&v40, (uint64_t *)&v22, v5);
        if ((BYTE8(v24) & 7) != 0)
        {
          v17 = (unsigned int *)(*((_QWORD *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
        if (v23)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
        if ((v16 & 1) != 0)
          break;
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v26);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
      if ((v44 & 7) != 0)
      {
        v19 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
  }
  else
  {
    if ((v44 & 7) != 0)
    {
      v9 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  result = v42;
  if (v42)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  return result;
}

void sub_22FFA6130(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZZNK9realityio26RelatedPrimInputDescriptor17resolvedPrimPathsERKN32pxrInternal__aapl__pxrReserved__8UsdStageERKNS1_7SdfPathERKNS_8internal15PrimToEntityMapEENKUlRKT_RT0_RNS1_9TfHashSetIS5_NS5_4HashENSt3__18equal_toIS5_EENSJ_9allocatorIS5_EEEEE_clINS1_7UsdPrimEKNS1_7TfTokenEEEDaSE_SG_SP_(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  void **v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void ***v25;

  v5 = *(_QWORD *)a3;
  v20 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::RelatedPrimInputDescriptor::getPossiblyInheritedRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, (uint64_t)v21);
  if ((v20 & 7) != 0)
  {
    v8 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v21))
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v15[0] = (void **)&v16;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v15);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)a2, a3);
    memset(v15, 0, sizeof(v15));
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    v25 = v15;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    if ((v19 & 7) != 0)
    {
      v10 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    if (v17)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  if ((v24 & 7) != 0)
  {
    v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  return 0;
}

void sub_22FFA63E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  *(_QWORD *)(v2 - 40) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va2);
  _Unwind_Resume(a1);
}

uint64_t realityio::RelatedPrimInputDescriptor::getPossiblyInheritedRelationship@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t EmptyString;
  unint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  v7 = *(unsigned __int8 *)(EmptyString + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(EmptyString + 8);
  if (v7 >= 5)
  {
    if (v8 < 0)
      EmptyString = *(_QWORD *)EmptyString;
    v9 = strncmp((const char *)EmptyString, "skel:", 5uLL) == 0;
  }
  else
  {
    v9 = 0;
  }
  v27 = *(_DWORD *)a1;
  v10 = a1[1];
  v28 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 48);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, (_DWORD *)a1 + 5);
  v13 = a1[3];
  v31 = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27)
      || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27) & 1) != 0)
    {
LABEL_30:
      *(_DWORD *)a3 = 4;
      *(_QWORD *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *(_QWORD *)(a3 + 24) = 0;
      goto LABEL_32;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27, a2))break;
    if (!v9)
      goto LABEL_30;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27, (uint64_t)&v23);
    v27 = v23;
    v16 = v24;
    v24 = 0;
    v17 = v28;
    v28 = v16;
    if (v17)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v29, &v25);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v30);
    if ((v31 & 7) != 0)
    {
      v18 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    v31 = v26;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    if (v24)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v27, a2);
LABEL_32:
  if ((v31 & 7) != 0)
  {
    v20 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  result = v28;
  if (v28)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
  return result;
}

void sub_22FFA66C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v10 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, (_DWORD *)this + 5);
  pxrInternal__aapl__pxrReserved__::Usd_MoveToParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  v7 = v10;
  if (v10)
  {
    v4 = (unint64_t *)((char *)v10 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, (uint64_t *)&v7, &v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_22FFA67A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *pxrInternal__aapl__pxrReserved__::Usd_MoveToParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t Text;
  const char *v7;
  _QWORD v8[4];
  char v9;

  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
    v5 = *a1;
    if (*a1)
    {
      if ((*((_BYTE *)v5 + 57) & 0x10) != 0)
      {
        result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if ((_DWORD)result)
        {
          result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = "usd/primData.h";
            v8[1] = "Usd_MoveToParent";
            v8[2] = 527;
            v8[3] = "void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimDataPtr = con"
                    "st pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            v9 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!(_DWORD)result)
              return result;
            result = *a1;
          }
          if (*((_QWORD *)result + 2) == *(_QWORD *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v8);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE6B68;
  v9 = *a4;
  a1[6] = *a4;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      a1[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_22FFA6A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::ChildPrimInputDescriptor::~ChildPrimInputDescriptor(realityio::ChildPrimInputDescriptor *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDE6B68;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDE6B68;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::ChildPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *IsValid;
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  unsigned int *PrimPath;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  char v19[8];
  pxrInternal__aapl__pxrReserved__ *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v41);
  if ((IsValid & 1) != 0)
  {
    UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(IsValid);
    v9 = *UsdPrimAllPrimsPredicate;
    v8 = UsdPrimAllPrimsPredicate[1];
    v10 = UsdPrimAllPrimsPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    v27 = v9;
    v28 = v8;
    *(_QWORD *)&v29 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v41, &v27, (uint64_t)&v31);
    v27 = v31;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, &v32);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v28 + 1, &v33);
    v29 = v34;
    v30 = v35;
    v23 = v36;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v37);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v24 + 1, &v38);
    v25 = v39;
    v26 = v40;
    while (v27 != v23
         || v28 != v24
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v29, (uint64_t)&v25))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v27, (uint64_t)v19);
      v12 = v20;
      if (!v20 || (*((_BYTE *)v20 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v20, v11);
      if ((**((_QWORD **)v12 + 3) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v19);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, PrimPath, PrimPath);
      }
      if ((v22 & 7) != 0)
      {
        v14 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v20);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v27);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  }
  if ((v44 & 7) != 0)
  {
    v16 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  result = v42;
  if (v42)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  return result;
}

void sub_22FFA6DC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::RelatedPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FFA6E84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::RelatedPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::RelatedPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE6A88;
  std::allocator<realityio::RelatedPrimInputDescriptor>::construct[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_22FFA6EEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::RelatedPrimInputDescriptor>::construct[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  std::string v16;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v16 = *(std::string *)a3;
  v10 = *a5;
  v15 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v15 = (uint64_t)v11;
  }
  realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(a2, (uint64_t)&v16, a4, &v15, *a6);
  if ((v15 & 7) != 0)
  {
    v13 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_22FFA6FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a10 & 7) != 0)
  {
    v17 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FFA7074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE6B18;
  std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_22FFA70DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  std::string v16;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v16 = *(std::string *)a3;
  v10 = *a5;
  v15 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v15 = (uint64_t)v11;
  }
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(a2, (uint64_t)&v16, a4, &v15, *a6);
  if ((v15 & 7) != 0)
  {
    v13 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_22FFA71C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unsigned int *v17;
  unsigned int v18;

  if ((a10 & 7) != 0)
  {
    v17 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,std::allocator<realityio::UnionInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FFA7264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,std::allocator<realityio::UnionInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4, _QWORD **a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE6BA8;
  std::allocator<realityio::UnionInputDescriptor>::construct[abi:ne180100]<realityio::UnionInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_22FFA72CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::UnionInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::UnionInputDescriptor>::construct[abi:ne180100]<realityio::UnionInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, _QWORD **a6)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::UnionInputDescriptor::UnionInputDescriptor(a2, (uint64_t)&__p, a4, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FFA73B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::UnionInputDescriptor::UnionInputDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _QWORD **a5)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor(a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24FDE6BF8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>((char *)(a1 + 48), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  return a1;
}

void sub_22FFA7488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor *v14;

  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void realityio::UnionInputDescriptor::~UnionInputDescriptor(realityio::UnionInputDescriptor *this)
{
  void **v2;

  *(_QWORD *)this = off_24FDE6BF8;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  void **v2;

  *(_QWORD *)this = off_24FDE6BF8;
  v2 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  realityio::InputDescriptor::~InputDescriptor(this);
  MEMORY[0x2348B4E1C]();
}

uint64_t realityio::UnionInputDescriptor::resolvedPrimPaths@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *i;
  unsigned int *j;
  _QWORD v12[2];
  unsigned int *v13;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  v6 = *(_QWORD **)(result + 48);
  for (i = *(_QWORD **)(result + 56); v6 != i; v6 += 2)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v6 + 16))(v12, *v6, a2, a3, a4);
    for (j = v13; j; j = *(unsigned int **)j)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, j + 4, j + 4);
    result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v12);
  }
  return result;
}

void sub_22FFA7610(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6C48;
  return result;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6C48;
}

void std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL8 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  std::string::size_type v41;
  std::__shared_weak_count *v42;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::SkeletonPoseDefinitionBuilder::kOutputName((realityio::SkeletonPoseDefinitionBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v39) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 28, (int *)&v39, &v41);
  v6 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v41);
  v10 = v42;
  if (v42)
  {
    v11 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::SkeletonPoseDefinitionBuilder::kAnimationOutputName((realityio::SkeletonPoseDefinitionBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v37) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 25, (int *)&v37, &v39);
  v15 = v40;
  if (v40)
  {
    v16 = (unint64_t *)&v40->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v39);
  v19 = v40;
  if (v40)
  {
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName((realityio::SkeletonPoseDefinitionBuilder *)v18);
  v23 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v36 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v22, (std::string::size_type *)v23 + 26, &v36, &v37);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v37);
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v15)
  {
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v34 = (unint64_t *)&v6->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FFA7998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 - 1, v19));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDefinitionBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 2));
    realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(a2);
    JUMPOUT(0x2348B4E1CLL);
  }
}

_QWORD *realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void realityio::Inputs::_getValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  char v4;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t String;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  std::mutex *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::mutex *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  const void **EmptyString;
  __int128 v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  std::string v54;
  std::string v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  void *__p[2];
  std::string v61;
  _BYTE v62[48];
  _QWORD v63[3];

  v63[2] = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 24);
  if (v8)
  {
    v58 = std::__shared_weak_count::lock(v8);
    if (v58)
      v57 = *(_QWORD *)(a2 + 16);
  }
  MEMORY[0x2348B2764](&v59, a3);
  v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a2 + 8), &v57);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v54, ") at prim path (");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v25 = *(char *)(String + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)String;
    else
      v26 = *(const std::string::value_type **)String;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(String + 23);
    else
      v27 = *(_QWORD *)(String + 8);
    v28 = std::string::append(&v55, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v56, ")");
LABEL_22:
    v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v62, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
    v31 = *(_QWORD *)&v62[16];
    v63[0] = *(_QWORD *)&v62[24];
    *(_QWORD *)((char *)v63 + 7) = *(_QWORD *)&v62[31];
    v32 = v62[39];
    memset(&v62[16], 0, 24);
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v63 + 7);
    v33 = v63[0];
    *(_QWORD *)(a1 + 24) = v31;
    *(_QWORD *)(a1 + 32) = v33;
    *(_BYTE *)(a1 + 47) = v32;
    if (v61.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (std::mutex *)v54.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v34);
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v11 = 1;
  v12 = v9;
  do
  {
    v12 = (_QWORD *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    v13 = std::string::append(&v54, ") at prim path (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v55, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v56, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v35 = v9[5];
  v37 = *(std::mutex **)(v35 + 16);
  v36 = *(std::__shared_weak_count **)(v35 + 24);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  v56.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(v37, EmptyString, (uint64_t)v62);
  v42 = v62[0];
  if (v62[0])
  {
    *(_QWORD *)&v41 = *(_QWORD *)&v62[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v62[8];
    if ((v62[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)&v62[24], *(std::string::size_type *)&v62[32]);
      if (v62[0])
        v44 = 0;
      else
        v44 = v62[47] < 0;
      v43 = v44;
    }
    else
    {
      v43 = 0;
      v61 = *(std::string *)&v62[24];
    }
    v41 = *(_OWORD *)__p;
    size = v61.__r_.__value_.__l.__size_;
    v37 = (std::mutex *)v61.__r_.__value_.__r.__words[0];
    LODWORD(v55.__r_.__value_.__l.__data_) = v61.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v61.__r_.__value_.__r.__words[2] + 3);
    v4 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if (v43)
    {
      v52 = *(_OWORD *)__p;
      operator delete(*(void **)&v62[24]);
      v41 = v52;
    }
  }
  if (!v36)
    goto LABEL_53;
  v45 = (unint64_t *)&v36->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    v53 = v41;
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v41 = v53;
    if (v42)
      goto LABEL_54;
  }
  else
  {
LABEL_53:
    if (v42)
    {
LABEL_54:
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v41;
      goto LABEL_58;
    }
  }
  *(_OWORD *)v62 = v41;
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v62[16], (const std::string::value_type *)v37, size);
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v62[16];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)&v62[32];
    v34 = v37;
    goto LABEL_30;
  }
  *(_QWORD *)&v62[16] = v37;
  *(_QWORD *)&v62[24] = size;
  *(_DWORD *)&v62[32] = v55.__r_.__value_.__l.__data_;
  *(_DWORD *)&v62[35] = *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3);
  v62[39] = v4;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v62[16];
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v62[32];
LABEL_58:
  if ((v59 & 7) != 0)
  {
    v47 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  v49 = v58;
  if (v58)
  {
    v50 = (unint64_t *)&v58->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_22FFA809C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  char v4;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t String;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::mutex *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::mutex *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const void **EmptyString;
  __int128 v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *__p[2];
  std::string v59;
  _BYTE v60[48];

  v55 = 0;
  v56 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    v56 = std::__shared_weak_count::lock(v8);
    if (v56)
      v55 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v57, a2);
  v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v55);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v52, ") at prim path (");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v25 = *(char *)(String + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)String;
    else
      v26 = *(const std::string::value_type **)String;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(String + 23);
    else
      v27 = *(_QWORD *)(String + 8);
    v28 = std::string::append(&v53, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ")");
LABEL_22:
    v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v60, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    v31 = *(_QWORD *)&v60[24];
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&v60[16];
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)&v60[31];
    LOBYTE(v31) = v60[39];
    memset(&v60[16], 0, 24);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v31;
    if (v59.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (std::mutex *)v52.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v11 = 1;
  v12 = v9;
  do
  {
    v12 = (_QWORD *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    v13 = std::string::append(&v52, ") at prim path (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v53, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v33 = v9[5];
  v35 = *(std::mutex **)(v33 + 16);
  v34 = *(std::__shared_weak_count **)(v33 + 24);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v35, EmptyString, (uint64_t)v60);
  v40 = v60[0];
  if (v60[0])
  {
    *(_QWORD *)&v39 = *(_QWORD *)&v60[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v60[8];
    if ((v60[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)&v60[24], *(std::string::size_type *)&v60[32]);
      if (v60[0])
        v42 = 0;
      else
        v42 = v60[47] < 0;
      v41 = v42;
    }
    else
    {
      v41 = 0;
      v59 = *(std::string *)&v60[24];
    }
    v39 = *(_OWORD *)__p;
    size = v59.__r_.__value_.__l.__size_;
    v35 = (std::mutex *)v59.__r_.__value_.__r.__words[0];
    LODWORD(v53.__r_.__value_.__l.__data_) = v59.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v59.__r_.__value_.__r.__words[2] + 3);
    v4 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if (v41)
    {
      v50 = *(_OWORD *)__p;
      operator delete(*(void **)&v60[24]);
      v39 = v50;
    }
  }
  if (!v34)
    goto LABEL_53;
  v43 = (unint64_t *)&v34->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    v51 = v39;
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v39 = v51;
    if (v40)
      goto LABEL_54;
  }
  else
  {
LABEL_53:
    if (v40)
    {
LABEL_54:
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v39;
      goto LABEL_58;
    }
  }
  *(_OWORD *)v60 = v39;
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v60[16], (const std::string::value_type *)v35, size);
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
    *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
    v32 = v35;
    goto LABEL_30;
  }
  *(_QWORD *)&v60[16] = v35;
  *(_QWORD *)&v60[24] = size;
  *(_DWORD *)&v60[32] = v53.__r_.__value_.__l.__data_;
  *(_DWORD *)&v60[35] = *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3);
  v60[39] = v4;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
LABEL_58:
  if ((v57 & 7) != 0)
  {
    v45 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_22FFA85D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ServiceLocator;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  *a3 = 0;
  a3[1] = 0;
  (**(void (***)(uint64_t))a1)(a1);
  ServiceLocator = REEngineGetServiceLocator();
  v9 = MEMORY[0x2348B1264](ServiceLocator);
  v6 = operator new(0x20uLL);
  *v6 = &off_24FDE6D48;
  v6[1] = a3;
  v6[2] = &v9;
  v6[3] = &v10;
  v12 = v6;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 8))(a1, v11);
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_22FFA87E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  _QWORD *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v15 + 1);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE6D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE6D48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t AssetHandle;

  AssetHandle = REAssetManagerCreateAssetHandle();
  return realityio::WrappedRERef<REAsset *>::operator=(*(_QWORD **)(a1 + 8), &AssetHandle);
}

uint64_t std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0,std::allocator<realityio::mtlx::`anonymous namespace'::BuildMtlxOcclusionAssetCommon(realityio::MtlxSupportContext &,realityio::mtlx::NeoShadeMaterial const&,char const*)::$_0>,void ()(void)>::target_type()
{
}

realityio::PhysicsSceneGroundPlaneComponentBuilder *realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(realityio::PhysicsSceneGroundPlaneComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  void *__src[2];
  _BYTE v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__src, "PhysicsSceneGroundPlaneComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsSceneGroundPlaneComponentBuilderIdentifier);
  realityio::generatePhysicsSceneGroundPlaneDirtyStageSubscription(&v12);
  v19 = v18;
  v16[0] = &off_24FDE6EC0;
  v17 = v16;
  v18[0] = &off_24FDE6E40;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)__src, (uint64_t)__p, &v12, (uint64_t)v18, (uint64_t)v16);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if ((v21[7] & 0x80000000) != 0)
    operator delete(__src[0]);
  *(_QWORD *)this = &off_24FDE6DC8;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  __src[0] = (void *)REGroundPlaneComponentGetComponentType();
  __src[1] = (void *)REPhysicsOriginComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)__src, (uint64_t)v21, 2uLL);
  return this;
}

void sub_22FFA8B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v28 = a21;
  if (a21 == v25)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a25;
  if (a25 == &a22)
  {
    v31 = 4;
    v30 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::PhysicsSceneGroundPlaneComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  realityio *isSceneGroundPlane;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  realityio *v11;
  uint64_t v12;
  uint8_t *v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t result;
  realityio *v20;
  uint8_t buf[8];
  realityio *v22;
  char v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27[24];
  uint8_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  isSceneGroundPlane = (realityio *)realityio::isSceneGroundPlane((realityio *)v23, v6);
  if ((isSceneGroundPlane & 1) != 0)
  {
    v8 = *(NSObject **)(realityio::logObjects(isSceneGroundPlane) + 24);
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_INFO, "Updating entity's scene ground plane.", buf, 2u);
    }
    v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)buf);
    if (buf[0])
    {
      v11 = v22;
      v20 = v22;
      if (v22)
      {
        RERetain();
        v12 = *((_QWORD *)a2 + 6);
        v13 = (uint8_t *)operator new(0x20uLL);
        *(_QWORD *)v13 = &off_24FDE6F40;
        *((_QWORD *)v13 + 1) = a2;
        *((_QWORD *)v13 + 2) = &v20;
        *((_QWORD *)v13 + 3) = this;
        v28 = v13;
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, v27);
        v14 = v28;
        if (v28 == v27)
        {
          v15 = 4;
          v14 = v27;
        }
        else
        {
          if (!v28)
          {
LABEL_14:
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v20);
            realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)buf);
            goto LABEL_15;
          }
          v15 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
        goto LABEL_14;
      }
    }
    else
    {
      v20 = 0;
    }
    v16 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the component because entity no longer exists", v27, 2u);
    }
    goto LABEL_14;
  }
LABEL_15:
  if ((v26 & 7) != 0)
  {
    v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  result = v24;
  if (v24)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  return result;
}

void sub_22FFA8DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = *(_QWORD **)(v3 - 56);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 80);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  _Unwind_Resume(a1);
}

_QWORD *realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 48);
  v5 = a2;
  v6[0] = &off_24FDE70C0;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FFA8EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::PhysicsSceneGroundPlaneComponentBuilder::~PhysicsSceneGroundPlaneComponentBuilder(realityio::PhysicsSceneGroundPlaneComponentBuilder *this)
{
  realityio::PhysicsSceneGroundPlaneComponentBuilder::~PhysicsSceneGroundPlaneComponentBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void *v2;
  realityio::PhysicsSceneGroundPlaneComponentBuilder *v3;
  uint64_t v4;
  realityio::PhysicsSceneGroundPlaneComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDE6DC8;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::PhysicsSceneGroundPlaneComponentBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::PhysicsSceneGroundPlaneComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::PhysicsSceneGroundPlaneComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6E40;
  return result;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6E40;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::PhysicsColliderAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::PhysicsColliderAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::PhysicsColliderAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 17, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FFA92D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE6EC0;
  return result;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE6EC0;
}

char *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::PhysicsSceneGroundPlaneComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE6F40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE6F40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 24);
  REGroundPlaneComponentGetComponentType();
  v9[0] = &off_24FDE6FB0;
  v9[1] = v1;
  v10 = v9;
  v7[0] = REEntityGetOrAddComponentByClass();
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, _QWORD *))(*v10 + 48))(v10, v7);
  RENetworkMarkComponentDirty();
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  REPhysicsOriginComponentGetComponentType();
  v7[0] = &off_24FDE7030;
  v8 = v7;
  v6 = REEntityGetOrAddComponentByClass();
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v8 + 48))(v8, &v6);
  RENetworkMarkComponentDirty();
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v5))(result);
}

void sub_22FFA972C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE6FB0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE6FB0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  return REGroundPlaneComponentSetIsSceneUnderstandingMeshPhysicsFallback();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE7030;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE7030;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio39PhysicsSceneGroundPlaneComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDE70C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE70C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    v7 = v9;
    if (v9)
    {
      RERetain();
      v4 = *(_QWORD *)(v1 + 280);
      v5 = *(_QWORD *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_22FFA9A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsSceneGroundPlaneComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *RdBase::getGroupAction@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24FDE7150;
  a1[1] = v2;
  v2[3] = &off_24FDE71A0;
  result = v2 + 3;
  *a1 = result;
  return result;
}

_QWORD *RdBase::getArrayAction@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24FDE7358;
  a1[1] = v2;
  v2[3] = &off_24FDE73A8;
  result = v2 + 3;
  *a1 = result;
  return result;
}

void TgBase::emitTargets(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath ***a2)
{
  std::mutex *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v7;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    v7 = v5 + 4;
    TgBase::_emitTarget(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5, v5 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4));
    v5 = v7 + 1;
  }
  std::mutex::unlock(v4);
}

void sub_22FFA9BAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::_emitTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  void (***v7)(uint64_t *__return_ptr, _QWORD, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *);
  uint64_t v8;
  uint64_t String;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  std::mutex *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  Exec::ensureTarget(*(_QWORD *)(a1 + 8), a2, a3);
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(void (****)(uint64_t *__return_ptr, _QWORD, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(a1 + 16);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
  MEMORY[0x2348B2764](&v26, String);
  (**v7)(&v27, v7, v8, a2, &v26);
  if ((v26 & 7) != 0)
  {
    v10 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
  MEMORY[0x2348B2764](&v26, v12);
  v13 = *(std::mutex **)(a1 + 8);
  v24 = v27;
  v25 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  Exec::setComputeAction(v13, a2, &v24, &v26);
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_22FFA9D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if ((v8 & 7) != 0)
  {
    v3 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void TgBase::emitTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  TgBase::_emitTarget(a1, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_22FFA9DFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::emitGroup(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _QWORD *a3)
{
  std::mutex *v6;
  uint64_t Name;
  __int128 v8;
  size_t size;
  void *p_p;
  std::string *v11;
  unsigned int *v12;
  unsigned int v13;
  Exec *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  std::type_info **v22;
  std::mutex *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **v34;
  std::__shared_weak_count *v35;
  void **v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  int v39;
  int v40;
  std::string v41;
  void *__p;
  std::type_info **v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v8 = *(_OWORD *)Name;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 7);
  if (v44 < 0)
    p_p = __p;
  if (size)
  {
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v41;
    else
      v11 = (std::string *)v41.__r_.__value_.__r.__words[0];
    memmove(p_p, v11, size);
  }
  strcpy((char *)p_p + size, "__group");
  MEMORY[0x2348B2764](&v38, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v38);
  if ((v38 & 7) != 0)
  {
    v12 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v44 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  v14 = *(Exec **)(a1 + 8);
  v43 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy((uint64_t *)&__p, (uint64_t)a3);
  Exec::setValue(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&__p, a3[2] + 1);
  v17 = (_QWORD *)*a3;
  v15 = a3 + 1;
  v16 = v17;
  if (v17 != v15)
  {
    v18 = (char *)__p;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v36, (_DWORD *)v16 + 10);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 1, (_DWORD *)v16 + 11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v18, (int *)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v18 + 4));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v21 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v21);
      }
      v18 += 8;
      v16 = v20;
    }
    while (v20 != v15);
  }
  v22 = v43;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v43 - 1), &v39);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v22 - 4, &v40);
  Exec::ensureTarget(*(_QWORD *)(a1 + 8), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p);
  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, pxrInternal__aapl__pxrReserved__::SdfPath *))(**(_QWORD **)(a1 + 16) + 8))(&v36, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), a2);
  v23 = *(std::mutex **)(a1 + 8);
  v34 = v36;
  v35 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  MEMORY[0x2348B274C](&v38, "GroupAction");
  Exec::setComputeAction(v23, a2, (uint64_t *)&v34, &v38);
  if ((v38 & 7) != 0)
  {
    v26 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v36 = &__p;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::mutex::unlock(v6);
}

void sub_22FFAA1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void Exec::setComputeAction(std::mutex *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, _QWORD *a4)
{
  char *v8;
  char *opaque;
  uint64_t *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;

  std::mutex::lock(a1);
  v8 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
  opaque = a1[1].__m_.__opaque;
  v10 = (uint64_t *)(v8 + 96);
  if (a1[1].__m_.__opaque == v8)
    v10 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  if (*v10 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    v11 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
    if (opaque == v11)
    {
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data();
      v12 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data(void)::null_data;
    }
    else
    {
      v12 = v11 + 48;
    }
    std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v12 + 2, a3);
    v13 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&a1[1], a2);
    if (opaque == v13)
    {
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data();
      v14 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data(void)::null_data;
    }
    else
    {
      v14 = v13 + 48;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(v14 + 1, a4);
  }
  std::mutex::unlock(a1);
}

void sub_22FFAA3CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void TgBase::emitArray(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t Name;
  __int128 v8;
  size_t size;
  void *p_p;
  std::string *v11;
  unsigned int *v12;
  unsigned int v13;
  Exec *v14;
  _DWORD *v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  std::type_info **v19;
  std::mutex *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  std::__shared_weak_count *v32;
  void **v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  int v37;
  std::string v38;
  void *__p;
  std::type_info **v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v8 = *(_OWORD *)Name;
    v38.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    size = v38.__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 12);
  if (v41 < 0)
    p_p = __p;
  if (size)
  {
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v38;
    else
      v11 = (std::string *)v38.__r_.__value_.__r.__words[0];
    memmove(p_p, v11, size);
  }
  strcpy((char *)p_p + size, "__arrayOrder");
  MEMORY[0x2348B2764](&v35, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35);
  if ((v35 & 7) != 0)
  {
    v12 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v41 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  v14 = *(Exec **)(a1 + 8);
  v40 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy((uint64_t *)&__p, (_DWORD **)a3);
  Exec::setValue(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&__p, ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) + 1);
  v15 = *(_DWORD **)a3;
  v16 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v16)
  {
    v17 = __p;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, v15);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v33 + 1, v15 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v17, (int *)&v33);
      v18 = (uint64_t)v17 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
      v15 += 2;
      v17 = (void *)(v18 + 4);
    }
    while (v15 != v16);
  }
  v19 = v40;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v40 - 1), &v36);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v19 - 4, &v37);
  Exec::ensureTarget(*(_QWORD *)(a1 + 8), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p);
  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, pxrInternal__aapl__pxrReserved__::SdfPath *))(**(_QWORD **)(a1 + 16) + 16))(&v33, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), a2);
  v20 = *(std::mutex **)(a1 + 8);
  v31 = v33;
  v32 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  MEMORY[0x2348B274C](&v35, "ArrayAction");
  Exec::setComputeAction(v20, a2, (uint64_t *)&v31, &v35);
  if ((v35 & 7) != 0)
  {
    v23 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v33 = &__p;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v33);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::mutex::unlock(v6);
}

void sub_22FFAA78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TgBase::emitConstant(Exec **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  std::mutex *v6;
  _BYTE v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  Exec::getValue(this[1], a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  Exec::setValue(this[1], a2, a3);
  if ((pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v7, a3) & 1) == 0)
    Exec::setDirty((std::mutex *)this[1], a2, 1);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  std::mutex::unlock(v6);
}

void sub_22FFAA95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *Exec::getValue@<X0>(Exec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *result;

  result = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find((_QWORD *)this + 25, (unsigned int *)a2);
  if (result)
    return pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)result + 8));
  *((_QWORD *)a3 + 1) = 0;
  return result;
}

void Exec::setDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  Exec *v6;
  uint64_t *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;

  std::mutex::lock(this);
  v6 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[1], a2);
  if (this[1].__m_.__opaque == (char *)v6)
    v7 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  else
    v7 = (uint64_t *)((char *)v6 + 96);
  if (*v7 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)a2 + 1);
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v8 = &v11;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, (_DWORD *)a2 + 1);
      realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v8 = &v9;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  }
  std::mutex::unlock(this);
}

void sub_22FFAAACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_data()
{
  unsigned __int8 v0;
  Exec::TargetVertex *v1;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v1)
    {
      Exec::TargetVertex::TargetVertex(v1);
    }
  }
}

uint64_t Exec::TargetVertex::TargetVertex(Exec::TargetVertex *this)
{
  uint64_t result;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  qword_255E545F0 = 0;
  unk_255E545F8 = 0;
  qword_255E54600 = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(_QWORD *a1, unsigned int *a2)
{
  _QWORD *result;

  if (!a1[3])
    return 0;
  for (result = *(_QWORD **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        result = (_QWORD *)result[3])
  {
    if (*result == *(_QWORD *)a2)
      break;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  v2 = a2[1];
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::operator==(pxrInternal__aapl__pxrReserved__::VtValue *a1, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 == 0) == (v3 == 0);
  if (v2 == v3)
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 64))();
  return pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(a1, a2);
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t (**v11)();
  char v12;
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2);
  if ((_QWORD *)(a1 + 8) == v5)
    return 0;
  v11 = &off_24FDE7640;
  v12 = a3;
  v13 = &v11;
  if (a3)
    v6 = (_QWORD *)(a1 + 72);
  else
    v6 = (_QWORD *)(a1 + 48);
  v7 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse(a1, (uint64_t)&v11, v5[12], v6, 1);
  v8 = v13;
  if (v13 == &v11)
  {
    v9 = 4;
    v8 = &v11;
    goto LABEL_10;
  }
  if (v13)
  {
    v9 = 5;
LABEL_10:
    (*v8)[v9]();
  }
  return v7;
}

void sub_22FFAAD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  void *__p[3];
  uint64_t v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, *(_QWORD *)(a1 + 96), 0);
  v30[0] = a3;
  std::deque<unsigned long>::deque((uint64_t)&v25, v30, 1);
  v10 = v28;
  if (v28)
  {
    v11 = 0;
    while (1)
    {
      if (a5)
      {
        v12 = v10 - 1;
        v13 = (*(_QWORD **)((char *)v26 + (((v27 + v12) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v27 + v12) & 0x1FF];
        v28 = v12;
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v25, 1);
      }
      else
      {
        v13 = (*(_QWORD **)((char *)v26 + ((v27 >> 6) & 0x3FFFFFFFFFFFFF8)))[v27 & 0x1FF];
        ++v27;
        v28 = v10 - 1;
        if (v27 >= 0x400)
        {
          operator delete(*v26++);
          v27 -= 512;
        }
      }
      v14 = *((_QWORD *)__p[0] + (v13 >> 6));
      if (((1 << v13) & v14) == 0)
      {
        *((_QWORD *)__p[0] + (v13 >> 6)) = v14 | (1 << v13);
        v15 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(a1, v13);
        v16 = *(_QWORD *)(a2 + 24);
        if (!v16)
          std::__throw_bad_function_call[abi:ne180100]();
        ++v11;
        if (!(*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v16 + 48))(v16, v15))
          goto LABEL_22;
        v17 = (_QWORD *)(*a4 + 24 * v13);
        v20 = (_QWORD *)*v17;
        v18 = v17 + 1;
        v19 = v20;
        if (v20 != v18)
        {
          do
          {
            if (((*(_QWORD *)((char *)__p[0] + ((v19[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19[4]) & 1) == 0)
              std::deque<unsigned long>::push_back(&v25, v19 + 4);
            v21 = (_QWORD *)v19[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v19[2];
                v23 = *v22 == (_QWORD)v19;
                v19 = v22;
              }
              while (!v23);
            }
            v19 = v22;
          }
          while (v22 != v18);
        }
      }
      v10 = v28;
      if (!v28)
        goto LABEL_22;
    }
  }
  v11 = 0;
LABEL_22:
  std::deque<unsigned long>::~deque[abi:ne180100](&v25);
  if (__p[0])
    operator delete(__p[0]);
  return v11;
}

void sub_22FFAAFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_22FFAB160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2)
    return realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
  v3 = (_QWORD *)(a1 + 32);
  do
  {
    v4 = v2[4];
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 != (_QWORD *)(a1 + 32) && v3[4] <= a2)
    return (void *)v3[5];
  else
    return realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_22FFAB26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (v4)
  {
    v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      goto LABEL_9;
  }
  else
  {
    v6 = v5 - 1;
  }
  v7 = v6 >> 6;
  if (v5 >= 0x41)
    v8 = v7;
  else
    v8 = 0;
  *(_QWORD *)(*a1 + 8 * v8) = 0;
LABEL_9:
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *a1 + 8 * (v4 >> 6);
  v18 = *(_QWORD *)a2;
  v19 = v9;
  v16 = v10;
  v17 = v11;
  v14 = v12;
  v15 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v18, &v16, &v14, (uint64_t)&v13);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::deque<unsigned long>::deque(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<unsigned long>::__append_with_size[abi:ne180100]<unsigned long const*>((_QWORD *)a1, a2, (8 * a3) >> 3);
  return a1;
}

void sub_22FFAB788(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<unsigned long *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<unsigned long>::__append_with_size[abi:ne180100]<unsigned long const*>(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6)
    v12 = 0;
  else
    v12 = *v11 + 8 * (v9 & 0x1FF);
  v19[0] = v6 + 8 * (v9 >> 9);
  v19[1] = v12;
  result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    v15 = (_QWORD *)(v11 == result ? v14 : *v11 + 4096);
    if ((_QWORD *)v12 == v15)
    {
      v15 = (_QWORD *)v12;
    }
    else
    {
      v16 = (_QWORD *)v12;
      do
      {
        v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 3;
    if (v11 == result)
      break;
    v18 = v11[1];
    ++v11;
    v12 = v18;
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_22FFABDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage((uint64_t)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage(void)const::null_storage);
  }
  return &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage(void)const::null_storage;
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::NodeStorage(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_BYTE *std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24FDE7640;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24FDE7640;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 8);
  return 1;
}

uint64_t std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1},std::allocator<realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL)::{lambda(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)#1}>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target_type()
{
}

void std::__shared_ptr_emplace<`anonymous namespace'::GroupAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::GroupAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void `anonymous namespace'::GroupAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, std::type_info ****a3@<X3>, uint64_t a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t Name;
  __int128 v10;
  size_t size;
  void *p_p;
  std::string *v13;
  unsigned int *v14;
  unsigned int v15;
  const pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  unint64_t v18;
  std::type_info ***v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  const pxrInternal__aapl__pxrReserved__::VtValue *v27;
  uint64_t v28;
  unint64_t v29;
  std::type_info ***v30;
  std::type_info **v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  void *__p;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  std::string v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  std::type_info **v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v10 = *(_OWORD *)Name;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v10;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 7);
  if (v39 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (size)
  {
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v41;
    else
      v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
    memmove(p_p, v13, size);
  }
  strcpy((char *)p_p + size, "__group");
  MEMORY[0x2348B2764](&v45, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
  if ((v45 & 7) != 0)
  {
    v14 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  v16 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
  v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v17)
  {
    v18 = v17 >> 4;
    v19 = *a3;
    if (v18 <= 1)
      v18 = 1;
    while (1)
    {
      v20 = (uint64_t)*v19++;
      if (v20 == v40)
        break;
      v16 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v16 + 16);
      if (!--v18)
        goto LABEL_25;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v47, v16);
    v21 = v48;
    if (v48)
    {
      if (strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7SdfPathENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        if ((v21 & 4) == 0
        {
          goto LABEL_26;
        }
        v21 = v48;
      }
      if ((v21 & 4) != 0)
        v22 = (_QWORD *)(*(uint64_t (**)(_QWORD **))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v47);
      else
        v22 = v47;
      v38 = 0;
      v39 = 0;
      __p = &v38;
      v25 = (_QWORD *)*v22;
      v23 = v22 + 1;
      v24 = v25;
      if (v25 != v23)
      {
        do
        {
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((uint64_t)&v45, v24 + 4);
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46))
          {
            v44 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                + 1;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v43, &v46);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v43 + 1, (_DWORD *)&v46 + 1);
            v42 = &v45;
            v26 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&__p, &v45, (uint64_t)&std::piecewise_construct, &v42);
          }
          else
          {
            v27 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
            v28 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
            if (v28)
            {
              v29 = v28 >> 4;
              v30 = *a3;
              if (v29 <= 1)
                v29 = 1;
              while (1)
              {
                v31 = *v30++;
                if (v31 == v46)
                  break;
                v27 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v27 + 16);
                if (!--v29)
                  goto LABEL_44;
              }
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v43, v27);
            }
            else
            {
LABEL_44:
              v44 = 0;
            }
            v42 = &v45;
            v26 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&__p, &v45, (uint64_t)&std::piecewise_construct, &v42);
          }
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(v26 + 5, &v43);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v43);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
          if ((v45 & 7) != 0)
          {
            v32 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v36 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v36);
          }
          v24 = v35;
        }
        while (v35 != v23);
      }
      v46 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy(&v45, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(a5, &v45);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v45);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&__p, v38);
    }
  }
  else
  {
LABEL_25:
    v48 = 0;
  }
LABEL_26:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_22FFAC4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v28 - 104));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  if (a23 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a10);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::GroupAction::supportsPartialInputs(_anonymous_namespace_::GroupAction *this)
{
  return 1;
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  if ((*a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)a2 + 3);
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_CopyInit(_DWORD *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2 + 1, a1 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Destroy(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Move(_DWORD *a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2 + 1, a1 + 1);
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Destroy((uint64_t)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_EqualPtr(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetProxiedAsVtValue@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;

  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                      + 1;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a2, a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 1, a1 + 1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 5));
    v3 = a2[4];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Hash(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t Hash;
  unint64_t v11;

  v2 = (uint64_t)(*a1 + 1);
  v1 = (_QWORD *)**a1;
  if (v1 == (_QWORD *)v2)
  {
    v11 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (_QWORD *)v1[1];
      v6 = v1;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      v9 = v1[4] & 0xFFFFFFFFFFFFFFF8;
      if (v3)
        v9 += (v9 + v4 + (v9 + v4) * (v9 + v4)) >> 1;
      else
        v3 = 1;
      Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 + 5));
      v4 = Hash + ((Hash + v9 + (Hash + v9) * (Hash + v9)) >> 1);
      v1 = v7;
    }
    while (v7 != (_QWORD *)v2);
    v11 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_Equal(uint64_t *a1, _QWORD ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(*a1, *(_QWORD **)a2, *(_QWORD *)(a2 + 16));
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)v3, *v2);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_22FFACAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7VtValueENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v2, *(_QWORD **)(v2 + 8));
      MEMORY[0x2348B4E1C](v2, 0x1020C401C4E69EBLL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::VtValue const&>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  if (*(_BYTE *)(a1 + 8))
    result += (unint64_t)(*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void>::Equal(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  if (*(_QWORD *)(a1 + 16) == a3)
  {
    v3 = (_QWORD *)(a1 + 8);
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1 == a1 + 8)
      return 1;
    while ((v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[4] & 0xFFFFFFFFFFFFFFF8))
    {
      result = pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 5), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 5));
      if (!(_DWORD)result)
        return result;
      v7 = (_QWORD *)v4[1];
      v8 = v4;
      if (v7)
      {
        do
        {
          v4 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v8[2];
          v9 = *v4 == (_QWORD)v8;
          v8 = v4;
        }
        while (!v9);
      }
      v10 = (_QWORD *)a2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)a2[2];
          v9 = *v11 == (_QWORD)a2;
          a2 = v11;
        }
        while (!v9);
      }
      a2 = v11;
      if (v4 == v3)
        return 1;
    }
  }
  return 0;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FFACD90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22FFACF10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 1));
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFAD018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ArrayAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ArrayAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void `anonymous namespace'::ArrayAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t Name;
  __int128 v10;
  size_t size;
  void **v12;
  std::string *v13;
  unsigned int *v14;
  unsigned int v15;
  const pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  const pxrInternal__aapl__pxrReserved__::VtValue *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v10 = *(_OWORD *)Name;
    v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v12 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 12);
  if (SBYTE7(v31) < 0)
    v12 = (void **)__p[0];
  if (size)
  {
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v34;
    else
      v13 = (std::string *)v34.__r_.__value_.__r.__words[0];
    memmove(v12, v13, size);
  }
  strcpy((char *)v12 + size, "__arrayOrder");
  MEMORY[0x2348B2764](&v35, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35);
  if ((v35 & 7) != 0)
  {
    v14 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  v16 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
  v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v17)
  {
    v18 = v17 >> 4;
    v19 = *a3;
    if (v18 <= 1)
      v18 = 1;
    while (1)
    {
      v20 = *v19++;
      if (v20 == v33)
        break;
      v16 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v16 + 16);
      if (!--v18)
        goto LABEL_24;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v37, v16);
  }
  else
  {
LABEL_24:
    v38 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v21 = (*(uint64_t (**)(uint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v21 = v37;
    v32 = 0;
    *(_OWORD *)__p = 0u;
    v31 = 0u;
    v22 = *(_DWORD **)v21;
    v23 = *(_DWORD **)(v21 + 8);
    if (*(_DWORD **)v21 != v23)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, v22);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v29 + 1, v22 + 1);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29))
        {
          v36 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
              + 1;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35, &v29);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v35 + 1, (_DWORD *)&v29 + 1);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t)__p, &v35);
        }
        else
        {
          v24 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)a4;
          v25 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
          if (v25)
          {
            v26 = v25 >> 4;
            v27 = *a3;
            if (v26 <= 1)
              v26 = 1;
            while (1)
            {
              v28 = *v27++;
              if (v28 == v29)
                break;
              v24 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v24 + 16);
              if (!--v26)
                goto LABEL_37;
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35, v24);
          }
          else
          {
LABEL_37:
            v36 = 0;
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t)__p, &v35);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
        v22 += 2;
      }
      while (v22 != v23);
    }
    v36 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(&v35, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a5, &v35);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_22FFAD3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v26;
  uint64_t v27;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 88));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a19);
  if (a25 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v26);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ArrayAction::supportsPartialInputs(_anonymous_namespace_::ArrayAction *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::emplace_back<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *New;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(v5 + 16 * v4), a2);
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew(a1, v11);
    std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(v9, v9 + 16 * v4, (uint64_t)New);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(&New[2 * v4], a2);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = New;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[4];
        if (*a1)
        {
          v9 = 16 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v8);
            v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 16);
            v9 -= 16;
          }
          while (v9);
          v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[4];
        }
        operator delete((char *)v8 - 16);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFAD7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + v6), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + v6));
      v6 += 16;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22FFAD864(void *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 16)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v1);
    v1 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v1 + 16);
  }
  __cxa_rethrow();
}

void sub_22FFAD888(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Hash(unint64_t **a1)
{
  unint64_t v1;
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t Hash;
  unint64_t v6;

  v1 = **a1;
  if (v1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*a1)[4];
    v3 = v1;
    do
    {
      --v3;
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v2 + 16);
      Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v2);
      v1 = Hash + ((Hash + v1 + (Hash + v1) * (Hash + v1)) >> 1);
      v2 = v4;
    }
    while (v3);
    v6 = 0x9E3779B97F4A7C55 * v1;
  }
  else
  {
    v6 = 0;
  }
  return bswap64(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*v2;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*v2;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(&v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7VtValueEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  const pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[4];
  v7 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 32);
  v8 = 16 * v5 - 16;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::VtValue::operator==(v6, v7);
    if (!(_DWORD)result)
      break;
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
    v7 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v7 + 16);
    v9 = v8;
    v8 -= 16;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_Streamer>(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (uint64_t)(*a1 + 1);
  v2 = (_QWORD *)**a1;
  if (v2 == (_QWORD *)v1)
  {
    v12 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (_QWORD *)v2[1];
      v6 = v2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      v9 = v2[4] & 0xFFFFFFFFFFFFFFF8;
      if (v3)
        v9 += (v9 + v4 + (v9 + v4) * (v9 + v4)) >> 1;
      else
        v3 = 1;
      v10 = *((unsigned int *)v2 + 10);
      v11 = v9 + v10 + (v9 + v10) * (v9 + v10);
      v4 = *((unsigned int *)v2 + 11)
         + ((*((unsigned int *)v2 + 11)
           + v10
           + (v11 >> 1)
           + (*((unsigned int *)v2 + 11) + v10 + (v11 >> 1)) * (*((unsigned int *)v2 + 11) + v10 + (v11 >> 1))) >> 1);
      v2 = v7;
    }
    while (v7 != (_QWORD *)v1);
    v12 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v12);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal(_QWORD **a1, _QWORD ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(*a1, *(_QWORD **)a2, *(_QWORD *)(a2 + 16));
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100]((uint64_t *)v3, *v2);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_22FFADDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7SdfPathENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v2, *(_QWORD **)(v2 + 8));
      MEMORY[0x2348B4E1C](v2, 0x1020C401C4E69EBLL);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(a2 + 4);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(_QWORD *a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  if ((*a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void>::Equal(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1[2] != a3)
    return 0;
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  if (v5 == v3)
    return 1;
  do
  {
    v6 = (v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[4] & 0xFFFFFFFFFFFFFFF8) && v4[5] == a2[5];
    v7 = v6;
    if (!v6)
      break;
    v8 = (_QWORD *)v4[1];
    v9 = v4;
    if (v8)
    {
      do
      {
        v4 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v9[2];
        v6 = *v4 == (_QWORD)v9;
        v9 = v4;
      }
      while (!v6);
    }
    v10 = (_QWORD *)a2[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)a2[2];
        v6 = *v11 == (_QWORD)a2;
        a2 = v11;
      }
      while (!v6);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return v7;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FFAE0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((uint64_t)(v7 + 4), a4);
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(v2 + 4);
    operator delete(v2);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100]((uint64_t *)v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFAE2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, a2);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)a1, a2);
  }
  return a1;
}

void sub_22FFAE340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(char ***a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(_QWORD *)(v5 - 8) == v6;
    v8 = *(_QWORD *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = *(uint64_t **)a2;
  if (v2 - v3 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(_QWORD *)(v5 - 8) == v6;
    v8 = *(_QWORD *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue@<X0>(_DWORD ***a1@<X0>, uint64_t *a2@<X8>)
{
  _DWORD **v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C4055CCDE27);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, char **a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v4 = 0;
    v5 = v3 >> 3;
    v6 = 1;
    do
    {
      v7 = *(unsigned int *)v2;
      if ((v6 & 1) == 0)
        v7 += (v4 + v7 + (v4 + v7) * (v4 + v7)) >> 1;
      v6 = 0;
      v4 = *((unsigned int *)v2 + 1)
         + ((v7
           + *((unsigned int *)v2 + 1)
           + (v7 + *((unsigned int *)v2 + 1)) * (v7 + (unint64_t)*((unsigned int *)v2 + 1))) >> 1);
      v2 += 8;
      --v5;
    }
    while (v5);
    v8 = 0x9E3779B97F4A7C55 * v4;
  }
  else
  {
    v8 = 0;
  }
  return bswap64(v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD **v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = atomic_load((unsigned int *)(*(_QWORD *)a1 + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *(_DWORD ***)a1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)v3, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 3);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = *(void ***)a1;
    *(_QWORD *)a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(&v8);
  }
  return *(_QWORD *)a1;
}

void sub_22FFAE6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFAE758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

void realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::~ShaderGraphUtilityTokens_StaticTokenType(realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;

  v34 = (void **)((char *)this + 88);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v34);
  v2 = *((_QWORD *)this + 10);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 7);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 6);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 4);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 3);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 2);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v32 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::ShaderGraphUtilityTokens_StaticTokenType(realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(MEMORY[0x2348B2758](this, "NodeGraph", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 16, "Material", 0);
  MEMORY[0x2348B2758]((char *)this + 24, "Point", 0);
  MEMORY[0x2348B2758]((char *)this + 32, "Normal", 0);
  MEMORY[0x2348B2758]((char *)this + 40, "Vector", 0);
  MEMORY[0x2348B2758]((char *)this + 48, "Color", 0);
  MEMORY[0x2348B2758]((char *)this + 56, "Frame", 0);
  MEMORY[0x2348B2758]((char *)this + 64, "TextureCoordinate", 0);
  MEMORY[0x2348B2758]((char *)this + 72, "inputs", 0);
  MEMORY[0x2348B2758]((char *)this + 80, "outputs", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_22FFAED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_22FFAEF58()
{
  JUMPOUT(0x22FFAEF0CLL);
}

void sub_22FFAEF60()
{
  JUMPOUT(0x22FFAEF30);
}

uint64_t RIOPxrSdfNamespaceEditGetTypeID()
{
  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  return RIOPxrSdfNamespaceEditGetTypeID::typeID;
}

uint64_t RIOPxrSdfBatchNamespaceEditGetTypeID()
{
  if (qword_255E54620 != -1)
    dispatch_once(&qword_255E54620, &__block_literal_global_1);
  return _MergedGlobals_7;
}

_DWORD *RIOPxrSdfNamespaceEditCreateEmpty()
{
  uint64_t Instance;
  _DWORD *v1;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v7 = -1;
  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  Instance = _CFRuntimeCreateInstance();
  v1 = (_DWORD *)Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), &v3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 5, &v4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 6, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v1 + 7, &v6);
    v1[8] = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_22FFAF178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

_DWORD *RIOPxrSdfNamespaceEditCreateFromPaths(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  int v5;
  int v6;

  v3 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), a3);
    v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return v3;
}

void sub_22FFAF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a11);
  _Unwind_Resume(a1);
}

_DWORD *RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(_DWORD *a1)
{
  uint64_t Instance;
  _DWORD *v3;

  if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
  Instance = _CFRuntimeCreateInstance();
  v3 = (_DWORD *)Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 5, a1 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 6, a1 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 7, a1 + 3);
    v3[8] = a1[4];
  }
  return v3;
}

_DWORD *RIOPxrSdfNamespaceEditCreateRemove(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  _DWORD *v3;
  int v5;
  int v6;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a1 + 16);
  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(a1);
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, v1, v2, -1);
  v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  return v3;
}

void sub_22FFAF398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a11);
  _Unwind_Resume(a1);
}

_DWORD *RIOPxrSdfNamespaceEditCreateRename(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  int v5;
  int v6;
  _BYTE v7[8];

  v2 = 0;
  if (a1 && a2)
  {
    v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v5, v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, -2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v7);
    v2 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return v2;
}

void sub_22FFAF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a10);
  _Unwind_Resume(a1);
}

_DWORD *RIOPxrSdfNamespaceEditCreateReorder(uint64_t a1, int a2)
{
  _DWORD *v2;
  int v4;
  int v5;

  if (!a1)
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v2 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_22FFAF4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a11);
  _Unwind_Resume(a1);
}

_DWORD *RIOPxrSdfNamespaceEditCreateReparent(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  int v8;
  int v9;
  _BYTE v10[8];
  _BYTE v11[8];

  v3 = 0;
  if (a1 && a2)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10, v6);
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v8, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v10);
    v3 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
  return v3;
}

void sub_22FFAF5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a11);
  _Unwind_Resume(a1);
}

_DWORD *RIOPxrSdfNamespaceEditCreateReparentAndRename(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _DWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int v10;
  int v11;
  _BYTE v12[8];
  _BYTE v13[8];
  _BYTE v14[8];

  v4 = 0;
  if (a1 && a2 && a3)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v12, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&v10, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
    v4 = RIOPxrSdfNamespaceEditCreate<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit &>(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  }
  return v4;
}

void sub_22FFAF718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::~SdfNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *)&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfNamespaceEditGetCurrentPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfNamespaceEditCopyCurrentPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfNamespaceEditGetNewPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 24));
  return result;
}

uint64_t RIOPxrSdfNamespaceEditCopyNewPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(result + 24));
  return result;
}

uint64_t RIOPxrSdfNamespaceEditGetIndex(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(a1 + 32);
  else
    return 0xFFFFFFFFLL;
}

uint64_t _RIOPxrSdfNamespaceEditCFFinalize(const void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 16);
}

BOOL _RIOPxrSdfNamespaceEditCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfNamespaceEditCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfNamespaceEditCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfNamespaceEdit %p>"), a1);
}

CFStringRef _RIOPxrSdfNamespaceEditCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfNamespaceEdit %p>"), a1);
}

void _RIOPxrSdfBatchNamespaceEditCFFinalize(char *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(a1 + 16));
}

BOOL _RIOPxrSdfBatchNamespaceEditCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrSdfBatchNamespaceEditCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrSdfBatchNamespaceEditCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfBatchNamespaceEdit %p>"), a1);
}

CFStringRef _RIOPxrSdfBatchNamespaceEditCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfBatchNamespaceEdit %p>"), a1);
}

pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit::SdfNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  _DWORD *v8;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(this, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 3, (_DWORD *)a3 + 1);
  *((_DWORD *)this + 4) = a4;
  return this;
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
    v7 = *(_QWORD *)(a1 + 240);
  else
    v7 = 0;
  v20 = v7;
  v21 = v6;
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v7, (unsigned __int8 *)&__p, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v8 = v19;
    *a3 = v18;
    a3[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v7, (unsigned __int8 *)a2, a3);
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22FFAFA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Collection>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FFAFB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

realityio::IBLComponentBuilder *realityio::IBLComponentBuilder::IBLComponentBuilder(realityio::IBLComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v24;
  uint64_t i;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35[3];
  _QWORD *v36[3];
  __int128 v37;
  _QWORD *v38[3];
  _QWORD *v39[3];
  __int128 v40;
  _QWORD *v41[3];
  uint64_t v42;
  uint64_t v43;
  void **v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _OWORD v49[3];
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v30, "IBLComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kIBLComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54648);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54648))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v39, 0, sizeof(v39));
    v17 = (_BYTE *)operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    memset(v36, 0, sizeof(v36));
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v20 + 56));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v34, (uint64_t)v19);
    v49[0] = v34;
    v34 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v22 + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v33, (uint64_t)v21);
    v49[1] = v33;
    v33 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v24 + 144));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v32, (uint64_t)v23);
    v49[2] = v32;
    v32 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v35, v49, 3uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t *)Data + 6, v36, v35);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v37, (uint64_t)v17);
    v50 = v37;
    v37 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v38, &v50, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v39, v38);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v40, v16);
    v51 = v40;
    v40 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v41, &v51, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v41);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v42, v15);
    qword_255E54638 = v42;
    unk_255E54640 = v43;
    v42 = 0;
    v43 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    v44 = (void **)v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    v44 = (void **)v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    v44 = (void **)v35;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    for (i = 2; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    *(_QWORD *)&v49[0] = v36;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    *(_QWORD *)&v49[0] = v39;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    __cxa_guard_release(&qword_255E54648);
  }
  v26 = qword_255E54638;
  v27 = (std::__shared_weak_count *)unk_255E54640;
  if (unk_255E54640)
  {
    v5 = (unint64_t *)(unk_255E54640 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v48 = v47;
  v45[0] = &off_24FDE78C8;
  v46 = v45;
  v47[0] = &off_24FDE7848;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v30, (uint64_t)__p, &v26, (uint64_t)v47, (uint64_t)v45);
  v7 = v46;
  if (v46 == v45)
  {
    v8 = 4;
    v7 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v48;
  if (v48 == v47)
  {
    v10 = 4;
    v9 = v47;
    goto LABEL_14;
  }
  if (v48)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  *(_QWORD *)this = &off_24FDE77D0;
  return this;
}

void sub_22FFB0078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x2348B4E1C](v43, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v46 - 176) = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 176));
  MEMORY[0x2348B4E1C](v44, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v45, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54648);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLComponentBuilder::run(realityio::IBLComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  float v6;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 v17;
  __int128 *v18;
  std::__shared_weak_count *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t result;
  _QWORD *v32;
  int v33;
  float v34;
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  realityio::Inputs *v39;
  __int128 *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  void *__p;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  v34 = 0.0;
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v35, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 56), (uint64_t)&v41);
  if ((_BYTE)v41)
  {
    v6 = *(float *)&v42;
  }
  else
  {
    v6 = 1.0;
    if (v44 < 0)
      operator delete(__p);
  }
  v34 = v6;
  v33 = 0;
  v7 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v35, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v7 + 64), (uint64_t)&v41);
  if ((_BYTE)v41)
  {
    v8 = (int)v42;
  }
  else
  {
    v8 = 0;
    if (v44 < 0)
      operator delete(__p);
  }
  v33 = v8;
  v9 = *((_QWORD *)v39 + 6);
  v10 = operator new(0x30uLL);
  *v10 = &off_24FDE7948;
  v10[1] = &v39;
  v10[2] = v35;
  v10[3] = this;
  v10[4] = &v34;
  v10[5] = &v33;
  __p = v10;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 16))(v9, &v41);
  v11 = __p;
  if (__p == &v41)
  {
    v12 = 4;
    v11 = &v41;
  }
  else
  {
    if (!__p)
      goto LABEL_18;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_18:
  v14 = *((_QWORD *)this + 2);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = atomic_load((unsigned __int8 *)&qword_255E54630);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255E54630))
  {
    v32 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v32, "light_component");
    _MergedGlobals_8 = (uint64_t)v32;
    __cxa_guard_release(&qword_255E54630);
  }
  v18 = (__int128 *)_MergedGlobals_8;
  std::mutex::lock((std::mutex *)(v14 + 64));
  v19 = (std::__shared_weak_count *)operator new(0x28uLL);
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7A18;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE79C8;
  v19[1].__shared_owners_ = 0;
  v41 = &v19[1].__vftable;
  v42 = v19;
  v40 = v18;
  v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v14 + 40), (const void **)v18, (uint64_t)&std::piecewise_construct, &v40);
  v41 = 0;
  v42 = 0;
  v21 = (std::__shared_weak_count *)v20[8];
  v20[7] = (uint64_t)&v19[1];
  v20[8] = (uint64_t)v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v42;
  if (v42)
  {
    v25 = (unint64_t *)&v42->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v14, (unsigned __int8 *)v18, (uint64_t)v18);
  std::mutex::unlock((std::mutex *)(v14 + 64));
  if (v13)
  {
    v27 = (unint64_t *)&v13->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((v38 & 7) != 0)
  {
    v29 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  result = v36;
  if (v36)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  return result;
}

void sub_22FFB075C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  MEMORY[0x2348B4E1C](v2, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54630);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

void sub_22FFB082C()
{
  JUMPOUT(0x22FFB0824);
}

_QWORD *realityio::IBLComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 48);
  v5 = a2;
  v6[0] = &off_24FDE7A48;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FFB08DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::IBLComponentBuilder::~IBLComponentBuilder(realityio::IBLComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

realityio::tokens::LightBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::LightBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::LightBuilderTokens_StaticTokenType::~LightBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::LightBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::LightBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::LightBuilderTokens_StaticTokenType::LightBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FFB09D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40D3CE914ALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE7848;
  return result;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE7848;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::IBLCubeMapAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::IBLCubeMapAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::IBLCubeMapAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 10, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FFB0C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE78C8;
  return result;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE78C8;
}

void std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)Data + 11, &v13, &v14);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_22FFB0FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLComponentBuilder::IBLComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(char *a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_22FFB10F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, char *__s, std::string::size_type *a3, int *a4)
{
  char v6;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE1F60;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, __s, a3, a4);
  return a1;
}

void sub_22FFB115C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *a2, char *__s, std::string::size_type *a4, int *a5)
{
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  realityio::OutputDescriptor::OutputDescriptor(a2, (__int128 *)__p, a4, *a5);
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_22FFB11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_22FFB1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (!*(_BYTE *)v5 && *(char *)(v5 + 47) < 0)
    operator delete(*(void **)(v5 + 24));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDE7948;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDE7948;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  realityio *v5;
  realityio::IBLCubeMapAssetBuilder *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v16;
  uint64_t Text;
  int v18;
  realityio *v19;
  char v20[8];
  realityio *v21;
  _BYTE v22[12];
  uint8_t buf[4];
  _BYTE v24[12];
  void *__p;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v20);
  if (v20[0])
  {
    v5 = v21;
    v19 = v21;
    if (v21)
    {
      v6 = (realityio::IBLCubeMapAssetBuilder *)RERetain();
      v7 = **(_QWORD **)(a1 + 8);
      v8 = realityio::IBLCubeMapAssetBuilder::kOutputName(v6);
      realityio::Inputs::_getValue<REAsset *>(v7, v8, (uint64_t)buf);
      if (buf[0])
        v9 = *(_QWORD *)&v24[4];
      else
        v9 = 0;
      if (REEntityGetSceneNullable())
      {
        v10 = MEMORY[0x2348B1258]();
        if (v10)
        {
          *(_QWORD *)v22 = REComponentGetClass();
          std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v2 + 40), (unint64_t *)v22, (uint64_t *)v22);
          v11 = **(float **)(a1 + 32);
          v12 = exp2f(**(float **)(a1 + 40));
          log2f(v11 * v12);
          REImageBasedLightComponentSetIntensityExponent();
          if (v9)
          {
            if (v9 != REImageBasedLightComponentGetIBL())
              MEMORY[0x2348B0D0C](v10, v9);
          }
        }
      }
      else
      {
        v16 = *(id *)(realityio::logObjects(0) + 24);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v18);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
          *(_DWORD *)v22 = 136315138;
          *(_QWORD *)&v22[4] = Text;
          _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_DEFAULT, "Set IBL operation unable to find scene for entity from prim \"%s\"", v22, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
        }

      }
      if (!buf[0] && v26 < 0)
        operator delete(__p);
      goto LABEL_15;
    }
  }
  else
  {
    v19 = 0;
  }
  v13 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), v22);
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v22);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v24 = v14;
    _os_log_impl(&dword_22FF26000, v13, OS_LOG_TYPE_DEFAULT, "Stopping operation to set IBL component because entity no longer exists for prim \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
  }

LABEL_15:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v19);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_22FFB1784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE79C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE79C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<decltype(nullptr)>::getRawValue()
{
  return 0;
}

void std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE7A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE7A48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;

  v1 = **((_QWORD **)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v6);
  if (v6[0])
  {
    v5 = v7;
    if (v7)
    {
      RERetain();
      if (REEntityGetSceneNullable())
      {
        v3 = MEMORY[0x2348B1258]();
        if (v3)
          MEMORY[0x2348B0D0C](v3, 0);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v5);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v6);
}

void sub_22FFB19D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::IBLComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderDirtyPrimDescriptorGetTypeID()
{
  if (RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken, &__block_literal_global_2);
  return RIOBuilderDirtyPrimDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  CFIndex v12;
  CFIndex j;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30[3];

  memset(v30, 0, sizeof(v30));
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v7 = (std::__shared_weak_count *)*((_QWORD *)ValueAtIndex + 3);
      *(_QWORD *)&v28 = *((_QWORD *)ValueAtIndex + 2);
      *((_QWORD *)&v28 + 1) = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100](v30, &v28);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  v28 = 0uLL;
  v29 = 0;
  v12 = CFArrayGetCount(a2);
  if (v12 >= 1)
  {
    for (j = 0; j != v12; ++j)
    {
      v14 = CFArrayGetValueAtIndex(a2, j);
      v15 = v14[3];
      *(_QWORD *)&v27 = v14[2];
      *((_QWORD *)&v27 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((char **)&v28, &v27);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  v21 = operator new(0x58uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_24FDE7B48;
  *(_QWORD *)&v27 = realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)(v21 + 3), (_QWORD **)&v28, (_QWORD **)v30);
  *((_QWORD *)&v27 + 1) = v21;
  v22 = RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v27);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)&v27 = &v28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  *(_QWORD *)&v28 = v30;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return v22;
}

void sub_22FFB1CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a9 = &a11;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = (void **)&a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *a1;
    v23 = a1[1];
    if (v23 == *a1)
    {
      v11 = v18 + 16;
      *a1 = v18;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
      while (v23 != v22);
      v23 = *a1;
      v26 = (uint64_t)a1[1];
      v11 = v18 + 16;
      *a1 = v24;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
      while ((char *)v26 != v23)
      {
        v26 -= 16;
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v26);
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
}

uint64_t std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyPrimDescriptorGetTypeID::onceToken, &__block_literal_global_2);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

__CFArray *`anonymous namespace'::dirtyPropertyDescriptorsFromPrimDescriptor(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 32), *(_QWORD **)(v3 + 40), (uint64_t)(*(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_22FFB21A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *`anonymous namespace'::dirtyMetadataDescriptorsFromPrimDescriptor(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 8), *(_QWORD **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_22FFB2340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2, const __CFArray *a3)
{
  CFIndex Count;
  CFIndex v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex i;
  const void *ValueAtIndex;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  CFIndex v29;
  CFIndex j;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _BYTE *v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  char *v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v59[0] = &off_24FDE7B98;
  v60 = v59;
  if (a1)
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
LABEL_27:
      memset(v55, 0, 24);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(v55, (uint64_t *)v56, v57, ((char *)v57 - v56) >> 3);
      v52 = 1;
      v53 = v55[0];
      v54 = *(_QWORD *)&v55[1];
      memset(v55, 0, 24);
      *(_QWORD *)&v50 = v55;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    }
    else
    {
      v7 = 0;
      while (1)
      {
        *(_QWORD *)&v50 = CFArrayGetValueAtIndex(a1, v7);
        if (!v60)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_OWORD *__return_ptr, _QWORD *, __int128 *))(*v60 + 48))(v55, v60, &v50);
        if (!LOBYTE(v55[0]))
          break;
        *(_QWORD *)&v50 = *((_QWORD *)&v55[0] + 1);
        if ((BYTE8(v55[0]) & 7) != 0)
        {
          v8 = (unsigned int *)(*((_QWORD *)&v55[0] + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            *(_QWORD *)&v50 = v50 & 0xFFFFFFFFFFFFFFF8;
        }
        v10 = v57;
        if ((unint64_t)v57 >= v58)
        {
          v14 = (uint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v56, (uint64_t *)&v50);
        }
        else
        {
          v11 = v50;
          *v57 = v50;
          if ((v11 & 7) != 0)
          {
            v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 2, v12));
            if ((v13 & 1) == 0)
              *v10 &= 0xFFFFFFFFFFFFFFF8;
          }
          v14 = v10 + 1;
        }
        v57 = v14;
        if ((v50 & 7) != 0)
        {
          v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        if (LOBYTE(v55[0]) && (BYTE8(v55[0]) & 7) != 0)
        {
          v17 = (unsigned int *)(*((_QWORD *)&v55[0] + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        if (++v7 == Count)
          goto LABEL_27;
      }
      v52 = 0;
      v53 = *(_OWORD *)((char *)v55 + 8);
    }
    *(_QWORD *)&v55[0] = &v56;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  }
  else
  {
    v52 = 0;
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = std::system_category();
  }
  v19 = v60;
  if (v60 == v59)
  {
    v20 = 4;
    v19 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_36;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_36:
  v56 = 0;
  v57 = 0;
  v58 = 0;
  if (v52)
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v56, (uint64_t *)v53, *((uint64_t **)&v53 + 1), (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 3);
  memset(v55, 0, 24);
  v21 = CFArrayGetCount(a2);
  if (v21 >= 1)
  {
    for (i = 0; i != v21; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      v24 = (std::__shared_weak_count *)*((_QWORD *)ValueAtIndex + 3);
      *(_QWORD *)&v50 = *((_QWORD *)ValueAtIndex + 2);
      *((_QWORD *)&v50 + 1) = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::push_back[abi:ne180100]((char **)v55, &v50);
      if (v24)
      {
        v27 = (unint64_t *)&v24->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  v50 = 0uLL;
  v51 = 0;
  v29 = CFArrayGetCount(a3);
  if (v29 >= 1)
  {
    for (j = 0; j != v29; ++j)
    {
      v31 = CFArrayGetValueAtIndex(a3, j);
      v32 = v31[3];
      *(_QWORD *)&v48 = v31[2];
      *((_QWORD *)&v48 + 1) = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((char **)&v50, &v48);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }
  v38 = v56;
  v39 = v57;
  *((_QWORD *)&v48 + 1) = 0;
  v49 = 0;
  *(_QWORD *)&v48 = (char *)&v48 + 8;
  while (v38 != (char *)v39)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)&v48, (_QWORD *)&v48 + 1, v38, (uint64_t *)v38);
    v38 += 8;
  }
  v40 = operator new(0x70uLL);
  v40[1] = 0;
  v40[2] = 0;
  *v40 = &off_24FDE7C28;
  v46 = realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor((_BYTE *)v40 + 24, (uint64_t)&v48, (_QWORD **)&v50, (_QWORD **)v55);
  v47 = (std::__shared_weak_count *)v40;
  v41 = RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v46);
  v42 = v47;
  if (v47)
  {
    v43 = (unint64_t *)&v47->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v48, *((_QWORD **)&v48 + 1));
  *(_QWORD *)&v48 = &v50;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  *(_QWORD *)&v50 = v55;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v55[0] = &v56;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if (v52)
  {
    v56 = (char *)&v53;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  }
  return v41;
}

void sub_22FFB2840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  a21 = (void **)(v21 - 112);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a21);
  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderTypeNameDirtyPrimDescriptorCopyTypeNames(uint64_t a1)
{
  __CFArray *Mutable;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(const void **)(a1 + 16);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  v22 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3)
  {
    if (v7)
    {
      v21 = v4;
      if (v4)
      {
        v8 = (unint64_t *)&v4->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (_QWORD *)v7[8];
      v11 = v7 + 9;
      if (v10 != v7 + 9)
      {
        do
        {
          v12 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v10 + 4);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = (_QWORD *)v10[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v10[2];
              v15 = *v14 == (_QWORD)v10;
              v10 = v14;
            }
            while (!v15);
          }
          v10 = v14;
        }
        while (v14 != v11);
        v4 = v21;
      }
      if (v4)
      {
        v16 = (unint64_t *)&v4->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    v4 = v22;
  }
  if (v4)
  {
    v18 = (unint64_t *)&v4->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return Mutable;
}

void sub_22FFB2B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyPrimDescriptorCopyType(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (!a1)
    return 0;
  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3)
  {
    if (v2)
    {
      {
        return 2;
      }
      else
      {
        return 1;
      }
    }
    return 0;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  if (v2)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v6)
      v9 = 2;
    else
      v9 = 1;
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v9;
}

uint64_t _RIOBuilderDirtyPrimDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderDirtyPrimDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyPrimDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyPrimDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyPrimDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderDirtyPrimDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyPrimDescriptor %p>"), a1);
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken, &__block_literal_global_21);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

char *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FFB2E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken, &__block_literal_global_27);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

char *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FFB2F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](result, a4);
    return (_QWORD *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(v6, a2, a3);
  }
  return result;
}

void sub_22FFB2FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PrimitiveDirtyPrimDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(char **a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[8 * v4];
  v12 = &v10[8 * v9];
  v25 = v12;
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v11 + 8;
  v24.i64[1] = (uint64_t)(v11 + 8);
  v18 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    v20 = vdupq_n_s64((unint64_t)v17);
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v11 - 1) = v19;
      v11 -= 8;
      *(_QWORD *)v17 = 0;
    }
    while (v17 != v18);
    v20 = *(int64x2_t *)a1;
    v16 = (char *)v24.i64[1];
    v12 = v25;
  }
  *a1 = v11;
  a1[1] = v16;
  v24 = v20;
  v21 = a1[2];
  a1[2] = v12;
  v25 = v21;
  v23 = v20.i64[0];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)&v23);
  return v16;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE7B98;
  return result;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE7B98;
}

void std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const std::error_category *v9;

  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v3 & 7) != 0)
    {
      v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v3 &= 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v3;
      do
        v8 = __ldxr(v6);
      while (__stlxr(v8 - 2, v6));
    }
    else
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = v3;
    }
  }
  else
  {
    v9 = std::system_category();
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v9;
  }
}

uint64_t std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0,std::allocator<RIOBuilderTypeNameDirtyPrimDescriptorCreateWithPropertyDescriptorsAndMetadataDescriptors::$_0>,realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::Error> ()(RIOPxrTfToken *)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE7C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::TypeNameDirtyPrimDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void realityio::GetFromUsdAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *TargetPath;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  unsigned int *v18;
  unsigned int v19;
  int IsValid;
  char v21;
  pxrInternal__aapl__pxrReserved__::UsdStage *v22;
  pxrInternal__aapl__pxrReserved__::UsdStage *v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  realityio *v30;
  unsigned int *v31;
  unsigned int v32;
  realityio *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::UsdStage *v40;
  unsigned int *v41;
  unsigned int v42;
  _DWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  NSObject *v48;
  uint64_t Text;
  const char *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  void *__p;
  uint64_t v61;
  _BYTE v62[8];
  uint64_t v63;
  void **v64;
  std::type_info **v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 buf;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];

  v73[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v73, a1);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__stage.layerData");
    MEMORY[0x2348B26F8](&v66, &__p);
    v7 = buf;
    v8 = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if ((v62[7] & 0x80000000) != 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
    if (v7 == v8)
    {
      TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
      v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
      __p = (void *)v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          __p = v11;
      }
      v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)v73);
      if ((__p & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
LABEL_82:
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v73);
      goto LABEL_83;
    }
    v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v66);
    pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&buf, (uint64_t)&__p);
    if ((v72 & 7) != 0)
    {
      v24 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    if (*((_QWORD *)&buf + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
    {
LABEL_77:
      if ((v63 & 7) != 0)
      {
        v53 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v62);
      if (v61)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
      goto LABEL_82;
    }
    v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
    v27 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
    v66 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
      {
        v66 = v27 & 0xFFFFFFFFFFFFFFF8;
        v27 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    v30 = (realityio *)MEMORY[0x2348B274C](&buf, "__timeSamples");
    v31 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
    if ((buf & 7) != 0)
    {
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    if ((unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8) == v31)
    {
      v48 = *(id *)(realityio::logObjects(v30) + 24);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        goto LABEL_73;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v64);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      v50 = "Unexpected __timeSamples request on \"%s\"";
    }
    else
    {
      v33 = (realityio *)MEMORY[0x2348B274C](&buf, "__timeValues");
      v34 = v66 & 0xFFFFFFFFFFFFFFF8;
      v35 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
      if ((buf & 7) != 0)
      {
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((unsigned int *)v34 != v35)
      {
        MEMORY[0x2348B274C](&buf, "__typeName");
        v37 = v66 & 0xFFFFFFFFFFFFFFF8;
        v38 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
        if ((buf & 7) != 0)
        {
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        if ((unsigned int *)v37 == v38)
        {
          *a4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
          a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>(void)::ti
                + 1;
          goto LABEL_85;
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66, (pxrInternal__aapl__pxrReserved__::VtValue *)v73))
        {
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v73);
LABEL_85:
          if ((v66 & 7) != 0)
          {
            v55 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
            do
              v56 = __ldxr(v55);
            while (__stlxr(v56 - 2, v55));
          }
          if ((v63 & 7) != 0)
          {
            v57 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
            do
              v58 = __ldxr(v57);
            while (__stlxr(v58 - 2, v57));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v62);
          if (v61)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
          goto LABEL_83;
        }
        goto LABEL_74;
      }
      v48 = *(id *)(realityio::logObjects(v33) + 24);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
LABEL_73:

LABEL_74:
        if ((v66 & 7) != 0)
        {
          v51 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
          do
            v52 = __ldxr(v51);
          while (__stlxr(v52 - 2, v51));
        }
        goto LABEL_77;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v64);
      v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v59;
      v50 = "Unexpected __timeValues request on \"%s\"";
    }
    _os_log_error_impl(&dword_22FF26000, v48, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
    goto LABEL_73;
  }
  v16 = (uint64_t *)(a2 + 24);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 24));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v17, a3);
  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&buf, (uint64_t)&__p);
  if ((v72 & 7) != 0)
  {
    v18 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  if (*((_QWORD *)&buf + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
  v21 = IsValid;
  if (IsValid)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v22);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v73);
  }
  else
  {
    v40 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v40, a3);
    if ((_DWORD)v66 == 4)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, 4, &v67, &v68, &v69);
    }
    else
    {
      LODWORD(buf) = 4;
      *((_QWORD *)&buf + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v72 = 0;
    }
    if ((v69 & 7) != 0)
    {
      v41 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
    if (v67)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v67);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf))
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v43 = (_DWORD *)v66;
      if (v67 - v66 == 8)
      {
        v65 = (std::type_info **)((char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                                + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, (_DWORD *)v66);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v64 + 1, v43 + 1);
      }
      else
      {
        v65 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy((uint64_t *)&v64, (_DWORD **)&v66);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v73, &v64);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
      v64 = (void **)&v66;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v64);
    }
    else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
    {
      v67 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
          + 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v66, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v66 + 1, (_DWORD *)a3 + 1);
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v73, &v66);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v66);
    }
    if ((v72 & 7) != 0)
    {
      v44 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    if (*((_QWORD *)&buf + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  }
  if ((v63 & 7) != 0)
  {
    v46 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v62);
  if (v61)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
  if ((v21 & 1) == 0)
    goto LABEL_82;
LABEL_83:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v73);
}

void sub_22FFB3AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;

  if ((a18 & 7) != 0)
  {
    v24 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v22 - 72));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_Hash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(a1));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfValueTypeNameE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::SdfValueTypeName,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueTypeName>(void)::ti
        + 1;
  return result;
}

_QWORD *realityio::SkeletalPoseComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, _QWORD *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v18 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
    realityio::WrappedRERef<REAsset *>::operator=(&v18, v8);
  }
  else
  {
    RESkeletalPoseComponentGetComponentType();
    v9 = REComponentCreateByClass();
    v19 = v9;
    if (v9)
      RERetain();
    v10 = v18;
    if (v18 != v9)
    {
      v18 = v9;
      v19 = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v19);
    v20 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(&v19, &v18);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &v19);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
    RERelease();
  }
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v12));
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v13));
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 47) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19)
        && (v20 & 4) != 0)
      {
        (*(void (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      ++v14;
      v11 = *a2;
      v13 += 8;
      v12 += 16;
    }
    while (v14 < (a2[1] - *a2) >> 3);
  }
  RESkeletalPoseComponentSetSkeletalPoseDefinition();
  RENetworkMarkComponentDirty();
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_22FFB3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP7REAssetEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t RIOPxrSdfPrimSpecGetTypeID()
{
  if (RIOPxrSdfPrimSpecGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPrimSpecGetTypeID::onceToken, &__block_literal_global_3);
  return RIOPxrSdfPrimSpecGetTypeID::typeID;
}

uint64_t RIOPxrSdfPrimSpecCopyLayer(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v1);
  v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v8);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_22FFB4120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(uint64_t *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrSdfLayerGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v3 = a1[1];
    if (v3)
    {
      if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1)
                    + 14))
        v3 = *a1;
      else
        v3 = 0;
    }
    *(_QWORD *)(Instance + 16) = v3;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
  }
  return Instance;
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  const char *v2;
  const char *p_p;
  void *__p;
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operat"
            "or->() const [T = pxrInternal__aapl__pxrReserved__::SdfPrimSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfPrimSpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", p_p);
    if (v6 < 0)
      operator delete(__p);
    return 0;
  }
  return v1;
}

void sub_22FFB42B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPrimSpecCopyPath(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  uint64_t v2;
  int v4;

  v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(v1);
  v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_22FFB432C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPrimSpecGetSpecifier(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  uint64_t v2;

  v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  v2 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v1) - 1;
  if (v2 < 3)
    return v2 + 1;
  else
    return 0;
}

uint64_t RIOPxrSdfPrimSpecCopyAttribute(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  uint64_t v4;
  uint64_t Instance;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v9;

  v3 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    if (RIOPxrSdfAttributeSpecGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrSdfAttributeSpecGetTypeID::onceToken, &__block_literal_global_29);
    Instance = _CFRuntimeCreateInstance();
    v4 = Instance;
    if (Instance)
    {
      v6 = v9;
      *(_QWORD *)(Instance + 16) = v9;
      if (v6)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
    }
  }
  MEMORY[0x2348B2704](&v9);
  return v4;
}

void _RIOPxrSdfPrimSpecCFFinalize(const void *a1)
{
  JUMPOUT(0x2348B2704);
}

uint64_t _RIOPxrSdfPrimSpecCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::operator==();
}

unint64_t _RIOPxrSdfPrimSpecCFHash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrSdfPrimSpecCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfPrimSpec %p>"), a1);
}

CFStringRef _RIOPxrSdfPrimSpecCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfPrimSpec %p>"), a1);
}

realityio::StageMetersPerUnitBuilder *realityio::StageMetersPerUnitBuilder::StageMetersPerUnitBuilder(realityio::StageMetersPerUnitBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  uint64_t v21[2];
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void **v26[3];
  uint64_t v27;
  __int128 v28;
  _QWORD *v29[3];
  __int128 v30;
  _QWORD *v31[3];
  uint64_t v32;
  uint64_t v33;
  void ***v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v24, "StageMetersPerUnitBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageMetersPerUnitBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54660);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54660))
  {
    v20 = a2;
    v11 = operator new();
    v12 = operator new();
    v13 = operator new();
    MEMORY[0x2348B274C](&v27, "metersPerUnit");
    v14 = v27;
    *(_QWORD *)v13 = v27;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      v14 = *(_QWORD *)v13;
      if ((v16 & 1) == 0)
      {
        v14 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v14;
      }
    }
    *(_BYTE *)(v13 + 8) = v14 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v28, v13);
    v35 = v28;
    v28 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v29, &v35, 1uLL);
    memset(v26, 0, sizeof(v26));
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v12, v29, v26);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v30, v12);
    v36 = v30;
    v30 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v31, &v36, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v11, v31);
    v17 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v32, v11);
    _MergedGlobals_9 = v32;
    *(_QWORD *)algn_255E54658 = v33;
    v32 = 0;
    v33 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v17);
    v34 = (void ***)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    v34 = v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    v26[0] = (void **)v29;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v26);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    if ((v27 & 7) != 0)
    {
      v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    __cxa_guard_release(&qword_255E54660);
    a2 = v20;
  }
  v5 = *(std::__shared_weak_count **)algn_255E54658;
  v21[0] = _MergedGlobals_9;
  v21[1] = *(_QWORD *)algn_255E54658;
  if (*(_QWORD *)algn_255E54658)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E54658 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v24, (uint64_t)__p, v21);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  *(_QWORD *)this = &off_24FDE7E30;
  return this;
}

void sub_22FFB4810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  unsigned int *v38;
  unsigned int v39;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v36 - 80);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v36 - 104) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 104));
  a25 = &a32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v36 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if ((a28 & 7) != 0)
  {
    v38 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  MEMORY[0x2348B4E1C](v35, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54660);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t realityio::StageMetersPerUnitBuilder::run(realityio::StageMetersPerUnitBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  uint64_t v10;
  realityio *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint8_t buf[8];
  unsigned int **v22;
  uint64_t *v23;
  uint8_t *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v18, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  v4 = v3;
  v5 = v19;
  if (v19)
  {
    v6 = v19 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)buf);
  v20 = v4;
  v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)&v18);
  if (!(_BYTE)v18)
  {
    v17 = 0;
LABEL_12:
    v15 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Stopping operation to set meters per unit transform because entity no longer exists", buf, 2u);
    }
    goto LABEL_16;
  }
  v11 = (realityio *)v19;
  v17 = v19;
  if (!v19)
    goto LABEL_12;
  RERetain();
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)buf = &off_24FDE7EA8;
  v22 = &v17;
  v23 = &v20;
  v24 = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, buf);
  v13 = v24;
  if (v24 == buf)
  {
    v14 = 4;
    v13 = buf;
    goto LABEL_15;
  }
  if (v24)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
  }
LABEL_16:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v17);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v18);
}

void sub_22FFB4B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v21;
  uint64_t v22;

  v21 = a20;
  if (a20 == &a17)
  {
    v22 = 4;
    v21 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::StageMetersPerUnitBuilder::clear(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

void realityio::StageMetersPerUnitBuilder::~StageMetersPerUnitBuilder(realityio::StageMetersPerUnitBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDE7EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE7EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  realityio *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t v7[24];
  _QWORD v8[3];
  realityio *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  RETransformComponentGetComponentType();
  v2 = *(_QWORD *)(a1 + 16);
  v8[0] = &off_24FDE7F18;
  v8[1] = v2;
  v9 = (realityio *)v8;
  *(_QWORD *)v7 = REEntityGetOrAddComponentByClass();
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(realityio *, uint8_t *))(*(_QWORD *)v9 + 48))(v9, v7);
  RENetworkMarkComponentDirty();
  v3 = v9;
  if (v9 == (realityio *)v8)
  {
    v4 = 4;
    v3 = (realityio *)v8;
  }
  else
  {
    if (!v9)
      goto LABEL_7;
    v4 = 5;
  }
  v3 = (realityio *)(*(uint64_t (**)(realityio *))(*(_QWORD *)v3 + 8 * v4))(v3);
LABEL_7:
  v5 = *(NSObject **)(realityio::logObjects(v3) + 24);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = **(_QWORD **)(a1 + 16);
    *(_DWORD *)v7 = 134217984;
    *(_QWORD *)&v7[4] = v6;
    _os_log_impl(&dword_22FF26000, v5, OS_LOG_TYPE_INFO, "Updating root entity scale based on metersPerUnit: %f", v7, 0xCu);
  }
}

void sub_22FFB4DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageMetersPerUnitBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE7F18;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE7F18;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return RETransformComponentSetLocalScale();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25StageMetersPerUnitBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25StageMetersPerUnitBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25StageMetersPerUnitBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

uint64_t RIOPxrUsdVariantSetGetTypeID()
{
  if (RIOPxrUsdVariantSetGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdVariantSetGetTypeID::onceToken, &__block_literal_global_4);
  return RIOPxrUsdVariantSetGetTypeID::typeID;
}

uint64_t RIOPxrUsdVariantHasAuthoredVariant(uint64_t a1, char *a2)
{
  uint64_t HasAuthoredVariant;
  unsigned int *v4;
  unsigned int v5;
  void *__p;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  HasAuthoredVariant = pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant();
  if (v8 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return HasAuthoredVariant;
}

void sub_22FFB506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdVariantSet *pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this, const pxrInternal__aapl__pxrReserved__::UsdVariantSet *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  std::string *v10;
  __int128 v11;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = (std::string *)((char *)this + 32);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_22FFB516C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(void **this)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = (unint64_t)this[3];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 2));
  v5 = (uint64_t)this[1];
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t RIOPxrUsdVariantSetAddVariant(uint64_t a1, char *a2)
{
  std::recursive_mutex *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  void *__p;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v9);
  std::recursive_mutex::lock(v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant();
  if (v8 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v3);
  if (v14 < 0)
    operator delete(v13);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  result = v10;
  if (v10)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return result;
}

void sub_22FFB52F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  std::recursive_mutex *v15;

  if (a14 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(realityio::UsdLayerMutexTracker *a1)
{
  void *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t *EditTarget;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v22);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    v5 = EditTarget[1];
    v20 = *EditTarget;
    v21 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = v23;
    if (v23)
    {
      v9 = (unsigned int *)(v23 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v20);
  v14 = v13;
  v15 = v21;
  if (v21)
  {
    v16 = (unsigned int *)(v21 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  return v14;
}

void sub_22FFB5410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrUsdVariantSetCopyVariantNames(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t i;
  const char *v3;
  CFStringRef v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD v8[3];
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void **v15;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9);
  for (i = v8[0]; i != v8[1]; i += 24)
  {
    v3 = (const char *)i;
    if (*(char *)(i + 23) < 0)
      v3 = *(const char **)i;
    v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v15 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v14 < 0)
    operator delete(__p);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return Mutable;
}

void sub_22FFB5578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdVariantSetCopyVariantSelection(uint64_t a1)
{
  const char *p_p;
  CFStringRef v2;
  unsigned int *v3;
  unsigned int v4;
  void *__p;
  char v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v8, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v8);
  if (v7 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v7 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  if ((v11 & 7) != 0)
  {
    v3 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return v2;
}

void sub_22FFB5670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelection(uint64_t a1)
{
  uint64_t HasAuthoredVariantSelection;
  unsigned int *v2;
  unsigned int v3;
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  char v10;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v5, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  HasAuthoredVariantSelection = pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariantSelection();
  if (v10 < 0)
    operator delete(__p);
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  return HasAuthoredVariantSelection;
}

void sub_22FFB5730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetHasAuthoredVariantSelectionOnLayer(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v4;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v5;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string::size_type v23;
  std::string *v24;
  std::string *p_s1;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  std::string __s1;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t v49;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v50;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v51;
  std::string v52;
  unsigned int *v53;
  char v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string __p;
  void **v59[4];
  char v60;
  int v61;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v54, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  v53 = *(unsigned int **)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v52 = __p;
  MEMORY[0x2348B42AC](&v50, v54);
  v3 = v50;
  v4 = v51;
  if (v50 == v51)
  {
LABEL_69:
    v31 = 0;
    goto LABEL_82;
  }
  while (1)
  {
    v5 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5);
    v6 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(v6);
    if (pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(&v46))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
      v8 = *(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
      v9 = &v46;
    }
    else
    {
      v9 = 0;
      v7 = 0;
      v8 = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(&v46))
    {
      v10 = v46;
      if (v46)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
        v10 = v46;
        if (v46)
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
      }
      v11 = (_QWORD *)(v10 + 8);
      v12 = &v46;
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    if (v12 != v9 || v11 != v8)
      break;
LABEL_16:
    v13 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v49;
    if (v49)
    {
      v17 = (unsigned int *)(v49 + 8);
      do
      {
        v18 = __ldxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v3 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v3 + 8);
    if (v3 == v4)
      goto LABEL_69;
  }
  while (1)
  {
    if (!v9)
      goto LABEL_35;
    v20 = *v9;
    if (*v9)
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    if ((_QWORD *)(v20 + 8) == v8)
    {
LABEL_35:
      if (!v12)
        goto LABEL_16;
      v21 = *v12;
      if (*v12)
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
      if (v11 == (_QWORD *)(v21 + 8))
        goto LABEL_16;
      if (!v9)
      {
        v59[0] = (void **)"sdf/mapEditProxy.h";
        v59[1] = (void **)"Dereference";
        v59[2] = (void **)215;
        v59[3] = (void **)"static _PairProxy pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std:"
                          ":string>>::Traits::Dereference(This *, const Type *, inner_iterator) [T = std::map<std::string"
                          ", std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValueP"
                          "olicy<std::map<std::string, std::string>>]";
        v60 = 0;
        v61 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v59, "Dereferenced an invalid map proxy iterator");
      }
    }
    if (*((char *)v8 + 55) < 0)
      std::string::__init_copy_ctor_external(&__s1, (const std::string::value_type *)v8[4], v8[5]);
    else
      __s1 = *(std::string *)(v8 + 4);
    v43 = v9;
    v44 = v7;
    v45 = v8;
    if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v48, &v53))goto LABEL_57;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    v23 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = v52.__r_.__value_.__l.__size_;
    if (size != v23)
      goto LABEL_57;
    v24 = (v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v52
        : (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      goto LABEL_71;
    p_s1 = &__s1;
    v26 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == v24->__r_.__value_.__s.__data_[0])
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v24 = (std::string *)((char *)v24 + 1);
      if (!--v26)
        goto LABEL_71;
    }
LABEL_57:
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v27 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_60:
      operator delete(v27);
    }
    v28 = (_QWORD *)v8[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v8[2];
        v30 = *v29 == (_QWORD)v8;
        v8 = v29;
      }
      while (!v30);
    }
    v8 = v29;
    if (v12 == v9)
    {
      v8 = v29;
      if (v11 == v29)
        goto LABEL_16;
    }
  }
  v27 = (void *)__s1.__r_.__value_.__r.__words[0];
  if (memcmp(__s1.__r_.__value_.__l.__data_, v24, __s1.__r_.__value_.__l.__size_))
    goto LABEL_60;
  operator delete(v27);
LABEL_71:
  v32 = v47;
  if (v47)
  {
    v33 = (unint64_t *)&v47->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *, std::string *))v32->__on_zero_shared)(v32, v24);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unsigned int *)(v49 + 8);
    do
    {
      v37 = __ldxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v35 + 8))(v35, v24);
  }
  v31 = 1;
LABEL_82:
  v59[0] = (void **)&v50;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](v59);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v57 & 7) != 0)
  {
    v39 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
  if (v55)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
  return v31;
}

void sub_22FFB5BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,unsigned int *a29,void *a30)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a29);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a30);
  _Unwind_Resume(a1);
}

void sub_22FFB5C74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x22FFB5C08);
}

uint64_t RIOPxrUsdVariantSetClearVariantSelection(uint64_t a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v6, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  v1 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v6);
  std::recursive_mutex::lock(v1);
  v2 = pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v6);
  std::recursive_mutex::unlock(v1);
  if (v11 < 0)
    operator delete(__p);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_22FFB5D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetSetVariantSelection(uint64_t a1, char *a2)
{
  std::recursive_mutex *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *__p;
  char v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v10, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v10);
  std::recursive_mutex::lock(v3);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  v4 = pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
  if (v9 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v3);
  if (v15 < 0)
    operator delete(v14);
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  return v4;
}

void sub_22FFB5E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  std::recursive_mutex *v15;

  if (a14 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCopyPrim(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  char v10;
  int v11;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v5, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  v11 = 1;
  v1 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v5, &v11);
  if (v10 < 0)
    operator delete(__p);
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  return v1;
}

void sub_22FFB5F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a9);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdVariantSetCopyName(uint64_t a1)
{
  const char *p_p;
  CFStringRef v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  char v11;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v6, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  if (v11 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v11 < 0)
    operator delete(__p);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_22FFB5FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetIsValid(uint64_t a1)
{
  uint64_t IsValid;
  unsigned int *v2;
  unsigned int v3;
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  char v10;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v5, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v5);
  if (v10 < 0)
    operator delete(__p);
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  return IsValid;
}

void sub_22FFB6068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCopyEditTarget(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  _QWORD v17[8];

  v17[7] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9, (const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget();
  v1 = RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>((uint64_t)v15);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v17);
  v2 = v16;
  if (v16)
  {
    v3 = (unsigned int *)(v16 + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (v14 < 0)
    operator delete(__p);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return v1;
}

void sub_22FFB61B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>(uint64_t a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), a1 + 16);
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 56);
  }
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdEditTarget::~UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16));
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
}

void *_RIOPxrUsdVariantSetCFFinalize(void **a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *result;

  if (*((char *)a1 + 71) < 0)
    operator delete(a1[6]);
  v2 = (unint64_t)a1[5];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
  result = a1[3];
  if (result)
    return (void *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)result);
  return result;
}

BOOL _RIOPxrUsdVariantSetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdVariantSetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdVariantSetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdVariantSet %p>"), a1);
}

CFStringRef _RIOPxrUsdVariantSetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdVariantSet %p>"), a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(unsigned int **a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, *a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data(pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *this)
{
  int v2;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *v3;
  int v4;

  v2 = *((_DWORD *)this + 8);
  if (v2 > 2)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
  }
  else
  {
    *((_DWORD *)this + 8) = v2 - 1;
    if (v2)
    {
      v3 = this;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v3);
        v3 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)((char *)v3 + 16);
        v4 = *((_DWORD *)this + 8);
        *((_DWORD *)this + 8) = v4 - 1;
      }
      while (v4);
    }
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = MEMORY[0x2348B2704](v4 - 8);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string,std::string>,pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string,std::string>>>::_Validate(_QWORD *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  v3 = a1 + 1;
  if (!a1[1])
    return *a2 == 0;
  v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
    return *a2 == 0;
  if (!*v3)
    return 0;
  v6 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v3);
  result = 0;
  if (*(_BYTE *)(v6 + 14) && *a1)
    return *a1 == *a2;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data(_DWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = (_DWORD *)a2;
  v3 = a1;
  v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((_BYTE *)a1 + 36) = *(_BYTE *)(a2 + 36);
  if (v4 > 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    v5 = *(int *)(a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        v7 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (_DWORD *)a2;
  v3 = a1;
  v4 = *(_DWORD *)(a2 + 32);
  a1[8] = v4;
  *((_BYTE *)a1 + 36) = *(_BYTE *)(a2 + 36);
  if (v4 > 2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v5 = *(int *)(a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        v7 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](a1, v2);
        v2 += 4;
        a1 = v7 + 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  return v3;
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100](_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  return a1;
}

{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  return a1;
}

_QWORD *realityio::TransformComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  uint64_t *NameToken;
  realityio::TargetPaths *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  realityio::TargetPaths *v22;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  __int128 *v27;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::VtValue *v35;
  __int128 *v36;
  pxrInternal__aapl__pxrReserved__::VtValue *v37;
  int v38;
  float v39;
  double *v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t *v57;
  _QWORD *v58[2];
  _OWORD v59[2];
  uint64_t v60;
  _OWORD v61[4];
  _OWORD v62[4];
  uint64_t *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v63 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
    realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v63, v8);
  }
  else
  {
    RETransformComponentGetComponentType();
    v68 = REComponentCreateByClass();
    if (v68)
    {
      RERetain();
      v9 = v68;
    }
    else
    {
      v9 = 0;
    }
    v10 = v63;
    if (v63 != (uint64_t *)v9)
    {
      v63 = (uint64_t *)v9;
      v68 = (uint64_t)v10;
    }
    v11 = realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v68);
    v69 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(v11, (uint64_t *)&v63);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &v68);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68);
    RERelease();
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v62, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v61, 1.0);
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  v58[0] = 0;
  v58[1] = 0;
  v57 = (uint64_t *)v58;
  v12 = *a2;
  if (a2[1] != *a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = (unint64_t *)MEMORY[0x24BEE7FE8];
    while (1)
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 8 * v13);
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v16);
      v18 = (realityio::TargetPaths *)MEMORY[0x2348B274C](&v68, "xformOpOrder");
      v19 = *NameToken;
      v20 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      if ((v68 & 7) != 0)
      {
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      if ((unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8) == v20)
      {
        v35 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v13));
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(v35))
        {
          v36 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v68);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v59, v36);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68);
        goto LABEL_45;
      }
      v22 = (realityio::TargetPaths *)realityio::TargetPaths::upAxisPath(v18);
      if (*(_QWORD *)v16 == *(_QWORD *)v22)
      {
        Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v15);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v15);
        v24 = *((_QWORD *)Data + 168);
        *(_QWORD *)&v52 = v24;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *(_QWORD *)&v52 = v52 & 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v13));
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v64))
        {
          if ((BYTE8(v64) & 4) != 0)
            v27 = (__int128 *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v64 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 168))(&v64);
          else
            v27 = &v64;
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v52, v27);
        }
        v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v15);
        if (!v28)
          v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(v15);
        if ((v52 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v28 + 169) & 0xFFFFFFFFFFFFFFF8))
        {
          v69 = 0;
          v70 = 0;
          v68 = 0x3FF0000000000000;
          v71 = 0xC056800000000000;
          v29 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v62, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v68);
          v30 = *v29;
          v31 = v29[1];
          v32 = v29[3];
          v62[2] = v29[2];
          v62[3] = v32;
          v62[0] = v30;
          v62[1] = v31;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        if ((v52 & 7) != 0)
        {
          v33 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
      }
      else
      {
        if (*(_QWORD *)v16 != *(_QWORD *)realityio::TargetPaths::metersPerUnitPath(v22))
        {
          v45 = *a3;
          v68 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v16);
          v46 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(&v57, (uint64_t *)v68, (uint64_t)&std::piecewise_construct, (uint64_t **)&v68);
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(v46 + 5, (_QWORD *)(v45 + 16 * v13));
          goto LABEL_45;
        }
        v37 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + 16 * v13));
        v38 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(v37);
        v39 = 0.01;
        if (v38)
        {
          if ((v69 & 4) != 0)
            v40 = (double *)(*(uint64_t (**)(uint64_t *, float))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(&v68, 0.01);
          else
            v40 = (double *)&v68;
          v39 = *v40;
        }
        *(float *)&v64 = v39;
        *((float *)&v64 + 1) = v39;
        *((float *)&v64 + 2) = v39;
        v41 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
        v42 = *v41;
        v43 = v41[1];
        v44 = v41[3];
        v61[2] = v41[2];
        v61[3] = v44;
        v61[0] = v42;
        v61[1] = v43;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68);
      }
      v14 = 1;
LABEL_45:
      ++v13;
      v12 = *a2;
      if (v13 >= (a2[1] - *a2) >> 3)
        goto LABEL_50;
    }
  }
  v14 = 0;
LABEL_50:
  v56 = 0;
  if (getLocalTransformation((uint64_t)&v68, &v56, v59, (uint64_t)&v57))
  {
    MEMORY[0x2348B199C](&v64, &v68);
    if ((v14 & 1) != 0)
    {
      v48 = v64;
      v49 = v65;
      v50 = v66;
      v51 = v67;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
      v52 = v48;
      v53 = v49;
      v54 = v50;
      v55 = v51;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
      v64 = v52;
      v65 = v53;
      v66 = v54;
      v67 = v55;
    }
    DWORD2(v52) = 0;
    *(_QWORD *)&v52 = 0;
    REDecomposeMatrix();
    RETransformComponentSetLocalSRT();
    RENetworkMarkComponentDirty();
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v57, v58[0]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v59);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v63);
}

void sub_22FFB6C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,__int16 a57,char a58,char a59)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a30, a31);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a33);
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a56);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a10);
  _Unwind_Resume(a1);
}

_QWORD *realityio::AnchoringComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  const std::string **v19;
  uint64_t v20;
  std::string *p_p;
  _QWORD *v22;
  realityio::tokens::EcsTokens_StaticTokenType *v23;
  uint64_t v24;
  const std::string *v25;
  _QWORD *v26;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v31;
  uint64_t v32;
  _QWORD *v33;
  realityio::tokens::EcsTokens_StaticTokenType *v34;
  uint64_t v35;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v36;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v37;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v38;
  NSObject *v39;
  unint64_t v40;
  const char *v41;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v42;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  std::string v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *__p;
  std::type_info **v54;
  uint64_t v55;
  uint8_t buf[4];
  const char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v52 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
    realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v52, v8);
  }
  else
  {
    REAnchoringComponentGetComponentType();
    __p = (void *)REComponentCreateByClass();
    if (__p)
    {
      RERetain();
      v9 = __p;
    }
    else
    {
      v9 = 0;
    }
    v10 = v52;
    if (v52 != v9)
    {
      v52 = v9;
      __p = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&__p);
    RERelease();
    v54 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy((uint64_t *)&__p, (uint64_t *)&v52);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &__p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  }
  v50 = 0;
  v51 = 0;
  __p = 0;
  v54 = 0;
  v55 = 0;
  memset(&v49, 0, sizeof(v49));
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12);
      v16 = *a3;
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + v12));
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      v19 = (const std::string **)(v16 + v13);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
          break;
      }
      v22 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
      v23 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v23)
        v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 7) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
      {
        v24 = *(_QWORD *)(v16 + v13 + 8);
        if ((v24 & 4) != 0)
        {
          v25 = (const std::string *)(*(uint64_t (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
          p_p = &v49;
        }
        else
        {
          p_p = &v49;
LABEL_23:
          v25 = *v19;
        }
        goto LABEL_24;
      }
      v26 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
      v27 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v27)
        v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      if ((*v26 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
      {
        v28 = *(_QWORD *)(v16 + v13 + 8);
        if ((v28 & 4) != 0)
          v19 = (const std::string **)(*(uint64_t (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
        v29 = &v51;
      }
      else
      {
        v30 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
        v31 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v31)
          v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
        if ((*v30 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v31 + 9) & 0xFFFFFFFFFFFFFFF8)
          || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
        {
          v33 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
          v34 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v34)
            v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          if ((*v33 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v34 + 5) & 0xFFFFFFFFFFFFFFF8))
          {
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + v13)))
            {
              v35 = *(_QWORD *)(v16 + v13 + 8);
              if ((v35 & 4) != 0)
                (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
            }
          }
          goto LABEL_46;
        }
        v32 = *(_QWORD *)(v16 + v13 + 8);
        if ((v32 & 4) != 0)
          v19 = (const std::string **)(*(uint64_t (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
        v29 = &v50;
      }
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(v29, v19);
LABEL_46:
      ++v14;
      v11 = *a2;
      v13 += 16;
      v12 += 8;
      if (v14 >= (a2[1] - *a2) >> 3)
        goto LABEL_50;
    }
    v20 = *(_QWORD *)(v16 + v13 + 8);
    if ((v20 & 4) == 0)
    {
      p_p = (std::string *)&__p;
      goto LABEL_23;
    }
    v25 = (const std::string *)(*(uint64_t (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v16 + v13);
    p_p = (std::string *)&__p;
LABEL_24:
    std::string::operator=(p_p, v25);
    goto LABEL_46;
  }
LABEL_50:
  v36 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!v36)
    v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
  if ((v51 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v36 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    REAnchoringComponentSetDescriptorType();
    if (v50)
    {
      v42 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v42)
        v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      if ((v50 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v42 + 1) & 0xFFFFFFFFFFFFFFF8)
        && !atomic_load(&realityio::tokens::TransformBuilderTokens))
      {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      }
      REAnchoringComponentSetDescriptorAlignment();
    }
  }
  else
  {
    v37 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
    if ((v51 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v37 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceGroup();
      REAnchoringComponentSetDescriptorResourceName();
    }
    else
    {
      v38 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v38)
        v38 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      if ((v51 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8))
      {
        v39 = *(NSObject **)(realityio::logObjects(v38) + 24);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v40 = v51 & 0xFFFFFFFFFFFFFFF8;
          if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v41 = (const char *)(v40 + 16);
            if (*(char *)(v40 + 39) < 0)
              v41 = *(const char **)v41;
          }
          else
          {
            v41 = "";
          }
          *(_DWORD *)buf = 136315138;
          v57 = v41;
          _os_log_impl(&dword_22FF26000, v39, OS_LOG_TYPE_DEFAULT, "Unknown anchor type %s", buf, 0xCu);
        }
      }
      REAnchoringComponentSetDescriptorType();
    }
  }
  REAnchoringComponentSetScaleFactor();
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  if ((v50 & 7) != 0)
  {
    v44 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if ((v51 & 7) != 0)
  {
    v46 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v52);
}

void sub_22FFB736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::VtValue *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a18);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a9);
  _Unwind_Resume(a1);
}

realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::~ShaderGraphUtilityTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::TransformBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::TransformBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::TransformBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::TransformBuilderTokens_StaticTokenType::TransformBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FFB7494(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4074BD09C3);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(RIO_MTLX::MaterialAssign *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(void)::v, "material");
  }
  return RIO_MTLX::MaterialAssign::MATERIAL_ATTRIBUTE(void)::v;
}

void sub_22FFB751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
    v7 = *(_QWORD *)(a1 + 240);
  else
    v7 = 0;
  v20 = v7;
  v21 = v6;
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v7, (unsigned __int8 *)&__p, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v8 = v19;
    *a3 = v18;
    a3[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v7, (unsigned __int8 *)a2, a3);
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22FFB7664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Look>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_22FFB7824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_22FFB79D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Node>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FFB7AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FFB7B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id realityio::conversions::asScalar<float>()
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:");
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<double>()
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:");
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(unsigned __int16 a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedShort:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<int>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<long>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLong:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<long long>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<short>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithShort:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<unsigned char>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedChar:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<unsigned int>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<unsigned long>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<unsigned long long>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<unsigned short>(uint64_t a1)
{
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedShort:", a1);
  return (id)objc_claimAutoreleasedReturnValue();
}

id realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v1;
  const std::type_info *v2;
  const std::type_info *v3;
  void *v4;
  const std::type_info *v5;
  uint64_t v6;
  const std::type_info *v7;
  const std::type_info *v8;
  const std::type_info *v9;
  unsigned __int16 *v10;
  const std::type_info *v11;
  unsigned int *v12;
  const std::type_info *v13;
  uint64_t *v14;
  const std::type_info *v15;
  uint64_t *v16;
  const std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  const std::type_info *v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  const std::type_info *v21;
  unsigned __int8 *v22;
  const std::type_info *v23;
  unsigned int *v24;
  const std::type_info *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = a1;
  pxrInternal__aapl__pxrReserved__::VtValue::GetType(a1);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], v2);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(v1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    return v4;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB778], v3);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    v6 = *((_QWORD *)v1 + 1);
    if (v6)
    {
      if (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 16) == 1)
      {
LABEL_9:
        if ((v6 & 4) == 0)
        {
LABEL_10:
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithChar:", *(char *)v1);
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          return v4;
        }
        v27 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v1);
LABEL_35:
        v1 = (pxrInternal__aapl__pxrReserved__::VtValue *)v27;
        goto LABEL_10;
      }
      if ((v6 & 4) != 0
        && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(v1, MEMORY[0x24BEDB778]))
      {
        v6 = *((_QWORD *)v1 + 1);
        goto LABEL_9;
      }
    }
    v27 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    goto LABEL_35;
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v5);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(v1);
    realityio::conversions::asScalar<double>();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v7);
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
    {
      pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(v1);
      realityio::conversions::asScalar<float>();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v10 = (unsigned __int16 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(v1);
        realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*v10);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], v9);
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v12 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v1);
          realityio::conversions::asScalar<int>(*v12);
          v4 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A8], v11);
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
          {
            v14 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long>(v1);
            realityio::conversions::asScalar<long>(*v14);
            v4 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], v13);
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(v1);
              realityio::conversions::asScalar<long long>(*v16);
              v4 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7B8], v15);
              if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
              {
                v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<short>(v1);
                realityio::conversions::asScalar<short>(*(__int16 *)v18);
                v4 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7C0], v17);
                if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                {
                  v20 = pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned short>(v1);
                  realityio::conversions::asScalar<unsigned short>(*(unsigned __int16 *)v20);
                  v4 = (void *)objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], v19);
                  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                  {
                    v22 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(v1);
                    realityio::conversions::asScalar<unsigned char>(*v22);
                    v4 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], v21);
                    if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                    {
                      v24 = (unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(v1);
                      realityio::conversions::asScalar<unsigned int>(*v24);
                      v4 = (void *)objc_claimAutoreleasedReturnValue();
                    }
                    else
                    {
                      pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7B0], v23);
                      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                      {
                        v26 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long>(v1);
                        realityio::conversions::asScalar<unsigned long>(*v26);
                        v4 = (void *)objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], v25);
                        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
                        {
                          v28 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(v1);
                          realityio::conversions::asScalar<unsigned long long>(*v28);
                          v4 = (void *)objc_claimAutoreleasedReturnValue();
                        }
                        else
                        {
                          v4 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Get<short>(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::VtValue *result;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 3)
    goto LABEL_6;
  if ((v2 & 4) == 0 || !pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, MEMORY[0x24BEDB7B8]))
    return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)this + 1);
LABEL_6:
  result = this;
  if ((v2 & 4) != 0)
    return (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
  return result;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned short>(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::VtValue *result;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  if (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 16) == 4)
    goto LABEL_6;
  if ((v2 & 4) == 0 || !pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(this, MEMORY[0x24BEDB7C0]))
    return (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)this + 1);
LABEL_6:
  result = this;
  if ((v2 & 4) != 0)
    return (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

id realityio::conversions::asString<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  const std::type_info *v2;
  const std::type_info *v3;
  uint64_t v4;
  const char *v5;
  const std::type_info *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  unint64_t v12;

  pxrInternal__aapl__pxrReserved__::VtValue::GetType(a1);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
  {
    v4 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(a1);
    if (*(char *)(v4 + 23) >= 0)
      v5 = (const char *)v4;
    else
      v5 = *(const char **)v4;
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
    {
      v7 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1);
      v10 = *(const char **)(v7 + 24);
      v8 = v7 + 24;
      v9 = v10;
      if (*(char *)(v8 + 23) >= 0)
        v5 = (const char *)v8;
      else
        v5 = v9;
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::TfType::IsA())
        return 0;
      v12 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(a1) & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        v5 = (const char *)(v12 + 16);
        if (*(char *)(v12 + 39) < 0)
          v5 = *(const char **)v5;
      }
      else
      {
        v5 = "";
      }
    }
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t realityio::conversions::usdToSGDataType(uint64_t a1, const std::type_info *a2)
{
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *Data;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v4;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v5;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v6;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v7;
  const std::type_info *v8;
  const std::type_info *v10;
  const std::type_info *v11;
  const std::type_info *v12;
  const std::type_info *v13;
  const std::type_info *v14;
  const std::type_info *v15;
  const std::type_info *v16;
  const std::type_info *v17;
  const std::type_info *v18;
  const std::type_info *v19;
  const std::type_info *v20;
  const std::type_info *v21;
  const std::type_info *v22;
  const std::type_info *v23;
  const std::type_info *v24;
  const std::type_info *v25;
  const std::type_info *v26;
  const std::type_info *v27;
  const std::type_info *v28;
  const std::type_info *v29;
  const std::type_info *v30;
  const std::type_info *v31;
  const std::type_info *v32;
  const std::type_info *v33;
  const std::type_info *v34;
  const std::type_info *v35;
  const std::type_info *v36;
  const std::type_info *v37;
  const std::type_info *v38;
  realityio *IsA;
  const std::type_info *v40;
  NSObject *v41;
  realityio *v42;
  const std::type_info *v43;
  NSObject *v44;
  realityio *v45;
  const std::type_info *v46;
  NSObject *v47;
  const std::type_info *v48;
  const std::type_info *v49;
  uint8_t v50[16];
  uint8_t v51[16];
  uint8_t buf[8];
  uint64_t v53;

  v53 = a1;
  Data = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
  if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
      return 32;
    if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
      return 33;
  }
  else
  {
    v4 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
    if (!v4)
      v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
    if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
        return 35;
      if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
        return 36;
    }
    else
    {
      v5 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
      if (!v5)
        v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
      if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 5) & 0xFFFFFFFFFFFFFFF8))
      {
        if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
          return 38;
        if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
          return 39;
      }
      else
      {
        v6 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
        if (!v6)
          v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
        if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 6) & 0xFFFFFFFFFFFFFFF8))
        {
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
            return 41;
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
            return 42;
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
            return 44;
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
            return 45;
        }
        else
        {
          v7 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
          if (!v7)
            v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
          if (((unint64_t)a2->__vftable & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8))
          {
            if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
              return 49;
            if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
              return 47;
            if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
              return 52;
            if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
              return 50;
          }
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 1;
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], v18);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 2;
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], v19);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 3;
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], v20);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 6;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 7;
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v22);
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 9;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 10;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 11;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 12;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 13;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 18;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 20;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 21;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 22;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 24;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 25;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 26;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 28;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 29;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 30;
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
    return 31;
  IsA = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)IsA)
  {
    v41 = *(NSObject **)(realityio::logObjects(IsA) + 48);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v41, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", buf, 2u);
    }
    return 14;
  }
  v42 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)v42)
  {
    v44 = *(NSObject **)(realityio::logObjects(v42) + 48);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v51 = 0;
      _os_log_error_impl(&dword_22FF26000, v44, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", v51, 2u);
    }
    return 15;
  }
  v45 = (realityio *)pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)v45)
  {
    v47 = *(NSObject **)(realityio::logObjects(v45) + 48);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v50 = 0;
      _os_log_error_impl(&dword_22FF26000, v47, OS_LOG_TYPE_ERROR, "We shouldn't see any double-precision matrices -- they are filtered up front.", v50, 2u);
    }
  }
  else
  {
    if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
      return 14;
    if ((pxrInternal__aapl__pxrReserved__::TfType::IsA() & 1) != 0)
      return 15;
    pxrInternal__aapl__pxrReserved__::TfType::IsA();
  }
  return 17;
}

uint64_t *realityio::conversions::castToSupportedType(realityio::conversions *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[4];

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(this))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(this);
    pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f();
    return pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((uint64_t *)this, v6);
  }
  else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(this))
  {
    v4 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(this);
    MEMORY[0x2348B18AC](v6, v4);
    return pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((uint64_t *)this, (uint64_t)v6);
  }
  else
  {
    result = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(this);
    if ((_DWORD)result)
    {
      v5 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(this);
      MEMORY[0x2348B199C](v6, v5);
      return pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((uint64_t *)this, v6);
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(void)::ti
        + 2;
  v4 = operator new();
  *(_OWORD *)v4 = *a2;
  v5 = (unsigned int *)(v4 + 16);
  atomic_store(0, (unsigned int *)(v4 + 16));
  *a1 = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  if (v9)
    (*(void (**)(_BYTE *))(v9 + 32))(v8);
  return a1;
}

void sub_22FFB8F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v9, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(void)::ti
        + 2;
  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
  v6 = (unsigned int *)(v4 + 36);
  atomic_store(0, (unsigned int *)(v4 + 36));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if (v10)
    (*(void (**)(_BYTE *))(v10 + 32))(v9);
  return a1;
}

void sub_22FFB9074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v10, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
        + 2;
  v4 = operator new();
  v5 = a2[1];
  *(_OWORD *)v4 = *a2;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = a2[3];
  *(_OWORD *)(v4 + 32) = a2[2];
  *(_OWORD *)(v4 + 48) = v6;
  v7 = (unsigned int *)(v4 + 64);
  atomic_store(0, (unsigned int *)(v4 + 64));
  *a1 = v4;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (v11)
    (*(void (**)(_BYTE *))(v11 + 32))(v10);
  return a1;
}

void sub_22FFB917C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<char>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<char>;
  a1[2] = MEMORY[0x24BEDB778];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<char>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

_WORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::pxr_half::half>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _WORD *result;

  result = (_WORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::pxr_half::half>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A8] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7A8]);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<long>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long>;
  a1[2] = MEMORY[0x24BEDB7A8];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 7)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7D0]);
  else
    return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<long long>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long long>;
  a1[2] = MEMORY[0x24BEDB7D0];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<long long>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<short>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _WORD *result;

  result = (_WORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<short>;
  a1[2] = MEMORY[0x24BEDB7B8];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<short>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned short>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _WORD *result;

  result = (_WORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned short>;
  a1[2] = MEMORY[0x24BEDB7C0];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned short>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 2)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB790]);
  else
    return 0;
}

_BYTE *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned char>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned char>;
  a1[2] = MEMORY[0x24BEDB790];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned char>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7B0] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7B0]);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned long>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long>;
  a1[2] = MEMORY[0x24BEDB7B0];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 8)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7D8]);
  else
    return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<unsigned long long>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long long>;
  a1[2] = MEMORY[0x24BEDB7D8];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<unsigned long long>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_DefaultValueHolder::Create<pxrInternal__aapl__pxrReserved__::SdfAssetPath>@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v4[2];

  pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v4);
  v2 = v4[1];
  *(pxrInternal__aapl__pxrReserved__::SdfAssetPath **)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v2;
  v4[0] = 0;
  return ((uint64_t (*)(_QWORD))v2)(0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::SdfAssetPath>@<X0>(pxrInternal__aapl__pxrReserved__::SdfAssetPath **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  uint64_t result;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  *a1 = v2;
  a1[1] = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfAssetPath>;
  return result;
}

void sub_22FFB9858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::TfToken>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::TfToken>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    if ((*result & 7) != 0)
    {
      v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::~ShaderGraphUtilityTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>::New()
{
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)operator new();
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType::ShaderGraphUtilityTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FFB99F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4074BD09C3);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Hash(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(void)::ti
        + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  unint64_t v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = LODWORD(v5);
  if (*(_BYTE *)(a1 + 8))
    v6 = ((*(_QWORD *)a1 + LODWORD(v5) + (*(_QWORD *)a1 + LODWORD(v5)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v5))) >> 1)
       + LODWORD(v5);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(*a1 + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = (unsigned int *)(v4 + 16);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 36);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 36);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Hash(float **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3f const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(void)::ti
        + 2;
  result = operator new();
  v5 = *(_DWORD *)(v3 + 32);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_OWORD *)(result + 16) = v6;
  *(_DWORD *)(result + 32) = v5;
  v7 = (unsigned int *)(result + 36);
  atomic_store(0, (unsigned int *)(result + 36));
  *a2 = result;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3f const&>(uint64_t a1, float *a2)
{
  uint64_t v3;
  char v4;

  v4 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10;
  unint64_t v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = LODWORD(v10);
  if (*(_BYTE *)(a1 + 8))
    v11 = ((*(_QWORD *)a1
          + LODWORD(v10)
          + (*(_QWORD *)a1 + LODWORD(v10)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9;
  unint64_t v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = LODWORD(v9);
  if (*(_BYTE *)(a1 + 8))
    v10 = ((*(_QWORD *)a1 + LODWORD(v9) + (*(_QWORD *)a1 + LODWORD(v9))
                                        * (*(_QWORD *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  unint64_t v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = LODWORD(v8);
  if (*(_BYTE *)(a1 + 8))
    v9 = ((*(_QWORD *)a1 + LODWORD(v8) + (*(_QWORD *)a1 + LODWORD(v8)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v8))) >> 1)
       + LODWORD(v8);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v9;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7;
  unint64_t v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = LODWORD(v7);
  if (*(_BYTE *)(a1 + 8))
    v8 = ((*(_QWORD *)a1 + LODWORD(v7) + (*(_QWORD *)a1 + LODWORD(v7)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v7))) >> 1)
       + LODWORD(v7);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  unint64_t v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = LODWORD(v6);
  if (*(_BYTE *)(a1 + 8))
    v7 = ((*(_QWORD *)a1 + LODWORD(v6) + (*(_QWORD *)a1 + LODWORD(v6)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v6))) >> 1)
       + LODWORD(v6);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = atomic_load((unsigned int *)(*a1 + 36));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_DWORD *)(*a1 + 32);
    v6 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v6;
    *(_DWORD *)(v3 + 32) = v5;
    v7 = (unsigned int *)(v3 + 36);
    atomic_store(0, (unsigned int *)(v3 + 36));
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    *a1 = v3;
    v9 = (unsigned int *)(v4 + 36);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 64);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 64);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Hash(float **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4f const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>>::_GetProxiedAsVtValue@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
        + 2;
  result = operator new();
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(result + 32) = v3[2];
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)result = v7;
  *(_OWORD *)(result + 16) = v6;
  v8 = (unsigned int *)(result + 64);
  atomic_store(0, (unsigned int *)(result + 64));
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4f const&>(uint64_t a1, float *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17;
  unint64_t v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = LODWORD(v17);
  if (*(_BYTE *)(a1 + 8))
    v18 = ((*(_QWORD *)a1
          + LODWORD(v17)
          + (*(_QWORD *)a1 + LODWORD(v17)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v18;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16;
  unint64_t v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = LODWORD(v16);
  if (*(_BYTE *)(a1 + 8))
    v17 = ((*(_QWORD *)a1
          + LODWORD(v16)
          + (*(_QWORD *)a1 + LODWORD(v16)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v17;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15;
  unint64_t v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = LODWORD(v15);
  if (*(_BYTE *)(a1 + 8))
    v16 = ((*(_QWORD *)a1
          + LODWORD(v15)
          + (*(_QWORD *)a1 + LODWORD(v15)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v16;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14;
  unint64_t v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = LODWORD(v14);
  if (*(_BYTE *)(a1 + 8))
    v15 = ((*(_QWORD *)a1
          + LODWORD(v14)
          + (*(_QWORD *)a1 + LODWORD(v14)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v15;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13;
  unint64_t v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = LODWORD(v13);
  if (*(_BYTE *)(a1 + 8))
    v14 = ((*(_QWORD *)a1
          + LODWORD(v13)
          + (*(_QWORD *)a1 + LODWORD(v13)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v14;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12;
  unint64_t v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = LODWORD(v12);
  if (*(_BYTE *)(a1 + 8))
    v13 = ((*(_QWORD *)a1
          + LODWORD(v12)
          + (*(_QWORD *)a1 + LODWORD(v12)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v13;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11;
  unint64_t v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = LODWORD(v11);
  if (*(_BYTE *)(a1 + 8))
    v12 = ((*(_QWORD *)a1
          + LODWORD(v11)
          + (*(_QWORD *)a1 + LODWORD(v11)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&,float const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = atomic_load((unsigned int *)(*a1 + 64));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_OWORD *)(*a1 + 48);
    v7 = *(_OWORD *)*a1;
    v6 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(*a1 + 32);
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)v3 = v7;
    *(_OWORD *)(v3 + 16) = v6;
    v8 = (unsigned int *)(v3 + 64);
    atomic_store(0, (unsigned int *)(v3 + 64));
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *a1 = v3;
    v10 = (unsigned int *)(v4 + 64);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::_Tf_RegistryFunctionBar0()
{
  void *v1;
  char v2;

  std::string::basic_string[abi:ne180100]<0>(&v1, "RIO_USDMTLX_READER");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName();
  if (v2 < 0)
    operator delete(v1);
  pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
  return pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl();
}

void sub_22FFBA8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes()
{
  unsigned __int8 v0;
  _DWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_DWORD *)operator new();
    *v2 = 0;
    pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes(void)::nodes = (uint64_t)v2;
  }
  return pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes(void)::nodes;
}

void sub_22FFBA974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *realityio::AnimationComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
    realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  }
  else
  {
    REAnimationComponentGetComponentType();
    v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5)
      RERetain();
    v6 = v8;
    if (v8 != v5)
    {
      v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(v9, &v8);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    RERelease();
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_22FFBAA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

_QWORD *realityio::UsdStageDelta::UsdStageDelta(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  _OWORD v7[2];
  int v8;

  *a1 = &off_24FDE8388;
  v5 = a1 + 2;
  a1[1] = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](v5, a3);
  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  a1[5] = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a1 + 6), (uint64_t)v7);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v7);
  return a1;
}

void sub_22FFBAB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v11, *(_QWORD **)(v10 + 24));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v9);
  _Unwind_Resume(a1);
}

void realityio::UsdStageDelta::setPrimDeltaForPrimPath(realityio::UsdStageDelta *this, const realityio::UsdPrimDelta *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  _DWORD *v9;

  v6 = (uint64_t **)((char *)this + 16);
  v7 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 16, a3);
  if ((uint64_t **)((char *)this + 24) == v7)
  {
    v9 = a3;
    v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(v6, a3, (uint64_t)&std::piecewise_construct, &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v8 + 6), (_DWORD *)a2 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v8 + 52, (_DWORD *)a2 + 3);
    *((_BYTE *)v8 + 56) = *((_BYTE *)a2 + 16);
    if (v8 + 5 != (uint64_t *)a2)
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v8 + 8, *((_QWORD **)a2 + 3), (_QWORD *)a2 + 4);
      *((_DWORD *)v8 + 32) = *((_DWORD *)a2 + 22);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v8 + 12, *((_QWORD **)a2 + 9), 0);
    }
  }
  else
  {
    realityio::UsdPrimDelta::updateWithPrimDelta(v7 + 5, a2);
  }
}

void realityio::UsdStageDelta::updateWithStageDelta(realityio::UsdStageDelta *this, const realityio::UsdStageDelta *a2)
{
  _QWORD *i;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;

  if (*((_QWORD *)this + 1) == *((_QWORD *)a2 + 1))
  {
    for (i = (_QWORD *)*((_QWORD *)a2 + 8); i; i = (_QWORD *)*i)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)this + 48, i + 2, i + 2);
    v5 = (char *)*((_QWORD *)a2 + 2);
    v6 = (char *)a2 + 24;
    if (v5 != v6)
    {
      do
      {
        realityio::UsdStageDelta::setPrimDeltaForPrimPath(this, (const realityio::UsdPrimDelta *)(v5 + 40), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
        v7 = (char *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (char *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
  }
}

const void **realityio::UsdStageDelta::description@<X0>(realityio::UsdStageDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  realityio::UsdStageDelta *v6;
  const CFArrayCallBacks *v7;
  __CFArray *v8;
  const char *v9;
  CFStringRef v10;
  realityio::UsdStageDelta *v11;
  realityio::UsdStageDelta *v12;
  BOOL v13;
  CFStringRef v14;
  _QWORD *v15;
  uint64_t v16;
  CFTypeRef cf;
  void *v19;
  void *value;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  v21[0] = &off_24FDE83C8;
  v22 = v21;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (realityio::UsdStageDelta *)*((_QWORD *)this + 2);
  if (v6 != (realityio::UsdStageDelta *)((char *)this + 24))
  {
    v7 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    do
    {
      v8 = CFArrayCreateMutable(0, 0, v7);
      if (!v22)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *))(*v22 + 48))(&value, v22, (_QWORD *)v6 + 4);
      CFArrayAppendValue(v8, value);
      (*(void (**)(void **__return_ptr, _QWORD *))(*((_QWORD *)v6 + 5) + 16))(&v19, (_QWORD *)v6 + 5);
      CFArrayAppendValue(v8, v19);
      v10 = realityio::joinAsCFStringRef(v8, (const __CFArray *)": ", v9);
      CFRelease(v8);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v19);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      v11 = (realityio::UsdStageDelta *)*((_QWORD *)v6 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(realityio::UsdStageDelta **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (realityio::UsdStageDelta *)*((_QWORD *)v6 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != (realityio::UsdStageDelta *)((char *)this + 24));
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  v15 = v22;
  if (v22 == v21)
  {
    v16 = 4;
    v15 = v21;
    goto LABEL_14;
  }
  if (v22)
  {
    v16 = 5;
LABEL_14:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  *a2 = 0;
  realityio::UsdMetadataDelta::description((realityio::UsdStageDelta *)((char *)this + 40), (CFStringRef *)&value);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<UsdStageDelta: %p { stage: %p, metadata: %@, prim deltas: (%lu) [ %@ ] }>"), this, (char *)this + 8, value, *((_QWORD *)this + 4), cf);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_22FFBAF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  const void *v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, const void *);
  v11 = va_arg(va1, _QWORD);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v5 = a1 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = _ZNSt3__14pairIKN32pxrInternal__aapl__pxrReserved__7SdfPathEN9realityio12UsdPrimDeltaEEC1B8ne180100IJRS3_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSA_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSJ_IJXspT2_EEEE(v6 + 8, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22FFBB10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *_ZNSt3__14pairIKN32pxrInternal__aapl__pxrReserved__7SdfPathEN9realityio12UsdPrimDeltaEEC1B8ne180100IJRS3_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNSA_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSJ_IJXspT2_EEEE(_DWORD *a1, _DWORD **a2)
{
  uint64_t v3;
  _DWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _QWORD **v8;
  _QWORD *v9[2];

  v3 = (uint64_t)*a2;
  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, *a2);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(v3 + 4));
  v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)(a1 + 2), v6, 0, (uint64_t)&v8);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v8, v9[0]);
  return a1;
}

void sub_22FFBB1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&a10, a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v11);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE83C8;
  return result;
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE83C8;
}

void std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, CFStringRef *a2@<X8>)
{
  uint64_t String;

  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);
  realityio::asWrappedCFStringRef(String, a2);
}

uint64_t std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageDelta::description(void)::$_0,std::allocator<realityio::UsdStageDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t realityio::AnimationLibraryAssetAction::annotateSubTimelines(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t a5)
{
  uint64_t Size;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Asset;
  const __CFString *Type;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  int v22;
  void *__p[2];
  char v24;
  uint64_t v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  REAssetCopyDependencyArray();
  Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    v9 = Size;
    v10 = 0;
    v11 = *MEMORY[0x24BEDB800];
    v20 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v19 = MEMORY[0x24BEDB848] + 16;
    do
    {
      Asset = REAssetDynamicArrayGetAsset();
      Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, CFSTR("Timeline"), 0) == kCFCompareEqualTo)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
        v14 = *(char *)(a2 + 23);
        if (v14 >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a2 + 23);
        else
          v16 = *(_QWORD *)(a2 + 8);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"_subTimeline_", 13);
        std::ostream::operator<<();
        v25 = Asset;
        if (Asset)
          RERetain();
        std::stringbuf::str();
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a4);
        realityio::ECSAction::addAsset(a1, &v25, (uint64_t)__p, &v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
        if (v24 < 0)
          operator delete(__p[0]);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v25);
        std::stringbuf::str();
        realityio::AnimationLibraryAssetAction::annotateSubTimelines(a1, __p, Asset, a4, a5);
        if (v24 < 0)
          operator delete(__p[0]);
        v26[0] = v11;
        *(_QWORD *)((char *)v26 + *(_QWORD *)(v11 - 24)) = v20;
        v26[1] = v19;
        if (v27 < 0)
          operator delete((void *)v26[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2348B4DA4](&v28);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return RERelease();
}

void sub_22FFBB4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void realityio::ECSAction::addAsset(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *__p[2];
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && *(_QWORD *)(v4 + 200))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    MEMORY[0x2348B26F8](&v15, __p);
    v9 = *(_QWORD *)a4;
    v10 = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(uint64_t **)(v11 + 216);
    if (v9 == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "/model");
      MEMORY[0x2348B26F8](&v15, __p);
      realityio::LiveSceneManager::addAsset(v12, a2, a3, &v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    else
    {
      realityio::LiveSceneManager::addAsset(*(uint64_t **)(v11 + 216), a2, a3, a4);
    }
  }
}

void sub_22FFBB640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void realityio::AnimationLibraryAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, realityio *a3@<X1>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a6@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t Name;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type size;
  _QWORD *v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  std::string::size_type *v19;
  std::string::size_type *v20;
  int TimelineType;
  std::string::size_type v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  std::string::size_type *v29;
  char *v30;
  char *v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  _QWORD *v39;
  realityio::tokens::EcsTokens_StaticTokenType *v40;
  std::string::size_type v42;
  void *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  std::string::size_type v48;
  uint64_t v49;
  char *v50;
  std::string::size_type v51;
  void *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  char *v56;
  __int128 *String;
  uint64_t v58;
  __int128 *v59;
  double v60;
  double v61;
  pxrInternal__aapl__pxrReserved__::SdfPath *v62;
  uint64_t v63;
  void *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  char *Text;
  float v68;
  float v69;
  std::string::size_type v70;
  char *v71;
  float v72;
  float v73;
  char *v74;
  float v75;
  float v76;
  pxrInternal__aapl__pxrReserved__::SdfPath *v77;
  uint64_t v78;
  void *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  char *v82;
  float v83;
  float v84;
  std::string::size_type v85;
  char *v86;
  float v87;
  float v88;
  char *v89;
  float v90;
  float v91;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t v93;
  void *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  char *v97;
  float v98;
  float v99;
  std::string::size_type v100;
  char *v101;
  float v102;
  float v103;
  char *v104;
  float v105;
  float v106;
  unint64_t j;
  _QWORD *v108;
  uint64_t v109;
  char v110;
  void *v111;
  void *v112;
  int v113;
  void **v114;
  unsigned __int8 *v115;
  void *v116;
  uint64_t TimelineAsset;
  uint64_t v118;
  size_t v119;
  std::string *v120;
  std::string *v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  size_t v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  uint64_t v133;
  std::string::size_type v134;
  size_t v135;
  std::string *v136;
  std::string *v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  size_t v142;
  std::string *v143;
  std::string *v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  __int128 v148;
  std::string::size_type v149;
  std::string::size_type v150;
  uint64_t v151;
  std::string::size_type v152;
  size_t v153;
  std::string *v154;
  std::string *v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  __int128 v159;
  size_t v160;
  std::string *v161;
  std::string *v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  __int128 v166;
  uint64_t AnimationLibraryAsset;
  uint64_t v168;
  char *v169;
  size_t v170;
  std::string *v171;
  char *v172;
  std::string *v173;
  __int128 v174;
  uint64_t v176;
  std::string::size_type v179;
  uint64_t v180;
  _DWORD *v181;
  std::string::size_type v182;
  std::string v184;
  std::string v185;
  void *__p[2];
  int64_t v187;
  std::string v188;
  uint64_t v189;
  uint64_t v190;
  std::string v191;
  int64x2_t v192;
  unint64_t v193;
  int64x2_t v194;
  unint64_t v195;
  int64x2_t v196;
  unint64_t v197;
  uint64_t v198;
  std::string *v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  std::string v204;
  std::string v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, a1);
  v176 = a2;
  ServiceLocator = REEngineGetServiceLocator();
  v8 = MEMORY[0x2348B1264](ServiceLocator);
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v188.__r_.__value_.__r.__words[0] = 0;
  v196.i64[0] = 0;
  v194.i64[0] = 0;
  v192.i64[0] = 0;
  realityio::getAnimInputControlsFromInputs(a4, a5, (double *)&v188, &v196, &v194, (double *)v192.i64);
  v9 = *(double *)v196.i64;
  v10 = *(double *)v192.i64;
  v11 = *(double *)v194.i64;
  v196 = 0uLL;
  v197 = 0;
  v194 = 0uLL;
  v195 = 0;
  v192 = 0uLL;
  v193 = 0;
  realityio::entityPath(a3, (uint64_t)&v205);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v205);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v13 = *(_OWORD *)Name;
    v191.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v13;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v180 = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v205);
  v14 = *a4;
  if (a4[1] != *a4)
  {
    v15 = 0;
    v182 = 0;
    v179 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v205, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v15));
      size = v205.__r_.__value_.__l.__size_;
      if (v205.__r_.__value_.__l.__size_)
      {
        if (strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v205.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIN9realityio12WrappedRERefIP7REAssetEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
          if ((size & 4) == 0
          {
            goto LABEL_65;
          }
          size = v205.__r_.__value_.__l.__size_;
        }
        if ((size & 4) != 0)
          v17 = (_QWORD *)(*(uint64_t (**)(std::string *))((size & 0xFFFFFFFFFFFFFFF8) + 168))(&v205);
        else
          v17 = (_QWORD *)v205.__r_.__value_.__r.__words[0];
        if (*v17)
        {
          v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 + 8 * v15);
          v19 = (std::string::size_type *)v17[4];
          v20 = &v19[*v17];
          v181 = (_DWORD *)((char *)v18 + 4);
          do
          {
            RETimelineDefinitionCreateFromTimeline();
            TimelineType = RETimelineDefinitionGetTimelineType();
            RERelease();
            v22 = *v19;
            v23 = v202;
            if (v202 >= v203)
            {
              v25 = (v202 - v201) >> 3;
              if ((unint64_t)(v25 + 1) >> 61)
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              v26 = (v203 - v201) >> 2;
              if (v26 <= v25 + 1)
                v26 = v25 + 1;
              if ((unint64_t)(v203 - v201) >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v203, v27);
              else
                v28 = 0;
              v29 = (std::string::size_type *)&v28[8 * v25];
              *v29 = v22;
              v24 = (char *)(v29 + 1);
              v31 = v201;
              v30 = v202;
              if (v202 != v201)
              {
                do
                {
                  v32 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *--v29 = v32;
                }
                while (v30 != v31);
                v30 = v201;
              }
              v201 = (char *)v29;
              v202 = v24;
              v203 = &v28[8 * v27];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v202 = v22;
              v24 = v23 + 8;
            }
            v202 = v24;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v18);
            v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v188);
            v34 = v199;
            if ((unint64_t)v199 >= v200)
            {
              v36 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v198, (__int128 *)v33);
            }
            else
            {
              if (*(char *)(v33 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v199, *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
              }
              else
              {
                v35 = *(_OWORD *)v33;
                v199->__r_.__value_.__r.__words[2] = *(_QWORD *)(v33 + 16);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              }
              v36 = v34 + 1;
            }
            v199 = v36;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
            NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
            Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
            if (!Data)
              Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
            if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 53) & 0xFFFFFFFFFFFFFFF8))
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v18);
              v42 = v188.__r_.__value_.__r.__words[0];
              v43 = __p[0];
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
              v44 = *v19;
              v45 = v182;
              if ((void *)v42 == v43)
                v45 = *v19;
              v182 = v45;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, v18);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v188.__r_.__value_.__r.__words + 1, v181);
              v188.__r_.__value_.__l.__size_ = v44;
              v46 = v194.i64[1];
              if (v194.i64[1] >= v195)
              {
                v47 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v194, (uint64_t)&v188);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v194.i64[1], &v188);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v46 + 4), (_DWORD *)v188.__r_.__value_.__r.__words + 1);
                *(_QWORD *)(v46 + 8) = v188.__r_.__value_.__l.__size_;
                v47 = (char *)(v46 + 16);
              }
              v194.i64[1] = (uint64_t)v47;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            }
            else
            {
              v39 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
              v40 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
              if (!v40)
                v40 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
              if ((*v39 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v40 + 45) & 0xFFFFFFFFFFFFFFF8))
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v18);
                if (!atomic_load(&realityio::tokens::EcsTokens))
                  pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
                goto LABEL_64;
              }
              if (TimelineType == 32)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v18);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
                v48 = *v19;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, v18);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v188.__r_.__value_.__r.__words + 1, v181);
                v188.__r_.__value_.__l.__size_ = v48;
                v49 = v192.i64[1];
                if (v192.i64[1] >= v193)
                {
                  v50 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v192, (uint64_t)&v188);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v192.i64[1], &v188);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v49 + 4), (_DWORD *)v188.__r_.__value_.__r.__words + 1);
                  *(_QWORD *)(v49 + 8) = v188.__r_.__value_.__l.__size_;
                  v50 = (char *)(v49 + 16);
                }
                v192.i64[1] = (uint64_t)v50;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v18);
                v51 = v188.__r_.__value_.__r.__words[0];
                v52 = __p[0];
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
                v53 = *v19;
                v54 = v179;
                if ((void *)v51 == v52)
                  v54 = *v19;
                v179 = v54;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, v18);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v188.__r_.__value_.__r.__words + 1, v181);
                v188.__r_.__value_.__l.__size_ = v53;
                v55 = v196.i64[1];
                if (v196.i64[1] >= v197)
                {
                  v56 = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(&v196, (uint64_t)&v188);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v196.i64[1], &v188);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v55 + 4), (_DWORD *)v188.__r_.__value_.__r.__words + 1);
                  *(_QWORD *)(v55 + 8) = v188.__r_.__value_.__l.__size_;
                  v56 = (char *)(v55 + 16);
                }
                v196.i64[1] = (uint64_t)v56;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
LABEL_64:
            ++v19;
          }
          while (v19 != v20);
        }
      }
LABEL_65:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v205);
      ++v15;
      v14 = *a4;
      if (v15 >= (a4[1] - *a4) >> 3)
        goto LABEL_69;
    }
  }
  v182 = 0;
  v179 = 0;
LABEL_69:
  realityio::entityPath(a3, (uint64_t)&v188);
  String = (__int128 *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v188);
  v58 = v8;
  realityio::TimelineGroupFactory::TimelineGroupFactory(&v205, String);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v188);
  realityio::entityPath(a3, (uint64_t)__p);
  v59 = (__int128 *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
  realityio::TimelineGroupFactory::TimelineGroupFactory(&v188, v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v60 = v9 / v10;
  v61 = v11 / v10;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  v63 = v194.i64[1];
  v62 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v194.i64[0];
  if (v194.i64[1] == v194.i64[0])
  {
    v78 = v196.i64[1];
    v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v196.i64[0];
    if (v196.i64[1] == v196.i64[0])
    {
      if (v192.i64[1] == v192.i64[0])
        goto LABEL_101;
      goto LABEL_91;
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v62);
      v64 = __p[0];
      v65 = v204.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      v66 = *((_QWORD *)v62 + 1);
      if (v64 == (void *)v65)
      {
        realityio::entityPath(a3, (uint64_t)&v204);
        v58 = v180;
        Text = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
        std::string::basic_string[abi:ne180100]<0>(__p, Text);
        v68 = v60;
        v69 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v205, v66, (__int128 *)__p, "entitySceneClip", v68, v69);
        if (SHIBYTE(v187) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
        v70 = *((_QWORD *)v62 + 1);
        realityio::entityPath(a3, (uint64_t)&v204);
        v71 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
        std::string::basic_string[abi:ne180100]<0>(__p, v71);
        v72 = v60;
        v73 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v188, v70, (__int128 *)__p, "defaultSceneClip", v72, v73);
        if (SHIBYTE(v187) < 0)
          operator delete(__p[0]);
      }
      else
      {
        realityio::entityPath(v62, (uint64_t)&v204);
        v58 = v180;
        v74 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
        std::string::basic_string[abi:ne180100]<0>(__p, v74);
        v75 = v60;
        v76 = v61;
        realityio::TimelineGroupFactory::addTimeline((char *)&v188, v66, (__int128 *)__p, "childSceneClip", v75, v76);
        if (SHIBYTE(v187) < 0)
          operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      v62 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v62 + 16);
    }
    while (v62 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v63);
    v78 = v196.i64[1];
    v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v196.i64[0];
  }
  for (;
        v77 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v78;
        v77 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v77 + 16))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v77);
    v79 = __p[0];
    v80 = v204.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    v81 = *((_QWORD *)v77 + 1);
    if (v79 == (void *)v80)
    {
      realityio::entityPath(a3, (uint64_t)&v204);
      v58 = v180;
      v82 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v82);
      v83 = v60;
      v84 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v205, v81, (__int128 *)__p, "entitySceneClip", v83, v84);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      v85 = *((_QWORD *)v77 + 1);
      realityio::entityPath(a3, (uint64_t)&v204);
      v86 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v86);
      v87 = v60;
      v88 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v188, v85, (__int128 *)__p, "defaultSceneClip", v87, v88);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    else
    {
      realityio::entityPath(v77, (uint64_t)&v204);
      v58 = v180;
      v89 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v89);
      v90 = v60;
      v91 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v188, v81, (__int128 *)__p, "childSceneClip", v90, v91);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
  }
LABEL_91:
  v93 = v192.i64[1];
  for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)v192.i64[0];
        i != (pxrInternal__aapl__pxrReserved__::SdfPath *)v93;
        i = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 16))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(i);
    v94 = __p[0];
    v95 = v204.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    v96 = *((_QWORD *)i + 1);
    if (v94 == (void *)v95)
    {
      realityio::entityPath(a3, (uint64_t)&v204);
      v58 = v180;
      v97 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v97);
      v98 = v60;
      v99 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v205, v96, (__int128 *)__p, "entitySceneClip", v98, v99);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      v100 = *((_QWORD *)i + 1);
      realityio::entityPath(a3, (uint64_t)&v204);
      v101 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v101);
      v102 = v60;
      v103 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v188, v100, (__int128 *)__p, "defaultSceneClip", v102, v103);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    else
    {
      realityio::entityPath(i, (uint64_t)&v204);
      v58 = v180;
      v104 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v204);
      std::string::basic_string[abi:ne180100]<0>(__p, v104);
      v105 = v60;
      v106 = v61;
      realityio::TimelineGroupFactory::addTimeline((char *)&v188, v96, (__int128 *)__p, "childSceneClip", v105, v106);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
  }
LABEL_101:
  if (v179 | v182 || v207 != v206 || v190 != v189)
  {
    REAnimationLibraryDefinitionCreate();
    if (v179 | v182 || v207 != v206)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v179)
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
      }
      if (v182)
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      }
      if (v192.i64[1] != v192.i64[0])
      {
        for (j = 0; j < (v192.i64[1] - v192.i64[0]) >> 4; ++j)
        {
          REAnimationLibraryDefinitionAddEntryAsset();
          v108 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v192.i64[0] + 16 * j));
          REAnimationLibraryDefinitionAddKeyedEntryIndex();
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v109 = HIBYTE(v187);
          v110 = HIBYTE(v187);
          if (v187 >= 0)
            v111 = (void *)HIBYTE(v187);
          else
            v111 = __p[1];
          v112 = (void *)*((unsigned __int8 *)v108 + 23);
          v113 = (char)v112;
          if ((char)v112 < 0)
            v112 = (void *)v108[1];
          if (v111 == v112)
          {
            if (v113 < 0)
              v108 = (_QWORD *)*v108;
            if (SHIBYTE(v187) < 0)
            {
              v116 = __p[0];
              if (memcmp(__p[0], v108, (size_t)__p[1]))
                goto LABEL_130;
LABEL_127:
              REAnimationLibraryDefinitionSetDefaultEntryKey();
              v110 = HIBYTE(v187);
              goto LABEL_128;
            }
            if (!HIBYTE(v187))
              goto LABEL_127;
            v114 = __p;
            v115 = (unsigned __int8 *)v108;
            while (*(unsigned __int8 *)v114 == *v115)
            {
              v114 = (void **)((char *)v114 + 1);
              ++v115;
              if (!--v109)
                goto LABEL_127;
            }
          }
LABEL_128:
          if (v110 < 0)
          {
            v116 = __p[0];
LABEL_130:
            operator delete(v116);
          }
        }
      }
      TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v205, v58, "default scene animation");
      v118 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      REAnimationLibraryDefinitionAddEntryAsset();
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v119 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v119 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v185, v119 + 1);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v185;
      else
        v120 = (std::string *)v185.__r_.__value_.__r.__words[0];
      if (v119)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v121 = &v191;
        else
          v121 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v120, v121, v119);
      }
      *(_WORD *)((char *)&v120->__r_.__value_.__l.__data_ + v119) = 46;
      v122 = std::string::append(&v185, "timelineGroup.");
      v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      v124 = std::string::append(&v204, "default scene animation");
      v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      v187 = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v126 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v126 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = &v184;
      else
        v127 = (std::string *)v184.__r_.__value_.__r.__words[0];
      if (v126)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v128 = &v191;
        else
          v128 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v127, v128, v126);
      }
      *(_WORD *)((char *)&v127->__r_.__value_.__l.__data_ + v126) = 46;
      v129 = std::string::append(&v184, "entityAnimationScene.");
      v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      v131 = std::string::append(&v185, "default scene animation");
      v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      v185.__r_.__value_.__r.__words[0] = TimelineAsset;
      if (TimelineAsset)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)__p, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      v185.__r_.__value_.__r.__words[0] = v118;
      if (v118)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)&v204, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    if (v190 != v189)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v179)
        REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
      if (v182)
        REAnimationSceneEntityDefinitionSetHasTransformAnimations();
      v133 = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v188, v58, "default subtree animation");
      v134 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      std::string::basic_string[abi:ne180100]<0>(__p, "default subtree animation");
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::AnimationLibraryAssetAction::annotateSubTimelines(v176, (uint64_t)__p, v134, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v204, v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
      REAnimationLibraryDefinitionAddEntryAsset();
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v135 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v135 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v185, v135 + 1);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v185;
      else
        v136 = (std::string *)v185.__r_.__value_.__r.__words[0];
      if (v135)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &v191;
        else
          v137 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v136, v137, v135);
      }
      *(_WORD *)((char *)&v136->__r_.__value_.__l.__data_ + v135) = 46;
      v138 = std::string::append(&v185, "timelineGroup.");
      v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v139;
      v138->__r_.__value_.__l.__size_ = 0;
      v138->__r_.__value_.__r.__words[2] = 0;
      v138->__r_.__value_.__r.__words[0] = 0;
      v140 = std::string::append(&v204, "default subtree animation");
      v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
      v187 = v140->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v141;
      v140->__r_.__value_.__l.__size_ = 0;
      v140->__r_.__value_.__r.__words[2] = 0;
      v140->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v142 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v142 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v142 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = &v184;
      else
        v143 = (std::string *)v184.__r_.__value_.__r.__words[0];
      if (v142)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v144 = &v191;
        else
          v144 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v143, v144, v142);
      }
      *(_WORD *)((char *)&v143->__r_.__value_.__l.__data_ + v142) = 46;
      v145 = std::string::append(&v184, "subtreeAnimationScene.");
      v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v146;
      v145->__r_.__value_.__l.__size_ = 0;
      v145->__r_.__value_.__r.__words[2] = 0;
      v145->__r_.__value_.__r.__words[0] = 0;
      v147 = std::string::append(&v185, "default subtree animation");
      v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v148;
      v147->__r_.__value_.__l.__size_ = 0;
      v147->__r_.__value_.__r.__words[2] = 0;
      v147->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      v185.__r_.__value_.__r.__words[0] = v133;
      if (v133)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)__p, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      v185.__r_.__value_.__r.__words[0] = v134;
      if (v134)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)&v204, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    MEMORY[0x2348B26F8](&v185, __p);
    v149 = v204.__r_.__value_.__r.__words[0];
    v150 = v185.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
    if (SHIBYTE(v187) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
    if (v149 == v150 && v190 != v189)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      REAnimationSceneEntityDefinitionCreate();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      v151 = realityio::TimelineGroupFactory::createTimelineAsset((float *)&v188, v58, "global scene animation");
      v152 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
      std::string::basic_string[abi:ne180100]<0>(__p, "global scene animation");
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::AnimationLibraryAssetAction::annotateSubTimelines(v176, (uint64_t)__p, v152, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v204, v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
      REAnimationLibraryDefinitionInsertEntryAsset();
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v153 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v185, v153 + 1);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = &v185;
      else
        v154 = (std::string *)v185.__r_.__value_.__r.__words[0];
      if (v153)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v155 = &v191;
        else
          v155 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v154, v155, v153);
      }
      *(_WORD *)((char *)&v154->__r_.__value_.__l.__data_ + v153) = 46;
      v156 = std::string::append(&v185, "timelineGroup.");
      v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v157;
      v156->__r_.__value_.__l.__size_ = 0;
      v156->__r_.__value_.__r.__words[2] = 0;
      v156->__r_.__value_.__r.__words[0] = 0;
      v158 = std::string::append(&v204, "global scene animation");
      v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      v187 = v158->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v160 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        v160 = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v184, v160 + 1);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v161 = &v184;
      else
        v161 = (std::string *)v184.__r_.__value_.__r.__words[0];
      if (v160)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v162 = &v191;
        else
          v162 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v161, v162, v160);
      }
      *(_WORD *)((char *)&v161->__r_.__value_.__l.__data_ + v160) = 46;
      v163 = std::string::append(&v184, "globalAnimationScene.");
      v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      v165 = std::string::append(&v185, "global scene animation");
      v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v166;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      v185.__r_.__value_.__r.__words[0] = v151;
      if (v151)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)__p, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      v185.__r_.__value_.__r.__words[0] = v152;
      if (v152)
        RERetain();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
      realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)&v204, &v184);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
      RERelease();
      RERelease();
      RERelease();
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if (SHIBYTE(v187) < 0)
        operator delete(__p[0]);
    }
    AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    RERelease();
    v185.__r_.__value_.__r.__words[0] = AnimationLibraryAsset;
    if (AnimationLibraryAsset)
      RERetain();
    realityio::ECSAction::queueForDeferredAssetLoad(v176);
    realityio::entityPath(a3, (uint64_t)&v184);
    v168 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v184);
    v169 = (char *)v168;
    if (*(char *)(v168 + 23) >= 0)
      v170 = *(unsigned __int8 *)(v168 + 23);
    else
      v170 = *(_QWORD *)(v168 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v204, v170 + 1);
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &v204;
    else
      v171 = (std::string *)v204.__r_.__value_.__r.__words[0];
    if (v170)
    {
      if (v169[23] >= 0)
        v172 = v169;
      else
        v172 = *(char **)v169;
      memmove(v171, v172, v170);
    }
    *(_WORD *)((char *)&v171->__r_.__value_.__l.__data_ + v170) = 46;
    v173 = std::string::append(&v204, "animationLibrary");
    v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
    v187 = v173->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v174;
    v173->__r_.__value_.__l.__size_ = 0;
    v173->__r_.__value_.__r.__words[2] = 0;
    v173->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v204.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v184);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
    realityio::ECSAction::addAsset(v176, (uint64_t *)&v185, (uint64_t)__p, &v204);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
    RERelease();
    v204.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy((uint64_t *)&v204, (uint64_t *)&v185);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a6, &v204);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v204);
    if (SHIBYTE(v187) < 0)
      operator delete(__p[0]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v185);
  }
  __p[0] = &v189;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
}

void sub_22FFBD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::VtValue *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  void *v61;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v59 - 200));
  if (a48 < 0)
    operator delete(__p);
  *(_QWORD *)(v59 - 200) = &a50;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(_QWORD *)(v59 - 200) = &a53;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(_QWORD *)(v59 - 200) = &a56;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  *(_QWORD *)(v59 - 200) = &a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 200));
  v61 = *(void **)(v59 - 256);
  if (v61)
  {
    *(_QWORD *)(v59 - 248) = v61;
    operator delete(v61);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::ECSAction::queueForDeferredAssetLoad(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return REAssetHandleLoadNow();
  v2 = *(_QWORD *)(v1 + 152);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

std::string *realityio::TimelineGroupFactory::TimelineGroupFactory(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0xFF7FFFFF7F7FFFFFLL;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = -8388609;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

char *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v2 = (a1->i64[1] - a1->i64[0]) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v21 = a1 + 1;
  if (v7)
  {
    if (v7 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v7];
  v20 = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9 + 1, (_DWORD *)(a2 + 4));
  *((_QWORD *)v9 + 1) = *(_QWORD *)(a2 + 8);
  v11 = v9 + 16;
  v19.i64[1] = (uint64_t)(v9 + 16);
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v12);
  }
  else
  {
    v14 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9[v14 - 16], (_DWORD *)(v12 + v14 - 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9[v14 - 12], (_DWORD *)(v12 + v14 - 12));
      *(_QWORD *)&v9[v14 - 8] = *(_QWORD *)(v12 + v14 - 8);
      v14 -= 16;
    }
    while (v12 + v14 != v13);
    v15 = *a1;
    v9 += v14;
    v11 = (char *)v19.i64[1];
    v10 = v20;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  v20 = v16;
  v18 = v15.i64[0];
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::~__split_buffer((uint64_t)&v18);
  return v11;
}

uint64_t std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REAsset *>>::destroy[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP7REAssetEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAsset *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v9;

  v2 = atomic_load((unsigned int *)(*a1 + 8));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_QWORD *)*a1;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*a1;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v9 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAsset *>>>::~intrusive_ptr(&v9);
  }
  return *a1;
}

void sub_22FFBDB20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFBDBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::yieldEngineQueueExecution(realityio::SyncUpdateEngineQueueManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 1));
  *v2 = this;
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34))
  {
    v14 = realityio::internal::assertHandler(1u, "mState == kIsWaitingForEngineQueueYield", "yieldEngineQueueExecution", 28, 1, v3, v4, v5, (uint64_t)"called yieldEngineQueueExecution twice", v17);
    if (v14 == 1)
    {
      raise(5);
    }
    else if (v14 == 2)
    {
      abort();
    }
  }
  *((_DWORD *)this + 34) = 1;
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL);
  do
  {
    while (1)
    {
      realityio::SyncUpdateEngineQueueManager::popEngineQueueTask(this, (uint64_t)&v18);
      v6 = v18;
      if (v18)
      {
        v7 = *(_QWORD *)(v18 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v18 + 32));
        dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL);
      }
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
          break;
      }
      if (!v6)
        goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  while (v6);
LABEL_13:
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34) != 3)
  {
    v15 = realityio::internal::assertHandler(1u, "mState == kFinished", "yieldEngineQueueExecution", 47, 0, v11, v12, v13, v16, v17);
    if (v15 == 1)
    {
      raise(5);
    }
    else if (v15 == 2)
    {
      abort();
    }
  }
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  *v2 = 0;
}

void sub_22FFBDD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::popEngineQueueTask(realityio::SyncUpdateEngineQueueManager *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_QWORD *)this + 16))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 12) + ((*((_QWORD *)this + 15) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * *((_QWORD *)this + 15);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::pop_front((int64x2_t *)((char *)this + 88));
  }
  else
  {
    if (*((_DWORD *)this + 34) == 2)
      *((_DWORD *)this + 34) = 3;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  std::mutex::unlock(v4);
}

void sub_22FFBDE50(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

intptr_t realityio::SyncUpdateEngineQueueManager::stopYieldEngineQueueExecution(realityio::SyncUpdateEngineQueueManager *this)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_DWORD *)this + 34) != 1)
  {
    v7 = realityio::internal::assertHandler(1u, "mState == kOwnsEngineQueue", "stopYieldEngineQueueExecution", 57, 1, v3, v4, v5, (uint64_t)"called stopYieldEngineQueueExecution() twice", v8);
    if (v7 == 1)
    {
      raise(5);
    }
    else if (v7 == 2)
    {
      abort();
    }
  }
  *((_DWORD *)this + 34) = 2;
  std::mutex::unlock(v2);
  return dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 2));
}

void sub_22FFBDF0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::SyncUpdateEngineQueueManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  dispatch_semaphore_t v15;
  void *shared_owners;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count **v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  void *v125;
  int v126;
  int v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_DWORD *)(a1 + 136) >= 2u)
  {
    v126 = realityio::internal::assertHandler(1u, "mState == kOwnsEngineQueue || mState == kIsWaitingForEngineQueueYield", "performBlockSyncOnEngineQueue", 69, 1, v5, v6, v7, (uint64_t)"tried to submit blocks to the SyncUpdateEngineQueueManager after stopYieldEngineQueueExecution() was called.", v128);
    if (v126 == 1)
    {
      raise(5);
    }
    else if (v126 == 2)
    {
      goto LABEL_110;
    }
  }
  if (v11)
  {
    if (v11 == a1)
      goto LABEL_4;
    v127 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == this", "performBlockSyncOnEngineQueue", 74, 1, v8, v9, v10, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v128);
    if (v127 == 1)
    {
      raise(5);
      goto LABEL_4;
    }
    if (v127 != 2)
    {
LABEL_4:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
      std::mutex::unlock(v4);
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
      return;
    }
LABEL_110:
    abort();
  }
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE8608;
  v14 = v13 + 1;
  v13[2].__vftable = 0;
  v13[2].__shared_owners_ = 0;
  std::function<void ()(void)>::operator=(&v13[1].__vftable, a2);
  v15 = dispatch_semaphore_create(0);
  shared_owners = (void *)v13[2].__shared_owners_;
  v13[2].__shared_owners_ = (uint64_t)v15;

  v17 = *(char **)(a1 + 104);
  v18 = *(char **)(a1 + 96);
  v19 = v17 - v18;
  v129 = v13 + 1;
  v130 = v13;
  if (v17 == v18)
    v20 = 0;
  else
    v20 = 32 * (v17 - v18) - 1;
  v22 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  v23 = v21 + v22;
  if (v20 == v21 + v22)
  {
    if (v22 < 0x100)
    {
      v38 = v19 >> 3;
      v39 = *(char **)(a1 + 112);
      v40 = *(char **)(a1 + 88);
      if (v19 >> 3 >= (unint64_t)((v39 - v40) >> 3))
      {
        if (v39 == v40)
          v43 = 1;
        else
          v43 = (v39 - v40) >> 2;
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v43);
        v46 = v45;
        v47 = operator new(0x1000uLL);
        v48 = &v44[8 * v38];
        v49 = &v44[8 * v46];
        if (v38 == v46)
        {
          v50 = 8 * v38;
          if (v19 < 1)
          {
            v92 = v47;
            v93 = v50 >> 2;
            if (v17 == v18)
              v94 = 1;
            else
              v94 = v93;
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v94);
            v48 = &v95[8 * (v94 >> 2)];
            v49 = &v95[8 * v96];
            if (v44)
              operator delete(v44);
            v44 = v95;
            v47 = v92;
          }
          else
          {
            v51 = v50 >> 3;
            if (v51 >= -1)
              v52 = v51 + 1;
            else
              v52 = v51 + 2;
            v48 -= 8 * (v52 >> 1);
          }
        }
        *(_QWORD *)v48 = v47;
        v97 = v48 + 8;
        for (i = *(_QWORD *)(a1 + 104); i != *(_QWORD *)(a1 + 96); i -= 8)
        {
          if (v48 == v44)
          {
            if (v97 >= v49)
            {
              if (v49 == v44)
                v103 = 1;
              else
                v103 = (v49 - v44) >> 2;
              v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v103);
              v106 = v104;
              v48 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
              v107 = v97 - v44;
              v53 = v97 == v44;
              v97 = v48;
              if (!v53)
              {
                v97 = &v48[v107 & 0xFFFFFFFFFFFFFFF8];
                v108 = 8 * (v107 >> 3);
                v109 = v48;
                v110 = (uint64_t *)v44;
                do
                {
                  v111 = *v110++;
                  *(_QWORD *)v109 = v111;
                  v109 += 8;
                  v108 -= 8;
                }
                while (v108);
              }
              v49 = &v104[8 * v105];
              if (v44)
                operator delete(v44);
              v44 = v106;
            }
            else
            {
              v99 = (v49 - v97) >> 3;
              if (v99 >= -1)
                v100 = v99 + 1;
              else
                v100 = v99 + 2;
              v101 = v100 >> 1;
              v48 = &v44[8 * (v100 >> 1)];
              v102 = v44;
              if (v97 != v44)
              {
                memmove(v48, v44, v97 - v44);
                v102 = v97;
              }
              v97 = &v102[8 * v101];
            }
          }
          v112 = *(_QWORD *)(i - 8);
          *((_QWORD *)v48 - 1) = v112;
          v48 -= 8;
        }
        v113 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v44;
        *(_QWORD *)(a1 + 96) = v48;
        *(_QWORD *)(a1 + 104) = v97;
        *(_QWORD *)(a1 + 112) = v49;
        if (v113)
          operator delete(v113);
        goto LABEL_41;
      }
      v41 = operator new(0x1000uLL);
      v42 = v41;
      if (v39 == v17)
      {
        if (v18 == v40)
        {
          if (v17 == v18)
            v70 = 1;
          else
            v70 = (v39 - v18) >> 2;
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
          v18 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
          v73 = *(uint64_t **)(a1 + 96);
          v74 = v18;
          v75 = *(_QWORD *)(a1 + 104) - (_QWORD)v73;
          if (v75)
          {
            v74 = &v18[v75 & 0xFFFFFFFFFFFFFFF8];
            v76 = 8 * (v75 >> 3);
            v77 = v18;
            do
            {
              v78 = *v73++;
              *(_QWORD *)v77 = v78;
              v77 += 8;
              v76 -= 8;
            }
            while (v76);
          }
          v79 = *(void **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v71;
          *(_QWORD *)(a1 + 96) = v18;
          *(_QWORD *)(a1 + 104) = v74;
          *(_QWORD *)(a1 + 112) = &v71[8 * v72];
          if (v79)
          {
            operator delete(v79);
            v18 = *(char **)(a1 + 96);
          }
        }
        *((_QWORD *)v18 - 1) = v42;
        v80 = *(char **)(a1 + 96);
        v81 = *(char **)(a1 + 104);
        *(_QWORD *)(a1 + 96) = v80 - 8;
        v82 = *((_QWORD *)v80 - 1);
        *(_QWORD *)(a1 + 96) = v80;
        if (v81 == *(char **)(a1 + 112))
        {
          v83 = *(_QWORD *)(a1 + 88);
          v84 = (uint64_t)&v80[-v83];
          if ((unint64_t)v80 <= v83)
          {
            v114 = (uint64_t)&v81[-v83];
            v53 = v114 == 0;
            v115 = v114 >> 2;
            if (v53)
              v116 = 1;
            else
              v116 = v115;
            v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v116);
            v119 = &v117[8 * (v116 >> 2)];
            v120 = *(uint64_t **)(a1 + 96);
            v81 = v119;
            v121 = *(_QWORD *)(a1 + 104) - (_QWORD)v120;
            if (v121)
            {
              v81 = &v119[v121 & 0xFFFFFFFFFFFFFFF8];
              v122 = 8 * (v121 >> 3);
              v123 = &v117[8 * (v116 >> 2)];
              do
              {
                v124 = *v120++;
                *(_QWORD *)v123 = v124;
                v123 += 8;
                v122 -= 8;
              }
              while (v122);
            }
            v125 = *(void **)(a1 + 88);
            *(_QWORD *)(a1 + 88) = v117;
            *(_QWORD *)(a1 + 96) = v119;
            *(_QWORD *)(a1 + 104) = v81;
            *(_QWORD *)(a1 + 112) = &v117[8 * v118];
            if (v125)
            {
              operator delete(v125);
              v81 = *(char **)(a1 + 104);
            }
          }
          else
          {
            v85 = v84 >> 3;
            v30 = v84 >> 3 < -1;
            v86 = (v84 >> 3) + 2;
            if (v30)
              v87 = v86;
            else
              v87 = v85 + 1;
            v88 = -(v87 >> 1);
            v89 = v87 >> 1;
            v90 = &v80[-8 * v89];
            v91 = v81 - v80;
            if (v81 != v80)
            {
              memmove(&v80[-8 * v89], v80, v81 - v80);
              v80 = *(char **)(a1 + 96);
            }
            v81 = &v90[v91];
            *(_QWORD *)(a1 + 96) = &v80[8 * v88];
            *(_QWORD *)(a1 + 104) = &v90[v91];
          }
        }
        *(_QWORD *)v81 = v82;
      }
      else
      {
        *(_QWORD *)v17 = v41;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v22 - 256;
      v26 = *(_QWORD *)v18;
      v24 = v18 + 8;
      v25 = v26;
      *(_QWORD *)(a1 + 96) = v24;
      if (v17 == *(char **)(a1 + 112))
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = (uint64_t)&v24[-v27];
        if ((unint64_t)v24 <= v27)
        {
          v54 = (uint64_t)&v17[-v27];
          v53 = v54 == 0;
          v55 = v54 >> 2;
          if (v53)
            v56 = 1;
          else
            v56 = v55;
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v56);
          v59 = &v57[8 * (v56 >> 2)];
          v60 = *(uint64_t **)(a1 + 96);
          v17 = v59;
          v61 = *(_QWORD *)(a1 + 104) - (_QWORD)v60;
          if (v61)
          {
            v17 = &v59[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = 8 * (v61 >> 3);
            v63 = &v57[8 * (v56 >> 2)];
            do
            {
              v64 = *v60++;
              *(_QWORD *)v63 = v64;
              v63 += 8;
              v62 -= 8;
            }
            while (v62);
          }
          v65 = *(void **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v57;
          *(_QWORD *)(a1 + 96) = v59;
          *(_QWORD *)(a1 + 104) = v17;
          *(_QWORD *)(a1 + 112) = &v57[8 * v58];
          if (v65)
          {
            operator delete(v65);
            v17 = *(char **)(a1 + 104);
          }
        }
        else
        {
          v29 = v28 >> 3;
          v30 = v28 >> 3 < -1;
          v31 = (v28 >> 3) + 2;
          if (v30)
            v32 = v31;
          else
            v32 = v29 + 1;
          v33 = -(v32 >> 1);
          v34 = v32 >> 1;
          v35 = &v24[-8 * v34];
          v36 = v17 - v24;
          if (v17 != v24)
          {
            memmove(&v24[-8 * v34], v24, v17 - v24);
            v17 = *(char **)(a1 + 96);
          }
          v37 = &v17[8 * v33];
          v17 = &v35[v36];
          *(_QWORD *)(a1 + 96) = v37;
          *(_QWORD *)(a1 + 104) = &v35[v36];
        }
      }
      *(_QWORD *)v17 = v25;
    }
    *(_QWORD *)(a1 + 104) += 8;
LABEL_41:
    v18 = *(char **)(a1 + 96);
    v21 = *(_QWORD *)(a1 + 128);
    v23 = v21 + *(_QWORD *)(a1 + 120);
    v14 = v129;
    v13 = v130;
  }
  v66 = (std::__shared_weak_count **)(*(_QWORD *)&v18[(v23 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v23);
  *v66 = v14;
  v66[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v68 = __ldxr(p_shared_owners);
    while (__stxr(v68 + 1, p_shared_owners));
    ++*(_QWORD *)(a1 + 128);
    std::mutex::unlock(v4);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
    dispatch_semaphore_wait((dispatch_semaphore_t)v14[1].__shared_owners_, 0xFFFFFFFFFFFFFFFFLL);
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 128) = v21 + 1;
    std::mutex::unlock(v4);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16));
    dispatch_semaphore_wait((dispatch_semaphore_t)v14[1].__shared_owners_, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_22FFBE618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  if (v11)
    operator delete(v11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void realityio::AsyncUpdateEngineQueueManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  _QWORD block[6];

  if (v7)
  {
    if (v7 != a1)
    {
      v10 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == this", "performBlockSyncOnEngineQueue", 101, 1, v4, v5, v6, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v11);
      if (v10 == 1)
      {
        raise(5);
      }
      else if (v10 == 2)
      {
        abort();
      }
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  }
  else
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
    v9 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3321888768;
    block[2] = ___ZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEE_block_invoke;
    block[3] = &__block_descriptor_48_ea8_32c110_ZTSKZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEEE3__0_e5_v8__0l;
    block[4] = a1;
    block[5] = a2;
    dispatch_sync(v9, block);
  }
}

uint64_t ___ZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (*v6)
  {
    v9 = realityio::internal::assertHandler(1u, "engineQueueManagerOwningThisThread == nullptr", "operator()", 110, 1, v3, v4, v5, (uint64_t)"cannot use multiple EngineQueueManagers simultaneously", v10);
    if (v9 == 1)
    {
      raise(5);
    }
    else if (v9 == 2)
    {
      abort();
    }
  }
  *v6 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  *v6 = 0;
  return result;
}

__n128 __copy_helper_block_ea8_32c110_ZTSKZN9realityio29AsyncUpdateEngineQueueManager29performBlockSyncOnEngineQueueERKNSt3__18functionIFvvEEEE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void realityio::AsyncUpdateEngineQueueManager::~AsyncUpdateEngineQueueManager(id *this)
{

}

{

  JUMPOUT(0x2348B4E1CLL);
}

void realityio::SyncUpdateEngineQueueManager::~SyncUpdateEngineQueueManager(realityio::SyncUpdateEngineQueueManager *this)
{
  std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((_QWORD *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));

}

{
  std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((_QWORD *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));

  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_230208240);
  return std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE8608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE8608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);

  result = *(_QWORD **)(a1 + 48);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

_QWORD *std::function<void ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22FFBEDC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void realityio::SampleAnimationFromUsdAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t *v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *TargetPath;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  char v17;
  int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  double v21;
  double v22;
  pxrInternal__aapl__pxrReserved__::UsdStage *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  pxrInternal__aapl__pxrReserved__::UsdStage *v29;
  double v30;
  double v31;
  pxrInternal__aapl__pxrReserved__::UsdStage *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  pxrInternal__aapl__pxrReserved__::UsdStage *v38;
  double v39;
  double v40;
  pxrInternal__aapl__pxrReserved__::UsdStage *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t i;
  unsigned int **v50;
  pxrInternal__aapl__pxrReserved__::UsdStage *v51;
  double v52;
  double v53;
  pxrInternal__aapl__pxrReserved__::UsdStage *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t j;
  unint64_t v63;
  uint64_t v64;
  uint64_t k;
  unint64_t v66;
  uint64_t v67;
  uint64_t m;
  realityio *v69;
  NSObject *v70;
  unsigned int *v71;
  unsigned int v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t *v76;
  uint64_t Text;
  unsigned int ***v78;
  unint64_t v79;
  _BYTE v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int ***v85;
  void *__p;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  std::type_info **v90;
  _BYTE v91[8];
  uint64_t v92;
  unsigned int **v93;
  std::type_info **v94;
  uint8_t buf[32];
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3))
    return;
  v7 = (uint64_t *)(a2 + 24);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&v97, (uint64_t)v80);
  if ((v100 & 7) != 0)
  {
    v9 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
  if (v98)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v80))
  {
    v18 = 0;
    goto LABEL_81;
  }
  TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a3);
  v12 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
  v79 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
    {
      v79 = v12 & 0xFFFFFFFFFFFFFFF8;
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  MEMORY[0x2348B274C](&v97, "__timeSamples");
  v15 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
  if ((v97 & 7) != 0)
  {
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8) == v15)
  {
    v78 = (unsigned int ***)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v78);
    v92 = 0;
    v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v78);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v19);
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v85 = v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v85);
        v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v85);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v20);
        v22 = v21;
        v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v85);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v23);
        v25 = v24;
        __p = 0;
        v87 = 0;
        v88 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        v26 = 1.0 / v22;
        if (v87 == __p)
        {
          v27 = 0.0;
          v28 = 0.0;
        }
        else
        {
          v27 = *(double *)__p / v25;
          v28 = *(v87 - 1) / v25;
        }
        v47 = (unint64_t)((v28 - v27) / v26 + 1.0 + 0.5);
        v101 = 0;
        v97 = *(_QWORD *)&v27;
        v98 = *(_QWORD *)&v28;
        v99 = v26;
        v96 = 0;
        memset(buf, 0, sizeof(buf));
        LODWORD(v84) = 0;
        v93 = &v84;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>((unint64_t *)buf, v47, (_DWORD **)&v93);
        if (v47)
        {
          v48 = 0;
          for (i = 0; i != v47; ++i)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
            v48 += 4;
          }
        }
        v94 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy((uint64_t *)&v93, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v100, &v93);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v93);
        v90 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(&v89, (uint64_t)&v97);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
LABEL_34:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v100);
        if (__p)
        {
          v87 = (double *)__p;
          operator delete(__p);
        }
        v50 = (unsigned int **)&v85;
        goto LABEL_55;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v84 = (unsigned int *)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v84);
        v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v84);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v29);
        v31 = v30;
        v32 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v84);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v32);
        v34 = v33;
        __p = 0;
        v87 = 0;
        v88 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        v35 = 1.0 / v31;
        if (v87 == __p)
        {
          v36 = 0.0;
          v37 = 0.0;
        }
        else
        {
          v36 = *(double *)__p / v34;
          v37 = *(v87 - 1) / v34;
        }
        v60 = (unint64_t)((v37 - v36) / v35 + 1.0 + 0.5);
        v101 = 0;
        v97 = *(_QWORD *)&v36;
        v98 = *(_QWORD *)&v37;
        v99 = v35;
        v96 = 0;
        memset(buf, 0, sizeof(buf));
        v85 = 0;
        v93 = (unsigned int **)&v85;
        pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>((unint64_t *)buf, v60, (uint64_t **)&v93);
        if (v60)
        {
          v61 = 0;
          for (j = 0; j != v60; ++j)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
            v61 += 8;
          }
        }
        v94 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy((uint64_t *)&v93, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v100, &v93);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v93);
        v90 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(&v89, (uint64_t)&v97);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
LABEL_52:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v100);
        if (__p)
        {
          v87 = (double *)__p;
          operator delete(__p);
        }
        v50 = &v84;
        goto LABEL_55;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v84 = (unsigned int *)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v84);
        v38 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v84);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v38);
        v40 = v39;
        v41 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v84);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v41);
        v43 = v42;
        __p = 0;
        v87 = 0;
        v88 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        v44 = 1.0 / v40;
        if (v87 == __p)
        {
          v45 = 0.0;
          v46 = 0.0;
        }
        else
        {
          v45 = *(double *)__p / v43;
          v46 = *(v87 - 1) / v43;
        }
        v63 = (unint64_t)((v46 - v45) / v44 + 1.0 + 0.5);
        v101 = 0;
        v97 = *(_QWORD *)&v45;
        v98 = *(_QWORD *)&v46;
        v99 = v44;
        v96 = 0;
        memset(buf, 0, sizeof(buf));
        v85 = &v93;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)buf, v63, (_OWORD **)&v85);
        if (v63)
        {
          v64 = 0;
          for (k = 0; k != v63; ++k)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>();
            v64 += 16;
          }
        }
        v94 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v93, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v100, &v93);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v93);
        v90 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(&v89, (uint64_t)&v97);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
        goto LABEL_52;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v85 = v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v85);
        v51 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v85);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v51);
        v53 = v52;
        v54 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v85);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v54);
        v56 = v55;
        __p = 0;
        v87 = 0;
        v88 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        v57 = 1.0 / v53;
        if (v87 == __p)
        {
          v58 = 0.0;
          v59 = 0.0;
        }
        else
        {
          v58 = *(double *)__p / v56;
          v59 = *(v87 - 1) / v56;
        }
        v66 = (unint64_t)((v59 - v58) / v57 + 1.0 + 0.5);
        v101 = 0;
        v97 = *(_QWORD *)&v58;
        v98 = *(_QWORD *)&v59;
        v99 = v57;
        v96 = 0;
        memset(buf, 0, sizeof(buf));
        WORD2(v84) = 0;
        LODWORD(v84) = 0;
        v93 = &v84;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)buf, v66, (int **)&v93);
        if (v66)
        {
          v67 = 0;
          for (m = 0; m != v66; ++m)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>();
            v67 += 6;
          }
        }
        v94 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v93, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v100, &v93);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v93);
        v90 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(&v89, (uint64_t)&v97);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
        goto LABEL_34;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
LABEL_71:
        v50 = (unsigned int **)&v97;
LABEL_55:
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v50);
LABEL_75:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v91);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &v89);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v89);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v78);
        goto LABEL_76;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
        goto LABEL_71;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
        goto LABEL_71;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
        goto LABEL_71;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v91))
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
        goto LABEL_71;
      }
      v69 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)v91);
      if ((_DWORD)v69)
      {
        v97 = (unint64_t)v78;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v97);
        goto LABEL_71;
      }
      v70 = *(id *)(realityio::logObjects(v69) + 24);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        v76 = &v97;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v91);
        if (v99 < 0.0)
          v76 = (unint64_t *)v97;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, &__p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v76;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = Text;
        _os_log_error_impl(&dword_22FF26000, v70, OS_LOG_TYPE_ERROR, "Unsupported VtValue re-sample type \"%s\" for \"%s\"", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        if (SHIBYTE(v99) < 0)
          operator delete((void *)v97);
      }

    }
    v90 = 0;
    goto LABEL_75;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v79, a4) & 1) != 0)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_77;
  }
LABEL_76:
  v18 = 0;
  v17 = 1;
LABEL_77:
  if ((v79 & 7) != 0)
  {
    v71 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  if ((v17 & 1) == 0)
  {
    v73 = 0;
    goto LABEL_83;
  }
LABEL_81:
  v73 = 1;
LABEL_83:
  if ((v83 & 7) != 0)
  {
    v74 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
  if (v81)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
  if (((v18 | v73) & 1) == 0)
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a4);
}

void sub_22FFBF82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v30;
  void *v31;
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a26);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a10);
  if ((a11 & 7) != 0)
  {
    v34 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v30);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  _OWORD v12[2];
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _UNKNOWN **v19;
  _QWORD v20[3];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v15 = 0;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (unint64_t)((0.0 - 0.0) / v8 + 1.0 + 0.5);
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  *(double *)&v20[2] = v8;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  LODWORD(v19) = 0;
  v17 = &v18;
  v18 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)v12, v9, &v17);
  if (v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
      v10 += 12;
    }
  }
  v19 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(&v18, (uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v21, &v18);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v20);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_22FFBFC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  _OWORD v12[2];
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD v18[3];
  _QWORD v19[2];
  uint64_t v20;
  std::type_info **v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v15 = 0;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (unint64_t)((0.0 - 0.0) / v8 + 1.0 + 0.5);
  v19[1] = 0;
  v20 = 0;
  v18[0] = 0;
  v18[1] = 0;
  *(double *)&v18[2] = v8;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v21 = 0;
  v22 = 0;
  v17 = (__int128 *)&v20;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>((unint64_t *)v12, v9, &v17);
  if (v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>();
      v10 += 24;
    }
  }
  v21 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(&v20, (uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v19, &v20);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v20);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v18);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_22FFBFEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  _OWORD v12[2];
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD v18[3];
  _QWORD v19[2];
  _OWORD v20[8];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v15 = 0;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (unint64_t)((0.0 - 0.0) / v8 + 1.0 + 0.5);
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  *(double *)&v18[2] = v8;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v20, 0, sizeof(v20));
  v17 = v20;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>((unint64_t *)v12, v9, &v17);
  if (v9)
  {
    v10 = 0;
    for (i = 0; i != v9; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
      v10 += 128;
    }
  }
  *((_QWORD *)&v20[0] + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)v20, (uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v19, v20);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v18);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_22FFC011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *New;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  _QWORD *Copy;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v26 = 0;
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (0.0 - 0.0) / v8 + 1.0 + 0.5;
  v10 = (unint64_t)v9;
  v29[1] = 0;
  v28[0] = 0;
  v28[1] = 0;
  *(double *)&v28[2] = v8;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  if ((unint64_t)v9)
    v11 = v10 > 0x666666666666666;
  else
    v11 = 1;
  if (!v11)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew((unint64_t)v9);
    v13 = New;
    do
    {
      v14 = v31;
      *(_OWORD *)v13 = v30;
      *((_OWORD *)v13 + 1) = v14;
      v15 = v32;
      v13[4] = v32;
      if (v15)
      {
        v16 = (unint64_t *)(v15 - 16);
        if (v13[3])
          v16 = (unint64_t *)v13[3];
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v13 += 5;
    }
    while (v13 != &New[5 * v10]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&v22);
    v24 = New;
    *(_QWORD *)&v22 = v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
  if (v10)
  {
    v18 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (v24)
      {
        if (*((_QWORD *)&v23 + 1) || (v20 = atomic_load(v24 - 2), v20 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>]");
          Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateCopy((uint64_t)v24, v22, v22);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&v22);
          v24 = Copy;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
      v18 += 40;
    }
  }
  *((_QWORD *)&v30 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v30, (uint64_t)&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v29, &v30);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v30);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v28);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_22FFC0454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a21);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *New;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  _QWORD *Copy;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v26 = 0;
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (0.0 - 0.0) / v8 + 1.0 + 0.5;
  v10 = (unint64_t)v9;
  v29[1] = 0;
  v28[0] = 0;
  v28[1] = 0;
  *(double *)&v28[2] = v8;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  if ((unint64_t)v9)
    v11 = v10 > 0x666666666666666;
  else
    v11 = 1;
  if (!v11)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew((unint64_t)v9);
    v13 = New;
    do
    {
      v14 = v31;
      *(_OWORD *)v13 = v30;
      *((_OWORD *)v13 + 1) = v14;
      v15 = v32;
      v13[4] = v32;
      if (v15)
      {
        v16 = (unint64_t *)(v15 - 16);
        if (v13[3])
          v16 = (unint64_t *)v13[3];
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v13 += 5;
    }
    while (v13 != &New[5 * v10]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&v22);
    v24 = New;
    *(_QWORD *)&v22 = v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
  if (v10)
  {
    v18 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (v24)
      {
        if (*((_QWORD *)&v23 + 1) || (v20 = atomic_load(v24 - 2), v20 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>]");
          Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateCopy((uint64_t)v24, v22, v22);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&v22);
          v24 = Copy;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
      v18 += 40;
    }
  }
  *((_QWORD *)&v30 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v30, (uint64_t)&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v29, &v30);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v30);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v28);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_22FFC07A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a21);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void `anonymous namespace'::SampleBetweenKeyedTimes<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *New;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  _QWORD *Copy;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  void *__p;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v4);
  v6 = v5;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v7);
  __p = 0;
  v26 = 0;
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  v8 = 1.0 / v6;
  v9 = (0.0 - 0.0) / v8 + 1.0 + 0.5;
  v10 = (unint64_t)v9;
  v29[1] = 0;
  v28[0] = 0;
  v28[1] = 0;
  *(double *)&v28[2] = v8;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  if ((unint64_t)v9)
    v11 = v10 > 0x666666666666666;
  else
    v11 = 1;
  if (!v11)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew((unint64_t)v9);
    v13 = New;
    do
    {
      v14 = v31;
      *(_OWORD *)v13 = v30;
      *((_OWORD *)v13 + 1) = v14;
      v15 = v32;
      v13[4] = v32;
      if (v15)
      {
        v16 = (unint64_t *)(v15 - 16);
        if (v13[3])
          v16 = (unint64_t *)v13[3];
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v13 += 5;
    }
    while (v13 != &New[5 * v10]);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&v22);
    v24 = New;
    *(_QWORD *)&v22 = v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
  if (v10)
  {
    v18 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (v24)
      {
        if (*((_QWORD *)&v23 + 1) || (v20 = atomic_load(v24 - 2), v20 != 1))
        {
          pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>]");
          Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateCopy((uint64_t)v24, v22, v22);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&v22);
          v24 = Copy;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
      v18 += 40;
    }
  }
  *((_QWORD *)&v30 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v30, (uint64_t)&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v29, &v30);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v30);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a1, (uint64_t)v28);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_22FFC0AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a21);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *New;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)New + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v16 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB788];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<float>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(unint64_t *a1)
{
  unint64_t v1;
  float *v2;
  unint64_t v3;
  float v4;
  float v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (float *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<float>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = *(float **)(a2 + 32);
  v7 = 4 * *a1 - 4;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<float>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<float>::_Streamer>(_QWORD *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_Equal(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_EqualPtr(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD *v8;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_OWORD *)*v2;
    v5 = *(_QWORD *)(*v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*v2;
    *(_QWORD *)(v3 + 16) = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v4 + 24));
    v6 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (_OWORD *)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>::~intrusive_ptr((uint64_t *)&v8);
  }
  return result;
}

void sub_22FFC123C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1060C40DBA2FAD2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"16TimeSampledDataT" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<TimeSampledDataT,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<TimeSampledDataT>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<TimeSampledDataT>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 24));
      MEMORY[0x2348B4E1C](v2, 0x1060C40DBA2FAD2);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<TimeSampledDataT,void>::Equal(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
    return pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 3), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 3));
  else
    return 0;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<TimeSampledDataT>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::VtValue *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 24));
  v6 = (unsigned int *)(v4 + 40);
  atomic_store(0, (unsigned int *)(v4 + 40));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFC1450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1060C40DBA2FAD2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *New;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                New[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v16 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFC16AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Hash(unint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB780];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(unint64_t *a1)
{
  unint64_t v1;
  double *v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (double *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = *(_QWORD *)&v5 + ((v1 + *(_QWORD *)&v5 + (v1 + *(_QWORD *)&v5) * (v1 + *(_QWORD *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<double>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = *(double **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<double>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<double>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;
  uint64_t v6;
  char v7;

  v5 = *(_DWORD *)(a2 + 12);
  v6 = 0;
  v7 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v6, (float *)&v5, (float *)a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>(uint64_t a1, float *a2, float *a3)
{
  float v3;
  unint64_t v4;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(a1 + 8))
    v4 = ((*(_QWORD *)a1 + LODWORD(v3) + (*(_QWORD *)a1 + LODWORD(v3)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>(a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  uint64_t v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)(a1[4] + 8);
  v6 = 16 * *a1;
  for (i = (float *)(*(_QWORD *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_Streamer>(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 6 * v5 - 6;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(v6, v7);
    if (!result)
      break;
    v6 += 3;
    v7 += 3;
    v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2)
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[1]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[1])
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[2]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_Streamer>(_QWORD *a1)
{
  *a1 += 6;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *New;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &New[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v12[2] = *(_QWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = v13;
                v11 += 3;
              }
              while (3 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 3 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = *v14;
            v16[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)v16 = v17;
            v15 += 3;
          }
          while (3 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 24 * v24;
      v27 = v25;
      do
      {
        v28 = *(_OWORD *)v7;
        v27[2] = v7[2];
        *(_OWORD *)v27 = v28;
        v27 += 3;
        v7 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 3 * v3;
      do
      {
        v31 = &v25[v30];
        v32 = *v29;
        v31[2] = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v30 += 3;
      }
      while (3 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = &v19[v20];
    v23 = *v21;
    v22[2] = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v20 += 3;
  }
  while (3 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFC278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 24 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          v9[2] = *((_QWORD *)v4 + 2);
          *(_OWORD *)v9 = v10;
          v9 += 3;
          v4 = (__int128 *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = v4;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v5 = *(_QWORD *)&v4
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v4
                     + (*(_QWORD *)a1 + *(_QWORD *)&v4) * (*(_QWORD *)a1 + *(_QWORD *)&v4)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&>(uint64_t result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (*(_BYTE *)(result + 8))
    *(_QWORD *)&v4 = *(_QWORD *)&v3
                   + ((*(_QWORD *)result
                     + *(_QWORD *)&v3
                     + (*(_QWORD *)result + *(_QWORD *)&v3) * (*(_QWORD *)result + *(_QWORD *)&v3)) >> 1);
  else
    *(_BYTE *)(result + 8) = 1;
  *(double *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = *(_QWORD *)&v5
                    + ((*(_QWORD *)&v4
                      + *(_QWORD *)&v5
                      + (*(_QWORD *)&v4 + *(_QWORD *)&v5) * (*(_QWORD *)&v4 + *(_QWORD *)&v5)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_Streamer>(_QWORD *a1)
{
  *a1 += 24;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *New;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &New[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v16 = *(_OWORD *)(v9 + v11 + 64);
                v17 = *(_OWORD *)(v9 + v11 + 80);
                v18 = *(_OWORD *)(v9 + v11 + 112);
                *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                *((_OWORD *)v12 + 7) = v18;
                *((_OWORD *)v12 + 4) = v16;
                *((_OWORD *)v12 + 5) = v17;
                v11 += 128;
              }
              while (v3 << 7 != v11);
            }
          }
          v19 = *a3;
          v20 = v3 << 7;
          do
          {
            v21 = (_OWORD *)((char *)v7 + v20);
            v22 = *v19;
            v23 = v19[1];
            v24 = v19[3];
            v21[2] = v19[2];
            v21[3] = v24;
            *v21 = v22;
            v21[1] = v23;
            v25 = v19[4];
            v26 = v19[5];
            v27 = v19[7];
            v21[6] = v19[6];
            v21[7] = v27;
            v21[4] = v25;
            v21[5] = v26;
            v20 += 128;
          }
          while (a2 << 7 != v20);
        }
        v28 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v40 = a2;
    else
      v40 = *a1;
    v41 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
    v28 = v41;
    if (v40)
    {
      v42 = v40 << 7;
      v43 = v41;
      do
      {
        v44 = *(_OWORD *)v7;
        v45 = *((_OWORD *)v7 + 1);
        v46 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v43 + 3) = v46;
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        v47 = *((_OWORD *)v7 + 4);
        v48 = *((_OWORD *)v7 + 5);
        v49 = *((_OWORD *)v7 + 7);
        *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)v43 + 7) = v49;
        *((_OWORD *)v43 + 4) = v47;
        *((_OWORD *)v43 + 5) = v48;
        v7 += 16;
        v43 += 16;
        v42 -= 128;
      }
      while (v42);
    }
    if (v3 < a2)
    {
      v50 = *a3;
      v51 = v3 << 7;
      do
      {
        v52 = (_OWORD *)((char *)v41 + v51);
        v53 = *v50;
        v54 = v50[1];
        v55 = v50[3];
        v52[2] = v50[2];
        v52[3] = v55;
        *v52 = v53;
        v52[1] = v54;
        v56 = v50[4];
        v57 = v50[5];
        v58 = v50[7];
        v52[6] = v50[6];
        v52[7] = v58;
        v52[4] = v56;
        v52[5] = v57;
        v51 += 128;
      }
      while (a2 << 7 != v51);
    }
    goto LABEL_29;
  }
  v29 = a2 << 7;
  if ((a2 << 7) / a2 != 128)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v30 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)a1, a2);
  v28 = v30;
  v31 = 0;
  v32 = *a3;
  do
  {
    v33 = &v30[v31 / 8];
    v34 = *v32;
    v35 = v32[1];
    v36 = v32[3];
    *((_OWORD *)v33 + 2) = v32[2];
    *((_OWORD *)v33 + 3) = v36;
    *(_OWORD *)v33 = v34;
    *((_OWORD *)v33 + 1) = v35;
    v37 = v32[4];
    v38 = v32[5];
    v39 = v32[7];
    *((_OWORD *)v33 + 6) = v32[6];
    *((_OWORD *)v33 + 7) = v39;
    *((_OWORD *)v33 + 4) = v37;
    *((_OWORD *)v33 + 5) = v38;
    v31 += 128;
  }
  while (v29 != v31);
LABEL_29:
  if (v28 != (unint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v28;
  }
  *a1 = a2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 57)
    v3 = -1;
  else
    v3 = (a2 << 7) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFC3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = v5 << 7;
        v9 = New;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *v9 = v10;
          v9[1] = v11;
          v13 = v4[4];
          v14 = v4[5];
          v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          v9[4] = v13;
          v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17;
  double v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = v17;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v18 = *(_QWORD *)&v17
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v17
                      + (*(_QWORD *)a1 + *(_QWORD *)&v17) * (*(_QWORD *)a1 + *(_QWORD *)&v17)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v18;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16;
  double v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = v16;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v17 = *(_QWORD *)&v16
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v16
                      + (*(_QWORD *)a1 + *(_QWORD *)&v16) * (*(_QWORD *)a1 + *(_QWORD *)&v16)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v17;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15;
  double v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = v15;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v16 = *(_QWORD *)&v15
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v15
                      + (*(_QWORD *)a1 + *(_QWORD *)&v15) * (*(_QWORD *)a1 + *(_QWORD *)&v15)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v16;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14;
  double v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = v14;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v15 = *(_QWORD *)&v14
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v14
                      + (*(_QWORD *)a1 + *(_QWORD *)&v14) * (*(_QWORD *)a1 + *(_QWORD *)&v14)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v15;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13;
  double v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = v13;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v14 = *(_QWORD *)&v13
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v13
                      + (*(_QWORD *)a1 + *(_QWORD *)&v13) * (*(_QWORD *)a1 + *(_QWORD *)&v13)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v14;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12;
  double v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = v12;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v13 = *(_QWORD *)&v12
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v12
                      + (*(_QWORD *)a1 + *(_QWORD *)&v12) * (*(_QWORD *)a1 + *(_QWORD *)&v12)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v13;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11;
  double v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = v11;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v12 = *(_QWORD *)&v11
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v11
                      + (*(_QWORD *)a1 + *(_QWORD *)&v11) * (*(_QWORD *)a1 + *(_QWORD *)&v11)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v12;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10;
  double v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = v10;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v11 = *(_QWORD *)&v10
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v10
                      + (*(_QWORD *)a1 + *(_QWORD *)&v10) * (*(_QWORD *)a1 + *(_QWORD *)&v10)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v11;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9;
  double v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = v9;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v10 = *(_QWORD *)&v9
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v9
                      + (*(_QWORD *)a1 + *(_QWORD *)&v9) * (*(_QWORD *)a1 + *(_QWORD *)&v9)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v10;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8;
  double v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = v8;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v9 = *(_QWORD *)&v8
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v8
                     + (*(_QWORD *)a1 + *(_QWORD *)&v8) * (*(_QWORD *)a1 + *(_QWORD *)&v8)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v9;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7;
  double v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = v7;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v8 = *(_QWORD *)&v7
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v7
                     + (*(_QWORD *)a1 + *(_QWORD *)&v7) * (*(_QWORD *)a1 + *(_QWORD *)&v7)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = v6;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v7 = *(_QWORD *)&v6
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v6
                     + (*(_QWORD *)a1 + *(_QWORD *)&v6) * (*(_QWORD *)a1 + *(_QWORD *)&v6)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v7;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = v5;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v6 = *(_QWORD *)&v5
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v5
                     + (*(_QWORD *)a1 + *(_QWORD *)&v5) * (*(_QWORD *)a1 + *(_QWORD *)&v5)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v6;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (v5 << 7) - 128;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 128;
    v7 += 128;
    v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_Streamer>(_QWORD *a1)
{
  *a1 += 128;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew(unint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665)
    v2 = -1;
  else
    v2 = 40 * a1 + 16;
  v3 = operator new(v2);
  *v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_22FFC3B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_AllocateNew(a2);
  if (a3)
  {
    v6 = a1 + 40 * a3;
    v7 = result;
    do
    {
      v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      v9 = *(_QWORD *)(a1 + 32);
      v7[4] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (v7[3])
          v10 = (unint64_t *)v7[3];
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 40 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v8);
            v8 += 40;
            v9 -= 40;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;

  v2 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v2 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(_QWORD *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v3 = 2;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = **a1;
  v2 = (_QWORD *)(*a1)[4];
  v13 = 1;
  v12 = v1;
  if (v1)
  {
    v3 = 1;
    for (i = v2; ; v2 = i)
    {
      v6 = *i;
      i += 5;
      v5 = v6;
      if (v3)
      {
        v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        v13 = 1;
        v7 = v5;
      }
      v12 = v7;
      if (v5)
      {
        v8 = (unsigned __int16 *)v2[4];
        do
        {
          --v5;
          v9 = v8 + 3;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v12, v8);
          v8 = v9;
        }
        while (v5);
      }
      if (!--v1)
        break;
      v3 = v13;
    }
    v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*v2;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*v2;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::~intrusive_ptr(&v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfVec3hEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (uint64_t *)a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = 40 * v5 - 40;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::operator==(v6, v7);
    if (!result)
      break;
    v6 += 5;
    v7 += 40;
    v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Streamer>(_QWORD *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew(unint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665)
    v2 = -1;
  else
    v2 = 40 * a1 + 16;
  v3 = operator new(v2);
  *v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_22FFC41D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_AllocateNew(a2);
  if (a3)
  {
    v6 = a1 + 40 * a3;
    v7 = result;
    do
    {
      v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      v9 = *(_QWORD *)(a1 + 32);
      v7[4] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (v7[3])
          v10 = (unint64_t *)v7[3];
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 40 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v8);
            v8 += 40;
            v9 -= 40;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = **a1;
  v2 = (_QWORD *)(*a1)[4];
  v13 = 1;
  v12 = v1;
  if (v1)
  {
    v3 = 1;
    for (i = v2; ; v2 = i)
    {
      v6 = *i;
      i += 5;
      v5 = v6;
      if (v3)
      {
        v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        v13 = 1;
        v7 = v5;
      }
      v12 = v7;
      if (v5)
      {
        v8 = (float *)v2[4];
        do
        {
          --v5;
          v9 = v8 + 3;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v12, v8);
          v8 = v9;
        }
        while (v5);
      }
      if (!--v1)
        break;
      v3 = v13;
    }
    v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*v2;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*v2;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::~intrusive_ptr(&v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfVec3fEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (_QWORD *)a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = 40 * v5 - 40;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::operator==(v6, v7);
    if (!result)
      break;
    v6 += 5;
    v7 += 40;
    v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Streamer>(_QWORD *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew(unint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  uint64_t v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[256]>((uint64_t)&v6);
  if (a1 > 0x666666666666665)
    v2 = -1;
  else
    v2 = 40 * a1 + 16;
  v3 = operator new(v2);
  *v3 = 1;
  v3[1] = a1;
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v3 + 2;
}

void sub_22FFC47E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateCopy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_AllocateNew(a2);
  if (a3)
  {
    v6 = a1 + 40 * a3;
    v7 = result;
    do
    {
      v8 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v7 = *(_OWORD *)a1;
      *((_OWORD *)v7 + 1) = v8;
      v9 = *(_QWORD *)(a1 + 32);
      v7[4] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (v7[3])
          v10 = (unint64_t *)v7[3];
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      a1 += 40;
      v7 += 5;
    }
    while (a1 != v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 40 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v8);
            v8 += 40;
            v9 -= 40;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Hash(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = **a1;
  v2 = (_QWORD *)(*a1)[4];
  v13 = 1;
  v12 = v1;
  if (v1)
  {
    v3 = 1;
    for (i = v2; ; v2 = i)
    {
      v6 = *i;
      i += 5;
      v5 = v6;
      if (v3)
      {
        v7 = v5 + ((unint64_t)(v12 + v5 + (v12 + v5) * (v12 + v5)) >> 1);
      }
      else
      {
        v13 = 1;
        v7 = v5;
      }
      v12 = v7;
      if (v5)
      {
        v8 = v2[4];
        do
        {
          --v5;
          v9 = v8 + 16;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatf const&>((uint64_t)&v12, v8);
          v8 = v9;
        }
        while (v5);
      }
      if (!--v1)
        break;
      v3 = v13;
    }
    v10 = 0x9E3779B97F4A7C55 * v12;
  }
  else
  {
    v10 = 0;
  }
  return bswap64(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_OWORD *)(*v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*v2;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*v2;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::~intrusive_ptr(&v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS0_INS_7GfQuatfEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (_QWORD *)a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = 40 * v5 - 40;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::operator==(v6, v7);
    if (!result)
      break;
    v6 += 5;
    v7 += 40;
    v9 = v8;
    v8 -= 40;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Streamer>(_QWORD *a1)
{
  *a1 += 40;
  return pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIGetTypeID()
{
  if (qword_255E54670 != -1)
    dispatch_once(&qword_255E54670, &__block_literal_global_5);
  return _MergedGlobals_10;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingGetTypeID()
{
  if (qword_255E54680 != -1)
    dispatch_once(&qword_255E54680, &__block_literal_global_1_0);
  return qword_255E54678;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICreateFromObjectRef()
{
  uint64_t v0;
  uint64_t Instance;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7[3];
  uint64_t v8;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v0 = MEMORY[0x24BEE9DC8];
  v8 = 0;
  v7[0] = MEMORY[0x24BEE9DC8] + 16;
  if (qword_255E54670 != -1)
    dispatch_once(&qword_255E54670, &__block_literal_global_5);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v2 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)(Instance + 16) = MEMORY[0x24BEE9D58] + 16;
    v3 = v8;
    *(_QWORD *)(Instance + 40) = v8;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        *(_QWORD *)(Instance + 40) &= 0xFFFFFFFFFFFFFFF8;
    }
    *v2 = v0 + 16;
  }
  MEMORY[0x2348B24C4](v7);
  return Instance;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyDirectBinding(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(v1, Data);
  v3 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v9);
  if ((v13 & 7) != 0)
  {
    v4 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v9);
  return v3;
}

void sub_22FFC5050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  v8 = *((_QWORD *)this + 2);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBind(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  const std::type_info *v4;
  const pxrInternal__aapl__pxrReserved__::TfType *v5;
  unint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void **v13[3];
  _BYTE v14[24];
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdObject *v19[2];
  pxrInternal__aapl__pxrReserved__::UsdObject *v20;

  v20 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x24BDAC8D0];
  if (a2)
    v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a2 + 24);
  else
    v3 = 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v15, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v19[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v15;
  v19[1] = v3;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v14, v19, &v20);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v14);
  v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEE9CC8], v4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)v15, v5);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v13[0] = (void **)(MEMORY[0x24BEE9D88] + 16);
  v6 = (unint64_t *)MEMORY[0x24BEE8128];
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v6);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v9 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v13, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)Data + 40), v8);
  MEMORY[0x2348B20B0](v13);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v14);
  v13[0] = (void **)v14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v13);
  if ((v18 & 7) != 0)
  {
    v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  return v9;
}

uint64_t realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject **a2, pxrInternal__aapl__pxrReserved__::UsdObject **a3)
{
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::UsdObject **v5;
  pxrInternal__aapl__pxrReserved__::UsdObject *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  _QWORD *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD **v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *i;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  void **v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  _OWORD *v75;
  _QWORD *v76;
  __int128 v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  _OWORD *v96;
  __int128 v97;
  void **v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  _OWORD v104[2];
  void *__p[2];
  __int128 v106;
  float v107;
  void **v108;
  __int128 v109;
  void **v110;
  _OWORD *v111;
  __int128 v112;
  _QWORD *v113;
  char v114;
  uint64_t v115;
  _QWORD v116[2];

  *(_OWORD *)__p = 0u;
  v106 = 0u;
  v107 = 1.0;
  if (a2 != a3)
  {
    v5 = a2;
    while (1)
    {
      v6 = *v5;
      if (*v5 && (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*v5) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v6);
        v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v108);
        EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
        v9 = EditTarget[1];
        *(_QWORD *)&v112 = *EditTarget;
        *((_QWORD *)&v112 + 1) = v9;
        if (v9)
        {
          v10 = (unsigned int *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = v109;
        if ((_QWORD)v109)
        {
          v13 = (unsigned int *)(v109 + 8);
          do
          {
            v14 = __ldxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v16 = *((_QWORD *)&v112 + 1);
        if (*((_QWORD *)&v112 + 1))
        {
          v17 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v112 + 1);
          v16 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        }
      }
      else
      {
        v16 = 0;
        v112 = 0uLL;
      }
      v18 = bswap64(v16);
      v19 = (unint64_t)__p[1];
      if (__p[1])
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v20.i16[0] = vaddlv_u8(v20);
        v21 = v20.u32[0];
        if (v20.u32[0] > 1uLL)
        {
          v3 = v18;
          if ((void *)v18 >= __p[1])
            v3 = v18 % (unint64_t)__p[1];
        }
        else
        {
          v3 = ((unint64_t)__p[1] - 1) & v18;
        }
        v22 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v22)
        {
          v23 = (_QWORD *)*v22;
          if (*v22)
          {
            do
            {
              v24 = v23[1];
              if (v24 == v18)
              {
                if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)(v23 + 2), (uint64_t)&v112))
                {
                  goto LABEL_88;
                }
              }
              else
              {
                if (v21 > 1)
                {
                  if ((void *)v24 >= __p[1])
                    v24 %= (unint64_t)__p[1];
                }
                else
                {
                  v24 &= (unint64_t)__p[1] - 1;
                }
                if (v24 != v3)
                  break;
              }
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
        }
      }
      v25 = operator new(0x20uLL);
      *v25 = 0;
      v25[1] = v18;
      *((_OWORD *)v25 + 1) = v112;
      v112 = 0uLL;
      v26 = (float)(unint64_t)(*((_QWORD *)&v106 + 1) + 1);
      if (!v19 || (float)(v107 * (float)v19) < v26)
        break;
LABEL_78:
      v42 = __p[0];
      v43 = (_QWORD *)*((_QWORD *)__p[0] + v3);
      if (v43)
      {
        *v25 = *v43;
      }
      else
      {
        *v25 = v106;
        *(_QWORD *)&v106 = v25;
        v42[v3] = &v106;
        if (!*v25)
          goto LABEL_87;
        v44 = *(_QWORD *)(*v25 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v44 >= v19)
            v44 %= v19;
        }
        else
        {
          v44 &= v19 - 1;
        }
        v43 = (char *)__p[0] + 8 * v44;
      }
      *v43 = v25;
LABEL_87:
      ++*((_QWORD *)&v106 + 1);
LABEL_88:
      v45 = *((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v46 = (unsigned int *)(*((_QWORD *)&v112 + 1) + 8);
        do
        {
          v47 = __ldxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      if (++v5 == a3)
      {
        v50 = *((_QWORD *)&v106 + 1);
        goto LABEL_105;
      }
    }
    v27 = (v19 & (v19 - 1)) != 0;
    if (v19 < 3)
      v27 = 1;
    v28 = v27 | (2 * v19);
    v29 = vcvtps_u32_f32(v26 / v107);
    if (v28 <= v29)
      prime = (int8x8_t)v29;
    else
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v19 = (unint64_t)__p[1];
    if ((void *)*(_QWORD *)&prime > __p[1])
      goto LABEL_44;
    if ((void *)*(_QWORD *)&prime < __p[1])
    {
      v37 = vcvtps_u32_f32((float)*((unint64_t *)&v106 + 1) / v107);
      if (__p[1] < (void *)3
        || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (*(_QWORD *)&prime <= v37)
        prime = (int8x8_t)v37;
      if ((void *)*(_QWORD *)&prime >= __p[1])
      {
        v19 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_44:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v31 = operator new(8 * *(_QWORD *)&prime);
          v32 = __p[0];
          __p[0] = v31;
          if (v32)
            operator delete(v32);
          v33 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v33++) = 0;
          while (*(_QWORD *)&prime != v33);
          v34 = (_QWORD **)v106;
          if ((_QWORD)v106)
          {
            v35 = *(_QWORD *)(v106 + 8);
            v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&prime)
                v35 %= *(_QWORD *)&prime;
            }
            else
            {
              v35 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v35) = &v106;
            for (i = *v34; i; v35 = v41)
            {
              v41 = i[1];
              if (v36.u32[0] > 1uLL)
              {
                if (v41 >= *(_QWORD *)&prime)
                  v41 %= *(_QWORD *)&prime;
              }
              else
              {
                v41 &= *(_QWORD *)&prime - 1;
              }
              if (v41 != v35)
              {
                if (!*((_QWORD *)__p[0] + v41))
                {
                  *((_QWORD *)__p[0] + v41) = v34;
                  goto LABEL_69;
                }
                *v34 = (_QWORD *)*i;
                *i = **((_QWORD **)__p[0] + v41);
                **((_QWORD **)__p[0] + v41) = i;
                i = v34;
              }
              v41 = v35;
LABEL_69:
              v34 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_73;
        }
        v49 = __p[0];
        __p[0] = 0;
        if (v49)
          operator delete(v49);
        v19 = 0;
        __p[1] = 0;
      }
    }
LABEL_73:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v3 = v18 % v19;
      else
        v3 = v18;
    }
    else
    {
      v3 = (v19 - 1) & v18;
    }
    goto LABEL_78;
  }
  v50 = 0;
LABEL_105:
  memset(v104, 0, 24);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve((uint64_t *)v104, v50);
  v51 = (_QWORD *)v106;
  if ((_QWORD)v106)
  {
    v52 = 0;
    v53 = 0;
    v54 = *((_QWORD *)&v104[0] + 1);
    v55 = (_QWORD *)v106;
    do
    {
      v55 = (_QWORD *)*v55;
      --v53;
      v52 -= 16;
    }
    while (v55);
    v56 = *(_QWORD *)&v104[0];
    v57 = (uint64_t)(*((_QWORD *)&v104[0] + 1) - *(_QWORD *)&v104[0]) >> 4;
    v58 = (_QWORD *)(*(_QWORD *)&v104[0] + ((*((_QWORD *)&v104[0] + 1) - *(_QWORD *)&v104[0]) & 0xFFFFFFFFFFFFFFF0));
    v59 = ~v53;
    if (~v53 >= (uint64_t)(*(_QWORD *)&v104[1] - *((_QWORD *)&v104[0] + 1)) >> 4)
    {
      v65 = v57 - v53;
      if (v65 >> 60)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(*(_QWORD *)&v104[1] - *(_QWORD *)&v104[0]) >> 3 > v65)
        v65 = (uint64_t)(*(_QWORD *)&v104[1] - *(_QWORD *)&v104[0]) >> 3;
      if (*(_QWORD *)&v104[1] - *(_QWORD *)&v104[0] >= 0x7FFFFFFFFFFFFFF0uLL)
        v66 = 0xFFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      v111 = &v104[1];
      if (v66)
        v67 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v104[1], v66);
      else
        v67 = 0;
      v89 = (uint64_t)&v67[2 * v57];
      v108 = v67;
      *(_QWORD *)&v109 = v89;
      v110 = &v67[2 * v66];
      v90 = (_QWORD *)v89;
      do
      {
        *v90 = v51[2];
        v91 = v51[3];
        v90[1] = v91;
        if (v91)
        {
          v92 = (unsigned int *)(v91 + 8);
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        v90 += 2;
        v51 = (_QWORD *)*v51;
      }
      while ((_QWORD *)(v89 - v52) != v90);
      *((_QWORD *)&v109 + 1) = v89 - v52;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>((uint64_t)&v104[1], (uint64_t)v58, v58, *(uint64_t *)&v104[0], *(_QWORD **)&v104[0], v89, v89);
      *(_QWORD *)&v109 = v94;
      v95 = (_QWORD *)*((_QWORD *)&v104[0] + 1);
      v96 = (_OWORD *)*((_QWORD *)&v109 + 1);
      v115 = *((_QWORD *)&v109 + 1);
      v116[0] = *((_QWORD *)&v109 + 1);
      *(_QWORD *)&v112 = &v104[1];
      *((_QWORD *)&v112 + 1) = &v115;
      v113 = v116;
      if (*((_QWORD **)&v104[0] + 1) != v58)
      {
        do
        {
          *v96++ = *(_OWORD *)v58;
          *v58 = 0;
          v58[1] = 0;
          v58 += 2;
        }
        while (v58 != v95);
        v116[0] = v96;
      }
      v114 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v112);
      v97 = v104[0];
      *(_QWORD *)&v104[0] = v109;
      *((_QWORD *)&v104[0] + 1) = v96;
      v109 = v97;
      v98 = *(void ***)&v104[1];
      *(_QWORD *)&v104[1] = v110;
      v110 = v98;
      v108 = (void **)v97;
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)&v108);
    }
    else
    {
      v60 = 1 - v53;
      v61 = (_QWORD *)v106;
      do
      {
        v61 = (_QWORD *)*v61;
        --v60;
      }
      while (v60 > 1);
      v62 = *((_QWORD *)&v104[0] + 1) - (_QWORD)v58;
      v63 = (uint64_t)(*((_QWORD *)&v104[0] + 1) - (_QWORD)v58) >> 4;
      if (v63 > v59)
      {
        v64 = (_QWORD *)*((_QWORD *)&v104[0] + 1);
LABEL_131:
        v73 = &v58[v52 / 0xFFFFFFFFFFFFFFF8];
        v74 = (_QWORD *)((char *)&v58[v52 / 8] + (_QWORD)((char *)v64 - v56 + -16 * v57));
        v75 = v64;
        if ((unint64_t)v74 < v54)
        {
          v76 = v74;
          v75 = v64;
          do
          {
            *v75++ = *(_OWORD *)v76;
            *v76 = 0;
            v76[1] = 0;
            v76 += 2;
          }
          while ((unint64_t)v76 < v54);
        }
        *((_QWORD *)&v104[0] + 1) = v75;
        if (v73 != v64)
        {
          do
          {
            v77 = *((_OWORD *)v74 - 1);
            v74 -= 2;
            v78 = (unsigned int *)*(v64 - 1);
            *((_OWORD *)v64 - 1) = v77;
            v64 -= 2;
            v74[1] = 0;
            if (v78)
            {
              v79 = v78 + 2;
              do
              {
                v80 = __ldxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              if (!v81)
                (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 8))(v78);
            }
            *v74 = 0;
          }
          while (v74 != v58);
        }
        for (; v51 != v61; v58 += 2)
        {
          v82 = (unsigned int *)v58[1];
          *(_OWORD *)v58 = *((_OWORD *)v51 + 1);
          v83 = v51[3];
          if (v83)
          {
            v84 = (unsigned int *)(v83 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          if (v82)
          {
            v86 = v82 + 2;
            do
            {
              v87 = __ldxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
              (*(void (**)(unsigned int *))(*(_QWORD *)v82 + 8))(v82);
          }
          v51 = (_QWORD *)*v51;
        }
        goto LABEL_162;
      }
      v61 = (_QWORD *)v106;
      if (v62 >= 1)
      {
        v68 = v63 + 1;
        v61 = (_QWORD *)v106;
        do
        {
          v61 = (_QWORD *)*v61;
          --v68;
        }
        while (v68 > 1);
      }
      *(_QWORD *)&v112 = *((_QWORD *)&v104[0] + 1);
      v116[0] = *((_QWORD *)&v104[0] + 1);
      v108 = (void **)&v104[1];
      *(_QWORD *)&v109 = v116;
      *((_QWORD *)&v109 + 1) = &v112;
      v64 = (_QWORD *)*((_QWORD *)&v104[0] + 1);
      if (v61)
      {
        v69 = v61;
        do
        {
          *v64 = v69[2];
          v70 = v69[3];
          v64[1] = v70;
          if (v70)
          {
            v71 = (unsigned int *)(v70 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          v69 = (_QWORD *)*v69;
          v64 += 2;
          *(_QWORD *)&v112 = v64;
        }
        while (v69);
      }
      LOBYTE(v110) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v108);
      *((_QWORD *)&v104[0] + 1) = v64;
      if (v62 >= 1)
        goto LABEL_131;
    }
  }
LABEL_162:
  v99 = v104[0];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v104 + 8);
  v100 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v99 + 1) - v99) >> 4);
  *(_QWORD *)a1 = v99;
  memset(v104, 0, 24);
  if (*((_QWORD *)&v99 + 1) == (_QWORD)v99)
    v101 = 0;
  else
    v101 = v100;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>((__n128 *)v99, *((__n128 **)&v99 + 1), (uint64_t)v116, v101, 1);
  v108 = (void **)v104;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v108);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table((uint64_t)__p);
}

void sub_22FFC5BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)&a20);
  a25 = (void **)&a11;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a25);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbind(uint64_t a1)
{
  std::recursive_mutex *v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v8, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)&v8);
  std::recursive_mutex::lock(v2);
  if ((v11 & 7) != 0)
  {
    v3 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v6 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), Data);
  std::recursive_mutex::unlock(v2);
  return v6;
}

void sub_22FFC5D50(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIBindCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  unint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v16;
  void **v17[3];
  _BYTE v18[24];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  _DWORD v29[4];
  pxrInternal__aapl__pxrReserved__::UsdObject *v30[3];
  pxrInternal__aapl__pxrReserved__::UsdObject *v31;

  v31 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x24BDAC8D0];
  if (a2)
    v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a2 + 24);
  else
    v4 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v23, &v28, v29);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v19, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v30[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v19;
  v30[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v23;
  v30[2] = v4;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v18, v30, &v31);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v18);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v16 = 0;
  v17[0] = (void **)(MEMORY[0x24BEE9D88] + 16);
  v5 = (unint64_t *)MEMORY[0x24BEE8128];
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v5);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v8 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v27, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)Data + 40), v7);
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  MEMORY[0x2348B20B0](v17);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v18);
  v17[0] = (void **)v18;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v17);
  if ((v22 & 7) != 0)
  {
    v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  if ((v26 & 7) != 0)
  {
    v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  if (v24)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  MEMORY[0x2348B2038](v27);
  return v8;
}

void sub_22FFC5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPIUnbindCollection(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _BYTE v14[24];
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::UsdObject *v28[2];
  pxrInternal__aapl__pxrReserved__::UsdObject *v29;

  v29 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v19, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v15, &v24, &v25);
  v28[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v19;
  v28[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v15;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v14, v28, &v29);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v14);
  v27 = v26;
  if ((v26 & 7) != 0)
  {
    v3 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v27 = (unint64_t)v3;
  }
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v6 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, Data);
  if ((v27 & 7) != 0)
  {
    v7 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v14);
  v27 = (unint64_t)v14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if ((v18 & 7) != 0)
  {
    v9 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  if ((v22 & 7) != 0)
  {
    v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  MEMORY[0x2348B2038](v23);
  return v6;
}

void sub_22FFC61FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v4 = *(_QWORD *)(v2 - 48);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)va);
  *(_QWORD *)(v2 - 48) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 48));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  MEMORY[0x2348B2038](v2 - 80);
  _Unwind_Resume(a1);
}

void sub_22FFC6294()
{
  JUMPOUT(0x22FFC628CLL);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyMaterialBindingStrengthForDirectBinding(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(v1, Data);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength();
  v3 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v11);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v16 & 7) != 0)
  {
    v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v15 & 7) != 0)
  {
    v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
  return v3;
}

void sub_22FFC63B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  va_list va;

  va_start(va, a2);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::~DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1)
{
  uint64_t result;

  if (RIOPxrTfTokenGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    *(_QWORD *)(result + 16) = *a1;
    *a1 = 0;
  }
  return result;
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetMaterialBindingStrengthForDirectBinding(uint64_t a1)
{
  std::recursive_mutex *v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v12, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v12);
  std::recursive_mutex::lock(v2);
  if ((v15 & 7) != 0)
  {
    v3 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), Data);
  v6 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength();
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
  std::recursive_mutex::unlock(v2);
  return v6;
}

void sub_22FFC65BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindings(uint64_t a1)
{
  __CFArray *Mutable;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v3;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  int *v5;
  int *i;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t Instance;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  void **v24;
  int v25;
  _DWORD v26[3];
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int *v36;
  int *v37;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(v3, Data);
  v5 = v36;
  for (i = v37; v5 != i; v5 += 8)
  {
    v31 = *v5;
    v7 = *((_QWORD *)v5 + 1);
    v32 = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 48);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, v5 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, v5 + 5);
    v10 = *((_QWORD *)v5 + 3);
    v35 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    MEMORY[0x2348B247C](&v24, &v31);
    if (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel()
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      if (qword_255E54680 != -1)
        dispatch_once(&qword_255E54680, &__block_literal_global_1_0);
      Instance = _CFRuntimeCreateInstance();
      v14 = Instance;
      if (Instance)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), &v24);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 20), (_DWORD *)&v24 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 24), &v25);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 28), v26);
        *(_DWORD *)(v14 + 32) = v26[1];
        v15 = v27;
        *(_QWORD *)(v14 + 40) = v27;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 48);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 48), &v28);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 52), &v29);
        v18 = v30;
        *(_QWORD *)(v14 + 56) = v30;
        if ((v18 & 7) != 0)
        {
          v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 2, v19));
          if ((v20 & 1) == 0)
            *(_QWORD *)(v14 + 56) &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      CFArrayAppendValue(Mutable, (const void *)v14);
      CFRelease((CFTypeRef)v14);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v24);
    if ((v35 & 7) != 0)
    {
      v21 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
  }
  v24 = (void **)&v36;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v24);
  return Mutable;
}

void sub_22FFC68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&a12);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&a18);
  a12 = (void **)&a22;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingMaterialPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 24));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingMaterialPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 24));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICollectionBindingCollectionPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingCollectionPath(uint64_t a1)
{
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingPrimCollectionName(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[24];
  unint64_t v8;
  unint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a1 + 16));
  v9 = v8;
  if ((v8 & 7) != 0)
  {
    v1 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 2, v1));
    if ((v2 & 1) == 0)
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  v3 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v9);
  if ((v9 & 7) != 0)
  {
    v4 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  MEMORY[0x2348B2038](v7);
  return v3;
}

void sub_22FFC69C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  MEMORY[0x2348B2038](va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyCollectionBindingStrength(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  v19 = v18;
  if ((v18 & 7) != 0)
  {
    v3 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  }
  MEMORY[0x2348B2038](v15);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19, Data);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength();
  v6 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v14);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v18 & 7) != 0)
  {
    v9 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  if ((v19 & 7) != 0)
  {
    v11 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return v6;
}

void sub_22FFC6B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v11 = *(_QWORD *)(v10 - 24);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPISetCollectionBindingStrength(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _BYTE v21[24];
  char v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[8];
  uint64_t v31;
  int v32;
  unsigned int *v33;
  pxrInternal__aapl__pxrReserved__::UsdObject *v34[2];
  pxrInternal__aapl__pxrReserved__::UsdObject *v35;

  v35 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v26, (uint64_t *)(a1 + 24), (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v22, &v31, &v32);
  v34[0] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v26;
  v34[1] = (pxrInternal__aapl__pxrReserved__::UsdObject *)v22;
  realityio::makeWriteMutexForUsdObjects<pxrInternal__aapl__pxrReserved__::UsdPrim **>((uint64_t)v21, v34, &v35);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v21);
  v20 = v33;
  if ((v33 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v20 = v3;
  }
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, Data);
  v6 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength();
  if ((v19 & 7) != 0)
  {
    v7 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  if ((v20 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v21);
  v16 = (void **)v21;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v16);
  if ((v25 & 7) != 0)
  {
    v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  if (v23)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  if ((v29 & 7) != 0)
  {
    v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if (v27)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  MEMORY[0x2348B2038](v30);
  return v6;
}

void sub_22FFC6DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  void **v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, void **);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)va1);
  va_copy((va_list)v6, va1);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va3);
  MEMORY[0x2348B2038](v2 - 88);
  _Unwind_Resume(a1);
}

void sub_22FFC6E70()
{
  JUMPOUT(0x22FFC6E68);
}

uint64_t RIOPxrUsdShadeMaterialBindingAPICopyComputedBoundMaterial(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *v1;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v3;
  _BYTE v5[24];
  int v6;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(a1 + 16);
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(v1, Data, 0);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v5, &v6);
  v3 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  MEMORY[0x2348B20B0](v5);
  return v3;
}

void sub_22FFC6F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  MEMORY[0x2348B20B0](&a9);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICFFinalize(char *a1)
{
  return (**((uint64_t (***)(char *))a1 + 2))(a1 + 16);
}

BOOL _RIOPxrUsdShadeMaterialBindingAPICFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdShadeMaterialBindingAPI %p>"), a1);
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdShadeMaterialBindingAPI %p>"), a1);
}

void _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFFinalize(char *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a1 + 16));
}

BOOL _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdShadeMaterialBindingAPICollectionBinding %p>"), a1);
}

CFStringRef _RIOPxrUsdShadeMaterialBindingAPICollectionBindingCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdShadeMaterialBindingAPICollectionBinding %p>"), a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__clear[abi:ne180100]((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__clear[abi:ne180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 16)
  {
    result = *(unsigned int **)(i - 8);
    if (result)
    {
      v4 = result + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

unsigned int *std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve(uint64_t *a1, unint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (unsigned int *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)v7);
  }
  return result;
}

void sub_22FFC7158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)va);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a1)
  {
    v3 = (unsigned int *)__p[3];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::operator()[abi:ne180100]((unsigned int *)a1);
  return a1;
}

unsigned int *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::operator()[abi:ne180100](unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      v3 = result + 2;
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    v1 += 16;
  }
  return result;
}

unsigned int *std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer(unsigned int *a1)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::clear[abi:ne180100](a1);
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::clear[abi:ne180100](unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      *((_QWORD *)v3 + 2) = v1 - 16;
      result = *(unsigned int **)(v1 - 8);
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>::operator()[abi:ne180100]((_QWORD **)a1);
  return a1;
}

_QWORD **std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>::operator()[abi:ne180100](_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *result[2];
  v2 = *result[1];
  while (v1 != v2)
  {
    result = *(_QWORD ***)(v1 - 8);
    if (result)
    {
      v3 = (unsigned int *)(result + 1);
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
    }
    v1 -= 16;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  __n128 v17;
  __n128 *v18;
  char v19;
  BOOL v20;
  __n128 v21;

LABEL_1:
  v9 = a2 - 1;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&a2[-1], (uint64_t)v10))
        {
          v21 = *v10;
          v10->n128_u64[0] = 0;
          v10->n128_u64[1] = 0;
          *v10 = *v9;
          *v9 = v21;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)&v10[1], (uint64_t)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, (uint64_t)&v10[1], (uint64_t)&v10[2], (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, (uint64_t)&v10[1], (uint64_t)&v10[2], (uint64_t)&v10[3], (__n128 *)a2[-1].n128_u64);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)&v10[v14 >> 1], (uint64_t)v10, (uint64_t)&a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)v10, (uint64_t)&v10[v14 >> 1], (uint64_t)&a2[-1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)&v10[1], (uint64_t)&v16[-1], (uint64_t)&a2[-2]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)&v10[2], (uint64_t)&v10[v15 + 1], (uint64_t)&a2[-3]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)&v16[-1], (uint64_t)v16, (uint64_t)&v10[v15 + 1]);
            v17 = *v10;
            v10->n128_u64[0] = 0;
            v10->n128_u64[1] = 0;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v10[-1], (uint64_t)v10))
          {
            v10 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>((unint64_t)v10, a2);
            goto LABEL_16;
          }
LABEL_11:
          v18 = (__n128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>((__int128 *)v10, (unint64_t)a2);
          if ((v19 & 1) == 0)
            goto LABEL_14;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v10, v18);
          v10 = v18 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v18 + 1, a2))
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>(a1, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((unsigned int *)v10, (unsigned int *)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v6 = a2;
  v687 = (uint64_t *)(a2 - 16);
  while (2)
  {
    v7 = j;
    v8 = v6 - (char *)j;
    v9 = (v6 - (char *)j) >> 4;
    v693 = j;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v321 = *((_QWORD *)a2 - 2);
        v322 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
        if (v322)
        {
          p_shared_owners = (unint64_t *)&v322->__shared_owners_;
          do
            v324 = __ldxr(p_shared_owners);
          while (__stxr(v324 + 1, p_shared_owners));
        }
        v325 = *j;
        v326 = (std::__shared_weak_count *)j[1];
        if (v326)
        {
          v327 = (unint64_t *)&v326->__shared_owners_;
          do
            v328 = __ldxr(v327);
          while (__stxr(v328 + 1, v327));
        }
        v331 = *(const void **)(v321 + 48);
        v329 = v321 + 48;
        v330 = v331;
        v332 = *(char *)(v329 + 23);
        v335 = *(const void **)(v325 + 48);
        v333 = v325 + 48;
        v334 = v335;
        v336 = *(char *)(v333 + 23);
        if (v336 >= 0)
          v337 = *(unsigned __int8 *)(v333 + 23);
        else
          v337 = *(_QWORD *)(v333 + 8);
        if (v336 >= 0)
          v338 = (const void *)v333;
        else
          v338 = v334;
        if (v332 >= 0)
          v339 = *(unsigned __int8 *)(v329 + 23);
        else
          v339 = *(_QWORD *)(v329 + 8);
        if (v332 >= 0)
          v340 = (const void *)v329;
        else
          v340 = v330;
        if (v339 >= v337)
          v341 = v337;
        else
          v341 = v339;
        v342 = memcmp(v338, v340, v341);
        if (v342)
          v343 = v342 < 0;
        else
          v343 = v337 < v339;
        if (v326)
        {
          v344 = (unint64_t *)&v326->__shared_owners_;
          do
            v345 = __ldaxr(v344);
          while (__stlxr(v345 - 1, v344));
          if (!v345)
          {
            ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
            std::__shared_weak_count::__release_weak(v326);
          }
        }
        if (v322)
        {
          v346 = (unint64_t *)&v322->__shared_owners_;
          do
            v347 = __ldaxr(v346);
          while (__stlxr(v347 - 1, v346));
          if (!v347)
          {
            ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
            std::__shared_weak_count::__release_weak(v322);
          }
        }
        if (v343)
        {
          v348 = *j;
          *j = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v348;
          v349 = j[1];
          j[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v349;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, j + 2, v687);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, j + 2, j + 4, v687);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(j, j + 2, j + 4, j + 6, v687);
        return;
      default:
        if (v8 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (j == (uint64_t *)v6)
              return;
            v350 = j + 2;
            if (j + 2 == (uint64_t *)a2)
              return;
            v351 = (uint64_t)j;
            while (1)
            {
              v352 = v350;
              v353 = *(_QWORD *)(v351 + 16);
              v354 = *(std::__shared_weak_count **)(v351 + 24);
              if (v354)
              {
                v355 = (unint64_t *)&v354->__shared_owners_;
                do
                  v356 = __ldxr(v355);
                while (__stxr(v356 + 1, v355));
              }
              v357 = *(_QWORD *)v351;
              v358 = *(std::__shared_weak_count **)(v351 + 8);
              if (v358)
              {
                v359 = (unint64_t *)&v358->__shared_owners_;
                do
                  v360 = __ldxr(v359);
                while (__stxr(v360 + 1, v359));
              }
              v363 = *(const void **)(v353 + 48);
              v361 = v353 + 48;
              v362 = v363;
              v364 = *(char *)(v361 + 23);
              v367 = *(const void **)(v357 + 48);
              v365 = v357 + 48;
              v366 = v367;
              v368 = *(char *)(v365 + 23);
              if (v368 >= 0)
                v369 = *(unsigned __int8 *)(v365 + 23);
              else
                v369 = *(_QWORD *)(v365 + 8);
              if (v368 >= 0)
                v370 = (const void *)v365;
              else
                v370 = v366;
              if (v364 >= 0)
                v371 = *(unsigned __int8 *)(v361 + 23);
              else
                v371 = *(_QWORD *)(v361 + 8);
              if (v364 >= 0)
                v372 = (const void *)v361;
              else
                v372 = v362;
              if (v371 >= v369)
                v373 = v369;
              else
                v373 = v371;
              v374 = memcmp(v370, v372, v373);
              if (v374)
                v375 = v374 < 0;
              else
                v375 = v369 < v371;
              if (v358)
              {
                v376 = (unint64_t *)&v358->__shared_owners_;
                do
                  v377 = __ldaxr(v376);
                while (__stlxr(v377 - 1, v376));
                if (!v377)
                {
                  ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                  std::__shared_weak_count::__release_weak(v358);
                }
              }
              if (!v354)
                goto LABEL_552;
              v378 = (unint64_t *)&v354->__shared_owners_;
              do
                v379 = __ldaxr(v378);
              while (__stlxr(v379 - 1, v378));
              if (!v379)
              {
                ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                std::__shared_weak_count::__release_weak(v354);
                if (!v375)
                  goto LABEL_601;
              }
              else
              {
LABEL_552:
                if (!v375)
                  goto LABEL_601;
              }
              v380 = *(std::__shared_weak_count **)(v351 + 24);
              *(_QWORD *)&v695 = *(_QWORD *)(v351 + 16);
              *((_QWORD *)&v695 + 1) = v380;
              *v352 = 0;
              v352[1] = 0;
              std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v352, (__int128 *)v351);
              v381 = (uint64_t)j;
              if ((uint64_t *)v351 == j)
                goto LABEL_596;
              while (1)
              {
                v382 = v695;
                if (v380)
                {
                  v383 = (unint64_t *)&v380->__shared_owners_;
                  do
                    v384 = __ldxr(v383);
                  while (__stxr(v384 + 1, v383));
                }
                v385 = *(_QWORD *)(v351 - 16);
                v386 = *(std::__shared_weak_count **)(v351 - 8);
                if (v386)
                {
                  v387 = (unint64_t *)&v386->__shared_owners_;
                  do
                    v388 = __ldxr(v387);
                  while (__stxr(v388 + 1, v387));
                }
                v391 = *(_QWORD *)(v382 + 48);
                v389 = v382 + 48;
                v390 = v391;
                v392 = *(char *)(v389 + 23);
                v395 = *(_QWORD *)(v385 + 48);
                v393 = v385 + 48;
                v394 = v395;
                v396 = *(char *)(v393 + 23);
                v397 = v396 >= 0 ? *(unsigned __int8 *)(v393 + 23) : *(_QWORD *)(v393 + 8);
                v398 = (const void *)(v396 >= 0 ? v393 : v394);
                v399 = v392 >= 0 ? *(unsigned __int8 *)(v389 + 23) : *(_QWORD *)(v389 + 8);
                v400 = (const void *)(v392 >= 0 ? v389 : v390);
                v401 = v399 >= v397 ? v397 : v399;
                v402 = memcmp(v398, v400, v401);
                v403 = v402 ? v402 < 0 : v397 < v399;
                if (!v386)
                  goto LABEL_582;
                v404 = (unint64_t *)&v386->__shared_owners_;
                do
                  v405 = __ldaxr(v404);
                while (__stlxr(v405 - 1, v404));
                if (!v405)
                {
                  ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                  std::__shared_weak_count::__release_weak(v386);
                  if (!v380)
                    goto LABEL_586;
                }
                else
                {
LABEL_582:
                  if (!v380)
                    goto LABEL_586;
                }
                v406 = (unint64_t *)&v380->__shared_owners_;
                do
                  v407 = __ldaxr(v406);
                while (__stlxr(v407 - 1, v406));
                if (!v407)
                  break;
LABEL_586:
                if (!v403)
                  goto LABEL_595;
LABEL_591:
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v351, (__int128 *)(v351 - 16));
                v381 = (uint64_t)j;
                if ((uint64_t *)(v351 - 16) == j)
                  goto LABEL_596;
                v380 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
                v351 -= 16;
              }
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
              if (v403)
                goto LABEL_591;
LABEL_595:
              v381 = v351;
LABEL_596:
              std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v381, &v695);
              v408 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
              if (*((_QWORD *)&v695 + 1))
              {
                v409 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                do
                  v410 = __ldaxr(v409);
                while (__stlxr(v410 - 1, v409));
                if (!v410)
                {
                  ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                  std::__shared_weak_count::__release_weak(v408);
                }
              }
LABEL_601:
              v350 = v352 + 2;
              v351 = (uint64_t)v352;
              if (v352 + 2 == (_QWORD *)a2)
                return;
            }
          }
          if (j == (uint64_t *)v6)
            return;
          v623 = (char *)(j + 2);
LABEL_895:
          if (v623 == a2)
            return;
          v624 = v623;
          v625 = v7[2];
          v626 = (std::__shared_weak_count *)v7[3];
          v627 = v7;
          if (v626)
          {
            v628 = (unint64_t *)&v626->__shared_owners_;
            do
              v629 = __ldxr(v628);
            while (__stxr(v629 + 1, v628));
          }
          v630 = *v7;
          v631 = (std::__shared_weak_count *)v7[1];
          if (v631)
          {
            v632 = (unint64_t *)&v631->__shared_owners_;
            do
              v633 = __ldxr(v632);
            while (__stxr(v633 + 1, v632));
          }
          v636 = *(const void **)(v625 + 48);
          v634 = v625 + 48;
          v635 = v636;
          v637 = *(char *)(v634 + 23);
          v640 = *(const void **)(v630 + 48);
          v638 = v630 + 48;
          v639 = v640;
          v641 = *(char *)(v638 + 23);
          if (v641 >= 0)
            v642 = *(unsigned __int8 *)(v638 + 23);
          else
            v642 = *(_QWORD *)(v638 + 8);
          if (v641 >= 0)
            v643 = (const void *)v638;
          else
            v643 = v639;
          if (v637 >= 0)
            v644 = *(unsigned __int8 *)(v634 + 23);
          else
            v644 = *(_QWORD *)(v634 + 8);
          if (v637 >= 0)
            v645 = (const void *)v634;
          else
            v645 = v635;
          if (v644 >= v642)
            v646 = v642;
          else
            v646 = v644;
          v647 = memcmp(v643, v645, v646);
          if (v647)
            v648 = v647 < 0;
          else
            v648 = v642 < v644;
          if (v631)
          {
            v649 = (unint64_t *)&v631->__shared_owners_;
            do
              v650 = __ldaxr(v649);
            while (__stlxr(v650 - 1, v649));
            if (!v650)
            {
              ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
              std::__shared_weak_count::__release_weak(v631);
            }
          }
          if (!v626)
            goto LABEL_929;
          v651 = (unint64_t *)&v626->__shared_owners_;
          do
            v652 = __ldaxr(v651);
          while (__stlxr(v652 - 1, v651));
          if (!v652)
          {
            ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
            std::__shared_weak_count::__release_weak(v626);
            if (!v648)
              goto LABEL_973;
          }
          else
          {
LABEL_929:
            if (!v648)
              goto LABEL_973;
          }
          v653 = (__int128 *)v627;
          v654 = (std::__shared_weak_count *)v627[3];
          *(_QWORD *)&v695 = *(_QWORD *)v624;
          *((_QWORD *)&v695 + 1) = v654;
          *(_QWORD *)v624 = 0;
          *((_QWORD *)v624 + 1) = 0;
          for (i = (uint64_t)v624; ; v653 = (__int128 *)(i - 16))
          {
            v656 = i;
            i = (uint64_t)v653;
            std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v656, v653);
            v657 = v695;
            if (v654)
            {
              v658 = (unint64_t *)&v654->__shared_owners_;
              do
                v659 = __ldxr(v658);
              while (__stxr(v659 + 1, v658));
            }
            v660 = *(_QWORD *)(i - 16);
            v661 = *(std::__shared_weak_count **)(i - 8);
            if (v661)
            {
              v662 = (unint64_t *)&v661->__shared_owners_;
              do
                v663 = __ldxr(v662);
              while (__stxr(v663 + 1, v662));
            }
            v666 = *(const void **)(v657 + 48);
            v664 = v657 + 48;
            v665 = v666;
            v667 = *(char *)(v664 + 23);
            v670 = *(const void **)(v660 + 48);
            v668 = v660 + 48;
            v669 = v670;
            v671 = *(char *)(v668 + 23);
            if (v671 >= 0)
              v672 = *(unsigned __int8 *)(v668 + 23);
            else
              v672 = *(_QWORD *)(v668 + 8);
            if (v671 >= 0)
              v673 = (const void *)v668;
            else
              v673 = v669;
            if (v667 >= 0)
              v674 = *(unsigned __int8 *)(v664 + 23);
            else
              v674 = *(_QWORD *)(v664 + 8);
            if (v667 >= 0)
              v675 = (const void *)v664;
            else
              v675 = v665;
            if (v674 >= v672)
              v676 = v672;
            else
              v676 = v674;
            v677 = memcmp(v673, v675, v676);
            if (v677)
              v678 = v677 < 0;
            else
              v678 = v672 < v674;
            if (!v661)
              goto LABEL_959;
            v679 = (unint64_t *)&v661->__shared_owners_;
            do
              v680 = __ldaxr(v679);
            while (__stlxr(v680 - 1, v679));
            if (!v680)
            {
              ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
              std::__shared_weak_count::__release_weak(v661);
              if (!v654)
                goto LABEL_965;
            }
            else
            {
LABEL_959:
              if (!v654)
                goto LABEL_965;
            }
            v681 = (unint64_t *)&v654->__shared_owners_;
            do
              v682 = __ldaxr(v681);
            while (__stlxr(v682 - 1, v681));
            if (!v682)
            {
              ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
              std::__shared_weak_count::__release_weak(v654);
            }
LABEL_965:
            if (!v678)
            {
              std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](i, &v695);
              v683 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
              if (*((_QWORD *)&v695 + 1))
              {
                v684 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                do
                  v685 = __ldaxr(v684);
                while (__stlxr(v685 - 1, v684));
                if (!v685)
                {
                  ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
                  std::__shared_weak_count::__release_weak(v683);
                }
              }
LABEL_973:
              v623 = v624 + 16;
              v7 = (uint64_t *)v624;
              goto LABEL_895;
            }
            v654 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
          }
        }
        if (!a3)
        {
          if (j == (uint64_t *)v6)
            return;
          v686 = v6 - (char *)j;
          v411 = (unint64_t)(v9 - 2) >> 1;
          v691 = v411;
          while (1)
          {
            v412 = v411;
            if (v691 < v411)
              goto LABEL_760;
            v413 = (2 * v411) | 1;
            v414 = &v7[2 * v413];
            v415 = 2 * v411 + 2;
            v688 = v411;
            if (v415 >= v9)
              goto LABEL_642;
            v416 = *v414;
            v417 = (std::__shared_weak_count *)v414[1];
            if (v417)
            {
              v418 = (unint64_t *)&v417->__shared_owners_;
              do
                v419 = __ldxr(v418);
              while (__stxr(v419 + 1, v418));
            }
            v420 = v414[2];
            v421 = (std::__shared_weak_count *)v414[3];
            if (v421)
            {
              v422 = (unint64_t *)&v421->__shared_owners_;
              do
                v423 = __ldxr(v422);
              while (__stxr(v423 + 1, v422));
            }
            v426 = *(const void **)(v416 + 48);
            v424 = v416 + 48;
            v425 = v426;
            v427 = *(char *)(v424 + 23);
            v430 = *(const void **)(v420 + 48);
            v428 = v420 + 48;
            v429 = v430;
            v431 = *(char *)(v428 + 23);
            if (v431 >= 0)
              v432 = *(unsigned __int8 *)(v428 + 23);
            else
              v432 = *(_QWORD *)(v428 + 8);
            if (v431 >= 0)
              v433 = (const void *)v428;
            else
              v433 = v429;
            if (v427 >= 0)
              v434 = *(unsigned __int8 *)(v424 + 23);
            else
              v434 = *(_QWORD *)(v424 + 8);
            if (v427 >= 0)
              v435 = (const void *)v424;
            else
              v435 = v425;
            if (v434 >= v432)
              v436 = v432;
            else
              v436 = v434;
            v437 = memcmp(v433, v435, v436);
            if (v437)
              v438 = v437 < 0;
            else
              v438 = v432 < v434;
            if (v421)
            {
              v439 = (unint64_t *)&v421->__shared_owners_;
              do
                v440 = __ldaxr(v439);
              while (__stlxr(v440 - 1, v439));
              if (!v440)
              {
                ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                std::__shared_weak_count::__release_weak(v421);
              }
            }
            v412 = v688;
            if (v417)
            {
              v441 = (unint64_t *)&v417->__shared_owners_;
              do
                v442 = __ldaxr(v441);
              while (__stlxr(v442 - 1, v441));
              if (!v442)
                break;
            }
            if (v438)
              goto LABEL_641;
LABEL_642:
            v443 = *v414;
            v444 = (std::__shared_weak_count *)v414[1];
            if (v444)
            {
              v445 = (unint64_t *)&v444->__shared_owners_;
              do
                v446 = __ldxr(v445);
              while (__stxr(v446 + 1, v445));
            }
            v447 = &v693[2 * v412];
            v448 = *v447;
            v449 = (std::__shared_weak_count *)v447[1];
            if (v449)
            {
              v450 = (unint64_t *)&v449->__shared_owners_;
              do
                v451 = __ldxr(v450);
              while (__stxr(v451 + 1, v450));
            }
            v454 = *(const void **)(v443 + 48);
            v452 = v443 + 48;
            v453 = v454;
            v455 = *(char *)(v452 + 23);
            v458 = *(const void **)(v448 + 48);
            v456 = v448 + 48;
            v457 = v458;
            v459 = *(char *)(v456 + 23);
            if (v459 >= 0)
              v460 = *(unsigned __int8 *)(v456 + 23);
            else
              v460 = *(_QWORD *)(v456 + 8);
            if (v459 >= 0)
              v461 = (const void *)v456;
            else
              v461 = v457;
            if (v455 >= 0)
              v462 = *(unsigned __int8 *)(v452 + 23);
            else
              v462 = *(_QWORD *)(v452 + 8);
            if (v455 >= 0)
              v463 = (const void *)v452;
            else
              v463 = v453;
            if (v462 >= v460)
              v464 = v460;
            else
              v464 = v462;
            v465 = memcmp(v461, v463, v464);
            if (v465)
              v466 = v465 < 0;
            else
              v466 = v460 < v462;
            if (v449)
            {
              v467 = (unint64_t *)&v449->__shared_owners_;
              do
                v468 = __ldaxr(v467);
              while (__stlxr(v468 - 1, v467));
              if (!v468)
              {
                ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                std::__shared_weak_count::__release_weak(v449);
              }
            }
            v412 = v688;
            if (v444)
            {
              v469 = (unint64_t *)&v444->__shared_owners_;
              do
                v470 = __ldaxr(v469);
              while (__stlxr(v470 - 1, v469));
              if (!v470)
              {
                ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
                std::__shared_weak_count::__release_weak(v444);
                v412 = v688;
              }
            }
            v7 = v693;
            if (!v466)
            {
              v695 = *(_OWORD *)v447;
              *v447 = 0;
              v447[1] = 0;
              while (1)
              {
                v471 = (uint64_t)v447;
                v447 = v414;
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v471, (__int128 *)v414);
                if (v691 < v413)
                {
LABEL_754:
                  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v447, &v695);
                  v524 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
                  v412 = v688;
                  if (*((_QWORD *)&v695 + 1))
                  {
                    v525 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                    do
                      v526 = __ldaxr(v525);
                    while (__stlxr(v526 - 1, v525));
                    if (!v526)
                    {
                      ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
                      std::__shared_weak_count::__release_weak(v524);
                      v412 = v688;
                    }
                  }
                  v7 = v693;
                  break;
                }
                v472 = 2 * v413;
                v413 = (2 * v413) | 1;
                v414 = &v693[2 * v413];
                v473 = v472 + 2;
                if (v472 + 2 < v9)
                {
                  v474 = *v414;
                  v475 = (std::__shared_weak_count *)v414[1];
                  if (v475)
                  {
                    v476 = (unint64_t *)&v475->__shared_owners_;
                    do
                      v477 = __ldxr(v476);
                    while (__stxr(v477 + 1, v476));
                  }
                  v478 = v414[2];
                  v479 = (std::__shared_weak_count *)v414[3];
                  if (v479)
                  {
                    v480 = (unint64_t *)&v479->__shared_owners_;
                    do
                      v481 = __ldxr(v480);
                    while (__stxr(v481 + 1, v480));
                  }
                  v484 = *(const void **)(v474 + 48);
                  v482 = v474 + 48;
                  v483 = v484;
                  v485 = *(char *)(v482 + 23);
                  v488 = *(const void **)(v478 + 48);
                  v486 = v478 + 48;
                  v487 = v488;
                  v489 = *(char *)(v486 + 23);
                  if (v489 >= 0)
                    v490 = *(unsigned __int8 *)(v486 + 23);
                  else
                    v490 = *(_QWORD *)(v486 + 8);
                  if (v489 >= 0)
                    v491 = (const void *)v486;
                  else
                    v491 = v487;
                  if (v485 >= 0)
                    v492 = *(unsigned __int8 *)(v482 + 23);
                  else
                    v492 = *(_QWORD *)(v482 + 8);
                  if (v485 >= 0)
                    v493 = (const void *)v482;
                  else
                    v493 = v483;
                  if (v492 >= v490)
                    v494 = v490;
                  else
                    v494 = v492;
                  v495 = memcmp(v491, v493, v494);
                  if (v495)
                    v496 = v495 < 0;
                  else
                    v496 = v490 < v492;
                  if (!v479)
                    goto LABEL_708;
                  v497 = (unint64_t *)&v479->__shared_owners_;
                  do
                    v498 = __ldaxr(v497);
                  while (__stlxr(v498 - 1, v497));
                  if (!v498)
                  {
                    ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                    std::__shared_weak_count::__release_weak(v479);
                    if (!v475)
                      goto LABEL_712;
                  }
                  else
                  {
LABEL_708:
                    if (!v475)
                      goto LABEL_712;
                  }
                  v499 = (unint64_t *)&v475->__shared_owners_;
                  do
                    v500 = __ldaxr(v499);
                  while (__stlxr(v500 - 1, v499));
                  if (v500)
                  {
LABEL_712:
                    if (!v496)
                      goto LABEL_714;
LABEL_713:
                    v414 += 2;
                    v413 = v473;
                    goto LABEL_714;
                  }
                  ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                  std::__shared_weak_count::__release_weak(v475);
                  if (v496)
                    goto LABEL_713;
                }
LABEL_714:
                v501 = *v414;
                v502 = (std::__shared_weak_count *)v414[1];
                if (v502)
                {
                  v503 = (unint64_t *)&v502->__shared_owners_;
                  do
                    v504 = __ldxr(v503);
                  while (__stxr(v504 + 1, v503));
                }
                v505 = v695;
                if (*((_QWORD *)&v695 + 1))
                {
                  v506 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                  do
                    v507 = __ldxr(v506);
                  while (__stxr(v507 + 1, v506));
                }
                v510 = *(const void **)(v501 + 48);
                v508 = v501 + 48;
                v509 = v510;
                v511 = *(char *)(v508 + 23);
                v512 = *(char *)(v505 + 71);
                if (v512 >= 0)
                  v513 = *(unsigned __int8 *)(v505 + 71);
                else
                  v513 = *(_QWORD *)(v505 + 56);
                if (v512 >= 0)
                  v514 = (const void *)(v505 + 48);
                else
                  v514 = *(const void **)(v505 + 48);
                if (v511 >= 0)
                  v515 = *(unsigned __int8 *)(v508 + 23);
                else
                  v515 = *(_QWORD *)(v508 + 8);
                if (v511 >= 0)
                  v516 = (const void *)v508;
                else
                  v516 = v509;
                if (v515 >= v513)
                  v517 = v513;
                else
                  v517 = v515;
                v518 = memcmp(v514, v516, v517);
                if (v518)
                  v519 = v518 < 0;
                else
                  v519 = v513 < v515;
                if (!*((_QWORD *)&v505 + 1))
                  goto LABEL_742;
                v520 = (unint64_t *)(*((_QWORD *)&v505 + 1) + 8);
                do
                  v521 = __ldaxr(v520);
                while (__stlxr(v521 - 1, v520));
                if (!v521)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v505 + 1) + 16))(*((_QWORD *)&v505 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v505 + 1));
                  if (v502)
                  {
LABEL_743:
                    v522 = (unint64_t *)&v502->__shared_owners_;
                    do
                      v523 = __ldaxr(v522);
                    while (__stlxr(v523 - 1, v522));
                    if (!v523)
                    {
                      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                      std::__shared_weak_count::__release_weak(v502);
                    }
                  }
                }
                else
                {
LABEL_742:
                  if (v502)
                    goto LABEL_743;
                }
                if (v519)
                  goto LABEL_754;
              }
            }
LABEL_760:
            v411 = v412 - 1;
            if (!v412)
            {
              v527 = v686 >> 4;
              while (1)
              {
                v528 = 0;
                v694 = *(_OWORD *)v7;
                *v7 = 0;
                v7[1] = 0;
                v529 = (unint64_t)(v527 - 2) >> 1;
                v530 = (uint64_t)v7;
                v692 = v527;
                do
                {
                  v531 = v530;
                  v530 += 16 * (v528 + 1);
                  v532 = 2 * v528;
                  v528 = (2 * v528) | 1;
                  v533 = v532 + 2;
                  if (v532 + 2 >= v527)
                    goto LABEL_801;
                  v534 = *(_QWORD *)v530;
                  v535 = *(std::__shared_weak_count **)(v530 + 8);
                  if (v535)
                  {
                    v536 = (unint64_t *)&v535->__shared_owners_;
                    do
                      v537 = __ldxr(v536);
                    while (__stxr(v537 + 1, v536));
                  }
                  v538 = *(_QWORD *)(v530 + 16);
                  v539 = *(std::__shared_weak_count **)(v530 + 24);
                  if (v539)
                  {
                    v540 = (unint64_t *)&v539->__shared_owners_;
                    do
                      v541 = __ldxr(v540);
                    while (__stxr(v541 + 1, v540));
                  }
                  v544 = *(const void **)(v534 + 48);
                  v542 = v534 + 48;
                  v543 = v544;
                  v545 = *(char *)(v542 + 23);
                  v548 = *(const void **)(v538 + 48);
                  v546 = v538 + 48;
                  v547 = v548;
                  v549 = *(char *)(v546 + 23);
                  if (v549 >= 0)
                    v550 = *(unsigned __int8 *)(v546 + 23);
                  else
                    v550 = *(_QWORD *)(v546 + 8);
                  if (v549 >= 0)
                    v551 = (const void *)v546;
                  else
                    v551 = v547;
                  if (v545 >= 0)
                    v552 = *(unsigned __int8 *)(v542 + 23);
                  else
                    v552 = *(_QWORD *)(v542 + 8);
                  if (v545 >= 0)
                    v553 = (const void *)v542;
                  else
                    v553 = v543;
                  if (v552 >= v550)
                    v554 = v550;
                  else
                    v554 = v552;
                  v555 = memcmp(v551, v553, v554);
                  if (v555)
                    v556 = v555 < 0;
                  else
                    v556 = v550 < v552;
                  if (v539)
                  {
                    v557 = (unint64_t *)&v539->__shared_owners_;
                    do
                      v558 = __ldaxr(v557);
                    while (__stlxr(v558 - 1, v557));
                    if (!v558)
                    {
                      ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                      std::__shared_weak_count::__release_weak(v539);
                    }
                  }
                  v527 = v692;
                  if (!v535)
                    goto LABEL_799;
                  v559 = (unint64_t *)&v535->__shared_owners_;
                  do
                    v560 = __ldaxr(v559);
                  while (__stlxr(v560 - 1, v559));
                  if (v560)
                  {
LABEL_799:
                    if (!v556)
                      goto LABEL_801;
LABEL_800:
                    v530 += 16;
                    v528 = v533;
                    goto LABEL_801;
                  }
                  ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
                  std::__shared_weak_count::__release_weak(v535);
                  if (v556)
                    goto LABEL_800;
LABEL_801:
                  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v531, (__int128 *)v530);
                }
                while (v528 <= v529);
                v561 = (__int128 *)(a2 - 16);
                v562 = v530 == (_QWORD)(a2 - 16);
                a2 -= 16;
                if (v562)
                {
                  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v530, &v694);
                  goto LABEL_885;
                }
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v530, v561);
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v561, &v694);
                v7 = v693;
                v563 = v530 - (_QWORD)v693 + 16;
                if (v563 >= 17)
                {
                  v564 = (((unint64_t)v563 >> 4) - 2) >> 1;
                  v565 = &v693[2 * v564];
                  v566 = *v565;
                  v567 = (std::__shared_weak_count *)v565[1];
                  if (v567)
                  {
                    v568 = (unint64_t *)&v567->__shared_owners_;
                    do
                      v569 = __ldxr(v568);
                    while (__stxr(v569 + 1, v568));
                  }
                  v570 = *(_QWORD *)v530;
                  v571 = *(std::__shared_weak_count **)(v530 + 8);
                  if (v571)
                  {
                    v572 = (unint64_t *)&v571->__shared_owners_;
                    do
                      v573 = __ldxr(v572);
                    while (__stxr(v573 + 1, v572));
                  }
                  v576 = *(const void **)(v566 + 48);
                  v574 = v566 + 48;
                  v575 = v576;
                  v577 = *(char *)(v574 + 23);
                  v580 = *(const void **)(v570 + 48);
                  v578 = v570 + 48;
                  v579 = v580;
                  v581 = *(char *)(v578 + 23);
                  if (v581 >= 0)
                    v582 = *(unsigned __int8 *)(v578 + 23);
                  else
                    v582 = *(_QWORD *)(v578 + 8);
                  if (v581 >= 0)
                    v583 = (const void *)v578;
                  else
                    v583 = v579;
                  if (v577 >= 0)
                    v584 = *(unsigned __int8 *)(v574 + 23);
                  else
                    v584 = *(_QWORD *)(v574 + 8);
                  if (v577 >= 0)
                    v585 = (const void *)v574;
                  else
                    v585 = v575;
                  if (v584 >= v582)
                    v586 = v582;
                  else
                    v586 = v584;
                  v587 = memcmp(v583, v585, v586);
                  if (v587)
                    v588 = v587 < 0;
                  else
                    v588 = v582 < v584;
                  if (v571)
                  {
                    v589 = (unint64_t *)&v571->__shared_owners_;
                    do
                      v590 = __ldaxr(v589);
                    while (__stlxr(v590 - 1, v589));
                    if (!v590)
                    {
                      ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
                      std::__shared_weak_count::__release_weak(v571);
                    }
                  }
                  if (v567)
                  {
                    v591 = (unint64_t *)&v567->__shared_owners_;
                    do
                      v592 = __ldaxr(v591);
                    while (__stlxr(v592 - 1, v591));
                    if (!v592)
                    {
                      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
                      std::__shared_weak_count::__release_weak(v567);
                    }
                  }
                  v7 = v693;
                  if (v588)
                  {
                    v695 = *(_OWORD *)v530;
                    *(_QWORD *)v530 = 0;
                    *(_QWORD *)(v530 + 8) = 0;
                    while (1)
                    {
                      v593 = v530;
                      v530 = (uint64_t)v565;
                      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v593, (__int128 *)v565);
                      if (!v564)
                      {
LABEL_879:
                        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v530, &v695);
                        v617 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
                        if (*((_QWORD *)&v695 + 1))
                        {
                          v618 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                          do
                            v619 = __ldaxr(v618);
                          while (__stlxr(v619 - 1, v618));
                          if (!v619)
                          {
                            ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
                            std::__shared_weak_count::__release_weak(v617);
                          }
                        }
LABEL_885:
                        v7 = v693;
                        break;
                      }
                      v564 = (v564 - 1) >> 1;
                      v565 = &v693[2 * v564];
                      v594 = *v565;
                      v595 = (std::__shared_weak_count *)v565[1];
                      if (v595)
                      {
                        v596 = (unint64_t *)&v595->__shared_owners_;
                        do
                          v597 = __ldxr(v596);
                        while (__stxr(v597 + 1, v596));
                      }
                      v598 = v695;
                      if (*((_QWORD *)&v695 + 1))
                      {
                        v599 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                        do
                          v600 = __ldxr(v599);
                        while (__stxr(v600 + 1, v599));
                      }
                      v603 = *(const void **)(v594 + 48);
                      v601 = v594 + 48;
                      v602 = v603;
                      v604 = *(char *)(v601 + 23);
                      v605 = *(char *)(v598 + 71);
                      if (v605 >= 0)
                        v606 = *(unsigned __int8 *)(v598 + 71);
                      else
                        v606 = *(_QWORD *)(v598 + 56);
                      if (v605 >= 0)
                        v607 = (const void *)(v598 + 48);
                      else
                        v607 = *(const void **)(v598 + 48);
                      if (v604 >= 0)
                        v608 = *(unsigned __int8 *)(v601 + 23);
                      else
                        v608 = *(_QWORD *)(v601 + 8);
                      if (v604 >= 0)
                        v609 = (const void *)v601;
                      else
                        v609 = v602;
                      if (v608 >= v606)
                        v610 = v606;
                      else
                        v610 = v608;
                      v611 = memcmp(v607, v609, v610);
                      if (v611)
                        v612 = v611 < 0;
                      else
                        v612 = v606 < v608;
                      if (!*((_QWORD *)&v598 + 1))
                        goto LABEL_872;
                      v613 = (unint64_t *)(*((_QWORD *)&v598 + 1) + 8);
                      do
                        v614 = __ldaxr(v613);
                      while (__stlxr(v614 - 1, v613));
                      if (!v614)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v598 + 1) + 16))(*((_QWORD *)&v598 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v598 + 1));
                        if (v595)
                        {
LABEL_873:
                          v615 = (unint64_t *)&v595->__shared_owners_;
                          do
                            v616 = __ldaxr(v615);
                          while (__stlxr(v616 - 1, v615));
                          if (!v616)
                          {
                            ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                            std::__shared_weak_count::__release_weak(v595);
                          }
                        }
                      }
                      else
                      {
LABEL_872:
                        if (v595)
                          goto LABEL_873;
                      }
                      if (!v612)
                        goto LABEL_879;
                    }
                  }
                }
                v620 = (std::__shared_weak_count *)*((_QWORD *)&v694 + 1);
                if (*((_QWORD *)&v694 + 1))
                {
                  v621 = (unint64_t *)(*((_QWORD *)&v694 + 1) + 8);
                  do
                    v622 = __ldaxr(v621);
                  while (__stlxr(v622 - 1, v621));
                  v7 = v693;
                  if (!v622)
                  {
                    ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                    std::__shared_weak_count::__release_weak(v620);
                    v7 = v693;
                  }
                }
                v527 = v692 - 1;
                if (v692 <= 2)
                  return;
              }
            }
          }
          ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
          std::__shared_weak_count::__release_weak(v417);
          v412 = v688;
          if (!v438)
            goto LABEL_642;
LABEL_641:
          v414 += 2;
          v413 = v415;
          goto LABEL_642;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &j[2 * ((unint64_t)v9 >> 1)];
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v11, j, v687);
          v13 = j;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j, v11, v687);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(j + 2, v11 - 2, (_QWORD *)a2 - 4);
          v12 = &j[2 * v10 + 2];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v693 + 4, v12, (_QWORD *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v11 - 2, v11, v12);
          v13 = v693;
          v14 = *(_OWORD *)v693;
          *(_OWORD *)v693 = *(_OWORD *)v11;
          *(_OWORD *)v11 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(v13 - 2);
          v16 = (std::__shared_weak_count *)*(v13 - 1);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = *v693;
          v20 = (std::__shared_weak_count *)v693[1];
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v25 = *(const void **)(v15 + 48);
          v23 = v15 + 48;
          v24 = v25;
          v26 = *(char *)(v23 + 23);
          v29 = *(const void **)(v19 + 48);
          v27 = v19 + 48;
          v28 = v29;
          v30 = *(char *)(v27 + 23);
          if (v30 >= 0)
            v31 = *(unsigned __int8 *)(v27 + 23);
          else
            v31 = *(_QWORD *)(v27 + 8);
          if (v30 >= 0)
            v32 = (const void *)v27;
          else
            v32 = v28;
          if (v26 >= 0)
            v33 = *(unsigned __int8 *)(v23 + 23);
          else
            v33 = *(_QWORD *)(v23 + 8);
          if (v26 >= 0)
            v34 = (const void *)v23;
          else
            v34 = v24;
          if (v33 >= v31)
            v35 = v31;
          else
            v35 = v33;
          v36 = memcmp(v32, v34, v35);
          if (v36)
            v37 = v36 >= 0;
          else
            v37 = v31 >= v33;
          if (!v20)
            goto LABEL_37;
          v38 = (unint64_t *)&v20->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (!v16)
              goto LABEL_41;
          }
          else
          {
LABEL_37:
            if (!v16)
              goto LABEL_41;
          }
          v40 = (unint64_t *)&v16->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (v41)
          {
LABEL_41:
            v13 = v693;
            if (!v37)
              goto LABEL_42;
            goto LABEL_244;
          }
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          v13 = v693;
          if (!v37)
            goto LABEL_42;
LABEL_244:
          v171 = *v13;
          v172 = (std::__shared_weak_count *)v13[1];
          *(_QWORD *)&v695 = *v13;
          *((_QWORD *)&v695 + 1) = v172;
          *v13 = 0;
          v13[1] = 0;
          if (v172)
          {
            v173 = (unint64_t *)&v172->__shared_owners_;
            do
              v174 = __ldxr(v173);
            while (__stxr(v174 + 1, v173));
          }
          v175 = *((_QWORD *)a2 - 2);
          v176 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
          if (v176)
          {
            v177 = (unint64_t *)&v176->__shared_owners_;
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          v181 = *(const void **)(v171 + 48);
          v179 = v171 + 48;
          v180 = v181;
          v182 = *(char *)(v179 + 23);
          v185 = *(const void **)(v175 + 48);
          v183 = v175 + 48;
          v184 = v185;
          v186 = *(char *)(v183 + 23);
          if (v186 >= 0)
            v187 = *(unsigned __int8 *)(v183 + 23);
          else
            v187 = *(_QWORD *)(v183 + 8);
          if (v186 >= 0)
            v188 = (const void *)v183;
          else
            v188 = v184;
          if (v182 >= 0)
            v189 = *(unsigned __int8 *)(v179 + 23);
          else
            v189 = *(_QWORD *)(v179 + 8);
          if (v182 >= 0)
            v190 = (const void *)v179;
          else
            v190 = v180;
          if (v189 >= v187)
            v191 = v187;
          else
            v191 = v189;
          v192 = memcmp(v188, v190, v191);
          if (v192)
            v193 = v192 < 0;
          else
            v193 = v187 < v189;
          if (v176)
          {
            v194 = (unint64_t *)&v176->__shared_owners_;
            do
              v195 = __ldaxr(v194);
            while (__stlxr(v195 - 1, v194));
            if (!v195)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
          if (v172)
          {
            v196 = (unint64_t *)&v172->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          j = v693;
          if (!v193)
          {
            v221 = v693;
            for (j = v693 + 2; ; j += 2)
            {
              if (j >= (uint64_t *)a2)
                goto LABEL_355;
              v222 = j;
              v223 = v695;
              if (*((_QWORD *)&v695 + 1))
              {
                v224 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                do
                  v225 = __ldxr(v224);
                while (__stxr(v225 + 1, v224));
              }
              v226 = *j;
              v227 = (std::__shared_weak_count *)v221[3];
              if (v227)
              {
                v228 = (unint64_t *)&v227->__shared_owners_;
                do
                  v229 = __ldxr(v228);
                while (__stxr(v229 + 1, v228));
              }
              v230 = *(char *)(v223 + 71);
              v233 = *(const void **)(v226 + 48);
              v231 = v226 + 48;
              v232 = v233;
              v234 = *(char *)(v231 + 23);
              if (v234 >= 0)
                v235 = *(unsigned __int8 *)(v231 + 23);
              else
                v235 = *(_QWORD *)(v231 + 8);
              if (v234 >= 0)
                v236 = (const void *)v231;
              else
                v236 = v232;
              if (v230 >= 0)
                v237 = *(unsigned __int8 *)(v223 + 71);
              else
                v237 = *(_QWORD *)(v223 + 56);
              if (v230 >= 0)
                v238 = (const void *)(v223 + 48);
              else
                v238 = *(const void **)(v223 + 48);
              if (v237 >= v235)
                v239 = v235;
              else
                v239 = v237;
              v240 = memcmp(v236, v238, v239);
              if (v240)
                v241 = v240 >= 0;
              else
                v241 = v235 >= v237;
              if (!v227)
                goto LABEL_345;
              v242 = (unint64_t *)&v227->__shared_owners_;
              do
                v243 = __ldaxr(v242);
              while (__stlxr(v243 - 1, v242));
              if (!v243)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
                if (!*((_QWORD *)&v223 + 1))
                  goto LABEL_349;
              }
              else
              {
LABEL_345:
                if (!*((_QWORD *)&v223 + 1))
                  goto LABEL_349;
              }
              v244 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 - 1, v244));
              if (v245)
              {
LABEL_349:
                if (!v241)
                  goto LABEL_355;
                goto LABEL_354;
              }
              (*(void (**)(_QWORD))(**((_QWORD **)&v223 + 1) + 16))(*((_QWORD *)&v223 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
              if (!v241)
                goto LABEL_355;
LABEL_354:
              v221 = v222;
            }
          }
          do
          {
            v198 = v695;
            if (*((_QWORD *)&v695 + 1))
            {
              v199 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
              do
                v200 = __ldxr(v199);
              while (__stxr(v200 + 1, v199));
            }
            v201 = j[2];
            v202 = (std::__shared_weak_count *)j[3];
            if (v202)
            {
              v203 = (unint64_t *)&v202->__shared_owners_;
              do
                v204 = __ldxr(v203);
              while (__stxr(v204 + 1, v203));
            }
            v205 = *(char *)(v198 + 71);
            v208 = *(const void **)(v201 + 48);
            v206 = v201 + 48;
            v207 = v208;
            v209 = *(char *)(v206 + 23);
            if (v209 >= 0)
              v210 = *(unsigned __int8 *)(v206 + 23);
            else
              v210 = *(_QWORD *)(v206 + 8);
            if (v209 >= 0)
              v211 = (const void *)v206;
            else
              v211 = v207;
            if (v205 >= 0)
              v212 = *(unsigned __int8 *)(v198 + 71);
            else
              v212 = *(_QWORD *)(v198 + 56);
            if (v205 >= 0)
              v213 = (const void *)(v198 + 48);
            else
              v213 = *(const void **)(v198 + 48);
            if (v212 >= v210)
              v214 = v210;
            else
              v214 = v212;
            v215 = memcmp(v211, v213, v214);
            if (v215)
              v216 = v215 < 0;
            else
              v216 = v210 < v212;
            if (v202)
            {
              v217 = (unint64_t *)&v202->__shared_owners_;
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            if (*((_QWORD *)&v198 + 1))
            {
              v219 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v198 + 1) + 16))(*((_QWORD *)&v198 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v198 + 1));
              }
            }
            j += 2;
          }
          while (!v216);
LABEL_355:
          v246 = a2;
          if (j < (uint64_t *)a2)
          {
            v246 = a2;
            do
            {
              v247 = v695;
              if (*((_QWORD *)&v695 + 1))
              {
                v248 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                do
                  v249 = __ldxr(v248);
                while (__stxr(v249 + 1, v248));
              }
              v250 = *((_QWORD *)v246 - 2);
              v251 = (std::__shared_weak_count *)*((_QWORD *)v246 - 1);
              if (v251)
              {
                v252 = (unint64_t *)&v251->__shared_owners_;
                do
                  v253 = __ldxr(v252);
                while (__stxr(v253 + 1, v252));
              }
              v254 = *(char *)(v247 + 71);
              v257 = *(const void **)(v250 + 48);
              v255 = v250 + 48;
              v256 = v257;
              v258 = *(char *)(v255 + 23);
              if (v258 >= 0)
                v259 = *(unsigned __int8 *)(v255 + 23);
              else
                v259 = *(_QWORD *)(v255 + 8);
              if (v258 >= 0)
                v260 = (const void *)v255;
              else
                v260 = v256;
              if (v254 >= 0)
                v261 = *(unsigned __int8 *)(v247 + 71);
              else
                v261 = *(_QWORD *)(v247 + 56);
              if (v254 >= 0)
                v262 = (const void *)(v247 + 48);
              else
                v262 = *(const void **)(v247 + 48);
              if (v261 >= v259)
                v263 = v259;
              else
                v263 = v261;
              v264 = memcmp(v260, v262, v263);
              if (v264)
                v265 = v264 < 0;
              else
                v265 = v259 < v261;
              if (v251)
              {
                v266 = (unint64_t *)&v251->__shared_owners_;
                do
                  v267 = __ldaxr(v266);
                while (__stlxr(v267 - 1, v266));
                if (!v267)
                {
                  ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                  std::__shared_weak_count::__release_weak(v251);
                }
              }
              if (*((_QWORD *)&v247 + 1))
              {
                v268 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
                do
                  v269 = __ldaxr(v268);
                while (__stlxr(v269 - 1, v268));
                if (!v269)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v247 + 1) + 16))(*((_QWORD *)&v247 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v247 + 1));
                }
              }
              v246 -= 16;
            }
            while (v265);
          }
LABEL_464:
          if (j < (uint64_t *)v246)
          {
            v270 = *j;
            *j = *(_QWORD *)v246;
            *(_QWORD *)v246 = v270;
            v271 = j[1];
            j[1] = *((_QWORD *)v246 + 1);
            *((_QWORD *)v246 + 1) = v271;
            while (1)
            {
              v272 = v695;
              if (*((_QWORD *)&v695 + 1))
              {
                v273 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                do
                  v274 = __ldxr(v273);
                while (__stxr(v274 + 1, v273));
              }
              v275 = j[2];
              v276 = (std::__shared_weak_count *)j[3];
              if (v276)
              {
                v277 = (unint64_t *)&v276->__shared_owners_;
                do
                  v278 = __ldxr(v277);
                while (__stxr(v278 + 1, v277));
              }
              v279 = *(char *)(v272 + 71);
              v282 = *(const void **)(v275 + 48);
              v280 = v275 + 48;
              v281 = v282;
              v283 = *(char *)(v280 + 23);
              if (v283 >= 0)
                v284 = *(unsigned __int8 *)(v280 + 23);
              else
                v284 = *(_QWORD *)(v280 + 8);
              if (v283 >= 0)
                v285 = (const void *)v280;
              else
                v285 = v281;
              if (v279 >= 0)
                v286 = *(unsigned __int8 *)(v272 + 71);
              else
                v286 = *(_QWORD *)(v272 + 56);
              if (v279 >= 0)
                v287 = (const void *)(v272 + 48);
              else
                v287 = *(const void **)(v272 + 48);
              if (v286 >= v284)
                v288 = v284;
              else
                v288 = v286;
              v289 = memcmp(v285, v287, v288);
              if (v289)
                v290 = v289 < 0;
              else
                v290 = v284 < v286;
              if (!v276)
                goto LABEL_422;
              v291 = (unint64_t *)&v276->__shared_owners_;
              do
                v292 = __ldaxr(v291);
              while (__stlxr(v292 - 1, v291));
              if (!v292)
              {
                ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                std::__shared_weak_count::__release_weak(v276);
                if (*((_QWORD *)&v272 + 1))
                {
LABEL_423:
                  v293 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
                  do
                    v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v272 + 1) + 16))(*((_QWORD *)&v272 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v272 + 1));
                  }
                }
              }
              else
              {
LABEL_422:
                if (*((_QWORD *)&v272 + 1))
                  goto LABEL_423;
              }
              j += 2;
              if (v290)
              {
                while (1)
                {
                  v295 = v695;
                  if (*((_QWORD *)&v695 + 1))
                  {
                    v296 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
                    do
                      v297 = __ldxr(v296);
                    while (__stxr(v297 + 1, v296));
                  }
                  v298 = *((_QWORD *)v246 - 2);
                  v299 = (std::__shared_weak_count *)*((_QWORD *)v246 - 1);
                  if (v299)
                  {
                    v300 = (unint64_t *)&v299->__shared_owners_;
                    do
                      v301 = __ldxr(v300);
                    while (__stxr(v301 + 1, v300));
                  }
                  v302 = *(char *)(v295 + 71);
                  v305 = *(const void **)(v298 + 48);
                  v303 = v298 + 48;
                  v304 = v305;
                  v306 = *(char *)(v303 + 23);
                  if (v306 >= 0)
                    v307 = *(unsigned __int8 *)(v303 + 23);
                  else
                    v307 = *(_QWORD *)(v303 + 8);
                  if (v306 >= 0)
                    v308 = (const void *)v303;
                  else
                    v308 = v304;
                  if (v302 >= 0)
                    v309 = *(unsigned __int8 *)(v295 + 71);
                  else
                    v309 = *(_QWORD *)(v295 + 56);
                  if (v302 >= 0)
                    v310 = (const void *)(v295 + 48);
                  else
                    v310 = *(const void **)(v295 + 48);
                  if (v309 >= v307)
                    v311 = v307;
                  else
                    v311 = v309;
                  v312 = memcmp(v308, v310, v311);
                  if (v312)
                    v313 = v312 < 0;
                  else
                    v313 = v307 < v309;
                  if (!v299)
                    goto LABEL_457;
                  v314 = (unint64_t *)&v299->__shared_owners_;
                  do
                    v315 = __ldaxr(v314);
                  while (__stlxr(v315 - 1, v314));
                  if (!v315)
                  {
                    ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                    std::__shared_weak_count::__release_weak(v299);
                    if (*((_QWORD *)&v295 + 1))
                    {
LABEL_458:
                      v316 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                      do
                        v317 = __ldaxr(v316);
                      while (__stlxr(v317 - 1, v316));
                      if (!v317)
                      {
                        (*(void (**)(_QWORD))(**((_QWORD **)&v295 + 1) + 16))(*((_QWORD *)&v295 + 1));
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v295 + 1));
                      }
                    }
                  }
                  else
                  {
LABEL_457:
                    if (*((_QWORD *)&v295 + 1))
                      goto LABEL_458;
                  }
                  v246 -= 16;
                  if (!v313)
                    goto LABEL_464;
                }
              }
            }
          }
          if (j - 2 != v693)
            std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v693, (__int128 *)j - 1);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(j - 2), &v695);
          v318 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
          v6 = a2;
          if (*((_QWORD *)&v695 + 1))
          {
            v319 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
          a4 = 0;
          continue;
        }
LABEL_42:
        v695 = *(_OWORD *)v13;
        *v13 = 0;
        v13[1] = 0;
        v42 = v13;
        do
        {
          v43 = (uint64_t)v42;
          v44 = v42[2];
          v45 = (std::__shared_weak_count *)v42[3];
          v42 += 2;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = v695;
          if (*((_QWORD *)&v695 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v53 = *(const void **)(v44 + 48);
          v51 = v44 + 48;
          v52 = v53;
          v54 = *(char *)(v51 + 23);
          v55 = *(char *)(v48 + 71);
          if (v55 >= 0)
            v56 = *(unsigned __int8 *)(v48 + 71);
          else
            v56 = *(_QWORD *)(v48 + 56);
          if (v55 >= 0)
            v57 = (const void *)(v48 + 48);
          else
            v57 = *(const void **)(v48 + 48);
          if (v54 >= 0)
            v58 = *(unsigned __int8 *)(v51 + 23);
          else
            v58 = *(_QWORD *)(v51 + 8);
          if (v54 >= 0)
            v59 = (const void *)v51;
          else
            v59 = v52;
          if (v58 >= v56)
            v60 = v56;
          else
            v60 = v58;
          v61 = memcmp(v57, v59, v60);
          if (v61)
            v62 = v61 < 0;
          else
            v62 = v56 < v58;
          if (!*((_QWORD *)&v48 + 1))
            goto LABEL_71;
          v63 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
            if (!v45)
              continue;
          }
          else
          {
LABEL_71:
            if (!v45)
              continue;
          }
          v65 = (unint64_t *)&v45->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        while (v62);
        v67 = a2;
        if ((uint64_t *)v43 != v693)
        {
          while (1)
          {
            v68 = *((_QWORD *)v67 - 2);
            v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
            v67 -= 16;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            v72 = v695;
            if (*((_QWORD *)&v695 + 1))
            {
              v73 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
            v77 = *(const void **)(v68 + 48);
            v75 = v68 + 48;
            v76 = v77;
            v78 = *(char *)(v75 + 23);
            v79 = *(char *)(v72 + 71);
            if (v79 >= 0)
              v80 = *(unsigned __int8 *)(v72 + 71);
            else
              v80 = *(_QWORD *)(v72 + 56);
            if (v79 >= 0)
              v81 = (const void *)(v72 + 48);
            else
              v81 = *(const void **)(v72 + 48);
            if (v78 >= 0)
              v82 = *(unsigned __int8 *)(v75 + 23);
            else
              v82 = *(_QWORD *)(v75 + 8);
            if (v78 >= 0)
              v83 = (const void *)v75;
            else
              v83 = v76;
            if (v82 >= v80)
              v84 = v80;
            else
              v84 = v82;
            v85 = memcmp(v81, v83, v84);
            if (v85)
              v86 = v85 < 0;
            else
              v86 = v80 < v82;
            if (!*((_QWORD *)&v72 + 1))
              goto LABEL_107;
            v87 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v72 + 1) + 16))(*((_QWORD *)&v72 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v72 + 1));
              if (v69)
              {
LABEL_108:
                v89 = (unint64_t *)&v69->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
            }
            else
            {
LABEL_107:
              if (v69)
                goto LABEL_108;
            }
            if (v86)
              goto LABEL_155;
          }
        }
        v67 = a2;
        if (v42 < (uint64_t *)a2)
        {
          v67 = a2;
          do
          {
            v91 = *((_QWORD *)v67 - 2);
            v92 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
            v67 -= 16;
            if (v92)
            {
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }
            v95 = v695;
            if (*((_QWORD *)&v695 + 1))
            {
              v96 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            v100 = *(const void **)(v91 + 48);
            v98 = v91 + 48;
            v99 = v100;
            v101 = *(char *)(v98 + 23);
            v102 = *(char *)(v95 + 71);
            if (v102 >= 0)
              v103 = *(unsigned __int8 *)(v95 + 71);
            else
              v103 = *(_QWORD *)(v95 + 56);
            if (v102 >= 0)
              v104 = (const void *)(v95 + 48);
            else
              v104 = *(const void **)(v95 + 48);
            if (v101 >= 0)
              v105 = *(unsigned __int8 *)(v98 + 23);
            else
              v105 = *(_QWORD *)(v98 + 8);
            if (v101 >= 0)
              v106 = (const void *)v98;
            else
              v106 = v99;
            if (v105 >= v103)
              v107 = v103;
            else
              v107 = v105;
            v108 = memcmp(v104, v106, v107);
            if (v108)
              v109 = v108 >= 0;
            else
              v109 = v103 >= v105;
            if (!*((_QWORD *)&v95 + 1))
              goto LABEL_145;
            v110 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
              if (v92)
              {
LABEL_146:
                v112 = (unint64_t *)&v92->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
            }
            else
            {
LABEL_145:
              if (v92)
                goto LABEL_146;
            }
          }
          while (v42 < (uint64_t *)v67 && v109);
        }
LABEL_155:
        if (v42 >= (uint64_t *)v67)
          goto LABEL_229;
        v115 = v42;
        v116 = v67;
        while (2)
        {
          v117 = *v115;
          *v115 = *(_QWORD *)v116;
          *(_QWORD *)v116 = v117;
          v118 = v115[1];
          v115[1] = *((_QWORD *)v116 + 1);
          *((_QWORD *)v116 + 1) = v118;
          while (2)
          {
            v43 = (uint64_t)v115;
            v119 = v115[2];
            v120 = (std::__shared_weak_count *)v115[3];
            v115 += 2;
            if (v120)
            {
              v121 = (unint64_t *)&v120->__shared_owners_;
              do
                v122 = __ldxr(v121);
              while (__stxr(v122 + 1, v121));
            }
            v123 = v695;
            if (*((_QWORD *)&v695 + 1))
            {
              v124 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
            }
            v128 = *(const void **)(v119 + 48);
            v126 = v119 + 48;
            v127 = v128;
            v129 = *(char *)(v126 + 23);
            v130 = *(char *)(v123 + 71);
            if (v130 >= 0)
              v131 = *(unsigned __int8 *)(v123 + 71);
            else
              v131 = *(_QWORD *)(v123 + 56);
            if (v130 >= 0)
              v132 = (const void *)(v123 + 48);
            else
              v132 = *(const void **)(v123 + 48);
            if (v129 >= 0)
              v133 = *(unsigned __int8 *)(v126 + 23);
            else
              v133 = *(_QWORD *)(v126 + 8);
            if (v129 >= 0)
              v134 = (const void *)v126;
            else
              v134 = v127;
            if (v133 >= v131)
              v135 = v131;
            else
              v135 = v133;
            v136 = memcmp(v132, v134, v135);
            if (v136)
              v137 = v136 < 0;
            else
              v137 = v131 < v133;
            if (!*((_QWORD *)&v123 + 1))
              goto LABEL_186;
            v138 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v123 + 1) + 16))(*((_QWORD *)&v123 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v123 + 1));
              if (v120)
              {
LABEL_187:
                v140 = (unint64_t *)&v120->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
            }
            else
            {
LABEL_186:
              if (v120)
                goto LABEL_187;
            }
            if (v137)
              continue;
            break;
          }
          while (2)
          {
            v142 = *((_QWORD *)v116 - 2);
            v143 = (std::__shared_weak_count *)*((_QWORD *)v116 - 1);
            v116 -= 16;
            if (v143)
            {
              v144 = (unint64_t *)&v143->__shared_owners_;
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            v146 = v695;
            if (*((_QWORD *)&v695 + 1))
            {
              v147 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
              do
                v148 = __ldxr(v147);
              while (__stxr(v148 + 1, v147));
            }
            v151 = *(const void **)(v142 + 48);
            v149 = v142 + 48;
            v150 = v151;
            v152 = *(char *)(v149 + 23);
            v153 = *(char *)(v146 + 71);
            if (v153 >= 0)
              v154 = *(unsigned __int8 *)(v146 + 71);
            else
              v154 = *(_QWORD *)(v146 + 56);
            if (v153 >= 0)
              v155 = (const void *)(v146 + 48);
            else
              v155 = *(const void **)(v146 + 48);
            if (v152 >= 0)
              v156 = *(unsigned __int8 *)(v149 + 23);
            else
              v156 = *(_QWORD *)(v149 + 8);
            if (v152 >= 0)
              v157 = (const void *)v149;
            else
              v157 = v150;
            if (v156 >= v154)
              v158 = v154;
            else
              v158 = v156;
            v159 = memcmp(v155, v157, v158);
            if (v159)
              v160 = v159 < 0;
            else
              v160 = v154 < v156;
            if (!*((_QWORD *)&v146 + 1))
              goto LABEL_221;
            v161 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v146 + 1) + 16))(*((_QWORD *)&v146 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v146 + 1));
              if (v143)
              {
LABEL_222:
                v163 = (unint64_t *)&v143->__shared_owners_;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
            }
            else
            {
LABEL_221:
              if (v143)
                goto LABEL_222;
            }
            if (!v160)
              continue;
            break;
          }
          if (v115 < (uint64_t *)v116)
            continue;
          break;
        }
LABEL_229:
        if ((uint64_t *)v43 != v693)
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v693, (__int128 *)v43);
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v43, &v695);
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v695 + 1);
        if (*((_QWORD *)&v695 + 1))
        {
          v166 = (unint64_t *)(*((_QWORD *)&v695 + 1) + 8);
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v168 = v42 >= (uint64_t *)v67;
        v6 = a2;
        v169 = v693;
        if (!v168)
        {
LABEL_240:
          std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>(v169, v43, a3, a4 & 1);
          a4 = 0;
          j = (uint64_t *)(v43 + 16);
          continue;
        }
        v170 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(v693, (char *)v43);
        j = (uint64_t *)(v43 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>((uint64_t *)(v43 + 16), a2))
        {
          v169 = v693;
          if (v170)
            continue;
          goto LABEL_240;
        }
        a2 = (char *)v43;
        j = v693;
        if (!v170)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v50 = *(_QWORD *)a1;
        v51 = *((_QWORD *)a2 - 2);
        if (*(_DWORD *)(*(_QWORD *)a1 + 176) > *(_DWORD *)(v51 + 176))
        {
          *(_QWORD *)a1 = v51;
          *((_QWORD *)a2 - 2) = v50;
          v52 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2);
        return;
      case 5:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6);
        v53 = *((_QWORD *)a1 + 6);
        v54 = *((_QWORD *)a2 - 2);
        if (*(_DWORD *)(v53 + 176) > *(_DWORD *)(v54 + 176))
        {
          *((_QWORD *)a1 + 6) = v54;
          *((_QWORD *)a2 - 2) = v53;
          v55 = *((_QWORD *)a1 + 7);
          *((_QWORD *)a1 + 7) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v55;
          v56 = *((_QWORD *)a1 + 4);
          v57 = *((_QWORD *)a1 + 6);
          v58 = *(_DWORD *)(v57 + 176);
          if (*(_DWORD *)(v56 + 176) > v58)
          {
            v59 = *((_QWORD *)a1 + 5);
            v60 = *((_QWORD *)a1 + 7);
            *((_QWORD *)a1 + 4) = v57;
            *((_QWORD *)a1 + 5) = v60;
            *((_QWORD *)a1 + 6) = v56;
            *((_QWORD *)a1 + 7) = v59;
            v61 = *((_QWORD *)a1 + 2);
            if (*(_DWORD *)(v61 + 176) > v58)
            {
              v62 = *((_QWORD *)a1 + 3);
              *((_QWORD *)a1 + 2) = v57;
              *((_QWORD *)a1 + 3) = v60;
              *((_QWORD *)a1 + 4) = v61;
              *((_QWORD *)a1 + 5) = v62;
              v63 = *(_QWORD *)a1;
              if (*(_DWORD *)(*(_QWORD *)a1 + 176) > v58)
              {
                v64 = *((_QWORD *)a1 + 1);
                *(_QWORD *)a1 = v57;
                *((_QWORD *)a1 + 1) = v60;
                *((_QWORD *)a1 + 2) = v63;
                *((_QWORD *)a1 + 3) = v64;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v65 = a1 + 1;
              if (a1 + 1 != a2)
              {
                v66 = 0;
                v67 = a1;
                do
                {
                  v68 = v65;
                  v69 = *((_QWORD *)v67 + 2);
                  if (*(_DWORD *)(*(_QWORD *)v67 + 176) > *(_DWORD *)(v69 + 176))
                  {
                    v70 = *((_QWORD *)v67 + 3);
                    *(_QWORD *)&v116 = v69;
                    *((_QWORD *)&v116 + 1) = v70;
                    *v68 = 0;
                    v68[1] = 0;
                    v71 = v66;
                    while (1)
                    {
                      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1 + v71 + 16, (__int128 *)((char *)a1 + v71));
                      if (!v71)
                        break;
                      v72 = *(_DWORD *)(*(_QWORD *)((char *)a1 + v71 - 16) + 176);
                      v71 -= 16;
                      if (v72 <= *(_DWORD *)(v116 + 176))
                      {
                        v73 = (uint64_t)a1 + v71 + 16;
                        goto LABEL_83;
                      }
                    }
                    v73 = (uint64_t)a1;
LABEL_83:
                    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v73, &v116);
                    v74 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                    if (*((_QWORD *)&v116 + 1))
                    {
                      v75 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                  }
                  v65 = v68 + 2;
                  v66 += 16;
                  v67 = (__int128 *)v68;
                }
                while (v68 + 2 != (_QWORD *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v108 = a1 + 1;
            while (v108 != a2)
            {
              v109 = v108;
              if (*(_DWORD *)(*(_QWORD *)a1 + 176) > *(_DWORD *)(*((_QWORD *)a1 + 2) + 176))
              {
                v110 = *((_QWORD *)a1 + 3);
                *(_QWORD *)&v116 = *((_QWORD *)a1 + 2);
                *((_QWORD *)&v116 + 1) = v110;
                *(_QWORD *)v108 = 0;
                *((_QWORD *)v108 + 1) = 0;
                do
                {
                  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(a1 + 1), a1);
                  v111 = *((_QWORD *)a1-- - 2);
                }
                while (*(_DWORD *)(v111 + 176) > *(_DWORD *)(v116 + 176));
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v116);
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                if (*((_QWORD *)&v116 + 1))
                {
                  v113 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
              }
              v108 = v109 + 1;
              a1 = v109;
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = &a1[v80];
                if (2 * v79 + 2 >= v10)
                {
                  v82 = *(_QWORD *)v81;
                }
                else
                {
                  v82 = *((_QWORD *)v81 + 2);
                  if (*(_DWORD *)(v82 + 176) > *(_DWORD *)(*(_QWORD *)v81 + 176))
                  {
                    ++v81;
                    v80 = 2 * v79 + 2;
                  }
                  else
                  {
                    v82 = *(_QWORD *)v81;
                  }
                }
                v83 = &a1[v79];
                v84 = *(_QWORD *)v83;
                if (*(_DWORD *)(*(_QWORD *)v83 + 176) <= *(_DWORD *)(v82 + 176))
                {
                  *(_QWORD *)&v116 = *(_QWORD *)v83;
                  *((_QWORD *)&v116 + 1) = *((_QWORD *)&a1[v79] + 1);
                  *(_QWORD *)v83 = 0;
                  *((_QWORD *)v83 + 1) = 0;
                  do
                  {
                    v85 = (uint64_t)v81;
                    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v83, v81);
                    if (v77 < v80)
                      break;
                    v81 = &a1[(2 * v80) | 1];
                    if (2 * v80 + 2 >= v10)
                    {
                      v86 = *(_QWORD *)v81;
                      v80 = (2 * v80) | 1;
                    }
                    else
                    {
                      v86 = *((_QWORD *)v81 + 2);
                      if (*(_DWORD *)(v86 + 176) > *(_DWORD *)(*(_QWORD *)v81 + 176))
                      {
                        ++v81;
                        v80 = 2 * v80 + 2;
                      }
                      else
                      {
                        v86 = *(_QWORD *)v81;
                        v80 = (2 * v80) | 1;
                      }
                    }
                    v83 = (__int128 *)v85;
                  }
                  while (*(_DWORD *)(v84 + 176) <= *(_DWORD *)(v86 + 176));
                  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v85, &v116);
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                  if (*((_QWORD *)&v116 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v90 = (unint64_t)v9 >> 4;
            do
            {
              v91 = 0;
              v115 = *a1;
              *(_QWORD *)a1 = 0;
              *((_QWORD *)a1 + 1) = 0;
              v92 = (uint64_t)a1;
              do
              {
                v93 = (__int128 *)(v92 + 16 * v91 + 16);
                v94 = (2 * v91) | 1;
                v95 = 2 * v91 + 2;
                if (v95 < v90 && *(_DWORD *)(*((_QWORD *)v93 + 2) + 176) > *(_DWORD *)(*(_QWORD *)v93 + 176))
                {
                  ++v93;
                  v94 = v95;
                }
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v92, v93);
                v92 = (uint64_t)v93;
                v91 = v94;
              }
              while (v94 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              if (v93 == --a2)
              {
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v93, &v115);
              }
              else
              {
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v93, a2);
                std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a2, &v115);
                v96 = (char *)v93 - (char *)a1 + 16;
                if (v96 >= 17)
                {
                  v97 = (((unint64_t)v96 >> 4) - 2) >> 1;
                  v98 = &a1[v97];
                  v99 = *(_QWORD *)v93;
                  if (*(_DWORD *)(*(_QWORD *)v93 + 176) > *(_DWORD *)(*(_QWORD *)v98 + 176))
                  {
                    v116 = *v93;
                    *(_QWORD *)v93 = 0;
                    *((_QWORD *)v93 + 1) = 0;
                    do
                    {
                      v100 = (uint64_t)v98;
                      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v93, v98);
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = &a1[v97];
                      v93 = (__int128 *)v100;
                    }
                    while (*(_DWORD *)(v99 + 176) > *(_DWORD *)(*(_QWORD *)v98 + 176));
                    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v100, &v116);
                    v101 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                    if (*((_QWORD *)&v116 + 1))
                    {
                      v102 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                  }
                }
              }
              v104 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
              if (*((_QWORD *)&v115 + 1))
              {
                v105 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }
            while (v90-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(v12, a1, (_QWORD *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, v12, (_QWORD *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((_QWORD *)a1 + 2, (_QWORD *)v12 - 2, (_QWORD *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((_QWORD *)a1 + 4, &a1[v11 + 1], (_QWORD *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((_QWORD *)v12 - 2, v12, &a1[v11 + 1]);
          v13 = *a1;
          *a1 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_DWORD *)(v14 + 176) <= *(_DWORD *)(*((_QWORD *)a1 - 2) + 176))
        {
          v35 = *((_QWORD *)a1 + 1);
          *(_QWORD *)&v116 = *(_QWORD *)a1;
          *((_QWORD *)&v116 + 1) = v35;
          *(_QWORD *)a1 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v36 = *(_DWORD *)(v14 + 176);
          if (*(_DWORD *)(*((_QWORD *)a2 - 2) + 176) <= v36)
          {
            v38 = a1 + 1;
            do
            {
              v8 = v38;
              if (v38 >= a2)
                break;
              ++v38;
            }
            while (*(_DWORD *)(*(_QWORD *)v8 + 176) <= v36);
          }
          else
          {
            v8 = a1;
            do
              v37 = *((_QWORD *)v8++ + 2);
            while (*(_DWORD *)(v37 + 176) <= v36);
          }
          v39 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
              v40 = *((_QWORD *)v39-- - 2);
            while (*(_DWORD *)(v40 + 176) > v36);
          }
          if (v8 < v39)
          {
            v41 = *(_QWORD *)v8;
            v42 = *(_QWORD *)v39;
            do
            {
              *(_QWORD *)v8 = v42;
              *(_QWORD *)v39 = v41;
              v43 = *((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = *((_QWORD *)v39 + 1);
              *((_QWORD *)v39 + 1) = v43;
              v44 = *(_DWORD *)(v116 + 176);
              do
              {
                v45 = *((_QWORD *)v8++ + 2);
                v41 = v45;
              }
              while (*(_DWORD *)(v45 + 176) <= v44);
              do
              {
                v46 = *((_QWORD *)v39-- - 2);
                v42 = v46;
              }
              while (*(_DWORD *)(v46 + 176) > v44);
            }
            while (v8 < v39);
          }
          if (v8 - 1 != a1)
            std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, v8 - 1);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 - 1), &v116);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          a4 = 0;
          continue;
        }
        v15 = 0;
        v16 = *((_QWORD *)a1 + 1);
        *(_QWORD *)&v116 = *(_QWORD *)a1;
        *((_QWORD *)&v116 + 1) = v16;
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v17 = *(_DWORD *)(v14 + 176);
        do
          v18 = *(_QWORD *)&a1[++v15];
        while (v17 > *(_DWORD *)(v18 + 176));
        v19 = &a1[v15];
        v20 = a2;
        if (v15 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *((_QWORD *)v20-- - 2);
          }
          while (v17 <= *(_DWORD *)(v22 + 176));
        }
        else
        {
          do
            v21 = *((_QWORD *)v20-- - 2);
          while (v17 <= *(_DWORD *)(v21 + 176));
        }
        if (v19 >= v20)
        {
          v30 = (uint64_t)(v19 - 1);
        }
        else
        {
          v23 = *(_QWORD *)v20;
          v24 = &a1[v15];
          v25 = v20;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v18;
            v26 = *((_QWORD *)v24 + 1);
            *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = v26;
            v27 = *(_DWORD *)(v116 + 176);
            do
            {
              v28 = *((_QWORD *)v24++ + 2);
              v18 = v28;
            }
            while (v27 > *(_DWORD *)(v28 + 176));
            do
            {
              v29 = *((_QWORD *)v25-- - 2);
              v23 = v29;
            }
            while (v27 <= *(_DWORD *)(v29 + 176));
          }
          while (v24 < v25);
          v30 = (uint64_t)(v24 - 1);
        }
        if ((__int128 *)v30 != a1)
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v30);
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v30, &v116);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
        if (*((_QWORD *)&v116 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v19 < v20)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v8 = (__int128 *)(v30 + 16);
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((char *)a1, (char *)v30);
        v8 = (__int128 *)(v30 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>((char *)(v30 + 16), (char *)a2))
        {
          if (v34)
            continue;
          goto LABEL_36;
        }
        a2 = (__int128 *)v30;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 16;
    if (result + 16 != a2)
    {
      v5 = result;
      do
      {
        v6 = v4;
        result = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v4, v5);
        if ((_DWORD)result)
        {
          v19 = *(_OWORD *)v6;
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v7 = v6;
          while (1)
          {
            v8 = v7;
            v7 = v5;
            v9 = *(unsigned int **)(v8 + 8);
            *(_OWORD *)v8 = *(_OWORD *)v5;
            *(_QWORD *)(v5 + 8) = 0;
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
            }
            *(_QWORD *)v5 = 0;
            if (v5 == v3)
              break;
            v5 -= 16;
            if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v19, v7 - 16))goto LABEL_15;
          }
          v7 = v3;
LABEL_15:
          result = *(_QWORD *)(v7 + 8);
          *(_OWORD *)v7 = v19;
          *((_QWORD *)&v19 + 1) = 0;
          if (result)
          {
            v13 = (unsigned int *)(result + 8);
            do
            {
              v14 = __ldxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
              (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            result = *((_QWORD *)&v19 + 1);
            *(_QWORD *)&v19 = 0;
            if (*((_QWORD *)&v19 + 1))
            {
              v16 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
              do
              {
                v17 = __ldxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            }
          }
        }
        v4 = v6 + 16;
        v5 = v6;
      }
      while (v6 + 16 != a2);
    }
  }
  return result;
}

void sub_22FFC7930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 16;
    while (v4 != a2)
    {
      v5 = v4;
      result = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v4, v3);
      if ((_DWORD)result)
      {
        v18 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v6 = v5;
        do
        {
          v7 = v6;
          v6 = v3;
          v8 = *(unsigned int **)(v7 + 8);
          *(_OWORD *)v7 = *(_OWORD *)v3;
          *(_QWORD *)(v3 + 8) = 0;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          }
          *(_QWORD *)v3 = 0;
          v3 -= 16;
        }
        while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v18, v6 - 16));
        result = *(_QWORD *)(v6 + 8);
        *(_OWORD *)v6 = v18;
        *((_QWORD *)&v18 + 1) = 0;
        if (result)
        {
          v12 = (unsigned int *)(result + 8);
          do
          {
            v13 = __ldxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
            (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          result = *((_QWORD *)&v18 + 1);
          *(_QWORD *)&v18 = 0;
          if (*((_QWORD *)&v18 + 1))
          {
            v15 = (unsigned int *)(*((_QWORD *)&v18 + 1) + 8);
            do
            {
              v16 = __ldxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
      v4 = v5 + 16;
      v3 = v5;
    }
  }
  return result;
}

void sub_22FFC7A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, a1);
  result = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a3, a2);
  if (!v6)
  {
    if (!(_DWORD)result)
      return result;
    v10 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, a1))return 1;
    v11 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    return 2;
  }
  v9 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (!(_DWORD)result)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v8;
    if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a3, a2))return 1;
    v12 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v12;
    return 2;
  }
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v8;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>(unint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v21;

  v2 = a2;
  v21 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, (uint64_t)(a2 - 1)))
  {
    v4 = a1;
    do
      v4 += 16;
    while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, v4));
  }
  else
  {
    v5 = a1 + 16;
    do
    {
      v4 = v5;
      if (v5 >= (unint64_t)v2)
        break;
      v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, v5);
      v5 = v4 + 16;
    }
    while (!v6);
  }
  if (v4 < (unint64_t)v2)
  {
    do
      --v2;
    while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, (uint64_t)v2));
  }
  while (v4 < (unint64_t)v2)
  {
    v7 = *(_OWORD *)v4;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_OWORD *)v4 = *v2;
    *v2 = v7;
    do
      v4 += 16;
    while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, v4));
    do
      --v2;
    while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v21, (uint64_t)v2));
  }
  if (v4 - 16 != a1)
  {
    v8 = *(unsigned int **)(a1 + 8);
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
    *(_QWORD *)(v4 - 8) = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
    *(_QWORD *)(v4 - 16) = 0;
  }
  v12 = *(unsigned int **)(v4 - 8);
  *(_OWORD *)(v4 - 16) = v21;
  *((_QWORD *)&v21 + 1) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    v16 = *((_QWORD *)&v21 + 1);
    *(_QWORD *)&v21 = 0;
    if (*((_QWORD *)&v21 + 1))
    {
      v17 = (unsigned int *)(*((_QWORD *)&v21 + 1) + 8);
      do
      {
        v18 = __ldxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  return v4;
}

void sub_22FFC7D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,std::__less<void,void> &>(__int128 *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v23;

  v4 = 0;
  v23 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&a1[++v4], (uint64_t)&v23));
  v6 = (unint64_t)&a1[v4];
  if (v4 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      a2 -= 16;
    }
    while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, (uint64_t)&v23));
  }
  else
  {
    do
      a2 -= 16;
    while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, (uint64_t)&v23));
  }
  v7 = (unint64_t)&a1[v4];
  if (v6 < a2)
  {
    v8 = (_OWORD *)a2;
    do
    {
      v9 = *(_OWORD *)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_OWORD *)v7 = *v8;
      *v8 = v9;
      do
        v7 += 16;
      while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v7, (uint64_t)&v23));
      do
        --v8;
      while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)v8, (uint64_t)&v23));
    }
    while (v7 < (unint64_t)v8);
  }
  if ((__int128 *)(v7 - 16) != a1)
  {
    v10 = (unsigned int *)*((_QWORD *)a1 + 1);
    *a1 = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v7 - 8) = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
    *(_QWORD *)(v7 - 16) = 0;
  }
  v14 = *(unsigned int **)(v7 - 8);
  *(_OWORD *)(v7 - 16) = v23;
  *((_QWORD *)&v23 + 1) = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    v18 = *((_QWORD *)&v23 + 1);
    *(_QWORD *)&v23 = 0;
    if (*((_QWORD *)&v23 + 1))
    {
      v19 = (unsigned int *)(*((_QWORD *)&v23 + 1) + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  return v7 - 16;
}

void sub_22FFC7F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&a2[-1], (uint64_t)a1))
      {
        v7 = *a1;
        a1->n128_u64[0] = 0;
        a1->n128_u64[1] = 0;
        *a1 = *v6;
        *v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)a1, (uint64_t)&a1[1], (uint64_t)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, (uint64_t)&a1[1], (uint64_t)&a1[2], (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a1[3], (__n128 *)a2[-1].n128_u64);
      return 1;
    default:
      v8 = (uint64_t)&a1[2];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)a1, (uint64_t)&a1[1], (uint64_t)&a1[2]);
      v9 = (uint64_t)&a1[3];
      if (&a1[3] == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v9, v8))
    {
      v25 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = v9;
      while (1)
      {
        v12 = v11;
        v11 = v8;
        v13 = *(unsigned int **)(v12 + 8);
        *(_OWORD *)v12 = *(_OWORD *)v8;
        *(_QWORD *)(v8 + 8) = 0;
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
        }
        *(_QWORD *)v8 = 0;
        if ((__n128 *)v8 == a1)
          break;
        v8 -= 16;
        if (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)&v25, v11 - 16))goto LABEL_17;
      }
      v11 = (uint64_t)a1;
LABEL_17:
      v17 = *(unsigned int **)(v11 + 8);
      *(_OWORD *)v11 = v25;
      *((_QWORD *)&v25 + 1) = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        v21 = *((_QWORD *)&v25 + 1);
        *(_QWORD *)&v25 = 0;
        ++v10;
        if (*((_QWORD *)&v25 + 1))
        {
          v22 = (unsigned int *)(*((_QWORD *)&v25 + 1) + 8);
          do
          {
            v23 = __ldxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      else
      {
        ++v10;
      }
      if (v10 == 8)
        return v9 + 16 == (_QWORD)a2;
    }
    v8 = v9;
    v9 += 16;
    if ((__n128 *)v9 == a2)
      return 1;
  }
}

void sub_22FFC81D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v3);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  if (v8)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  return v6 < v10;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(__n128 *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  __n128 result;
  __int128 v9;
  __n128 v10;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)a1, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)a4, a3))
  {
    v9 = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)a3 = *a4;
    *a4 = v9;
    if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a3, a2))
    {
      v10 = *(__n128 *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = v10;
      if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, (uint64_t)a1))
      {
        result = *a1;
        a1->n128_u64[0] = 0;
        a1->n128_u64[1] = 0;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, a2, a3, (_OWORD *)a4);
  if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)a5, a4))
  {
    v11 = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_OWORD *)a4 = *a5;
    *a5 = v11;
    if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a4, a3))
    {
      v12 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a3, a2))
      {
        v13 = *(__n128 *)a2;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = v13;
        if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a2, (uint64_t)a1))
        {
          result = *a1;
          a1->n128_u64[0] = 0;
          a1->n128_u64[1] = 0;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v14, (uint64_t)a1))
        {
          v15 = *(_OWORD *)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(a1, v6, a4, v16);
        v6 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      v9 = (a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = result + 16 * (v9 + 1);
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(result + 16 * (v9 + 1), v11 + 16))
      {
        v11 += 16;
        v10 = v12;
      }
      result = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v11, v5);
      if ((result & 1) == 0)
      {
        v25 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        do
        {
          v13 = v11;
          v14 = *(unsigned int **)(v5 + 8);
          *(_OWORD *)v5 = *(_OWORD *)v11;
          *(_QWORD *)(v11 + 8) = 0;
          if (v14)
          {
            v15 = v14 + 2;
            do
            {
              v16 = __ldxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
          }
          *(_QWORD *)v11 = 0;
          if (v7 < v10)
            break;
          v18 = (2 * v10) | 1;
          v11 = v6 + 16 * v18;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v18;
          }
          else if (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v6 + 16 * v18, v11 + 16))
          {
            v11 += 16;
          }
          else
          {
            v10 = v18;
          }
          v5 = v13;
        }
        while (!pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v11, (uint64_t)&v25));
        result = *(_QWORD *)(v13 + 8);
        *(_OWORD *)v13 = v25;
        *((_QWORD *)&v25 + 1) = 0;
        if (result)
        {
          v19 = (unsigned int *)(result + 8);
          do
          {
            v20 = __ldxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
            (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          result = *((_QWORD *)&v25 + 1);
          *(_QWORD *)&v25 = 0;
          if (*((_QWORD *)&v25 + 1))
          {
            v22 = (unsigned int *)(*((_QWORD *)&v25 + 1) + 8);
            do
            {
              v23 = __ldxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
  }
  return result;
}

void sub_22FFC86C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a4 >= 2)
  {
    v6 = (uint64_t)result;
    v8 = *(_QWORD *)result;
    v7 = *((_QWORD *)result + 1);
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>((uint64_t)result, a3, a4);
    v10 = (_QWORD *)v9;
    if (v9 == a2 - 16)
    {
      result = *(unsigned int **)(v9 + 8);
      *v10 = v8;
      v10[1] = v7;
      if (result)
      {
        v19 = result + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      v11 = *(unsigned int **)(v9 + 8);
      *(_OWORD *)v10 = *(_OWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 8) = 0;
      if (v11)
      {
        v12 = v11 + 2;
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
        v15 = *(unsigned int **)(a2 - 8);
        *(_QWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a2 - 8) = v7;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      else
      {
        *(_QWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return (unsigned int *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(v6, (uint64_t)(v10 + 2), a3, ((uint64_t)v10 - v6 + 16) >> 4);
    }
  }
  return result;
}

void sub_22FFC8830(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (v1)
  {
    v3 = v1 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 16 * v5 + 16;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3
      && pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(a1, a1 + 16))
    {
      a1 += 16;
      v5 = v10;
    }
    v11 = *(unsigned int **)(v8 + 8);
    *(_OWORD *)v8 = *(_OWORD *)a1;
    *(_QWORD *)(a1 + 8) = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
    *(_QWORD *)a1 = 0;
  }
  while (v5 <= v7);
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = result + 16 * (v4 >> 1);
    v8 = a2 - 16;
    result = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v7, a2 - 16);
    if ((_DWORD)result)
    {
      v20 = *(_OWORD *)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      do
      {
        v9 = v7;
        v10 = *(unsigned int **)(v8 + 8);
        *(_OWORD *)v8 = *(_OWORD *)v7;
        *(_QWORD *)(v7 + 8) = 0;
        if (v10)
        {
          v11 = v10 + 2;
          do
          {
            v12 = __ldxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
            (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
        }
        *(_QWORD *)v7 = 0;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = v5 + 16 * v6;
        v8 = v9;
      }
      while (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator<<pxrInternal__aapl__pxrReserved__::SdfLayer>(v7, (uint64_t)&v20));
      result = *(_QWORD *)(v9 + 8);
      *(_OWORD *)v9 = v20;
      *((_QWORD *)&v20 + 1) = 0;
      if (result)
      {
        v14 = (unsigned int *)(result + 8);
        do
        {
          v15 = __ldxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        result = *((_QWORD *)&v20 + 1);
        *(_QWORD *)&v20 = 0;
        if (*((_QWORD *)&v20 + 1))
        {
          v17 = (unsigned int *)(*((_QWORD *)&v20 + 1) + 8);
          do
          {
            v18 = __ldxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

void sub_22FFC8A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    v4 = (unsigned int *)v3[3];
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v3);
  }
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void realityio::MultipleLayerMutex::lock(realityio::MultipleLayerMutex *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::recursive_mutex *v6;

  v2 = realityio::UsdLayerMutexTracker::instance(this);
  v3 = *(_QWORD **)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 != v4)
  {
    v5 = (uint64_t)v2;
    do
    {
      realityio::UsdLayerMutexTracker::writeMutexForLayer(v5, v3);
      std::recursive_mutex::lock(v6);
      v3 += 2;
    }
    while (v3 != v4);
  }
}

void realityio::MultipleLayerMutex::unlock(realityio::MultipleLayerMutex *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::recursive_mutex *v6;

  v2 = realityio::UsdLayerMutexTracker::instance(this);
  v3 = *(_QWORD **)this;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 != v4)
  {
    v5 = (uint64_t)v2;
    do
    {
      realityio::UsdLayerMutexTracker::writeMutexForLayer(v5, v3);
      std::recursive_mutex::unlock(v6);
      v3 += 2;
    }
    while (v3 != v4);
  }
}

const void **realityio::createCGColor@<X0>(float32x4_t *a1@<X0>, _QWORD *a2@<X1>, CGColorRef *a3@<X8>)
{
  unint64_t v5;
  const char *v6;
  const __CFString *v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  float64x2_t v10;
  _OWORD v12[2];
  CFTypeRef cf;
  CGColorSpace *v14;
  CFStringRef v15;

  v15 = 0;
  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, 0x8000100u);
  v14 = 0;
  v7 = (const __CFString *)MEMORY[0x2348B142C](v15);
  cf = v7;
  if (v7)
    v8 = CGColorSpaceCreateWithName(v7);
  else
    v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF308]);
  v9 = v8;
  v14 = v8;
  v10 = vcvt_hight_f64_f32(*a1);
  v12[0] = vcvtq_f64_f32(*(float32x2_t *)a1->f32);
  v12[1] = v10;
  *a3 = 0;
  *a3 = CGColorCreate(v8, (const CGFloat *)v12);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  v14 = 0;
  if (v9)
    CGColorSpaceRelease(v9);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v15);
}

void sub_22FFC8CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  uint64_t v7;
  const void *v9;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, const void *);
  realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  std::unique_ptr<CGColorSpace,realityio::ColorDeleter>::reset[abi:ne180100]((CGColorSpace **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v7 - 40));
  _Unwind_Resume(a1);
}

void std::unique_ptr<CGColorSpace,realityio::ColorDeleter>::reset[abi:ne180100](CGColorSpace **a1)
{
  CGColorSpace *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CGColorSpaceRelease(v2);
}

const void **realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t RIOImportSessionGetInstanceCount()
{
}

uint64_t RIOImportSessionGetPrimPathComponentType()
{
  uint64_t v0;

  return v0;
}

uint64_t RIOImportSessionGetTypeID()
{
  if (qword_255E54690 != -1)
    dispatch_once(&qword_255E54690, &__block_literal_global_6);
  return _MergedGlobals_11;
}

uint64_t RIOImportSessionCreateWithEngine(uint64_t a1, int a2, int a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  uint64_t *EditTarget;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  __n128 v15;
  std::recursive_mutex *v16;
  std::recursive_mutex *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _BOOL4 v24;
  CFTypeRef cf;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a1;
  if (!a1)
    return 0;
  v5 = (uint64_t *)RIOPxrUsdStageCreateInMemory();
  cf = v5;
  if (v5)
  {
    v6 = realityio::UsdLayerMutexTracker::instance(0);
    v8 = v5[2];
    v7 = v5 + 2;
    if (v8)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      v11 = EditTarget[1];
      v27 = *EditTarget;
      v28 = v11;
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v15.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v27);
    v17 = v16;
    v18 = v28;
    if (v28)
    {
      v19 = (unsigned int *)(v28 + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, v15);
    }
    std::recursive_mutex::lock(v17);
    if (*v7)
    {
      v22 = 2 * (a2 == 2);
      if (a2 == 1)
        v22 = 1;
      LODWORD(v27) = v22;
      v24 = a3 != 0;
      v14 = RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>((unsigned int **)v7, &v26, &cf, (int *)&v27, (unsigned int *)&v24);
    }
    else
    {
      v14 = 0;
    }
    std::recursive_mutex::unlock(v17);
  }
  else
  {
    v14 = 0;
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&cf);
  return v14;
}

void sub_22FFC8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex *v14;

  std::recursive_mutex::unlock(v14);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>(unsigned int **a1, uint64_t *a2, const void **a3, int *a4, unsigned int *a5)
{
  uint64_t Instance;
  unsigned int *v12;

  if (qword_255E54690 != -1)
    dispatch_once(&qword_255E54690, &__block_literal_global_6);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v12 = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v12);
    realityio::ImportSession::ImportSession(Instance + 16, &v12, *a2, a3, *a4, *a5, 0, 1);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v12);
  }
  return Instance;
}

void sub_22FFC90E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateWithURL(void *a1, uint64_t a2, int a3, int a4)
{
  return RIOImportSessionCreateWithURLWithErrorReporting(a1, a2, a3, a4, 0);
}

uint64_t RIOImportSessionCreateWithURLWithErrorReporting(void *a1, uint64_t a2, int a3, int a4, id *a5)
{
  _QWORD *v7;
  realityio::UsdLayerMutexTracker *v8;
  void *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  uint64_t *EditTarget;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  __n128 v16;
  std::recursive_mutex *v17;
  std::recursive_mutex *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  _BOOL4 v25;
  unsigned int *v26;
  CFTypeRef cf;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  if (!a2)
    return 0;
  v7 = (_QWORD *)RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1, a5);
  cf = v7;
  if (v7)
  {
    v26 = (unsigned int *)v7[2];
    v8 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v26);
    v9 = realityio::UsdLayerMutexTracker::instance(v8);
    if (v26)
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v26);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
      v12 = EditTarget[1];
      v29 = *EditTarget;
      v30 = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v16.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v9, &v29);
    v18 = v17;
    v19 = v30;
    if (v30)
    {
      v20 = (unsigned int *)(v30 + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v19 + 8))(v19, v16);
    }
    std::recursive_mutex::lock(v18);
    if (v26)
    {
      v23 = 2 * (a3 == 2);
      if (a3 == 1)
        v23 = 1;
      LODWORD(v29) = v23;
      v25 = a4 != 0;
      v15 = RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>(&v26, &v28, &cf, (int *)&v29, (unsigned int *)&v25);
    }
    else
    {
      v15 = 0;
    }
    std::recursive_mutex::unlock(v18);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v26);
  }
  else
  {
    v15 = 0;
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&cf);
  return v15;
}

void sub_22FFC926C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex *v14;

  std::recursive_mutex::unlock(v14);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a10);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURL(void *a1, uint64_t a2, int a3, int a4)
{
  return RIOImportSessionCreateSingleUseImporterWithURLWithErrorReporting(a1, a2, a3, a4, 0);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithURLWithErrorReporting(void *a1, uint64_t a2, int a3, int a4, id *a5)
{
  _QWORD *v8;
  realityio::UsdLayerMutexTracker *v9;
  void *v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  uint64_t EditTarget;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t Instance;
  __n128 v17;
  std::recursive_mutex *v18;
  std::recursive_mutex *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  _BOOL8 v25;
  unsigned int *v27;
  CFTypeRef cf;
  unsigned int *v29;
  uint64_t v30;

  if (!a2)
    return 0;
  v8 = (_QWORD *)RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1, a5);
  cf = v8;
  if (v8)
  {
    v27 = (unsigned int *)v8[2];
    v9 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v27);
    v10 = realityio::UsdLayerMutexTracker::instance(v9);
    if (v27)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v27);
      EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v11);
      v13 = *(_QWORD *)(EditTarget + 8);
      v29 = *(unsigned int **)EditTarget;
      v30 = v13;
      if (v13)
      {
        v14 = (unsigned int *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v17.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v10, &v29);
    v19 = v18;
    v20 = v30;
    if (v30)
    {
      v21 = (unsigned int *)(v30 + 8);
      do
      {
        v22 = __ldxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v20 + 8))(v20, v17);
    }
    std::recursive_mutex::lock(v19);
    if (v27)
    {
      if (a3 == 1)
        v24 = 1;
      else
        v24 = 2 * (a3 == 2);
      v25 = a4 != 0;
      if (qword_255E54690 != -1)
        dispatch_once(&qword_255E54690, &__block_literal_global_6);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v29 = v27;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v29);
        realityio::ImportSession::ImportSession(Instance + 16, &v29, a2, &cf, v24, v25, 1, 1);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v29);
      }
    }
    else
    {
      Instance = 0;
    }
    std::recursive_mutex::unlock(v19);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v27);
  }
  else
  {
    Instance = 0;
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&cf);
  return Instance;
}

void sub_22FFC94C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, const void *a10, unsigned int *a11)
{
  std::recursive_mutex *v11;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a11);
  std::recursive_mutex::unlock(v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateWithStage(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  realityio::UsdLayerMutexTracker *v8;
  void *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  uint64_t *EditTarget;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 v15;
  std::recursive_mutex *v16;
  std::recursive_mutex *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _BOOL4 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = 0;
  v26 = a2;
  if (a1 && a2)
  {
    v25 = a1;
    v8 = (realityio::UsdLayerMutexTracker *)CFRetain(a1);
    v9 = realityio::UsdLayerMutexTracker::instance(v8);
    if (a1[2])
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 2);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
      v12 = EditTarget[1];
      v27 = *EditTarget;
      v28 = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    v15.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v9, &v27);
    v17 = v16;
    v18 = v28;
    if (v28)
    {
      v19 = (unsigned int *)(v28 + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, v15);
    }
    std::recursive_mutex::lock(v17);
    if (a1[2])
    {
      v22 = 2 * (a3 == 2);
      if (a3 == 1)
        v22 = 1;
      LODWORD(v27) = v22;
      v24 = a4 != 0;
      v4 = RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>((unsigned int **)a1 + 2, &v26, (const void **)&v25, (int *)&v27, (unsigned int *)&v24);
    }
    else
    {
      v4 = 0;
    }
    std::recursive_mutex::unlock(v17);
    realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)&v25);
  }
  return v4;
}

void sub_22FFC9684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex *v14;

  std::recursive_mutex::unlock(v14);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCreateSingleUseImporterWithStage(uint64_t *a1, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t Instance;
  realityio::UsdLayerMutexTracker *v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::UsdStage *v15;
  uint64_t EditTarget;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __n128 v20;
  std::recursive_mutex *v21;
  std::recursive_mutex *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  _BOOL8 v28;
  uint64_t *v30;
  unsigned int *v31;
  uint64_t v32;

  Instance = 0;
  if (a1 && a2)
  {
    v30 = a1;
    v11 = (realityio::UsdLayerMutexTracker *)CFRetain(a1);
    v12 = realityio::UsdLayerMutexTracker::instance(v11);
    v14 = a1[2];
    v13 = a1 + 2;
    if (v14)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v13);
      EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v15);
      v17 = *(_QWORD *)(EditTarget + 8);
      v31 = *(unsigned int **)EditTarget;
      v32 = v17;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    v20.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v12, &v31);
    v22 = v21;
    v23 = v32;
    if (v32)
    {
      v24 = (unsigned int *)(v32 + 8);
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v23 + 8))(v23, v20);
    }
    std::recursive_mutex::lock(v22);
    if (*v13)
    {
      if (a3 == 1)
        v27 = 1;
      else
        v27 = 2 * (a3 == 2);
      v28 = a4 != 0;
      if (qword_255E54690 != -1)
        dispatch_once(&qword_255E54690, &__block_literal_global_6);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v31 = (unsigned int *)*v13;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v31);
        realityio::ImportSession::ImportSession(Instance + 16, &v31, a2, (const void **)&v30, v27, v28, 1, a5);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v31);
      }
    }
    else
    {
      Instance = 0;
    }
    std::recursive_mutex::unlock(v22);
    realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)&v30);
  }
  return Instance;
}

void sub_22FFC9894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va1);
  std::recursive_mutex::unlock(v2);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionGetRootEntity(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t RIOImportSessionGetStage(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
}

_QWORD *RIOImportSessionQueueAssetForLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (a2)
    RERetain();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  if (v3)
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v3, &v5);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
}

void sub_22FFC9968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24FDE92E0;
  v5[1] = MEMORY[0x2348B5260](a2);
  v6 = v5;
  realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(a1 + 16, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FFC9A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FFC9AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12[0] = &off_24FDE9360;
  v12[1] = MEMORY[0x2348B5260](a2);
  v13 = v12;
  v14[0] = &off_24FDE9360;
  v3 = *(_QWORD *)(a1 + 32);
  v15 = v14;
  v14[1] = MEMORY[0x2348B5260]();
  v4 = *(_QWORD *)(v3 + 40);
  v5 = (uint64_t)v15;
  if (!v4)
  {
    if (!v15)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *))(*v15 + 48))(v15);
    goto LABEL_14;
  }
  if (v15)
  {
    if (v15 == v14)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v16);
      goto LABEL_9;
    }
    v5 = (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
  }
  v17 = (_BYTE *)v5;
LABEL_9:
  std::function<void ()(void)>::operator=((_QWORD *)(*(_QWORD *)(v4 + 464) + 72), (uint64_t)v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_19:
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_22FFC9CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  v23 = a13;
  if (a13 == &a10)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t RIOImportSessionGetSwiftObject(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t RIOImportSessionSetSwiftObject(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = result;
  v10 = *(_QWORD *)(result + 24);
  if (v10 != a2 && v10 != 0)
  {
    result = realityio::internal::assertHandler(1u, "(mSwiftObject == object || mSwiftObject == nullptr)", "setSwiftObject", 662, 1, a6, a7, a8, (uint64_t)"The swift object associated with a CoreRealityIO Import Session can only be assigned once, and then it is fixed.", v12);
    if ((_DWORD)result == 1)
    {
      result = raise(5);
    }
    else if ((_DWORD)result == 2)
    {
      abort();
    }
  }
  *(_QWORD *)(v9 + 24) = a2;
  return result;
}

uint64_t RIOImportSessionUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), 0);
}

uint64_t RIOImportSessionUpdateSynchronouslyOnEngineQueue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), 1);
}

void RIOImportSessionSetSceneUpdatePassCompletion(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v7[0] = &off_24FDE93E0;
    v7[1] = MEMORY[0x2348B5260](v3);
    v8 = v7;
    realityio::ImportSession::setSceneUpdatePassCompletion(*(_QWORD *)(a1 + 32), (uint64_t)v7);
    v5 = v8;
    if (v8 == v7)
    {
      v6 = 4;
      v5 = v7;
LABEL_8:
      (*(void (**)(void))(*v5 + 8 * v6))();
      goto LABEL_9;
    }
  }
  else
  {
    v10 = 0;
    realityio::ImportSession::setSceneUpdatePassCompletion(*(_QWORD *)(a1 + 32), (uint64_t)v9);
    v5 = v10;
    if (v10 == v9)
    {
      v6 = 4;
      v5 = v9;
      goto LABEL_8;
    }
  }
  if (v5)
  {
    v6 = 5;
    goto LABEL_8;
  }
LABEL_9:

}

void sub_22FFC9F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

_QWORD *realityio::ImportSession::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 32))(a1, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FFCA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t RIOImportSessionUpdateRequestCancel(uint64_t result)
{
  atomic_store(1u, (unsigned int *)(result + 44));
  return result;
}

_QWORD *RIOImportSessionSetRegistrationForScenes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[4];

  v40[3] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v32[0] = &off_24FDE9460;
  v32[1] = MEMORY[0x2348B5260](a2);
  v33 = v32;
  v6 = MEMORY[0x2348B5260](v5);

  v30[0] = &off_24FDE94F0;
  v30[1] = v6;
  v31 = v30;
  v7 = *(_QWORD **)(a1 + 32);
  v8 = (uint64_t)v33;
  if (!v33)
    goto LABEL_4;
  if (v33 != v32)
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
LABEL_4:
    v37 = (_QWORD *)v8;
    goto LABEL_6;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(v32[0] + 24))(v32, v36);
LABEL_6:
  v9 = (uint64_t)v31;
  if (!v31)
  {
LABEL_9:
    v35 = (_QWORD *)v9;
    goto LABEL_11;
  }
  if (v31 != v30)
  {
    v9 = (*(uint64_t (**)(void))(*v31 + 16))();
    goto LABEL_9;
  }
  v35 = v34;
  (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v34);
LABEL_11:
  v10 = (uint64_t)v37;
  if (!v37)
  {
LABEL_14:
    v39 = (_QWORD *)v10;
    goto LABEL_16;
  }
  if (v37 != v36)
  {
    v10 = (*(uint64_t (**)(void))(*v37 + 16))();
    goto LABEL_14;
  }
  v39 = v38;
  (*(void (**)(_QWORD *, _QWORD *))(v36[0] + 24))(v36, v38);
LABEL_16:
  v11 = v7 + 9;
  if (v38 != v7 + 9)
  {
    v12 = v39;
    v13 = (_QWORD *)v7[12];
    if (v39 == v38)
    {
      if (v13 == v11)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v40);
        (*(void (**)(_QWORD *))(*v39 + 32))(v39);
        v39 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v7[12] + 24))(v7[12], v38);
        (*(void (**)(_QWORD))(*(_QWORD *)v7[12] + 32))(v7[12]);
        v7[12] = 0;
        v39 = v38;
        (*(void (**)(_QWORD *, _QWORD *))(v40[0] + 24))(v40, v7 + 9);
        (*(void (**)(_QWORD *))(v40[0] + 32))(v40);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v7 + 9);
        (*(void (**)(_QWORD *))(*v39 + 32))(v39);
        v39 = (_QWORD *)v7[12];
      }
      v7[12] = v11;
    }
    else if (v13 == v11)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v11 + 24))(v7 + 9, v38);
      (*(void (**)(_QWORD))(*(_QWORD *)v7[12] + 32))(v7[12]);
      v7[12] = v39;
      v39 = v38;
    }
    else
    {
      v39 = (_QWORD *)v7[12];
      v7[12] = v12;
    }
  }
  v14 = v39;
  if (v39 == v38)
  {
    v15 = 4;
    v14 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_30;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_30:
  v16 = (uint64_t)v35;
  if (!v35)
  {
LABEL_33:
    v39 = (_QWORD *)v16;
    goto LABEL_35;
  }
  if (v35 != v34)
  {
    v16 = (*(uint64_t (**)(void))(*v35 + 16))();
    goto LABEL_33;
  }
  v39 = v38;
  (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v38);
LABEL_35:
  v17 = v7 + 13;
  if (v38 != v7 + 13)
  {
    v18 = v39;
    v19 = (_QWORD *)v7[16];
    if (v39 == v38)
    {
      if (v19 == v17)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v40);
        (*(void (**)(_QWORD *))(*v39 + 32))(v39);
        v39 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v7[16] + 24))(v7[16], v38);
        (*(void (**)(_QWORD))(*(_QWORD *)v7[16] + 32))(v7[16]);
        v7[16] = 0;
        v39 = v38;
        (*(void (**)(_QWORD *, _QWORD *))(v40[0] + 24))(v40, v7 + 13);
        (*(void (**)(_QWORD *))(v40[0] + 32))(v40);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v7 + 13);
        (*(void (**)(_QWORD *))(*v39 + 32))(v39);
        v39 = (_QWORD *)v7[16];
      }
      v7[16] = v17;
    }
    else if (v19 == v17)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v17 + 24))(v7 + 13, v38);
      (*(void (**)(_QWORD))(*(_QWORD *)v7[16] + 32))(v7[16]);
      v7[16] = v39;
      v39 = v38;
    }
    else
    {
      v39 = (_QWORD *)v7[16];
      v7[16] = v18;
    }
  }
  v20 = v39;
  if (v39 == v38)
  {
    v21 = 4;
    v20 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_49;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_49:
  v22 = v35;
  if (v35 == v34)
  {
    v23 = 4;
    v22 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_54;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_54:
  v24 = v37;
  if (v37 == v36)
  {
    v25 = 4;
    v24 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_59;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_59:
  v26 = v31;
  if (v31 == v30)
  {
    v27 = 4;
    v26 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_64;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_64:
  result = v33;
  if (v33 == v32)
  {
    v29 = 4;
    result = v32;
  }
  else
  {
    if (!v33)
      return result;
    v29 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
}

void sub_22FFCA56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t RIOEntityUsingMaterialCreateFromMtlxURLWithErrorReporting(uint64_t a1, realityio::MaterialXStandalone *a2, const __CFURL *a3, uint64_t a4)
{
  return RIOEntityUsingMaterialCreateFromMtlxURLWithFiles(a1, a2, a3, a4, 0);
}

uint64_t RIOEntityUsingMaterialCreateFromMtlxURLWithFiles(uint64_t a1, realityio::MaterialXStandalone *a2, const __CFURL *a3, uint64_t a4, void *a5)
{
  id v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16[2];
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v8 = a5;
  realityio::MaterialXStandalone::makeSource(a2, a3, (uint64_t)v18);
  if (v18[0])
  {
    v9 = (std::__shared_weak_count *)v20;
    v16[0] = v19;
    v16[1] = v20;
    if (v20)
    {
      v10 = (unint64_t *)(v20 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sourceToEntity(&v17, a1, v16, v8);
    v12 = v17;
    v17 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v17);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v18);

  return v12;
}

void sub_22FFCA750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sourceToEntity(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v8 = v7;
  v9 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v21 = 0;
  if (v7)
  {
    v20[0] = &off_24FDE9140;
    v20[1] = MEMORY[0x2348B5260](v7);
    v21 = v20;
  }
  realityio::MaterialXStandalone::generateSyncOnEngineQueue(a2, &v17, (uint64_t)v20, &v19);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v13 = 5;
LABEL_10:
    (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
  }
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v19)
    assetToEntity(a1);
  else
    *a1 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v19);

}

void sub_22FFCA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithErrorReporting(uint64_t a1, uint64_t a2, char *a3, realityio::MaterialXStandalone *a4, uint64_t a5)
{
  return RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithFiles(a1, a2, a3, a4, a5, 0);
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferWithFiles(uint64_t a1, uint64_t a2, char *a3, realityio::MaterialXStandalone *a4, uint64_t a5, void *a6)
{
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17[2];
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;

  v9 = a6;
  realityio::MaterialXStandalone::makeSource(a4, a3, (uint64_t)v19);
  if (v19[0])
  {
    v10 = (std::__shared_weak_count *)v21;
    v17[0] = v20;
    v17[1] = v21;
    if (v21)
    {
      v11 = (unint64_t *)(v21 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    sourceToEntity(&v18, a1, v17, v9);
    v13 = v18;
    v18 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v18);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v19);

  return v13;
}

void sub_22FFCAA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va1);

  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsync(uint64_t a1, const void *a2, char *a3, void *a4)
{
  RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles(a1, a2, a3, 0, a4);
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles(uint64_t a1, const void *a2, char *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  CFTypeRef cf;
  std::string __p;
  id v16;
  id v17;
  _QWORD block[4];
  uint64_t v19;
  CFTypeRef v20;
  std::string v21;
  id v22;
  id v23;
  uint64_t v24;
  std::string v25;
  const void *v26;

  v9 = a4;
  v10 = a5;
  v26 = a2;
  if (a2)
    CFRetain(a2);
  std::string::basic_string[abi:ne180100]<0>(&v25, a3);
  v24 = a1;
  if (a1)
  {
    RERetain();
    v11 = v24;
  }
  else
  {
    v11 = 0;
  }
  dispatch_get_global_queue(21, 0);
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles_block_invoke;
  block[3] = &__block_descriptor_88_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0_e5_v8__0l;
  v13 = v11;
  if (v11)
    RERetain();
  cf = v26;
  if (v26)
    CFRetain(v26);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    __p = v25;
  v16 = (id)MEMORY[0x2348B5260](v9);
  v17 = (id)MEMORY[0x2348B5260](v10);
  v19 = v13;
  if (v13)
    RERetain();
  v20 = cf;
  if (cf)
    CFRetain(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v21 = __p;
  v22 = (id)MEMORY[0x2348B5260](v16);
  v23 = (id)MEMORY[0x2348B5260](v17);
  dispatch_async(v12, block);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&cf);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v13);

  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&v20);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v19);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(&v26);

}

void sub_22FFCACA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  va_list va;

  va_start(va, a2);
  v8 = v6;
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(v8);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v5);
  RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0::~$_0((RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0 *)va);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(v7 - 104));
  if (*(char *)(v7 - 73) < 0)
    operator delete(*(void **)(v7 - 96));
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(v7 - 72));

  _Unwind_Resume(a1);
}

void sub_22FFCADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a9);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  const void *v5;
  std::string *v6;
  __int128 v7;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__l.__size_ = v4;
  if (v4)
    RERetain();
  v5 = *(const void **)(a2 + 40);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  if (v5)
    CFRetain(v5);
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  a1[3].__r_.__value_.__r.__words[0] = MEMORY[0x2348B5260](*(_QWORD *)(a2 + 72));
  result = MEMORY[0x2348B5260](*(_QWORD *)(a2 + 80));
  a1[3].__r_.__value_.__l.__size_ = result;
  return result;
}

void sub_22FFCAE64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;

  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(v2);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

_QWORD *__destroy_helper_block_ea8_32c66_ZTSKZ53RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFilesE3__0(uint64_t a1)
{

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(a1 + 40));
  return realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 32));
}

void RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0::~$_0(RIOEntityUsingMaterialCreateFromMtlxURLAsyncWithFiles::$_0 *this)
{

  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)this + 1);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this);
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsync(uint64_t a1, const void *a2, char *a3, char *a4, void *a5)
{
  RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles(a1, a2, a3, a4, 0, a5);
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles(uint64_t a1, const void *a2, char *a3, char *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const void *v16;
  std::string v17;
  std::string __p;
  id v19;
  id v20;
  _QWORD block[4];
  uint64_t v22;
  const void *v23[3];
  char v24;
  void *v25;
  char v26;
  id v27;
  id v28;
  uint64_t v29;
  std::string v30;
  std::string v31;
  const void *v32;

  v11 = a5;
  v12 = a6;
  v32 = a2;
  if (a2)
    CFRetain(a2);
  std::string::basic_string[abi:ne180100]<0>(&v31, a3);
  std::string::basic_string[abi:ne180100]<0>(&v30, a4);
  v29 = a1;
  if (a1)
  {
    RERetain();
    v13 = v29;
  }
  else
  {
    v13 = 0;
  }
  dispatch_get_global_queue(21, 0);
  v14 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles_block_invoke;
  block[3] = &__block_descriptor_112_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0_e5_v8__0l;
  v15 = v13;
  if (v13)
    RERetain();
  v16 = v32;
  if (v32)
    CFRetain(v32);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v17 = v31;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p = v30;
  v19 = (id)MEMORY[0x2348B5260](v11);
  v20 = (id)MEMORY[0x2348B5260](v12);
  RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0((uint64_t)&v22, &v15);
  dispatch_async(v14, block);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v16);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v15);

  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete((void *)v23[1]);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v23);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v22);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v32);

}

void sub_22FFCB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  const void **v19;
  uint64_t v20;

  if (a16 < 0)
    operator delete(__p);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v19);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&a9);

  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(v20 - 128));
  if (*(char *)(v20 - 97) < 0)
    operator delete(*(void **)(v20 - 120));
  if (*(char *)(v20 - 73) < 0)
    operator delete(*(void **)(v20 - 96));
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v20 - 72));

  _Unwind_Resume(a1);
}

void sub_22FFCB2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a9);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0(uint64_t a1, uint64_t a2)
{
  return RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0(a1 + 32, (uint64_t *)(a2 + 32));
}

uint64_t RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::$_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v4)
    RERetain();
  v5 = (const void *)a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    CFRetain(v5);
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v6;
  }
  v7 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_QWORD *)(a1 + 64) = MEMORY[0x2348B5260](a2[8]);
  *(_QWORD *)(a1 + 72) = MEMORY[0x2348B5260](a2[9]);
  return a1;
}

void sub_22FFCB398(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  void **v3;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v3);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v2);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)v1);
  _Unwind_Resume(a1);
}

_QWORD *__destroy_helper_block_ea8_32c81_ZTSKZ68RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFilesE3__0(uint64_t a1)
{

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(a1 + 40));
  return realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 32));
}

void RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0::~$_0(RIOEntityUsingMaterialCreateFromInMemoryMtlxDataBufferAsyncWithFiles::$_0 *this)
{

  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)this + 1);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this);
}

uint64_t MaterialToEntity::setup(uint64_t *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int **v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD v39[2];
  void *v40[2];
  char v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[8];
  uint64_t v48;
  void *__p;
  uint64_t v50;
  _BYTE v51[8];
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  _BYTE v55[8];
  uint64_t v56;
  _BYTE v57[8];

  v8 = (unsigned int *)*a1;
  *a1 = a4[2];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a4 + 2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, v8);
  CFRelease(a4);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v9 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v53;
  v53 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)(a1 + 1), v9);
  v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v53);
  std::string::basic_string[abi:ne180100]<0>(v10, "/root");
  MEMORY[0x2348B26F8](v57, &v53);
  if ((v55[7] & 0x80000000) != 0)
    operator delete(v53);
  v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/root/cube");
  MEMORY[0x2348B26F8](&v45, &__p);
  MEMORY[0x2348B274C](v40, "Cube");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)v40);
  if (((uint64_t)v40[0] & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v40[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if ((v51[7] & 0x80000000) != 0)
    operator delete(__p);
  v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v45, a3);
  MEMORY[0x2348B26F8](&v43, &v45);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v57, NameToken);
  v39[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)v39);
  if ((v39[0] & 7) != 0)
  {
    v16 = (unsigned int *)(v39[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  if ((v47[7] & 0x80000000) != 0)
    operator delete(v45);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
  v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v18);
  v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v43);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
  std::string::basic_string[abi:ne180100]<0>(v40, a3);
  MEMORY[0x2348B26F8](v42, v40);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v39, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v42);
  if (v41 < 0)
    operator delete(v40[0]);
  v20 = v44;
  if (v44)
  {
    v21 = (unsigned int *)(v44 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if ((v48 & 7) != 0)
  {
    v24 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v47);
  if (v46)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
  MEMORY[0x2348B274C](v40, "material:binding");
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)v40);
  if (((uint64_t)v40[0] & 7) != 0)
  {
    v26 = (unsigned int *)((unint64_t)v40[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, v40);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v40);
  v28 = (uint64_t *)RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(a1 + 1);
  v29 = (const void *)a1[2];
  if (v29)
    CFRelease(v29);
  a1[2] = (uint64_t)v28;
  v30 = RIOImportSessionCreateWithStage(v28, a2, 0, 0);
  v31 = (const void *)a1[3];
  if (v31)
    CFRelease(v31);
  a1[3] = v30;
  if ((v48 & 7) != 0)
  {
    v32 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v47);
  if (v46)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
  if ((v52 & 7) != 0)
  {
    v34 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v51);
  if (v50)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
  if ((v56 & 7) != 0)
  {
    v36 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v55);
  if (v54)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v57);
}

void sub_22FFCB920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v36 - 88));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v36 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences(pxrInternal__aapl__pxrReserved__::UsdReferences *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(_QWORD *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrUsdStageGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
  }
  return v3;
}

BOOL MaterialToEntity::setup(uint64_t a1, uint64_t a2, const char *a3, char *a4, CFDataRef theData)
{
  uint64_t *v8;

  v8 = (uint64_t *)RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting(a3, theData, *(id **)(a1 + 32));
  if (v8)
    MaterialToEntity::setup((uint64_t *)a1, a2, a4, v8);
  return v8 != 0;
}

uint64_t MaterialToEntity::getModelEntity(MaterialToEntity *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (result && (result = REEntityGetChildCount()) != 0)
  {
    result = REEntityGetChild();
    *(_QWORD *)this = result;
    if (result)
      return RERetain();
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

const void *RIOEntityUsingMaterialCreateFromURLWithErrorReporting(uint64_t a1, void *a2, char *a3, _QWORD *a4)
{
  id v7;
  realityio *v8;
  uint64_t *v9;
  const void *v10;
  NSObject *v11;
  const void *v13;
  uint8_t buf[16];
  __int128 v15;
  uint64_t v16;

  v7 = a2;
  v8 = (realityio *)objc_msgSend(v7, "isFileURL");
  if ((v8 & 1) != 0)
  {
    v16 = 0;
    *(_OWORD *)buf = 0u;
    v15 = 0u;
    v9 = (uint64_t *)RIOPxrUsdStageCreateWithFilePathWithErrorReporting((char *)objc_msgSend(objc_retainAutorelease(v7), "fileSystemRepresentation"), 0);
    if (v9)
    {
      MaterialToEntity::setup((uint64_t *)buf, a1, a3, v9);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v15 + 1) + 32) + 24))(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 32), 1);
      MaterialToEntity::getModelEntity((MaterialToEntity *)&v13, *(_QWORD *)(*((_QWORD *)&v15 + 1) + 32));
      v10 = v13;
      v13 = 0;
      realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v13);
    }
    else
    {
      v13 = 0;
      *a4 = 0;
      realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v13);
      v10 = 0;
    }
    MaterialToEntity::~MaterialToEntity((MaterialToEntity *)buf);
  }
  else
  {
    v11 = *(NSObject **)(realityio::logObjects(v8) + 32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v11, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", buf, 2u);
    }
    v10 = 0;
  }

  return v10;
}

void sub_22FFCBDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)va);

  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromURLAsync(uint64_t a1, void *a2, char *a3, void *a4)
{
  id v7;
  id v8;
  realityio *v9;
  char *v10;
  unint64_t *v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  char *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::string v27;
  std::string __p;
  char *v29;
  std::__shared_weak_count *v30;
  std::string v31;
  std::string buf;
  uint64_t v33;
  _QWORD block[4];
  id v35;

  v7 = a4;
  v8 = a2;
  v9 = (realityio *)objc_msgSend(v8, "isFileURL");
  if ((v9 & 1) != 0)
  {
    v33 = a1;
    if (a1)
      RERetain();
    std::string::basic_string[abi:ne180100]<0>(&buf, (char *)objc_msgSend(objc_retainAutorelease(v8), "fileSystemRepresentation"));
    std::string::basic_string[abi:ne180100]<0>(&v31, a3);
    v10 = (char *)operator new(0x40uLL);
    *((_QWORD *)v10 + 1) = 0;
    v11 = (unint64_t *)(v10 + 8);
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &off_24FDE9580;
    *(_OWORD *)(v10 + 40) = 0u;
    *((_QWORD *)v10 + 7) = 0;
    *(_OWORD *)(v10 + 24) = 0u;
    v29 = v10 + 24;
    v30 = (std::__shared_weak_count *)v10;
    dispatch_get_global_queue(21, 0);
    v12 = objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3321888768;
    v22[2] = __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke_2;
    v22[3] = &unk_24FDE90C8;
    v24 = v10 + 24;
    v25 = (std::__shared_weak_count *)v10;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v26 = v33;
    if (v33)
      RERetain();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v27, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    else
      v27 = buf;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      __p = v31;
    v23 = v7;
    dispatch_async(v12, v22);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v26);
    v16 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v30;
    if (v30)
    {
      v20 = (unint64_t *)&v30->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v33);
  }
  else
  {
    v14 = *(NSObject **)(realityio::logObjects(v9) + 32);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_22FF26000, v14, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)&buf, 2u);
    }
    REEngineConfigurationCreateFromEngine();
    REEngineConfigurationGetEngineQueue();
    v15 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __RIOEntityUsingMaterialCreateFromURLAsync_block_invoke;
    block[3] = &unk_24FDE9068;
    v35 = v7;
    dispatch_async(v15, block);

  }
}

void sub_22FFCC14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  if (a23 < 0)
    operator delete(__p);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v37);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38);

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v39 - 121) < 0)
    operator delete(*(void **)(v39 - 144));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(v39 - 112));

  _Unwind_Resume(a1);
}

void sub_22FFCC254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22FFCC494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void MaterialToEntity::evaluateAsync(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*a1 + 24);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3321888768;
  v13[2] = ___ZN16MaterialToEntity13evaluateAsyncENSt3__110shared_ptrIS_EENS0_8functionIFvP8REEntityP9__CFErrorEEE_block_invoke;
  v13[3] = &__block_descriptor_80_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE_e5_v8__0l;
  v4 = v14;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v14, a2);
  v5 = (std::__shared_weak_count *)a1[1];
  v16 = *a1;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIOImportSessionSetSceneUpdatePassCompletion(v3, v13);
  v8 = *(_QWORD *)(*(_QWORD *)(*a1 + 24) + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, 0);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return;
    v12 = 5;
    v4 = v15;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v12))(v4);
}

void sub_22FFCC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v18);
  if (a17 == v17)
  {
    v20 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v20))(v17);
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_22FFCC6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 40);
}

void __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    RERetain();
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v8;
  }
  v9 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_22FFCC7F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v3 + 87) < 0)
    operator delete(*v4);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 56));
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 40);
}

const void *RIOEntityUsingMaterialCreateFromInMemoryDataBufferWithErrorReporting(uint64_t a1, const char *a2, char *a3, CFDataRef theData, _QWORD *a5)
{
  const void *v6;
  CFTypeRef v7;
  const void *v9;
  __int128 v10;
  __int128 v11;
  CFTypeRef *v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  if (MaterialToEntity::setup((uint64_t)&v10, a1, a2, a3, theData))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)&v11 + 1) + 32) + 24))(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 32), 1);
    MaterialToEntity::getModelEntity((MaterialToEntity *)&v9, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 32));
    v6 = v9;
    v9 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v9);
  }
  else
  {
    if (v12)
    {
      v7 = *v12;
      if (*v12)
        CFRetain(*v12);
    }
    else
    {
      v7 = 0;
    }
    v9 = 0;
    *a5 = v7;
    realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v9);
    v6 = 0;
  }
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)&v10);
  return v6;
}

void sub_22FFCC944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)va);
  _Unwind_Resume(a1);
}

void RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync(uint64_t a1, char *a2, char *a3, const void *a4, void *a5)
{
  id v9;
  char *v10;
  unint64_t *v11;
  NSObject *v12;
  unint64_t v13;
  id v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD block[4];
  id v22;
  char *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::string v26;
  std::string __p;
  const void *v28[2];
  std::__shared_weak_count *v29;
  std::string v30;
  std::string v31;
  const void *v32;
  uint64_t v33;

  v9 = a5;
  v33 = a1;
  if (a1)
    RERetain();
  v32 = a4;
  if (a4)
    CFRetain(a4);
  std::string::basic_string[abi:ne180100]<0>(&v31, a2);
  std::string::basic_string[abi:ne180100]<0>(&v30, a3);
  v10 = (char *)operator new(0x40uLL);
  *((_QWORD *)v10 + 1) = 0;
  v11 = (unint64_t *)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24FDE9580;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_QWORD *)v10 + 7) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  v28[1] = v10 + 24;
  v29 = (std::__shared_weak_count *)v10;
  dispatch_get_global_queue(21, 0);
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = __RIOEntityUsingMaterialCreateFromInMemoryDataBufferAsync_block_invoke;
  block[3] = &unk_24FDE9100;
  v23 = v10 + 24;
  v24 = (std::__shared_weak_count *)v10;
  do
    v13 = __ldxr(v11);
  while (__stxr(v13 + 1, v11));
  v25 = v33;
  if (v33)
    RERetain();
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v26 = v31;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p = v30;
  v28[0] = v32;
  if (v32)
    CFRetain(v32);
  v14 = v9;
  v22 = v14;
  dispatch_async(v12, block);

  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v25);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v32);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v33);

}

void sub_22FFCCBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  if (a23 < 0)
    operator delete(__p);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v33);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v34);

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v35 - 80));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(v35 - 72));

  _Unwind_Resume(a1);
}

void sub_22FFCCEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22FFCCF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c43_ZTSN9realityio12WrappedCFRefIPK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  CFTypeRef result;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    RERetain();
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v8;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v9;
  }
  result = *(CFTypeRef *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_22FFCD070(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v3 + 87) < 0)
    operator delete(*v4);
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE56c42_ZTSN9realityio12WrappedRERefIP8REEngineEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c43_ZTSN9realityio12WrappedCFRefIPK8__CFDataEE(uint64_t a1)
{
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 56));
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 40);
}

unint64_t RIOImportSessionGetSceneCount(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  if (!a1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  getImportedScenes(a1, &v3);
  v1 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4);
  v6 = (void **)&v3;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v6);
  return v1;
}

void sub_22FFCD180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unsigned int **getImportedScenes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  realityio::BuilderDependencyDAG *v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  pxrInternal__aapl__pxrReserved__ *IsValid;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsPseudoRoot;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  realityio::StageSceneLibraryAssetBuilder *v44;
  unint64_t *v45;
  unint64_t v46;
  char *PrimPath;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  std::string *v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  unint64_t *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v90;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v92;
  _OWORD v93[4];
  char v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  realityio::StageSceneLibraryAssetBuilder *v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v109;
  int v110;
  int v111;
  __int128 v112;
  uint64_t v113;
  realityio::StageSceneLibraryAssetBuilder *v114;
  int v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  unsigned int *v124[2];

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 80;
      std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(std::__shared_weak_count **)(v6 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(realityio::BuilderDependencyDAG **)(v7 + 248);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v11 = *(realityio::BuilderDependencyDAG **)(v7 + 248);
  }
  v124[0] = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v124);
  v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v124);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v13);
  IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119);
  if ((IsValid & 1) != 0)
  {
    UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsValid);
    v17 = *(_QWORD *)UsdPrimDefaultPredicate;
    v16 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
    v18 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v17 & 0x2000) != 0 || (v16 & 0x2000) == 0))
    {
      v17 |= 0x2000uLL;
      v16 &= ~0x2000uLL;
    }
    v92 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17;
    *(_QWORD *)&v93[0] = v16;
    *((_QWORD *)&v93[0] + 1) = v18;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v119, (uint64_t *)&v92, (uint64_t)&v109);
    v104 = v119;
    v105 = v120;
    if (v120)
    {
      v19 = (unint64_t *)(v120 + 48);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v106, &v121);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v107, &v122);
    v108 = v123;
    if ((v123 & 7) != 0)
    {
      v21 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        v108 &= 0xFFFFFFFFFFFFFFF8;
    }
    v92 = v109;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v93, &v110);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v93 + 1, &v111);
    *(_OWORD *)((char *)v93 + 8) = v112;
    *((_QWORD *)&v93[1] + 1) = v113;
    v100 = v114;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v101, &v115);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v101 + 1, &v116);
    v102 = v117;
    v103 = v118;
    while (v92 != v100
         || *(std::__shared_weak_count **)&v93[0] != v101
         || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)v93 + 8, (uint64_t)&v102) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v92, (uint64_t)&v95);
      if (realityio::isSceneLibrary((realityio *)&v95, v23))
      {
        v104 = v95;
        v26 = v96;
        if (v96)
        {
          v27 = (unint64_t *)(v96 + 48);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v105;
        v105 = v26;
        if (v29)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v106, &v97);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v107, &v98);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v108, &v99);
        if ((v99 & 7) != 0)
        {
          v30 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
        if (v96)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v96);
        break;
      }
      if ((v99 & 7) != 0)
      {
        v24 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
      if (v96)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v96);
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v92);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v93);
    IsPseudoRoot = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v104);
    if ((_DWORD)IsPseudoRoot)
    {
      v33 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsPseudoRoot);
      MEMORY[0x2348B274C](&v100, realityio::kStageSceneLibraryAssetBuilderIdentifier);
      realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v11, v33, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v100, &v92);
      v34 = v92;
      v35 = *(std::__shared_weak_count **)&v93[0];
      if (*(_QWORD *)&v93[0])
      {
        v36 = (unint64_t *)(*(_QWORD *)&v93[0] + 16);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v38 = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((v100 & 7) != 0)
      {
        v40 = (unsigned int *)((unint64_t)v100 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if (v35 && (v42 = std::__shared_weak_count::lock(v35)) != 0)
      {
        v43 = v42;
        if (v34
        {
          v100 = v44;
          v101 = v43;
          v45 = (unint64_t *)&v43->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        else
        {
          v100 = 0;
          v101 = 0;
        }
        v63 = (unint64_t *)&v43->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        if (v100)
        {
          realityio::StageSceneLibraryAssetBuilder::getImportedScene(v100, (std::string *)&v92);
          v65 = BYTE7(v93[2]);
          if (SBYTE7(v93[2]) < 0)
            v65 = *((_QWORD *)&v93[1] + 1);
          if (v65)
          {
            v66 = HIBYTE(v93[3]);
            if (v93[3] < 0)
              v66 = *(_QWORD *)&v93[3];
            if (v66)
            {
              v67 = a2[1];
              if (v67 >= a2[2])
              {
                v70 = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>(a2, (uint64_t)&v92);
              }
              else
              {
                *(_BYTE *)v67 = (_BYTE)v92;
                *(_OWORD *)(v67 + 8) = v93[0];
                v93[0] = 0u;
                v68 = *(_QWORD *)&v93[2];
                *(_OWORD *)(v67 + 24) = v93[1];
                *(_QWORD *)(v67 + 40) = v68;
                memset(&v93[1], 0, 24);
                v69 = *((_QWORD *)&v93[3] + 1);
                *(_OWORD *)(v67 + 48) = *(_OWORD *)((char *)&v93[2] + 8);
                *(_QWORD *)(v67 + 64) = v69;
                memset((char *)&v93[2] + 8, 0, 24);
                *(_BYTE *)(v67 + 72) = v94;
                v70 = v67 + 80;
              }
              a2[1] = v70;
            }
          }
          if (SHIBYTE(v93[3]) < 0)
            operator delete(*((void **)&v93[2] + 1));
          if (SBYTE7(v93[2]) < 0)
            operator delete(*(void **)&v93[1]);
          realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)v93 + 1);
          realityio::WrappedRERef<void *>::~WrappedRERef(v93);
        }
      }
      else
      {
        v100 = 0;
        v101 = 0;
      }
      v60 = v101;
      if (!v101)
        goto LABEL_131;
      v84 = (unint64_t *)&v101->__shared_owners_;
      do
        v62 = __ldaxr(v84);
      while (__stlxr(v62 - 1, v84));
      goto LABEL_129;
    }
    PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v104);
    MEMORY[0x2348B274C](&v100, realityio::kSceneAssetBuilderIdentifier);
    realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v100, &v92);
    v48 = v92;
    v35 = *(std::__shared_weak_count **)&v93[0];
    if (*(_QWORD *)&v93[0])
    {
      v49 = (unint64_t *)(*(_QWORD *)&v93[0] + 16);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      v51 = (unint64_t *)&v35->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if ((v100 & 7) != 0)
    {
      v53 = (unsigned int *)((unint64_t)v100 & 0xFFFFFFFFFFFFFFF8);
      do
        v54 = __ldxr(v53);
      while (__stlxr(v54 - 2, v53));
    }
    if (v35 && (v55 = std::__shared_weak_count::lock(v35)) != 0)
    {
      v56 = v55;
      if (v48
      {
        v92 = v57;
        *(_QWORD *)&v93[0] = v56;
        v58 = (unint64_t *)&v56->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      else
      {
        v92 = 0;
        *(_QWORD *)&v93[0] = 0;
      }
      v71 = (unint64_t *)&v56->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      v73 = v92;
      if (!v92)
        goto LABEL_82;
      std::mutex::lock((std::mutex *)((char *)v92 + 304));
      std::mutex::unlock((std::mutex *)((char *)v73 + 304));
      if ((uint64_t *)((char *)v73 + 280) == a2)
        goto LABEL_82;
      v75 = *((_QWORD *)v73 + 35);
      v74 = *((_QWORD *)v73 + 36);
      v76 = 0xCCCCCCCCCCCCCCCDLL * ((v74 - v75) >> 4);
      v77 = *a2;
      if (0xCCCCCCCCCCCCCCCDLL * ((a2[2] - *a2) >> 4) >= v76)
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - v77) >> 4) >= v76)
        {
          v90 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(v75, v74, v77);
          for (i = a2[1]; i != v90; std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a2 + 2), i))i -= 80;
          a2[1] = v90;
          goto LABEL_82;
        }
        v83 = v75 + 16 * ((a2[1] - v77) >> 4);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(v75, v83, v77);
        v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>((uint64_t)(a2 + 2), v83, v74, (std::string *)a2[1]);
      }
      else
      {
        std::vector<realityio::ImportedScene>::__vdeallocate((void **)a2);
        if (v76 > 0x333333333333333)
          goto LABEL_149;
        v78 = 0x999999999999999ALL * ((a2[2] - *a2) >> 4);
        if (v78 <= v76)
          v78 = 0xCCCCCCCCCCCCCCCDLL * ((v74 - v75) >> 4);
        v79 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - *a2) >> 4) >= 0x199999999999999 ? 0x333333333333333 : v78;
        if (v79 > 0x333333333333333)
LABEL_149:
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v80 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>((uint64_t)(a2 + 2), v79);
        *a2 = (uint64_t)v80;
        a2[1] = (uint64_t)v80;
        a2[2] = (uint64_t)v80 + 80 * v81;
        v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>((uint64_t)(a2 + 2), v75, v74, v80);
      }
      a2[1] = (uint64_t)v82;
    }
    else
    {
      v92 = 0;
      *(_QWORD *)&v93[0] = 0;
    }
LABEL_82:
    v60 = *(std::__shared_weak_count **)&v93[0];
    if (!*(_QWORD *)&v93[0])
    {
LABEL_131:
      if (v35)
        std::__shared_weak_count::__release_weak(v35);
      if ((v108 & 7) != 0)
      {
        v85 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
      if (v105)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v105);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
      goto LABEL_139;
    }
    v61 = (unint64_t *)(*(_QWORD *)&v93[0] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
LABEL_129:
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    goto LABEL_131;
  }
LABEL_139:
  if ((v123 & 7) != 0)
  {
    v87 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
  if (v120)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v120);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v124);
}

void sub_22FFCDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;

  *(_QWORD *)(v37 + 8) = v38;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::__shared_weak_count::__release_weak(v39);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a37);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *)(v40 - 208));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v40 - 128));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(v40 - 96));
  _Unwind_Resume(a1);
}

const __CFString *RIOImportSessionCopySceneAssetName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  CFStringRef v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if (!a1)
    return &stru_24FDFD990;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  getImportedScenes(a1, &v10);
  if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 4) <= a2)
  {
    v8 = &stru_24FDFD990;
  }
  else
  {
    v3 = v10 + 80 * a2;
    v6 = *(const char **)(v3 + 48);
    v4 = v3 + 48;
    v5 = v6;
    if (*(char *)(v4 + 23) >= 0)
      v7 = (const char *)v4;
    else
      v7 = v5;
    v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  v13 = (void **)&v10;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v13);
  return v8;
}

void sub_22FFCDD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

const __CFString *RIOImportSessionCopySceneName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  CFStringRef v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if (!a1)
    return &stru_24FDFD990;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  getImportedScenes(a1, &v10);
  if (0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 4) <= a2)
  {
    v8 = &stru_24FDFD990;
  }
  else
  {
    v3 = v10 + 80 * a2;
    v6 = *(const char **)(v3 + 24);
    v4 = v3 + 24;
    v5 = v6;
    if (*(char *)(v4 + 23) >= 0)
      v7 = (const char *)v4;
    else
      v7 = v5;
    v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  v13 = (void **)&v10;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v13);
  return v8;
}

void sub_22FFCDDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL RIOImportSessionIsSceneActive(uint64_t a1, unint64_t a2)
{
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  if (!a1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  getImportedScenes(a1, &v5);
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4) > a2 && *(unsigned __int8 *)(v5 + 80 * a2 + 72) != 0;
  v8 = (void **)&v5;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v3;
}

void sub_22FFCDEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionRegisterBuilderGenerator(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1)
  {
    if (v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(v6 + 56);
      if (v5)
      {
        if (*(_QWORD *)(v6 + 40))
        {
          v10[0] = &off_24FDE9660;
          v10[1] = a1;
          v10[2] = MEMORY[0x2348B5260](v3);
          v11 = v10;
          v5 = realityio::BuilderRegistry::registerBuilder(v5, v10);
          v7 = v11;
          if (v11 == v10)
          {
            v8 = 4;
            v7 = v10;
            goto LABEL_10;
          }
          if (v11)
          {
            v8 = 5;
LABEL_10:
            (*(void (**)(void))(*v7 + 8 * v8))();
          }
        }
        else
        {
          v5 = 1;
        }
      }
    }
  }

  return v5;
}

void sub_22FFCDFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t *RIOImportSessionUnregisterBuilderWithIdentifier(uint64_t a1, __CFString *this)
{
  uint64_t *v2;
  int v4;
  std::string __p;
  std::string v7;
  _BYTE v8[8];
  std::string v9;

  v2 = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v8);
    if (v8[0])
    {
      v4 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v7, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      else
        v7 = v9;
      v2 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 56);
      if (v2)
      {
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
        else
          __p = v7;
        v2 = (uint64_t *)realityio::BuilderRegistry::unregisterBuilder(v2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v7.__r_.__value_.__l.__data_);
        if ((v4 & 0x80000000) == 0)
          return v2;
      }
      else if ((v4 & 0x80000000) == 0)
      {
        return v2;
      }
      operator delete(v9.__r_.__value_.__l.__data_);
      return v2;
    }
    return 0;
  }
  return v2;
}

void sub_22FFCE0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24)
{
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__CFArray *RIOImportSessionCopyAllRegisteredBuilderIdentifiers(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Mutable;
  __CFArray *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t EmptyString;
  const char *v13;
  CFStringRef v14;
  unint64_t *v15;
  unint64_t v16;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = Mutable;
  if (a1)
  {
    v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 56);
    if (v4)
    {
      v5 = *v4;
      v6 = v4[1];
      while (v5 != v6)
      {
        v7 = *(_QWORD **)v5;
        v8 = *(std::__shared_weak_count **)(v5 + 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
        if (v11)
          EmptyString = v11 + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
        if (*(char *)(EmptyString + 23) >= 0)
          v13 = (const char *)EmptyString;
        else
          v13 = *(const char **)EmptyString;
        v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
        CFArrayAppendValue(v3, v14);
        CFRelease(v14);
        if (v8)
        {
          v15 = (unint64_t *)&v8->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 += 16;
      }
    }
  }
  return v3;
}

void sub_22FFCE254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFMutableArrayRef RIOImportSessionGetBuildersAtPrimPath()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
}

CFMutableArrayRef RIOImportSessionCopyBuildersAtPrimPath()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
}

uint64_t RIOImportSessionCopyBuilderAtPrimPathWithIdentifier(uint64_t a1, uint64_t a2, __CFString *this)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  realityio::BuilderDependencyDAG *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t Instance;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::string v22;
  _BYTE v23[8];
  std::string __p;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = 0;
  if (!a2 || !a1 || !this)
    return v3;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(std::__shared_weak_count **)(v5 + 48);
  v25 = v6;
  v26 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
    v3 = 0;
    if (!v7)
      return v3;
    goto LABEL_28;
  }
  v10 = *(realityio::BuilderDependencyDAG **)(v6 + 248);
  realityio::CFStringCopyUTF8String(this, (uint64_t)v23);
  if (v23[0])
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v22 = __p;
    MEMORY[0x2348B2764](&v20, &v22);
    realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, &v21);
    if ((v20 & 7) != 0)
    {
      v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if (RIOBuilderGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
    Instance = _CFRuntimeCreateInstance();
    v3 = Instance;
    if (Instance)
    {
      *(_OWORD *)(Instance + 16) = v21;
    }
    else
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (v23[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v3 = 0;
  }
  v7 = v26;
  if (v26)
  {
LABEL_28:
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v3;
}

void sub_22FFCE490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;
  uint64_t v27;

  if (v26 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(realityio::BuilderDependencyDAG *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  realityio::BuilderDependencyDAG::getWeakBuilderAtPrimPathWithBuilderIdentifier(this, a2, a3, &v6);
  *a4 = 0;
  a4[1] = 0;
  if (v7)
  {
    v5 = std::__shared_weak_count::lock(v7);
    a4[1] = v5;
    if (v5)
      *a4 = v6;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t RIOImportSessionGetEntityAtPrimPath(uint64_t a1, uint64_t a2)
{
  uint64_t EntityAtPrimPath;
  uint64_t v4;
  int v6;
  int v7;

  EntityAtPrimPath = 0;
  if (a1 && a2)
  {
    v4 = a1 + 16;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)(a2 + 20));
    EntityAtPrimPath = realityio::ImportSession::getEntityAtPrimPath(v4, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  return EntityAtPrimPath;
}

void sub_22FFCE5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionCopyPrimPathForEntity()
{
  char **Object;
  uint64_t v1;
  void *__p[2];
  char v4;
  int v5;

  if (!REComponentClassFromName() || !REEntityGetCustomComponent())
    return 0;
  Object = (char **)RECustomComponentGetObject();
  std::string::basic_string[abi:ne180100]<0>(__p, *Object);
  MEMORY[0x2348B26F8](&v5, __p);
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4 < 0)
    operator delete(__p[0]);
  return v1;
}

void sub_22FFCE6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionOverridePrimPathToEntityForSceneAssetEntities(uint64_t a1, uint64_t a2)
{
  return realityio::ImportSessionImpl::generateOverridePrimPathToEntityForActiveSceneAssets(*(_QWORD **)(a1 + 32), a2);
}

__CFArray *RIOImportSessionCopyExtraAssetTags(uint64_t a1)
{
  __CFArray *Mutable;
  char **v3;
  std::string *p_p;
  CFStringRef v5;
  char *v6;
  char **v7;
  BOOL v8;
  std::string __p;
  char *v11;
  char **v12;
  char *v13[2];

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    realityio::ImportSession::extraAssets((realityio::ImportSession *)(a1 + 16), (uint64_t *)&v12);
    v3 = v12;
    if (v12 != v13)
    {
      do
      {
        if (*((char *)v3 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, v3[4], (std::string::size_type)v3[5]);
        else
          __p = *(std::string *)(v3 + 4);
        v11 = v3[7];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v5 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
        CFArrayAppendValue(Mutable, v5);
        CFRelease(v5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v6 = v3[1];
        if (v6)
        {
          do
          {
            v7 = (char **)v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char **)v3[2];
            v8 = *v7 == (char *)v3;
            v3 = v7;
          }
          while (!v8);
        }
        v3 = v7;
      }
      while (v7 != v13);
    }
    std::__tree<std::string>::destroy((uint64_t)&v12, v13[0]);
  }
  return Mutable;
}

void sub_22FFCE824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, char *a18)
{
  std::__tree<std::string>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSession::extraAssets@<X0>(realityio::ImportSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  std::mutex::lock((std::mutex *)(v3 + 184));
  std::mutex::unlock((std::mutex *)(v3 + 184));
  return std::map<std::string,REAsset *>::map[abi:ne180100](a2, (const void ***)(v3 + 160));
}

char *RIOImportSessionGetExtraAssetWithTag(uint64_t a1, char *a2)
{
  char *v2;
  char *v4;
  char **v5;
  char **v6;
  const void **v7;
  _BOOL4 v8;
  char *v9;
  const void **v10;
  void *__p[2];
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v2 = 0;
  if (a1 && a2)
  {
    realityio::ImportSession::extraAssets((realityio::ImportSession *)(a1 + 16), &v14);
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v4 = v15;
    if (!v15)
      goto LABEL_13;
    v5 = &v15;
    do
    {
      v6 = v5;
      v7 = (const void **)(v4 + 32);
      v8 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v16, (const void **)v4 + 4, (const void **)__p);
      v9 = v4 + 8;
      if (!v8)
      {
        v9 = v4;
        v5 = (char **)v4;
      }
      v4 = *(char **)v9;
    }
    while (*(_QWORD *)v9);
    if (v5 == &v15
      || (!v8 ? (v10 = v7) : (v10 = (const void **)(v6 + 4)),
          std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v16, (const void **)__p, v10)))
    {
LABEL_13:
      v5 = &v15;
    }
    if (v13 < 0)
      operator delete(__p[0]);
    if (&v15 == v5)
      v2 = 0;
    else
      v2 = v5[7];
    std::__tree<std::string>::destroy((uint64_t)&v14, v15);
  }
  return v2;
}

void sub_22FFCE99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  std::__tree<std::string>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

BOOL RIOImportSessionSetExtraAssetWithTag(uint64_t a1, char *a2, uint64_t a3)
{
  _BOOL8 v3;
  void *__p[2];
  char v8;

  v3 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, a2);
        v3 = realityio::ImportSessionImpl::addExtraAsset(*(_QWORD *)(a1 + 32), (const void **)__p, a3);
        if (v8 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v3;
}

void sub_22FFCEA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOImportSessionRemoveExtraAssetWithTag(uint64_t a1, char *a2)
{
  void *__p[2];
  char v4;

  if (a1 && a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    realityio::ImportSessionImpl::removeExtraAsset(*(_QWORD *)(a1 + 32), (const void **)__p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_22FFCEA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOImportSessionRegisterAudioAsset(realityio *a1, char *a2, char *a3, uint64_t a4)
{
  NSObject *v7;
  std::string __p;
  uint8_t buf[32];

  if (a1 && a2 && a3 && a4)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, a3);
    realityio::ImportSession::registerAudioAsset((uint64_t)a1 + 16, (__int128 *)buf, &__p, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v7 = *(NSObject **)(realityio::logObjects(a1) + 32);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "RIOImportSessionRegisterAudioAsset has been called with nullptrs and that is not supported.", buf, 2u);
    }
  }
}

void sub_22FFCEB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL RIOImportSessionReloadAsset(uint64_t a1, void *a2, CFErrorRef *a3)
{
  id v5;
  realityio *v6;
  _BOOL8 v7;
  NSObject *v8;
  void *__p[2];
  char v11;

  v5 = a2;
  v6 = (realityio *)objc_msgSend(v5, "isFileURL");
  if ((v6 & 1) == 0)
  {
    v8 = *(NSObject **)(realityio::logObjects(v6) + 32);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)__p, 2u);
    }
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v5), "fileSystemRepresentation"));
  v7 = realityio::ImportSession::reloadAsset(a1 + 16, (uint64_t)__p, a3);
  if (v11 < 0)
    operator delete(__p[0]);
LABEL_8:

  return v7;
}

void sub_22FFCEC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionGetEngineRef(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 32) + 16);
  return result;
}

_QWORD *RIOImportSessionSetMissingMaterial(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result;
    v5 = a2;
    if (a2)
    {
      RERetain();
      v4 = v3[4];
      v6 = a2;
      RERetain();
    }
    else
    {
      v4 = result[4];
      v6 = 0;
    }
    realityio::ImportSessionImpl::setMissingMaterial(v4, &v6);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
    return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  }
  return result;
}

void sub_22FFCED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a9);
  _Unwind_Resume(a1);
}

void RIOImportSessionGatherUsedTextureInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (a1)
  {
    v10 = 0;
    if (v5)
    {
      v9[0] = &off_24FDE96F0;
      v9[1] = MEMORY[0x2348B5260](v5);
      v10 = v9;
    }
    realityio::ImportSession::gatherTextureInfo(a1 + 16, a2, 1, (uint64_t)v9);
    v7 = v10;
    if (v10 == v9)
    {
      v8 = 4;
      v7 = v9;
      goto LABEL_8;
    }
    if (v10)
    {
      v8 = 5;
LABEL_8:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }

}

void sub_22FFCEE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void RIOImportSessionGatherTextureInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (a1)
  {
    v10 = 0;
    if (v5)
    {
      v9[0] = &off_24FDE96F0;
      v9[1] = MEMORY[0x2348B5260](v5);
      v10 = v9;
    }
    realityio::ImportSession::gatherTextureInfo(a1 + 16, a2, 0, (uint64_t)v9);
    v7 = v10;
    if (v10 == v9)
    {
      v8 = 4;
      v7 = v9;
      goto LABEL_8;
    }
    if (v10)
    {
      v8 = 5;
LABEL_8:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }

}

void sub_22FFCEF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void RIOImportSessionGatherMeshEstimates(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Text;
  unsigned int *v9;
  void **v10[3];
  unsigned int v11;
  unsigned int *v12;
  void *__p[3];
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16[3];
  char *v17[3];

  v3 = a2;
  if (a1)
  {
    v12 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v12);
    realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v12, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v12);
    if (v15 != v14)
    {
      v4 = 0;
      v5 = 0;
      if ((unint64_t)((v15 - v14) / 104) <= 1)
        v6 = 1;
      else
        v6 = (v15 - v14) / 104;
      do
      {
        if (0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 3) <= v5)
          v7 = 0;
        else
          v7 = v14 + v4;
        v9 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v9);
        realityio::internal::PrimToEntityMap::EntityData::estimateMeshes(v7, (uint64_t *)&v9, (uint64_t)v10);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v9);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 24));
        (*((void (**)(id, uint64_t, _QWORD, void **, void **, _QWORD))v3 + 2))(v3, Text, LODWORD(v10[0]), v10[1], v10[2], v11);
        ++v5;
        v4 += 104;
      }
      while (v6 != v5);
    }
    std::__tree<std::string>::destroy((uint64_t)v17, v17[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)v16, v16[1]);
    v10[0] = (void **)&v14;
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](v10);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

}

void sub_22FFCF108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);

  _Unwind_Resume(a1);
}

void realityio::internal::PrimToEntityMap::~PrimToEntityMap(char **this)
{
  char *v2;
  void **v3;

  std::__tree<std::string>::destroy((uint64_t)(this + 9), this[10]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)(this + 6), this[7]);
  v3 = (void **)(this + 3);
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t RIOImportSessionSetIsLoadModelUseCase(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(*(_QWORD *)(result + 32) + 272) = a2;
  return result;
}

BOOL RIOImportSessionGetIsLoadModelUseCase(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(*(_QWORD *)(result + 32) + 272) != 0;
  return result;
}

realityio *RIOImportSessionSetOriginalUrl(uint64_t a1, void *a2)
{
  id v3;
  realityio *v4;
  realityio *v5;
  NSObject *v6;
  std::string __p;

  if (!a1)
    return 0;
  v3 = a2;
  v4 = (realityio *)objc_msgSend(v3, "isFileURL");
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v3), "fileSystemRepresentation"));
    std::string::operator=((std::string *)(*(_QWORD *)(a1 + 32) + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)&__p, 2u);
    }
  }

  return v5;
}

void sub_22FFCF2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

CFURLRef RIOImportSessionGetOriginalUrl(uint64_t a1)
{
  const __CFAllocator *v1;
  uint64_t v2;
  CFURLRef v3;
  std::string *p_p;
  const __CFString *v5;
  std::string __p;

  if (!a1)
    return 0;
  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v2 + 303) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 280), *(_QWORD *)(v2 + 288));
  else
    __p = *(std::string *)(v2 + 280);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v5 = CFStringCreateWithCString(v1, (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = CFURLCreateWithString(v1, v5, 0);
  CFRelease(v5);
  return v3;
}

void sub_22FFCF394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOImportSessionSetBundleInfo(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v7;
  std::string v8;
  std::string v9;
  std::string __str;

  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, a2);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    std::string::basic_string[abi:ne180100]<0>(&v8, a4);
    v7 = *(_QWORD *)(a1 + 32);
    std::string::operator=((std::string *)(v7 + 304), &__str);
    std::string::operator=((std::string *)(v7 + 328), &v9);
    std::string::operator=((std::string *)(v7 + 352), &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_22FFCF460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

const __CFString *RIOImportSessionCopyBundleId(uint64_t a1)
{
  std::string *v1;
  CFStringRef v2;
  std::string v4;
  void *__p;
  char v6;

  if (!a1)
    return &stru_24FDFD990;
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v4, (__int128 *)(*(_QWORD *)(a1 + 32) + 304), (__int128 *)(*(_QWORD *)(a1 + 32) + 352));
  if ((v4.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = &v4;
  else
    v1 = (std::string *)v4.__r_.__value_.__r.__words[0];
  v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  return v2;
}

void sub_22FFCF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a9);
  _Unwind_Resume(a1);
}

const __CFString *RIOImportSessionCopyBundleNameInBundle(uint64_t a1)
{
  const char *p_p;
  CFStringRef v2;
  std::string v4;
  void *__p;
  char v6;

  if (!a1)
    return &stru_24FDFD990;
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v4, (__int128 *)(*(_QWORD *)(a1 + 32) + 304), (__int128 *)(*(_QWORD *)(a1 + 32) + 352));
  if (v6 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  return v2;
}

void sub_22FFCF5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a9);
  _Unwind_Resume(a1);
}

CFStringRef RIOImportSessionCopyAssetURLFromBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3;
  void **v4;
  void *__p[2];
  uint64_t v7;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    __p[0] = 0;
    __p[1] = 0;
    v7 = 0;
    if (realityio::ImportSessionImpl::getAssetURLFromBundle(*(_QWORD *)(a1 + 32), a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 16), (uint64_t)__p))
    {
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      v3 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
    }
    else
    {
      v3 = 0;
    }
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  return v3;
}

void sub_22FFCF688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOImportSessionGatherFaultRecords(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int64x2_t *DeploymentErrors;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(id, uint64_t, uint64_t, _QWORD);
  uint64_t Text;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(id, uint64_t, uint64_t, _QWORD);
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t (**v28)();
  id *v29;
  uint64_t (***v30)();
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v25 = a3;
  if (!a1)
    goto LABEL_28;
  v26[0] = &off_24FDE9780;
  v26[1] = &v25;
  v27 = v26;
  v28 = &off_24FDE9780;
  v5 = *(_QWORD *)(a1 + 32);
  v30 = &v28;
  v29 = (id *)&v25;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v5 + 40))(v5, &v28);
  v6 = v30;
  if (v30 == &v28)
  {
    v7 = 4;
    v6 = &v28;
  }
  else
  {
    if (!v30)
      goto LABEL_7;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_7:
  v8 = v27;
  if (v27 == v26)
  {
    v9 = 4;
    v8 = v26;
    goto LABEL_11;
  }
  if (v27)
  {
    v9 = 5;
LABEL_11:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(uint64_t **)(v10 + 40);
  v12 = *(std::__shared_weak_count **)(v10 + 48);
  v28 = (uint64_t (**)())v11;
  v29 = (id *)&v12->__vftable;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  DeploymentErrors = realityio::LiveSceneManager::getDeploymentErrors(v11, a2);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = DeploymentErrors->i64[1];
  if (DeploymentErrors->i64[0] != v18)
  {
    v19 = DeploymentErrors->i64[0] + 8;
    do
    {
      v20 = v19 - 8;
      v21 = v25;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 - 8));
      if (*(_BYTE *)(v19 + 24))
        v23 = 4;
      else
        v23 = 3;
      v24 = v19;
      if (*(char *)(v19 + 23) < 0)
        v24 = *(_QWORD *)v19;
      v21[2](v21, Text, v23, v24);
      v19 += 40;
    }
    while (v20 + 40 != v18);
  }
LABEL_28:

}

void sub_22FFCF874(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

__CFDictionary *RIOImportSessionCopyStatistics(uint64_t a1)
{
  __CFDictionary *v1;
  uint64_t v3;

  if (!a1)
    return 0;
  v3 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 96))(*(_QWORD *)(a1 + 32), &v3);
  v1 = ConvertNestedDictionaryOfStatistics((const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v3);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v3, 0);
  return v1;
}

void sub_22FFCF964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *ConvertNestedDictionaryOfStatistics(const pxrInternal__aapl__pxrReserved__::VtDictionary *a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  const __CFAllocator *v13;
  std::string *p_p;
  CFStringRef v15;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v16;
  CFNumberRef v17;
  pxrInternal__aapl__pxrReserved__::VtDictionary **v18;
  pxrInternal__aapl__pxrReserved__::VtDictionary **v19;
  pxrInternal__aapl__pxrReserved__::VtDictionary **v20;
  pxrInternal__aapl__pxrReserved__::VtDictionary **v21;
  pxrInternal__aapl__pxrReserved__::VtDictionary **v22;
  CFStringRef v23;
  BOOL v24;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *p_valuePtr;
  std::string v30;
  std::string valuePtr;
  uint64_t v32;
  uint64_t v33;
  std::string __p;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  v5 = v4;
  v32 = v3;
  v33 = v4;
  v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  v8 = v6;
  v9 = v7;
  if (v7)
    v10 = v3 == v6;
  else
    v10 = 1;
  v11 = v10;
  if (v5 != v7 || (v11 & 1) == 0)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&__p, (__int128 *)(v3 + 32));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v15 = CFStringCreateWithCString(v13, (const char *)p_p, 0x8000100u);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        if ((v36 & 4) != 0)
          v16 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        else
          v16 = v35;
        v17 = (CFNumberRef)ConvertNestedDictionaryOfStatistics(v16);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v18 = &v35;
        if ((v36 & 4) != 0)
          v18 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v18;
        v17 = CFNumberCreate(v13, kCFNumberDoubleType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v19 = &v35;
        if ((v36 & 4) != 0)
          v19 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(_DWORD *)v19;
        v17 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        v20 = &v35;
        if ((v36 & 4) != 0)
          v20 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)v20;
        v17 = CFNumberCreate(v13, kCFNumberIntType, &valuePtr);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
      {
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v21 = &v35;
        if ((v36 & 4) != 0)
          v21 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v21;
        v17 = CFNumberCreate(v13, kCFNumberSInt64Type, &valuePtr);
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
        {
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
          {
            if ((v36 & 4) != 0)
              v25 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
            else
              v25 = v35;
            if (*((char *)v25 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&valuePtr, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
            }
            else
            {
              v26 = *(_OWORD *)v25;
              valuePtr.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
              *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v26;
            }
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_valuePtr = &valuePtr;
            else
              p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
            v27 = std::string::insert(&v30, 0, "UnknownDataType_");
            v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            valuePtr.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_valuePtr = &valuePtr;
            else
              p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          }
          v23 = CFStringCreateWithCString(v13, (const char *)p_valuePtr, 0x8000100u);
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          goto LABEL_39;
        }
        valuePtr.__r_.__value_.__r.__words[0] = 0;
        v22 = &v35;
        if ((v36 & 4) != 0)
          v22 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35);
        valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)*v22;
        v17 = CFNumberCreate(v13, kCFNumberLongLongType, &valuePtr);
      }
      v23 = (CFStringRef)v17;
LABEL_39:
      CFDictionaryAddValue(Mutable, v15, v23);
      CFRelease(v15);
      CFRelease(v23);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v32);
      v3 = v32;
      v24 = v32 == v8 || v9 == 0;
    }
    while (v33 != v9 || !v24);
  }
  return Mutable;
}

void sub_22FFCFDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::~pair((uint64_t)&a25);
  _Unwind_Resume(a1);
}

const char *RIOImportSessionPrimPathMetadataKey()
{
  return "cdm:primpath";
}

const char *RIOImportSessionResolvedPathMetadataKey()
{
  return "cdm:resolvedpath";
}

const char *RIOImportSessionAssetInfoMetadataKey()
{
  return "realitykit:assetinfo";
}

uint64_t RIOImportSessionSetLoadSubdsAsSubds(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 289) = a2;
  return result;
}

BOOL RIOImportSessionGetLoadSubdsAsSubds(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 289) != 0;
  return result;
}

uint64_t _RIOImportSessionCFFinalize(char *a1)
{
  return (**((uint64_t (***)(char *))a1 + 2))(a1 + 16);
}

BOOL _RIOImportSessionCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOImportSessionCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOImportSessionCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOImportSession %p>"), a1);
}

CFStringRef _RIOImportSessionCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOImportSession %p>"), a1);
}

_QWORD *realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    std::vector<std::function<void ()(void)>>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)(v2 + 464) + 48), (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v4 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
}

void sub_22FFCFFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t assetToEntity(uint64_t *a1)
{
  uint64_t ServiceLocator;

  *a1 = 0;
  *a1 = REEntityCreate();
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264]();
  MEMORY[0x2348B1288](ServiceLocator);
  RETransformComponentGetComponentType();
  REEntityAddComponentByClass();
  REAssetManagerMeshMemoryAssetCreateBox();
  REMeshComponentGetComponentType();
  REEntityAddComponentByClass();
  REMeshComponentSetMesh();
  return REMeshComponentAddMaterial();
}

void sub_22FFD00BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE9140;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<__CFData const*({block_pointer} {__strong})(char const*),std::allocator<__CFData const*({block_pointer} {__strong})(char const*)>,__CFData const* ()(char const*)>::target_type()
{
}

void sourceAsync(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[4];
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD block[4];
  id v29;
  const void *v30;
  const void *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = a4;
  if (!*(_BYTE *)a2)
  {
    REEngineConfigurationCreateFromEngine();
    REEngineConfigurationGetEngineQueue();
    v17 = objc_claimAutoreleasedReturnValue();
    RERelease();
    v31 = 0;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3321888768;
    block[2] = ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke;
    block[3] = &unk_24FDE91C8;
    v29 = v8;
    v30 = 0;
    dispatch_async(v17, block);
    realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v30);

    realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v31);
    goto LABEL_24;
  }
  v9 = *(std::__shared_weak_count **)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 8);
  v27 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v35 = 0;
  if (v7)
  {
    v34[0] = &off_24FDE9140;
    v34[1] = MEMORY[0x2348B5260](v7);
    v35 = v34;
  }
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 3221225472;
  v23[2] = ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke_16;
  v23[3] = &unk_24FDE9200;
  v25 = a1;
  v24 = v8;
  v32[0] = &off_24FDE9230;
  v32[1] = MEMORY[0x2348B5260](v23);
  v33 = v32;
  realityio::MaterialXStandalone::generateAsync(a1, &v26, (uint64_t)v34, (uint64_t)v32);
  v15 = v33;
  if (v33 == v32)
  {
    v16 = 4;
    v15 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v12, v13, v14);
LABEL_13:
  v18 = v35;
  if (v35 == v34)
  {
    v19 = 4;
    v18 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_18;
    v19 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v18 + 8 * v19))(v18, v12, v13, v14);
LABEL_18:
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v17 = v24;
LABEL_24:

}

void sub_22FFD044C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL11sourceAsyncP8REEngineN9realityio6ResultINSt3__110shared_ptrINS1_4mtlx13NeoDataSourceEEENS1_13DetailedErrorEEEU13block_pointerFPK8__CFDataPKcEU13block_pointerFvP8REEntityP9__CFErrorE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 40));
}

CFTypeRef __copy_helper_block_ea8_40c43_ZTSN9realityio12WrappedCFRefIP9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

const void **__destroy_helper_block_ea8_40c43_ZTSN9realityio12WrappedCFRefIP9__CFErrorEE(uint64_t a1)
{
  return realityio::WrappedCFRef<__CFError *>::~WrappedCFRef((const void **)(a1 + 40));
}

void sub_22FFD05A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE9230;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

_QWORD *std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v4);
}

void sub_22FFD06A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>),std::allocator<void({block_pointer} {__strong})(realityio::WrappedRERef<REAsset *>)>,void ()(realityio::WrappedRERef<REAsset *>)>::target_type()
{
}

std::string *realityio::Result<std::shared_ptr<realityio::mtlx::NeoDataSource>,realityio::DetailedError>::Result(std::string *a1, unsigned __int8 *a2)
{
  int v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v3 = *a2;
  a1->__r_.__value_.__s.__data_[0] = v3;
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 2);
    a1->__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1);
    a1->__r_.__value_.__r.__words[2] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__r.__words[1] = *(_OWORD *)(a2 + 8);
    v7 = a1 + 1;
    if ((char)a2[47] < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 24);
      a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
  }
  return a1;
}

void MaterialToEntity::~MaterialToEntity(MaterialToEntity *this)
{
  CFTypeRef *v2;

  v2 = (CFTypeRef *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(*v2);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)this + 3);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)this + 2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this);
}

const void **realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void ___ZN16MaterialToEntity13evaluateAsyncENSt3__110shared_ptrIS_EENS0_8functionIFvP8REEntityP9__CFErrorEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void **v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  MaterialToEntity::getModelEntity((MaterialToEntity *)&v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 32));
  v2 = v7;
  v3 = *(const void ***)(*(_QWORD *)(a1 + 64) + 32);
  if (v3)
  {
    v4 = *v3;
    v6 = v4;
    if (v4)
      CFRetain(v4);
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v5 = *(_QWORD *)(a1 + 56);
  v8 = v4;
  v9 = v2;
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, const void **))(*(_QWORD *)v5 + 48))(v5, &v9, &v8);
  realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(&v6);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  RIOImportSessionSetSceneUpdatePassCompletion(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24), 0);
}

void sub_22FFD08CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

_QWORD *__destroy_helper_block_ea8_32c47_ZTSNSt3__18functionIFvP8REEntityP9__CFErrorEEE64c44_ZTSNSt3__110shared_ptrI16MaterialToEntityEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 64);
  result = *(_QWORD **)(a1 + 56);
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t realityio::isSceneLibrary(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  unint64_t Data;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if ((_DWORD)result)
  {
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v7 = 0;
    result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 208));
    if ((_DWORD)result)
    {
      MEMORY[0x2348B274C](&v7, "sceneLibrary");
      v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      result = (v7 & 0xFFFFFFFFFFFFFFF8) == 0;
      if ((v7 & 7) != 0)
      {
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
  }
  return result;
}

void sub_22FFD0A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  _Unwind_Resume(a1);
}

void realityio::ImportedScene::~ImportedScene(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 2);
  realityio::WrappedRERef<void *>::~WrappedRERef(this + 1);
}

_QWORD *std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a2 + 16));
  return realityio::WrappedRERef<void *>::~WrappedRERef((_QWORD *)(a2 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataTypedValue<pxrInternal__aapl__pxrReserved__::TfToken>::StoreValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(*(_QWORD **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a2))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v10);
    v4 = *(uint64_t **)(a1 + 8);
    if (&v10 == v4)
    {
      if ((v10 & 7) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
    else
    {
      if ((*v4 & 7) != 0)
      {
        v5 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      *v4 = v10;
    }
    return 1;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  *a2 = 0;
  result = pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<pxrInternal__aapl__pxrReserved__::TfToken>(a1);
  v5 = *result;
  *result = 0;
  *a2 = v5;
  v6 = a1[1];
  if (v6)
    v7 = (a1[1] & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_GetMutable<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return a1;
}

uint64_t std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v17[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>(v7, v9);
  v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[80 * v12];
  *v11 = *(_BYTE *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 8) = 0u;
  v13 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = v13;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  v14 = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = v14;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  v11[72] = *(_BYTE *)(a2 + 72);
  v17[2] = v11 + 80;
  std::vector<realityio::ImportedScene>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<realityio::ImportedScene>::~__split_buffer(v17);
  return v15;
}

void sub_22FFD0FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::ImportedScene>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::WrappedRERef<void *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t std::vector<realityio::ImportedScene>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ImportedScene>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>,std::reverse_iterator<realityio::ImportedScene*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      realityio::ImportedScene::ImportedScene((std::string *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22FFD118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *realityio::ImportedScene::ImportedScene(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  a1->__r_.__value_.__s.__data_[0] = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  a1->__r_.__value_.__l.__size_ = v4;
  if (v4)
    RERetain();
  v5 = *(_QWORD *)(a2 + 16);
  a1->__r_.__value_.__r.__words[2] = v5;
  if (v5)
    RERetain();
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[3].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 72);
  return a1;
}

void sub_22FFD1268(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
  realityio::WrappedRERef<void *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,std::reverse_iterator<realityio::ImportedScene*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<realityio::ImportedScene>::~__split_buffer(void **a1)
{
  std::__split_buffer<realityio::ImportedScene>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<realityio::ImportedScene>::clear[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = v3[4];
      v3[2] = v1 - 80;
      result = std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v4, v1 - 80);
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<realityio::ImportedScene>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*,realityio::ImportedScene*,realityio::ImportedScene*>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v5;
  std::string *v7;

  v7 = a4;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      realityio::ImportedScene::ImportedScene(a4, v5);
      v5 += 80;
      a4 = (std::string *)((char *)v7 + 80);
      v7 = (std::string *)((char *)v7 + 80);
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_22FFD147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::ImportedScene>,realityio::ImportedScene*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<realityio::ImportedScene *,realityio::ImportedScene *,realityio::ImportedScene *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  const std::string *v8;
  uint64_t v9;
  std::string::size_type size;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (std::string *)(a3 + v6);
      v8 = (const std::string *)(a1 + v6);
      *(_BYTE *)(a3 + v6) = *(_BYTE *)(a1 + v6);
      v9 = *(_QWORD *)(a3 + v6 + 8);
      size = *(_QWORD *)(a1 + v6 + 8);
      if (v9 != size)
      {
        if (v9)
        {
          RERelease();
          size = v8->__r_.__value_.__l.__size_;
        }
        v7->__r_.__value_.__l.__size_ = size;
        if (size)
          RERetain();
      }
      realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v7->__r_.__value_.__r.__words[2], (uint64_t *)&v8->__r_.__value_.__r.__words[2]);
      std::string::operator=(v7 + 1, v8 + 1);
      std::string::operator=(v7 + 2, v8 + 2);
      v7[3].__r_.__value_.__s.__data_[0] = v8[3].__r_.__value_.__s.__data_[0];
      v6 += 80;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t realityio::BuilderDependencyDAG::getWeakBuilderAtPrimPathWithBuilderIdentifier@<X0>(realityio::BuilderDependencyDAG *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v23;
  int v24;
  uint64_t v25;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)a2 + 1);
  v8 = *(_QWORD *)a3;
  v25 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>((_QWORD *)this + 10, &v23);
  v12 = v11;
  if (v11 && (v13 = (std::__shared_weak_count *)v11[5]) != 0 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
  {
    v15 = v14;
    *a4 = v12[4];
    a4[1] = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if ((v25 & 7) != 0)
  {
    v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
}

void sub_22FFD16F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery((realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *)&a9);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery(realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v4 = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF8;
  v5 = (bswap64(0x9E3779B97F4A7C55 * v4) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *(_QWORD *)a2 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v4 = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF8;
  v5 = (bswap64(0x9E3779B97F4A7C55 * v4) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *(_QWORD *)a2 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::map<std::string,REAsset *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,REAsset *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,REAsset *>,std::__tree_node<std::__value_type<std::string,REAsset *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22FFD189C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,REAsset *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,REAsset *>,std::__tree_node<std::__value_type<std::string,REAsset *>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,REAsset *> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,REAsset *> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::pair<std::string const,REAsset *> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::pair<std::string const,REAsset *> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FFD1A40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 80, *(_QWORD **)(a2 + 88));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 56, *(_QWORD **)(a2 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 32, *(_QWORD **)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_22FFD1C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v6[4];
  char v7;
  int v8;

  v1 = result[1];
  if (v1)
  {
    v2 = (_QWORD *)*result;
    v3 = *(_QWORD **)(*result + 8);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *result = v4;
    if (v4 == (_QWORD *)(v1 + 8))
      result[1] = 0;
  }
  else
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "increment";
    v6[2] = 159;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<const std::map<std::string, pxrInternal__aapl_"
            "_pxrReserved__::VtValue, std::less<void>> *, std::__map_const_iterator<std::__tree_const_iterator<std::__val"
            "ue_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::str"
            "ing, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = const s"
            "td::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std"
            "::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReser"
            "ved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>,"
            " void *> *, long>>]";
    v7 = 0;
    v8 = 4;
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, "Attempted invalid increment operation on a VtDictionary iterator");
  }
  return result;
}

_QWORD *realityio::WrappedRERef<REEngine *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE92E0;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE92E0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformBlockAfterAssetLoadOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE9360;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE9360;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0,std::allocator<RIOImportSessionPerformSceneChangeSetupBlockOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE93E0;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE93E0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetSceneUpdatePassCompletion::$_0,std::allocator<RIOImportSessionSetSceneUpdatePassCompletion::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE9460;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE9460;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_0,std::allocator<RIOImportSessionSetRegistrationForScenes::$_0>,void ()(REScene *,char const*,REEntity *)>::target_type()
{
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE94F0;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE94F0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionSetRegistrationForScenes::$_1,std::allocator<RIOImportSessionSetRegistrationForScenes::$_1>,void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::target_type()
{
}

const void **realityio::WrappedCFRef<__CFError *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void std::__shared_ptr_emplace<MaterialToEntity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE9580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MaterialToEntity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE9580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<MaterialToEntity>::__on_zero_shared(uint64_t a1)
{
  MaterialToEntity::~MaterialToEntity((MaterialToEntity *)(a1 + 24));
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE95D0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(REEntity *,__CFError *),std::allocator<void({block_pointer} {__strong})(REEntity *,__CFError *)>,void ()(REEntity *,__CFError *)>::target_type()
{
}

void std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24FDE9660;
  v2[1] = v4;
  v2[2] = MEMORY[0x2348B5260](v3);
  return v2;
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24FDE9660;
  a2[1] = v4;
  result = MEMORY[0x2348B5260](v3);
  a2[2] = result;
  return result;
}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  const void *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(std::__shared_weak_count **)(v6 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_QWORD *)(v7 + 40);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 40);
  }
  v29 = 1;
  v30 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v33 = 0;
  if (v11)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v11 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v13, a2);
    v29 = v25;
    v14 = v26;
    v26 = 0;
    v30 = v14;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v31, &v27);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v32);
    if ((v33 & 7) != 0)
    {
      v15 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    v33 = v28;
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  }
  v25 = 1;
  v17 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v29, &v25);
  v18 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 16))();
  CFRelease(v17);
  if (v18)
  {
    *a3 = v18[2];
    v19 = v18[3];
    a3[1] = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    CFRelease(v18);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if ((v33 & 7) != 0)
  {
    v22 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
  result = v30;
  if (v30)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
  return result;
}

void sub_22FFD298C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v17);
  if ((a16 & 7) != 0)
  {
    v19 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v16);
  if (a14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOImportSessionRegisterBuilderGenerator::$_0,std::allocator<RIOImportSessionRegisterBuilderGenerator::$_0>,std::shared_ptr<realityio::Builder> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE96F0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*),std::allocator<void({block_pointer} {__strong})(RETextureImportOperation0 *,char const*,char const*)>,void ()(RETextureImportOperation0 *,char const*,char const*)>::target_type()
{
}

void std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE9780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE9780;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::operator()(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a4;
  v6 = **(_QWORD **)(a1 + 8);
  if ((*a3 - 1) >= 5)
    v7 = 0;
  else
    v7 = *a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v4, v7, v5);
}

uint64_t std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOImportSessionGatherFaultRecords::$_0,std::allocator<RIOImportSessionGatherFaultRecords::$_0>,void ()(char const*,ExecFault::Type,char const*)>::target_type()
{
}

void realityio::SkeletalPoseAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  _QWORD *NameToken;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  _QWORD *v39;
  const char **v40;
  uint64_t i;
  unint64_t v42;
  int v43;
  const char *v44;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  void *__p;
  void *v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _OWORD v75[2];
  _QWORD *v76;
  _QWORD v77[4];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v78;
  _QWORD v79[4];
  uint64_t v80;
  __int128 v81;
  _OWORD v82[4];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, a1);
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  v9 = *a3;
  if (a3[1] != *a3)
  {
    v10 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v82, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + 16 * v10));
      v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 8 * v10);
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2348B274C](&v83, "joints");
      v13 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v83 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)v82);
        if ((v83 & 7) != 0)
        {
          v16 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if (v15)
        {
          if ((BYTE8(v82[0]) & 4) != 0)
            v18 = (__int128 *)(*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v82[0] + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 168))(v82);
          else
            v18 = *(__int128 **)&v82[0];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::operator=((uint64_t)v75, v18);
          goto LABEL_41;
        }
      }
      else if ((v83 & 7) != 0)
      {
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      v19 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2348B274C](&v83, "restTransforms");
      v20 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (v83 & 0xFFFFFFFFFFFFFFF8))
      {
        v22 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v82);
        if ((v83 & 7) != 0)
        {
          v23 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        if (v22)
        {
          if ((BYTE8(v82[0]) & 4) == 0)
          {
            v25 = v79;
            goto LABEL_34;
          }
          v32 = (*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v82[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(v82);
          v25 = v79;
LABEL_35:
          if (v25 != (_QWORD *)v32)
          {
            v33 = *(_OWORD *)(v32 + 16);
            v83 = *(_OWORD *)v32;
            v84 = v33;
            v34 = *(_QWORD *)(v32 + 32);
            *(_QWORD *)&v85 = v34;
            if (v34)
            {
              v35 = (unint64_t *)(v34 - 16);
              if (*((_QWORD *)&v84 + 1))
                v35 = (unint64_t *)*((_QWORD *)&v84 + 1);
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v25);
            v37 = v84;
            *(_OWORD *)v25 = v83;
            *((_OWORD *)v25 + 1) = v37;
            v83 = 0u;
            v84 = 0u;
            v25[4] = v85;
            *(_QWORD *)&v85 = 0;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v83);
          }
          goto LABEL_41;
        }
      }
      else if ((v83 & 7) != 0)
      {
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      v26 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2348B274C](&v83, "bindTransforms");
      v27 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      if ((*v26 & 0xFFFFFFFFFFFFFFF8) == (v83 & 0xFFFFFFFFFFFFFFF8))
      {
        v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)v82);
        if ((v83 & 7) != 0)
        {
          v30 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        if (!v29)
          goto LABEL_41;
        if ((BYTE8(v82[0]) & 4) != 0)
        {
          v32 = (*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v82[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(v82);
          v25 = v77;
        }
        else
        {
          v25 = v77;
LABEL_34:
          v32 = *(_QWORD *)&v82[0];
        }
        goto LABEL_35;
      }
      if ((v83 & 7) != 0)
      {
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
LABEL_41:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v82);
      ++v10;
      v9 = *a3;
      if (v10 >= (a3[1] - *a3) >> 3)
      {
        v38 = *(_QWORD *)&v75[0];
        goto LABEL_47;
      }
    }
  }
  v38 = 0;
LABEL_47:
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  std::vector<char const*>::resize((uint64_t)&v72, v38);
  if (*(_QWORD *)&v75[0])
  {
    v39 = v76;
    v40 = (const char **)v72;
    for (i = 8 * *(_QWORD *)&v75[0]; i; i -= 8)
    {
      v42 = *v39 & 0xFFFFFFFFFFFFFFF8;
      if (v42)
      {
        v43 = *(char *)(v42 + 39);
        if (v43 < 0)
        {
          v45 = v42 + 16;
          v44 = *(const char **)(v42 + 16);
          if (*(_QWORD *)(v45 + 8) > 1uLL)
          {
LABEL_55:
            if (*v44 == 47)
              ++v44;
          }
        }
        else
        {
          v44 = (const char *)(v42 + 16);
          if (v43 >= 2u)
            goto LABEL_55;
        }
      }
      else
      {
        v44 = "";
      }
      *v40++ = v44;
      ++v39;
    }
  }
  std::vector<RESRT>::resize((uint64_t)&v69, v38);
  v46 = v69;
  if (0xAAAAAAAAAAAAAAABLL * ((v70 - (_BYTE *)v69) >> 4) == v79[0] && v70 != v69)
  {
    v47 = v80;
    v48 = 0x5555555555555580 * ((v70 - (_BYTE *)v69) >> 4);
    __asm { FMOV            V0.4S, #1.0 }
    v65 = _Q0;
    do
    {
      MEMORY[0x2348B199C](&v83, v47);
      v83 = v65;
      v82[0] = xmmword_230204CF0;
      v81 = 0uLL;
      REDecomposeMatrix();
      v54 = v83;
      v56 = v81;
      v55 = v82[0];
      v46[2] = DWORD2(v83);
      *(_QWORD *)v46 = v54;
      *((_OWORD *)v46 + 1) = v55;
      v46[10] = DWORD2(v56);
      *((_QWORD *)v46 + 4) = v56;
      v47 += 128;
      v46 += 12;
      v48 -= 128;
    }
    while (v48);
  }
  if (v77[0] == v38)
  {
    std::vector<simd_float4x4>::resize((uint64_t)&__p, v38);
    if (v77[0])
    {
      v57 = v78;
      v58 = __p;
      v59 = v77[0] << 7;
      do
      {
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v57, 0, 0.0);
        MEMORY[0x2348B199C](v82, &v83);
        v60 = v82[1];
        v61 = v82[2];
        v62 = v82[3];
        *v58 = v82[0];
        v58[1] = v60;
        v58[2] = v61;
        v58[3] = v62;
        v57 = (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v57 + 128);
        v58 += 4;
        v59 -= 128;
      }
      while (v59);
    }
  }
  v63 = RESkeletonDefinitionCreate();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
  RESkeletonDefinitionSetName();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
  RESkeletonDefinitionSetJointNames();
  RESkeletonDefinitionSetLocalRestPoses();
  RESkeletonDefinitionSetInverseBindPoses();
  v64 = MEMORY[0x2348B12DC](v63, 0);
  RERelease();
  *(_QWORD *)&v82[0] = v64;
  if (v64)
  {
    RERetain();
    RERelease();
  }
  *((_QWORD *)&v83 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy((uint64_t *)&v83, (uint64_t *)v82);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(a5, &v83);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
  realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(v82);
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v75);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v77);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v79);
}

void sub_22FFD32A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::VtValue *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v43;

  realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(&a43);
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a23);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a29);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a35);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v43);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  v1 = atomic_load((unsigned int *)(*result + 8));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = (_QWORD *)*v2;
    v5 = *(_QWORD *)*v2;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*v2;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = v4;
    *v2 = v3;
    return (uint64_t *)boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>::~intrusive_ptr(&v8);
  }
  return result;
}

void sub_22FFD3554(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP14REGeomSkeletonEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomSkeleton *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomSkeleton *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomSkeleton *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFD3718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueGetTypeID()
{
  if (RIOPxrVtValueGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  return RIOPxrVtValueGetTypeID::typeID;
}

uint64_t RIOPxrVtValueCreateWithToken(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  v6[0] = v1;
  v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
        + 1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v6[0] = v2;
  }
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  return v4;
}

void sub_22FFD384C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(_QWORD *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrVtValueGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(Instance + 16), a1);
  return v3;
}

uint64_t RIOPxrVtValueCreateWithPath(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
        + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 1, (_DWORD *)(a1 + 20));
  v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v2;
}

void sub_22FFD3974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithAssetPath(uint64_t a1)
{
  uint64_t v1;
  std::string *v3[3];

  v3[2] = *(std::string **)MEMORY[0x24BDAC8D0];
  v3[1] = (std::string *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy(v3, (__int128 *)(a1 + 16));
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithCString(char *__s)
{
  uint64_t v1;
  void *__p[2];
  char v4;
  std::string *v5[3];

  v5[2] = *(std::string **)MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v5[1] = (std::string *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy(v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v5);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return v1;
}

void sub_22FFD3ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithBool(char a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE59C3;
  LOBYTE(v3[0]) = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt32(int a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE9B5B;
  LODWORD(v3[0]) = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt64(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[0] = a1;
  v3[1] = &unk_24FDE9C13;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt8(char a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE9CCB;
  LOBYTE(v3[0]) = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt32(int a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE9D83;
  LODWORD(v3[0]) = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithUInt64(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[0] = a1;
  v3[1] = &unk_24FDE9E3B;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat(float a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE5F5B;
  *(float *)v3 = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithDouble(double a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = &unk_24FDE5B2B;
  *(double *)v3 = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat2(double a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  v3[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
        + 3;
  *(double *)v3 = a1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD3FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat3(__n128 a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
        + 2;
  v1 = operator new();
  *(_QWORD *)v1 = a1.n128_u64[0];
  *(_DWORD *)(v1 + 8) = a1.n128_u32[2];
  v2 = (unsigned int *)(v1 + 12);
  atomic_store(0, (unsigned int *)(v1 + 12));
  v7[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_22FFD4090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithFloat4(__n128 a1)
{
  __n128 *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
        + 2;
  v1 = (__n128 *)operator new();
  *v1 = a1;
  v2 = (unsigned int *)&v1[1];
  atomic_store(0, (unsigned int *)&v1[1]);
  v7[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_22FFD4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithDouble2(__n128 a1)
{
  __n128 *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
        + 2;
  v1 = (__n128 *)operator new();
  *v1 = a1;
  v2 = (unsigned int *)&v1[1];
  atomic_store(0, (unsigned int *)&v1[1]);
  v7[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_22FFD4220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithDouble3(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v1 = *((_QWORD *)a1 + 2);
  v8[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
        + 2;
  v2 = operator new();
  *(_OWORD *)v2 = v7;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (unsigned int *)(v2 + 24);
  atomic_store(0, (unsigned int *)(v2 + 24));
  v8[0] = v2;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  v5 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return v5;
}

void sub_22FFD42FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithDouble4(__int128 *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a1[1];
  v8[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
        + 2;
  v1 = operator new();
  *(_OWORD *)v1 = v6;
  *(_OWORD *)(v1 + 16) = v7;
  v2 = (unsigned int *)(v1 + 32);
  atomic_store(0, (unsigned int *)(v1 + 32));
  v8[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return v4;
}

void sub_22FFD43C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithQuath(__n128 a1)
{
  uint64_t v1;
  __n128 v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4[0] = to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>((uint64_t)&v3);
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
        + 1;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v1;
}

void sub_22FFD445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

unint64_t to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1)
{
  float v2;
  uint64_t v3;
  float v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  v2 = *(float *)(a1 + 12);
  if (v2 == 0.0)
  {
    v3 = HIWORD(LODWORD(v2));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v2) >> 23)))
  {
    v3 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v2) >> 23))
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  LODWORD(v4) = HIDWORD(*(_QWORD *)a1);
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(_OWORD *)a1;
  if (COERCE_FLOAT(*(_OWORD *)a1) == 0.0)
  {
    v6 = v5 >> 16;
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (v5 >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (v5 >> 23))
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
    v4 = *(float *)(a1 + 4);
  }
  if (v4 == 0.0)
  {
    v7 = HIWORD(LODWORD(v4));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v4) >> 23)))
  {
    v7 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v4) >> 23))
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  v8 = *(float *)(a1 + 8);
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v8) >> 23)))
  {
    v9 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v8) >> 23))
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return (v3 << 48) | ((unint64_t)(unsigned __int16)v9 << 32) | ((unint64_t)(unsigned __int16)v7 << 16) | (unsigned __int16)v6;
}

uint64_t RIOPxrVtValueCreateWithQuatf(__n128 a1)
{
  __n128 *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
  v1 = (__n128 *)operator new();
  *v1 = a1;
  v2 = (unsigned int *)&v1[1];
  atomic_store(0, (unsigned int *)&v1[1]);
  v7[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_22FFD4690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithQuatd(__int128 *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a1[1];
  v8[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
  v1 = operator new();
  *(_OWORD *)v1 = v6;
  *(_OWORD *)(v1 + 16) = v7;
  v2 = (unsigned int *)(v1 + 32);
  atomic_store(0, (unsigned int *)(v1 + 32));
  v8[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return v4;
}

void sub_22FFD4758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt2(double a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  *(double *)v3 = a1;
  v3[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_22FFD47EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt3(__n128 a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int32 v7;
  _QWORD v8[3];

  v7 = a1.n128_u32[2];
  v8[2] = *MEMORY[0x24BDAC8D0];
  v1 = a1.n128_u64[0];
  v8[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
        + 2;
  v2 = operator new();
  *(_QWORD *)v2 = v1;
  *(_DWORD *)(v2 + 8) = v7;
  v3 = (unsigned int *)(v2 + 12);
  atomic_store(0, (unsigned int *)(v2 + 12));
  v8[0] = v2;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  v5 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return v5;
}

void sub_22FFD48C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithInt4(int8x16_t a1)
{
  int8x16_t *v1;
  int32x2_t v2;
  int8x16_t v3;
  int32x2_t v4;
  int8x16_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v11[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
         + 2;
  v1 = (int8x16_t *)operator new();
  v2 = (int32x2_t)vextq_s8(a1, a1, 8uLL).u64[0];
  v3 = (int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a1.i8, v2), 0x20uLL);
  v4 = vzip1_s32(*(int32x2_t *)a1.i8, v2);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  *v1 = vorrq_s8(v3, v5);
  v6 = (unsigned int *)&v1[1];
  atomic_store(0, (unsigned int *)&v1[1]);
  v11[0] = v1;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v11);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  return v8;
}

void sub_22FFD49A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf(float a1)
{
  unsigned int v1;
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  if (a1 == 0.0)
  {
    v1 = HIWORD(LODWORD(a1));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(a1) >> 23)))
  {
    v1 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(a1) >> 23))
       + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v1) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
  }
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
        + 3;
  LOWORD(v4[0]) = v1;
  v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v2;
}

void sub_22FFD4A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf2(double a1)
{
  float v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v1 = *((float *)&a1 + 1);
  if (*(float *)&a1 == 0.0)
  {
    v2 = HIWORD(LODWORD(a1));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(a1) >> 23)))
  {
    v2 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(a1) >> 23))
       + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v2) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
  }
  if (v1 == 0.0)
  {
    v3 = HIWORD(LODWORD(v1));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v1) >> 23)))
  {
    v3 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v1) >> 23))
       + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
  }
  v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
        + 3;
  LODWORD(v6[0]) = (unsigned __int16)v2 | ((unsigned __int16)v3 << 16);
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  return v4;
}

void sub_22FFD4BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf3(__n128 a1)
{
  float v1;
  unsigned __int32 v2;
  __int16 v3;
  unsigned int v4;
  __int16 v5;
  unsigned __int32 v6;
  uint64_t v7;
  unsigned __int32 v9;
  unsigned __int32 v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v1 = a1.n128_f32[1];
  if (a1.n128_f32[0] == 0.0)
  {
    v2 = HIWORD(a1.n128_u32[0]);
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (a1.n128_u32[0] >> 23)))
  {
    v2 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (a1.n128_u32[0] >> 23))
       + (((a1.n128_u32[0] & 0x7FFFFF) + ((a1.n128_u32[0] >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v9 = a1.n128_u32[2];
    v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)a1.n128_u32[0]);
    a1.n128_u32[2] = v9;
    LOWORD(v2) = v3;
  }
  if (v1 == 0.0)
  {
    v4 = HIWORD(LODWORD(v1));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v1) >> 23)))
  {
    v4 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v1) >> 23))
       + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v10 = a1.n128_u32[2];
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
    a1.n128_u32[2] = v10;
    LOWORD(v4) = v5;
  }
  if (a1.n128_f32[2] == 0.0)
  {
    v6 = HIWORD(a1.n128_u32[2]);
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (a1.n128_u32[2] >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (a1.n128_u32[2] >> 23))
       + (((a1.n128_u32[2] & 0x7FFFFF) + ((a1.n128_u32[2] >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)a1.n128_u32[2]);
  }
  v11[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
         + 3;
  LODWORD(v11[0]) = (unsigned __int16)v2 | ((unsigned __int16)v4 << 16);
  WORD2(v11[0]) = v6;
  v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v11);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  return v7;
}

void sub_22FFD4D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithHalf4(__n128 a1)
{
  uint64_t v1;
  __n128 v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4[0] = _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_((uint64_t)&v3);
  v4[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
        + 3;
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  return v1;
}

void sub_22FFD4DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

unint64_t _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_(uint64_t a1)
{
  float v2;
  BOOL v3;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  uint64_t v10;

  LODWORD(v2) = HIDWORD(*(_QWORD *)a1);
  v3 = COERCE_FLOAT(*(_OWORD *)a1) == 0.0;
  v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(_OWORD *)a1;
  if (v3)
  {
    v5 = v4 >> 16;
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (v4 >> 23)))
  {
    v5 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (v4 >> 23))
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
    v2 = *(float *)(a1 + 4);
  }
  if (v2 == 0.0)
  {
    v6 = HIWORD(LODWORD(v2));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v2) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v2) >> 23))
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  v7 = *(float *)(a1 + 8);
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23)))
  {
    v8 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  v9 = *(float *)(a1 + 12);
  if (v9 == 0.0)
  {
    v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23)))
  {
    v10 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  return ((unint64_t)(unsigned __int16)v8 << 32) | (v10 << 48) | ((unint64_t)(unsigned __int16)v6 << 16) | (unsigned __int16)v5;
}

uint64_t RIOPxrVtValueCreateWithMatrix2f(float32x2_t a1, float32x2_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
        + 2;
  v4 = operator new();
  *(float64x2_t *)v4 = vcvtq_f64_f32(a1);
  *(float64x2_t *)(v4 + 16) = vcvtq_f64_f32(a2);
  v5 = (unsigned int *)(v4 + 32);
  atomic_store(0, (unsigned int *)(v4 + 32));
  v9[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  return v7;
}

void sub_22FFD5004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithMatrix3f(__n128 a1, __n128 a2, __n128 a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  _QWORD v14[3];

  v12 = (float32x2_t)a2.n128_u64[0];
  v13 = (float32x2_t)a3.n128_u64[0];
  v11 = (float32x2_t)a1.n128_u64[0];
  v14[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1.n128_f32[2];
  v4 = a2.n128_f32[2];
  v5 = a3.n128_f32[2];
  v14[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
         + 2;
  v6 = operator new();
  *(float64x2_t *)v6 = vcvtq_f64_f32(v11);
  *(double *)(v6 + 16) = v3;
  *(float64x2_t *)(v6 + 24) = vcvtq_f64_f32(v12);
  *(double *)(v6 + 40) = v4;
  *(float64x2_t *)(v6 + 48) = vcvtq_f64_f32(v13);
  *(double *)(v6 + 64) = v5;
  v7 = (unsigned int *)(v6 + 72);
  atomic_store(0, (unsigned int *)(v6 + 72));
  v14[0] = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v14);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  return v9;
}

void sub_22FFD5120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithMatrix4f(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v13[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
         + 2;
  v4 = operator new();
  *(float64x2_t *)v4 = vcvtq_f64_f32(*(float32x2_t *)a1.f32);
  *(float64x2_t *)(v4 + 16) = vcvt_hight_f64_f32(a1);
  *(float64x2_t *)(v4 + 32) = vcvtq_f64_f32(*(float32x2_t *)a2.f32);
  *(float64x2_t *)(v4 + 48) = vcvt_hight_f64_f32(a2);
  *(float64x2_t *)(v4 + 64) = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  *(float64x2_t *)(v4 + 80) = vcvt_hight_f64_f32(a3);
  *(float64x2_t *)(v4 + 96) = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  *(float64x2_t *)(v4 + 112) = vcvt_hight_f64_f32(a4);
  v5 = (unsigned int *)(v4 + 128);
  atomic_store(0, (unsigned int *)(v4 + 128));
  v13[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v13);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_22FFD5224(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithMatrix2d(__n128 a1, __n128 a2)
{
  __n128 *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
        + 2;
  v2 = (__n128 *)operator new();
  *v2 = a1;
  v2[1] = a2;
  v3 = (unsigned int *)&v2[2];
  atomic_store(0, (unsigned int *)&v2[2]);
  v9[0] = v2;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  v5 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  return v5;
}

void sub_22FFD52EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithMatrix3d(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)a1 + 2);
  v10 = a1[2];
  v11 = *a1;
  v2 = *((_QWORD *)a1 + 6);
  v9 = a1[4];
  v3 = *((_QWORD *)a1 + 10);
  v12[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
         + 2;
  v4 = operator new();
  *(_OWORD *)v4 = v11;
  *(_QWORD *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v10;
  *(_QWORD *)(v4 + 40) = v2;
  *(_OWORD *)(v4 + 48) = v9;
  *(_QWORD *)(v4 + 64) = v3;
  v5 = (unsigned int *)(v4 + 72);
  atomic_store(0, (unsigned int *)(v4 + 72));
  v12[0] = v4;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v7;
}

void sub_22FFD53FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithMatrix4d(__int128 *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a1[1];
  v9 = *a1;
  v12 = a1[3];
  v7 = a1[4];
  v8 = a1[2];
  v10 = a1[7];
  v11 = a1[5];
  v6 = a1[6];
  v14[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
         + 2;
  v1 = operator new();
  *(_OWORD *)v1 = v9;
  *(_OWORD *)(v1 + 16) = v13;
  *(_OWORD *)(v1 + 32) = v8;
  *(_OWORD *)(v1 + 48) = v12;
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v11;
  *(_OWORD *)(v1 + 96) = v6;
  *(_OWORD *)(v1 + 112) = v10;
  v2 = (unsigned int *)(v1 + 128);
  atomic_store(0, (unsigned int *)(v1 + 128));
  v14[0] = v1;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v4 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v14);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  return v4;
}

void sub_22FFD5518(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithBoolArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *New;
  uint64_t i;
  char *v9;
  char *v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char v15;
  CFIndex j;
  const void *ValueAtIndex;
  char v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  char *v23;
  uint64_t v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v21);
  v3 = v21;
  if (Count != (_QWORD)v21)
  {
    if (!Count)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v21);
      goto LABEL_31;
    }
    v4 = v23;
    if (v23)
    {
      if (!*((_QWORD *)&v22 + 1))
      {
        v5 = atomic_load((unint64_t *)v23 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v21)
          {
            v6 = v23;
            if (*((_QWORD *)v23 - 1) < Count)
            {
              New = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v21, Count);
              v4 = New;
              if (v3)
              {
                for (i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], Count - v3);
          }
          v9 = v4;
          goto LABEL_25;
        }
        v4 = v23;
      }
      v12 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v21, Count);
      v9 = v12;
      if (v3 >= Count)
        v13 = Count;
      else
        v13 = v3;
      if (v13)
      {
        v14 = v12;
        do
        {
          v15 = *v4++;
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      v11 = Count - v3;
      if (Count <= v3)
        goto LABEL_25;
      v10 = &v12[v3];
    }
    else
    {
      v10 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v21, Count);
      v9 = v10;
      v11 = Count;
    }
    bzero(v10, v11);
LABEL_25:
    if (v9 != v23)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v21);
      v23 = v9;
    }
    *(_QWORD *)&v21 = Count;
  }
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      LOBYTE(v24[0]) = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetBool((uint64_t)ValueAtIndex, v24);
      v18 = v24[0];
      pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
      v23[j] = v18;
    }
  }
LABEL_31:
  v24[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v24, (uint64_t)&v21);
  v19 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v24);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v21);
  return v19;
}

void sub_22FFD5730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetBool(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_BYTE *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_BYTE *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB770], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD5888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithInt32Array(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  int v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)v8, Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      LODWORD(v9[0]) = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      RIOPxrVtValueGetInt32((uint64_t)ValueAtIndex, v9);
      v5 = v9[0];
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
      *(_DWORD *)(v8[4] + 4 * i) = v5;
    }
  }
  v9[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v9, (uint64_t)v8);
  v6 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_22FFD598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v6 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_22FFD5A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueGetInt32(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB798], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD5B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithInt64Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*(v24 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      v25[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetInt64((uint64_t)ValueAtIndex, v25);
      v19 = v25[0];
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  v25[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD5D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetInt64(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7D0], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD5EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithUInt32Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  int *v6;
  int *v7;
  uint64_t i;
  int *v9;
  int *New;
  size_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  CFIndex j;
  const void *ValueAtIndex;
  int v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  int *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (4 * Count / Count == 4)
    {
      New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 4 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*((_QWORD *)v24 - 1) < Count)
        {
          v7 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 4 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 4 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 4;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 4 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      LODWORD(v25[0]) = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetUInt32((uint64_t)ValueAtIndex, v25);
      v19 = v25[0];
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  v25[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD6118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt32(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7A0], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD6270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithUInt8Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *New;
  uint64_t i;
  char *v9;
  char *v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char v15;
  CFIndex j;
  const void *ValueAtIndex;
  char v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  char *v23;
  uint64_t v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v21);
  v3 = v21;
  if (Count != (_QWORD)v21)
  {
    if (!Count)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v21);
      goto LABEL_31;
    }
    v4 = v23;
    if (v23)
    {
      if (!*((_QWORD *)&v22 + 1))
      {
        v5 = atomic_load((unint64_t *)v23 - 2);
        if (v5 == 1)
        {
          if (Count > (unint64_t)v21)
          {
            v6 = v23;
            if (*((_QWORD *)v23 - 1) < Count)
            {
              New = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v21, Count);
              v4 = New;
              if (v3)
              {
                for (i = 0; i != v3; ++i)
                  New[i] = v6[i];
              }
            }
            bzero(&v4[v3], Count - v3);
          }
          v9 = v4;
          goto LABEL_25;
        }
        v4 = v23;
      }
      v12 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v21, Count);
      v9 = v12;
      if (v3 >= Count)
        v13 = Count;
      else
        v13 = v3;
      if (v13)
      {
        v14 = v12;
        do
        {
          v15 = *v4++;
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      v11 = Count - v3;
      if (Count <= v3)
        goto LABEL_25;
      v10 = &v12[v3];
    }
    else
    {
      v10 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)&v21, Count);
      v9 = v10;
      v11 = Count;
    }
    bzero(v10, v11);
LABEL_25:
    if (v9 != v23)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v21);
      v23 = v9;
    }
    *(_QWORD *)&v21 = Count;
  }
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      LOBYTE(v24[0]) = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetUInt8((uint64_t)ValueAtIndex, v24);
      v18 = v24[0];
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
      v23[j] = v18;
    }
  }
LABEL_31:
  v24[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v24, (uint64_t)&v21);
  v19 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v24);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v21);
  return v19;
}

void sub_22FFD6490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt8(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_BYTE *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_BYTE *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB790], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD65E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithUInt64Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*(v24 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      v25[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetUInt64((uint64_t)ValueAtIndex, v25);
      v19 = v25[0];
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  v25[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD6824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetUInt64(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7D8], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD697C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithFloatArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  int *v6;
  int *v7;
  uint64_t i;
  int *v9;
  int *New;
  size_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  CFIndex j;
  const void *ValueAtIndex;
  int v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  int *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (4 * Count / Count == 4)
    {
      New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 4 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*((_QWORD *)v24 - 1) < Count)
        {
          v7 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 4 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 4 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 4;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 4 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      LODWORD(v25[0]) = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetFloat((uint64_t)ValueAtIndex, v25);
      v19 = v25[0];
      pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  v25[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy(v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD6BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetFloat(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB788], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD6D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithDoubleArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*(v24 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      v25[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetDouble((uint64_t)ValueAtIndex, v25);
      v19 = v25[0];
      pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  v25[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy(v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD6F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetDouble(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB780], v8))
    return 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFD70B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithHalfArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  __int16 *v4;
  unint64_t v5;
  __int16 *v6;
  __int16 *v7;
  uint64_t i;
  __int16 *v9;
  __int16 *New;
  size_t v11;
  __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  __int16 *v15;
  __int16 v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  const void *ValueAtIndex;
  float v21;
  __int16 *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int16 *v28;
  uint64_t v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v26);
  v3 = v26;
  if (Count == (_QWORD)v26)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v28;
  if (!v28)
  {
    if (2 * Count / Count == 2)
    {
      New = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v26, Count);
      v9 = New;
      v11 = 2 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v26);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v27 + 1))
  {
    v5 = atomic_load((unint64_t *)v28 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v26)
      {
        v6 = v28;
        if (*((_QWORD *)v28 - 1) < Count)
        {
          v7 = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v26, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 2 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v28;
  }
  v12 = (__int16 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)&v26, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 2 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 2;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 2 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v28)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v26);
    v28 = v9;
  }
  *(_QWORD *)&v26 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    v17 = 0;
    v18 = MEMORY[0x24BEE8B20];
    v19 = MEMORY[0x24BEE8B10];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v17);
      v21 = 0.0;
      if (RIOPxrVtValueGetGfHalf((uint64_t)ValueAtIndex, v29))
        v21 = *(float *)(v18 + 4 * LOWORD(v29[0]));
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26);
      v22 = v28;
      if (v21 == 0.0)
      {
        v23 = HIWORD(LODWORD(v21));
      }
      else if (*(_WORD *)(v19 + 2 * (LODWORD(v21) >> 23)))
      {
        v23 = *(unsigned __int16 *)(v19 + 2 * (LODWORD(v21) >> 23))
            + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v23) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
      }
      v22[v17++] = v23;
    }
    while (Count != v17);
  }
  v29[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v29, (uint64_t)&v26);
  v24 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v29);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v26);
  return v24;
}

void sub_22FFD734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

float RIOPxrVtValueGetHalf(uint64_t a1, float *a2)
{
  float result;
  unsigned __int16 v4;

  if (RIOPxrVtValueGetGfHalf(a1, &v4))
  {
    result = *(float *)(MEMORY[0x24BEE8B20] + 4 * v4);
    *a2 = result;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithInt2Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  int GfVec2i;
  int8x8_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  v3 = v24;
  if (Count == (_QWORD)v24)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v26;
  if (!v26)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v24, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v25 + 1))
  {
    v5 = atomic_load((unint64_t *)v26 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v24)
      {
        v6 = v26;
        if (*(v26 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v24, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v26;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)&v24, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v26)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
    v26 = v9;
  }
  *(_QWORD *)&v24 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      v27[0] = 0;
      GfVec2i = RIOPxrVtValueGetGfVec2i((uint64_t)ValueAtIndex, v27);
      v20 = (int8x8_t)v27[0];
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
      if (GfVec2i)
        v21 = -1;
      else
        v21 = 0;
      v26[j] = (uint64_t)vand_s8(v20, (int8x8_t)vdup_n_s32(v21));
    }
  }
  v27[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v27, (uint64_t)&v24);
  v22 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v27);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
  return v22;
}

void sub_22FFD762C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt2(uint64_t a1, double *a2)
{
  double result;
  double v4;

  v4 = 0.0;
  if (RIOPxrVtValueGetGfVec2i(a1, &v4))
  {
    result = v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithInt3Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  CFIndex i;
  const void *ValueAtIndex;
  int GfVec3i;
  int8x16_t v25;
  unsigned int v26;
  int8x16_t v27;
  char *v28;
  uint64_t v29;
  __int32 v31;
  int8x16_t v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  int8x16_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v36.i32[2] = 0;
  v36.i64[0] = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v33);
  v3 = v33;
  if ((_QWORD)v33 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v35;
  if (v35)
  {
    if (!*((_QWORD *)&v34 + 1))
    {
      v5 = atomic_load(v35 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v33 < Count)
        {
          v6 = v35;
          if (*(v35 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v33, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = (char *)New + v8;
                v10 = *(_QWORD *)((char *)v6 + v8);
                *((_DWORD *)v9 + 2) = *(_DWORD *)((char *)v6 + v8 + 8);
                *(_QWORD *)v9 = v10;
                v8 += 12;
              }
              while (12 * v3 != v8);
            }
          }
          v11 = 12 * v3;
          do
          {
            v12 = (char *)v4 + v11;
            *(_QWORD *)v12 = v36.i64[0];
            *((_DWORD *)v12 + 2) = v36.i32[2];
            v11 += 12;
          }
          while (12 * Count != v11);
        }
        v13 = v4;
        goto LABEL_27;
      }
      v4 = v35;
    }
    v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v33, Count);
    v13 = v14;
    if (v3 >= Count)
      v15 = Count;
    else
      v15 = v3;
    if (v15)
    {
      v16 = 12 * v15;
      v17 = v14;
      do
      {
        v18 = *v4;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v4 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v4 = (_QWORD *)((char *)v4 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    if (v3 < Count)
    {
      v19 = 12 * v3;
      do
      {
        v20 = (char *)v14 + v19;
        *(_QWORD *)v20 = v36.i64[0];
        *((_DWORD *)v20 + 2) = v36.i32[2];
        v19 += 12;
      }
      while (12 * Count != v19);
    }
    goto LABEL_27;
  }
  if (Count >= 0x1555555555555556)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v33);
    goto LABEL_30;
  }
  v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)&v33, Count);
  bzero(v13, 12 * ((12 * Count - 12) / 0xC) + 12);
LABEL_27:
  if (v13 != v35)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
    v35 = v13;
  }
  *(_QWORD *)&v33 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v21 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v36.i32[2] = 0;
      v36.i64[0] = 0;
      GfVec3i = RIOPxrVtValueGetGfVec3i((uint64_t)ValueAtIndex, (uint64_t)&v36);
      v32 = v36;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33);
      v25.i64[0] = 0;
      v25.i32[2] = 0;
      v25.i32[3] = v31;
      if (GfVec3i)
        v26 = -1;
      else
        v26 = 0;
      v27 = vbslq_s8((int8x16_t)vdupq_n_s32(v26), v32, v25);
      v28 = (char *)v35 + v21;
      *(_QWORD *)v28 = v27.i64[0];
      v31 = v27.i32[3];
      *((_DWORD *)v28 + 2) = v27.i32[2];
      v21 += 12;
    }
  }
  v36.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v36.i64, (uint64_t)&v33);
  v29 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v36);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v36);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
  return v29;
}

void sub_22FFD79C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt3(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  DWORD2(v4) = 0;
  *(_QWORD *)&v4 = 0;
  if (RIOPxrVtValueGetGfVec3i(a1, (uint64_t)&v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithInt4Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  __int128 *v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *New;
  unint64_t i;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  int GfVec4i;
  unsigned int v20;
  int8x16_t v21;
  int32x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  int8x16_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v31 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
  v3 = v28;
  if ((_QWORD)v28 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v30;
  if (v30)
  {
    if (!*((_QWORD *)&v29 + 1))
    {
      v5 = atomic_load((unint64_t *)v30 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v28 < Count)
        {
          v6 = v30;
          if (*((_QWORD *)v30 - 1) < Count)
          {
            New = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v28, Count);
            v4 = New;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                New[i] = v6[i];
            }
          }
          v9 = v3;
          do
            v4[v9++] = (__int128)v31;
          while (Count != v9);
        }
        v10 = v4;
        goto LABEL_27;
      }
      v4 = v30;
    }
    v11 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v28, Count);
    v10 = v11;
    if (v3 >= Count)
      v12 = Count;
    else
      v12 = v3;
    if (v12)
    {
      v13 = 16 * v12;
      v14 = v11;
      do
      {
        v15 = *v4++;
        *v14++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3 < Count)
    {
      v16 = v3;
      do
        v11[v16++] = (__int128)v31;
      while (Count != v16);
    }
    goto LABEL_27;
  }
  if (16 * Count / Count != 16)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v28);
    goto LABEL_30;
  }
  v10 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)&v28, Count);
  bzero(v10, 16 * Count);
LABEL_27:
  if (v10 != v30)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
    v30 = v10;
  }
  *(_QWORD *)&v28 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      v31 = 0uLL;
      GfVec4i = RIOPxrVtValueGetGfVec4i((uint64_t)ValueAtIndex, &v31);
      v27 = v31;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v28);
      if (GfVec4i)
        v20 = -1;
      else
        v20 = 0;
      v21 = vandq_s8(v27, (int8x16_t)vdupq_n_s32(v20));
      v22 = (int32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
      v23 = (int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)v21.i8, v22), 0x20uLL);
      *(int32x2_t *)v21.i8 = vzip1_s32(*(int32x2_t *)v21.i8, v22);
      v24.i64[0] = v21.u32[0];
      v24.i64[1] = v21.u32[1];
      v30[j] = (__int128)vorrq_s8(v23, v24);
    }
  }
  v31.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v31.i64, (uint64_t)&v28);
  v25 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v31);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v31);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v28);
  return v25;
}

void sub_22FFD7CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetInt4(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec4i(a1, &v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithHalf2Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  int *v6;
  int *v7;
  uint64_t i;
  int *v9;
  int *New;
  size_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  CFIndex v17;
  uint64_t v18;
  const void *ValueAtIndex;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float v24;
  __int128 v25;
  __int128 v26;
  int *v27;
  uint64_t v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v25);
  v3 = v25;
  if (Count == (_QWORD)v25)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v27;
  if (!v27)
  {
    if (4 * Count / Count == 4)
    {
      New = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v25, Count);
      v9 = New;
      v11 = 4 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v25);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v26 + 1))
  {
    v5 = atomic_load((unint64_t *)v27 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v25)
      {
        v6 = v27;
        if (*((_QWORD *)v27 - 1) < Count)
        {
          v7 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v25, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 4 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v27;
  }
  v12 = (int *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)&v25, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 4 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 4;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 4 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v27)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v25);
    v27 = v9;
  }
  *(_QWORD *)&v25 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    v17 = 0;
    v18 = MEMORY[0x24BEE8B10];
    do
    {
      v28[0] = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v17);
      RIOPxrVtValueGetHalf2((uint64_t)ValueAtIndex, v28);
      v24 = *((float *)v28 + 1);
      if (*(float *)v28 == 0.0)
      {
        v20 = HIWORD(LODWORD(v28[0]));
      }
      else if (*(_WORD *)(v18 + 2 * (LODWORD(v28[0]) >> 23)))
      {
        v20 = *(unsigned __int16 *)(v18 + 2 * (LODWORD(v28[0]) >> 23))
            + (((v28[0] & 0x7FFFFF) + ((LODWORD(v28[0]) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v28[0]));
      }
      if (v24 == 0.0)
      {
        v21 = HIWORD(LODWORD(v24));
      }
      else if (*(_WORD *)(v18 + 2 * (LODWORD(v24) >> 23)))
      {
        v21 = *(unsigned __int16 *)(v18 + 2 * (LODWORD(v24) >> 23))
            + (((LODWORD(v24) & 0x7FFFFF) + ((LODWORD(v24) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v21) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v24));
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v25);
      v27[v17++] = (unsigned __int16)v20 | ((unsigned __int16)v21 << 16);
    }
    while (Count != v17);
  }
  v28[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v28, (uint64_t)&v25);
  v22 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v28);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v25);
  return v22;
}

void sub_22FFD8028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetHalf2(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 24))
    {
      v4 = (unsigned int *)(result + 16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
      {
        v5 = *(_QWORD *)(v2 + 24);
        if ((v5 & 4) != 0)
          v4 = (unsigned int *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
        v6 = *v4;
        goto LABEL_10;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      if (!(_DWORD)result)
        return result;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
      if (v9->__type_name)
      {
        v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
LABEL_10:
        LODWORD(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v6);
        HIDWORD(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * HIWORD(v6));
        *a2 = v10;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    }
    return 0;
  }
  return result;
}

void sub_22FFD8198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithHalf3Array(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  const void *ValueAtIndex;
  __int128 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  _BYTE v16[32];
  uint64_t v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray((uint64_t)v16, Count);
  if (Count >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = MEMORY[0x24BEE8B20];
    v6 = MEMORY[0x24BEE8B10];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
      WORD2(v18[0]) = 0;
      LODWORD(v18[0]) = 0;
      if (RIOPxrVtValueGetGfVec3h((uint64_t)ValueAtIndex, (uint64_t)v18))
      {
        LODWORD(v8) = *(_DWORD *)(v5 + 4 * LOWORD(v18[0]));
        DWORD1(v8) = *(_DWORD *)(v5 + 4 * WORD1(v18[0]));
        DWORD2(v8) = *(_DWORD *)(v5 + 4 * WORD2(v18[0]));
      }
      else
      {
        *(_QWORD *)&v8 = 0;
        DWORD2(v8) = 0;
        HIDWORD(v8) = HIDWORD(v15);
      }
      v15 = v8;
      if (*(float *)&v8 == 0.0)
      {
        v9 = WORD1(v8);
      }
      else if (*(_WORD *)(v6 + 2 * (v8 >> 23)))
      {
        v9 = *(unsigned __int16 *)(v6 + 2 * (v8 >> 23))
           + ((unsigned __int128)((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)v8);
      }
      if (*((float *)&v15 + 1) == 0.0)
      {
        v10 = HIWORD(DWORD1(v15));
      }
      else if (*(_WORD *)(v6 + 2 * (DWORD1(v15) >> 23)))
      {
        v10 = *(unsigned __int16 *)(v6 + 2 * (DWORD1(v15) >> 23))
            + (((DWORD1(v15) & 0x7FFFFF) + ((DWORD1(v15) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)DWORD1(v15));
      }
      if (*((float *)&v15 + 2) == 0.0)
      {
        v11 = HIWORD(DWORD2(v15));
      }
      else if (*(_WORD *)(v6 + 2 * (DWORD2(v15) >> 23)))
      {
        v11 = *(unsigned __int16 *)(v6 + 2 * (DWORD2(v15) >> 23))
            + (((DWORD2(v15) & 0x7FFFFF) + ((DWORD2(v15) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)DWORD2(v15));
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
      v12 = v17 + v3;
      *(_DWORD *)v12 = (unsigned __int16)v9 | ((unsigned __int16)v10 << 16);
      *(_WORD *)(v12 + 4) = v11;
      ++v4;
      v3 += 6;
    }
    while (Count != v4);
  }
  v18[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v18, (uint64_t)v16);
  v13 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v18);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v16);
  return v13;
}

void sub_22FFD83E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetHalf3(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __n128 result;
  int v5;
  unsigned __int16 v6;

  v6 = 0;
  v5 = 0;
  if (RIOPxrVtValueGetGfVec3h(a1, (uint64_t)&v5))
  {
    LODWORD(v3) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v5);
    DWORD1(v3) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * HIWORD(v5));
    DWORD2(v3) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * v6);
    *a2 = v3;
  }
  result.n128_u64[0] = v3;
  result.n128_u32[2] = DWORD2(v3);
  return result;
}

uint64_t RIOPxrVtValueCreateWithHalf4Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  unint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
  v3 = v22;
  if (Count == (_QWORD)v22)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v24;
  if (!v24)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v22, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v22);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v23 + 1))
  {
    v5 = atomic_load((unint64_t *)v24 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v22)
      {
        v6 = v24;
        if (*(v24 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v22, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v24;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)&v22, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v24)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
    v24 = v9;
  }
  *(_QWORD *)&v22 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      v25 = 0uLL;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      RIOPxrVtValueGetHalf4((uint64_t)ValueAtIndex, &v25);
      v19 = _Z7to_vec4IDv4_fN32pxrInternal__aapl__pxrReserved__7GfVec4hEET0_RKT_((uint64_t)&v25);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
      v24[j] = v19;
    }
  }
  *((_QWORD *)&v25 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v25, (uint64_t)&v22);
  v20 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return v20;
}

void sub_22FFD86B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetHalf4(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  __int128 v10;
  _BYTE v11[16];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 24))
    {
      v4 = (unint64_t *)(result + 16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
      {
        v5 = *(_QWORD *)(v2 + 24);
        if ((v5 & 4) != 0)
          v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
        v6 = *v4;
        goto LABEL_10;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      if (!(_DWORD)result)
        return result;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
      if (v9->__type_name)
      {
        v6 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
LABEL_10:
        LODWORD(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v6);
        DWORD1(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * WORD1(v6));
        DWORD2(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * WORD2(v6));
        HIDWORD(v10) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * HIWORD(v6));
        *a2 = v10;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    }
    return 0;
  }
  return result;
}

void sub_22FFD8840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithFloat2Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *New;
  size_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  int GfVec2f;
  int8x8_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  v3 = v24;
  if (Count == (_QWORD)v24)
    goto LABEL_29;
  if (!Count)
    goto LABEL_15;
  v4 = v26;
  if (!v26)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v24, Count);
      v9 = New;
      v11 = 8 * Count;
      goto LABEL_25;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v25 + 1))
  {
    v5 = atomic_load((unint64_t *)v26 - 2);
    if (v5 == 1)
    {
      if (Count > (unint64_t)v24)
      {
        v6 = v26;
        if (*(v26 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v24, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
        bzero(&v4[v3], 8 * (Count - v3));
      }
      v9 = v4;
      goto LABEL_26;
    }
    v4 = v26;
  }
  v12 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)&v24, Count);
  v9 = v12;
  if (v3 >= Count)
    v13 = Count;
  else
    v13 = v3;
  if (v13)
  {
    v14 = 8 * v13;
    v15 = v12;
    do
    {
      v16 = *v4++;
      *v15++ = v16;
      v14 -= 8;
    }
    while (v14);
  }
  if (Count <= v3)
    goto LABEL_26;
  v11 = 8 * (Count - v3);
  New = &v12[v3];
LABEL_25:
  bzero(New, v11);
LABEL_26:
  if (v9 != v26)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
    v26 = v9;
  }
  *(_QWORD *)&v24 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      v27[0] = 0;
      GfVec2f = RIOPxrVtValueGetGfVec2f((uint64_t)ValueAtIndex, v27);
      v20 = (int8x8_t)v27[0];
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
      if (GfVec2f)
        v21 = -1;
      else
        v21 = 0;
      v26[j] = (uint64_t)vand_s8(v20, (int8x8_t)vdup_n_s32(v21));
    }
  }
  v27[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v27, (uint64_t)&v24);
  v22 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v27);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
  return v22;
}

void sub_22FFD8A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat2(uint64_t a1, double *a2)
{
  double result;
  double v4;

  v4 = 0.0;
  if (RIOPxrVtValueGetGfVec2f(a1, &v4))
  {
    result = v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithFloat3Array(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  CFIndex i;
  const void *ValueAtIndex;
  int GfVec3f;
  int8x16_t v7;
  unsigned int v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  __int32 v13;
  int8x16_t v14;
  _BYTE v15[32];
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)v15, Count);
  if (Count >= 1)
  {
    v3 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v17.i32[2] = 0;
      v17.i64[0] = 0;
      GfVec3f = RIOPxrVtValueGetGfVec3f((uint64_t)ValueAtIndex, (uint64_t)&v17);
      v14 = v17;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15);
      v7.i64[0] = 0;
      v7.i32[2] = 0;
      v7.i32[3] = v13;
      if (GfVec3f)
        v8 = -1;
      else
        v8 = 0;
      v9 = vbslq_s8((int8x16_t)vdupq_n_s32(v8), v14, v7);
      v10 = v16 + v3;
      *(_QWORD *)v10 = v9.i64[0];
      v13 = v9.i32[3];
      *(_DWORD *)(v10 + 8) = v9.i32[2];
      v3 += 12;
    }
  }
  v17.i64[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v17.i64, (uint64_t)v15);
  v11 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v17);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v17);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v15);
  return v11;
}

void sub_22FFD8C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat3(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  DWORD2(v4) = 0;
  *(_QWORD *)&v4 = 0;
  if (RIOPxrVtValueGetGfVec3f(a1, (uint64_t)&v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithFloat4Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  __int128 *v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *New;
  unint64_t i;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  int GfVec4f;
  unsigned int v20;
  uint64_t v21;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  int8x16_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v27 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  v3 = v24;
  if ((_QWORD)v24 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v26;
  if (v26)
  {
    if (!*((_QWORD *)&v25 + 1))
    {
      v5 = atomic_load((unint64_t *)v26 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v24 < Count)
        {
          v6 = v26;
          if (*((_QWORD *)v26 - 1) < Count)
          {
            New = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v24, Count);
            v4 = New;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                New[i] = v6[i];
            }
          }
          v9 = v3;
          do
            v4[v9++] = (__int128)v27;
          while (Count != v9);
        }
        v10 = v4;
        goto LABEL_27;
      }
      v4 = v26;
    }
    v11 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v24, Count);
    v10 = v11;
    if (v3 >= Count)
      v12 = Count;
    else
      v12 = v3;
    if (v12)
    {
      v13 = 16 * v12;
      v14 = v11;
      do
      {
        v15 = *v4++;
        *v14++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3 < Count)
    {
      v16 = v3;
      do
        v11[v16++] = (__int128)v27;
      while (Count != v16);
    }
    goto LABEL_27;
  }
  if (16 * Count / Count != 16)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
    goto LABEL_30;
  }
  v10 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)&v24, Count);
  bzero(v10, 16 * Count);
LABEL_27:
  if (v10 != v26)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
    v26 = v10;
  }
  *(_QWORD *)&v24 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      v27 = 0uLL;
      GfVec4f = RIOPxrVtValueGetGfVec4f((uint64_t)ValueAtIndex, &v27);
      v23 = v27;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
      if (GfVec4f)
        v20 = -1;
      else
        v20 = 0;
      v26[j] = (__int128)vandq_s8(v23, (int8x16_t)vdupq_n_s32(v20));
    }
  }
  v27.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v27.i64, (uint64_t)&v24);
  v21 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v27);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
  return v21;
}

void sub_22FFD8F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetFloat4(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec4f(a1, &v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithDouble2Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  __int128 *v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *New;
  unint64_t i;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  CFIndex j;
  const void *ValueAtIndex;
  int GfVec2d;
  unint64_t v20;
  uint64_t v21;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  int8x16_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v27 = 0uLL;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
  v3 = v24;
  if ((_QWORD)v24 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v26;
  if (v26)
  {
    if (!*((_QWORD *)&v25 + 1))
    {
      v5 = atomic_load((unint64_t *)v26 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v24 < Count)
        {
          v6 = v26;
          if (*((_QWORD *)v26 - 1) < Count)
          {
            New = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v24, Count);
            v4 = New;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                New[i] = v6[i];
            }
          }
          v9 = v3;
          do
            v4[v9++] = (__int128)v27;
          while (Count != v9);
        }
        v10 = v4;
        goto LABEL_27;
      }
      v4 = v26;
    }
    v11 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v24, Count);
    v10 = v11;
    if (v3 >= Count)
      v12 = Count;
    else
      v12 = v3;
    if (v12)
    {
      v13 = 16 * v12;
      v14 = v11;
      do
      {
        v15 = *v4++;
        *v14++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3 < Count)
    {
      v16 = v3;
      do
        v11[v16++] = (__int128)v27;
      while (Count != v16);
    }
    goto LABEL_27;
  }
  if (16 * Count / Count != 16)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v24);
    goto LABEL_30;
  }
  v10 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)&v24, Count);
  bzero(v10, 16 * Count);
LABEL_27:
  if (v10 != v26)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
    v26 = v10;
  }
  *(_QWORD *)&v24 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
      v27 = 0uLL;
      GfVec2d = RIOPxrVtValueGetGfVec2d((uint64_t)ValueAtIndex, &v27);
      v23 = v27;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
      if (GfVec2d)
        v20 = -1;
      else
        v20 = 0;
      v26[j] = (__int128)vandq_s8(v23, (int8x16_t)vdupq_n_s64(v20));
    }
  }
  v27.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v27.i64, (uint64_t)&v24);
  v21 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v27);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v27);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v24);
  return v21;
}

void sub_22FFD9240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetDouble2(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  v4 = 0uLL;
  if (RIOPxrVtValueGetGfVec2d(a1, &v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithDouble3Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  CFIndex i;
  const void *ValueAtIndex;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v34 = 0uLL;
  v35 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v31);
  v3 = v31;
  if ((_QWORD)v31 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v33;
  if (v33)
  {
    if (!*((_QWORD *)&v32 + 1))
    {
      v5 = atomic_load(v33 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v31 < Count)
        {
          v6 = v33;
          if (*(v33 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v31, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8];
                v10 = *(_OWORD *)&v6[v8];
                v9[2] = v6[v8 + 2];
                *(_OWORD *)v9 = v10;
                v8 += 3;
              }
              while (3 * v3 != v8);
            }
          }
          v11 = 3 * v3;
          do
          {
            v12 = &v4[v11];
            *(_OWORD *)v12 = v34;
            v12[2] = v35;
            v11 += 3;
          }
          while (3 * Count != v11);
        }
        v13 = v4;
        goto LABEL_27;
      }
      v4 = v33;
    }
    v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v31, Count);
    v13 = v14;
    if (v3 >= Count)
      v15 = Count;
    else
      v15 = v3;
    if (v15)
    {
      v16 = 24 * v15;
      v17 = v14;
      do
      {
        v18 = *(_OWORD *)v4;
        v17[2] = v4[2];
        *(_OWORD *)v17 = v18;
        v17 += 3;
        v4 += 3;
        v16 -= 24;
      }
      while (v16);
    }
    if (v3 < Count)
    {
      v19 = 3 * v3;
      do
      {
        v20 = &v14[v19];
        *(_OWORD *)v20 = v34;
        v20[2] = v35;
        v19 += 3;
      }
      while (3 * Count != v19);
    }
    goto LABEL_27;
  }
  if (Count >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v31);
    goto LABEL_30;
  }
  v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew((uint64_t)&v31, Count);
  bzero(v13, 24 * ((24 * Count - 24) / 0x18) + 24);
LABEL_27:
  if (v13 != v33)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v31);
    v33 = v13;
  }
  *(_QWORD *)&v31 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v21 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v34 = 0uLL;
      v35 = 0;
      if (RIOPxrVtValueGetGfVec3d((uint64_t)ValueAtIndex, (uint64_t)&v34))
      {
        *(_QWORD *)&v24 = v35;
        v29 = v34;
        v30 = v24;
      }
      else
      {
        *(_QWORD *)&v25 = 0;
        v29 = 0u;
        *((_QWORD *)&v25 + 1) = *((_QWORD *)&v30 + 1);
        v30 = v25;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31);
      v26 = &v33[v21];
      *(_OWORD *)v26 = v29;
      v26[2] = v30;
      v21 += 3;
    }
  }
  *((_QWORD *)&v34 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v34, (uint64_t)&v31);
  v27 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v34);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v31);
  return v27;
}

void sub_22FFD95DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetDouble3(uint64_t a1, __n128 *a2)
{
  __n128 result;
  __n128 v4;
  __n128 v5;
  unint64_t v6;

  v5 = 0uLL;
  v6 = 0;
  if (RIOPxrVtValueGetGfVec3d(a1, (uint64_t)&v5))
  {
    result = v5;
    v4.n128_u64[0] = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithDouble4Array(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *New;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  CFIndex i;
  const void *ValueAtIndex;
  _OWORD *v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v30);
  v3 = v30;
  if ((_QWORD)v30 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v32;
  if (v32)
  {
    if (!*((_QWORD *)&v31 + 1))
    {
      v5 = atomic_load((unint64_t *)v32 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v30 < Count)
        {
          v6 = v32;
          if (*((_QWORD *)v32 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v30, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8 / 8];
                v10 = v6[v8 / 0x10 + 1];
                *v9 = v6[v8 / 0x10];
                v9[1] = v10;
                v8 += 32;
              }
              while (32 * v3 != v8);
            }
          }
          v11 = 2 * v3;
          do
          {
            v12 = &v4[v11];
            *v12 = v33;
            v12[1] = v34;
            v11 += 2;
          }
          while (2 * Count != v11);
        }
        v13 = v4;
        goto LABEL_27;
      }
      v4 = v32;
    }
    v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v30, Count);
    v13 = v14;
    if (v3 >= Count)
      v15 = Count;
    else
      v15 = v3;
    if (v15)
    {
      v16 = 32 * v15;
      v17 = v14;
      do
      {
        v18 = *v4;
        v19 = v4[1];
        v4 += 2;
        *v17 = v18;
        v17[1] = v19;
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    if (v3 < Count)
    {
      v20 = 4 * v3;
      do
      {
        v21 = &v14[v20];
        *v21 = v33;
        v21[1] = v34;
        v20 += 4;
      }
      while (4 * Count != v20);
    }
    goto LABEL_27;
  }
  if (32 * Count / Count != 32)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v30);
    goto LABEL_30;
  }
  v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)&v30, Count);
  bzero(v13, 32 * Count);
LABEL_27:
  if (v13 != (_QWORD *)v32)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
    v32 = v13;
  }
  *(_QWORD *)&v30 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v22 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v33 = 0u;
      v34 = 0u;
      v28 = 0u;
      v29 = 0u;
      if (RIOPxrVtValueGetGfVec4d((uint64_t)ValueAtIndex, &v33))
      {
        v29 = v33;
        v28 = v34;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v30);
      v25 = &v32[v22];
      *v25 = v29;
      v25[1] = v28;
      v22 += 2;
    }
  }
  *((_QWORD *)&v33 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v33, (uint64_t)&v30);
  v26 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v33);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
  return v26;
}

void sub_22FFD9924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetDouble4(uint64_t a1, __n128 *a2)
{
  __n128 result;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v5 = 0u;
  v6 = 0u;
  if (RIOPxrVtValueGetGfVec4d(a1, &v5))
  {
    result = v5;
    v4 = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithQuathArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;
  _QWORD *New;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  const void *ValueAtIndex;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  std::type_info_vtbl *v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
  v3 = v20;
  if ((_QWORD)v20 == Count)
    goto LABEL_26;
  if (!Count)
    goto LABEL_14;
  v4 = v22;
  if (!v22)
  {
    if (8 * Count / Count == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v20, Count);
      goto LABEL_22;
    }
LABEL_14:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v20);
    goto LABEL_26;
  }
  if (!*((_QWORD *)&v21 + 1))
  {
    v5 = atomic_load(v22 - 2);
    if (v5 == 1)
    {
      if ((unint64_t)v20 < Count)
      {
        v6 = v22;
        if (*(v22 - 1) < Count)
        {
          v7 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v20, Count);
          v4 = v7;
          if (v3)
          {
            for (i = 0; i != v3; ++i)
              v7[i] = v6[i];
          }
        }
      }
      goto LABEL_23;
    }
    v4 = v22;
  }
  New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)&v20, Count);
  if (v3 >= Count)
    v10 = Count;
  else
    v10 = v3;
  if (v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    do
    {
      New[v11 / 8] = v4[v11 / 8];
      v11 += 8;
    }
    while (v12 != v11);
  }
LABEL_22:
  v4 = New;
LABEL_23:
  if (v4 != v22)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
    v22 = v4;
  }
  *(_QWORD *)&v20 = Count;
LABEL_26:
  if ((uint64_t)Count >= 1)
  {
    v13 = 0;
    v14 = MEMORY[0x24BEE8B20];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
      if (RIOPxrVtValueGetGfQuath((uint64_t)ValueAtIndex, &v23))
      {
        LODWORD(v16) = *(_DWORD *)(v14 + 4 * (unsigned __int16)v23);
        DWORD1(v16) = *(_DWORD *)(v14 + 4 * WORD1(v23));
        DWORD2(v16) = *(_DWORD *)(v14 + 4 * WORD2(v23));
        HIDWORD(v16) = *(_DWORD *)(v14 + 4 * HIWORD(v23));
        v24 = v16;
      }
      v17 = to_GfQuat<simd_quatf,pxrInternal__aapl__pxrReserved__::GfQuath>((uint64_t)&v24);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
      v22[v13++] = v17;
    }
    while (Count != v13);
  }
  *((_QWORD *)&v24 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v24, (uint64_t)&v20);
  v18 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v24);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
  return v18;
}

void sub_22FFD9C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetQuath(uint64_t a1, __n128 *a2)
{
  __n128 result;
  std::type_info_vtbl *v4;

  if (RIOPxrVtValueGetGfQuath(a1, &v4))
  {
    result.n128_u32[0] = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v4);
    result.n128_u32[1] = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * WORD1(v4));
    result.n128_u32[2] = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * WORD2(v4));
    result.n128_u32[3] = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * HIWORD(v4));
    *a2 = result;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithQuatfArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  int GfQuatf;
  unsigned int v6;
  uint64_t v7;
  int8x16_t v9;
  int8x16_t v10;
  _BYTE v11[32];
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray((uint64_t)v11, Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      GfQuatf = RIOPxrVtValueGetGfQuatf((uint64_t)ValueAtIndex, &v13);
      v10 = v13;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11);
      if (GfQuatf)
        v6 = -1;
      else
        v6 = 0;
      v9 = vbslq_s8((int8x16_t)vdupq_n_s32(v6), v10, v9);
      *(int8x16_t *)(v12 + 16 * i) = v9;
    }
  }
  v13.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v13.i64, (uint64_t)v11);
  v7 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v13);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v11);
  return v7;
}

void sub_22FFD9DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetQuatf(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;

  if (RIOPxrVtValueGetGfQuatf(a1, &v4))
  {
    result = *(double *)&v4;
    *a2 = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithQuatdArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *New;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  CFIndex i;
  const void *ValueAtIndex;
  _OWORD *v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v30);
  v3 = v30;
  if ((_QWORD)v30 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v32;
  if (v32)
  {
    if (!*((_QWORD *)&v31 + 1))
    {
      v5 = atomic_load((unint64_t *)v32 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v30 < Count)
        {
          v6 = v32;
          if (*((_QWORD *)v32 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v30, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8 / 8];
                v10 = v6[v8 / 0x10 + 1];
                *v9 = v6[v8 / 0x10];
                v9[1] = v10;
                v8 += 32;
              }
              while (32 * v3 != v8);
            }
          }
          v11 = 2 * v3;
          do
          {
            v12 = &v4[v11];
            *v12 = v33;
            v12[1] = v34;
            v11 += 2;
          }
          while (2 * Count != v11);
        }
        v13 = v4;
        goto LABEL_27;
      }
      v4 = v32;
    }
    v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v30, Count);
    v13 = v14;
    if (v3 >= Count)
      v15 = Count;
    else
      v15 = v3;
    if (v15)
    {
      v16 = 32 * v15;
      v17 = v14;
      do
      {
        v18 = *v4;
        v19 = v4[1];
        v4 += 2;
        *v17 = v18;
        v17[1] = v19;
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    if (v3 < Count)
    {
      v20 = 4 * v3;
      do
      {
        v21 = &v14[v20];
        *v21 = v33;
        v21[1] = v34;
        v20 += 4;
      }
      while (4 * Count != v20);
    }
    goto LABEL_27;
  }
  if (32 * Count / Count != 32)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v30);
    goto LABEL_30;
  }
  v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)&v30, Count);
LABEL_27:
  if (v13 != (_QWORD *)v32)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
    v32 = v13;
  }
  *(_QWORD *)&v30 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v22 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      if (RIOPxrVtValueGetGfQuatd((uint64_t)ValueAtIndex, &v33))
      {
        v28 = v34;
        v29 = v33;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v30);
      v25 = &v32[v22];
      *v25 = v29;
      v25[1] = v28;
      v22 += 2;
    }
  }
  *((_QWORD *)&v33 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v33, (uint64_t)&v30);
  v26 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v33);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
  return v26;
}

void sub_22FFDA0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetQuatd(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v4;
  _OWORD v5[2];

  if (RIOPxrVtValueGetGfQuatd(a1, v5))
  {
    result = (__n128)v5[0];
    v4 = v5[1];
    *a2 = v5[0];
    a2[1] = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithMatrix2dArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *New;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  int8x16_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  CFIndex i;
  const void *ValueAtIndex;
  int GfMatrix2d;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  uint64_t v29;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  _OWORD *v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v35);
  v3 = v35;
  if ((_QWORD)v35 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v37;
  if (v37)
  {
    if (!*((_QWORD *)&v36 + 1))
    {
      v5 = atomic_load((unint64_t *)v37 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v35 < Count)
        {
          v6 = v37;
          if (*((_QWORD *)v37 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v35, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8 / 8];
                v10 = v6[v8 / 0x10 + 1];
                *v9 = v6[v8 / 0x10];
                v9[1] = v10;
                v8 += 32;
              }
              while (32 * v3 != v8);
            }
          }
          v11 = 2 * v3;
          do
          {
            v12 = (int8x16_t *)&v4[v11];
            *v12 = v38;
            v12[1] = v39;
            v11 += 2;
          }
          while (2 * Count != v11);
        }
        v13 = v4;
        goto LABEL_27;
      }
      v4 = v37;
    }
    v14 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v35, Count);
    v13 = v14;
    if (v3 >= Count)
      v15 = Count;
    else
      v15 = v3;
    if (v15)
    {
      v16 = 32 * v15;
      v17 = v14;
      do
      {
        v18 = *v4;
        v19 = v4[1];
        v4 += 2;
        *v17 = v18;
        v17[1] = v19;
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    if (v3 < Count)
    {
      v20 = 4 * v3;
      do
      {
        v21 = (int8x16_t *)&v14[v20];
        *v21 = v38;
        v21[1] = v39;
        v20 += 4;
      }
      while (4 * Count != v20);
    }
    goto LABEL_27;
  }
  if (32 * Count / Count != 32)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v35);
    goto LABEL_30;
  }
  v13 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)&v35, Count);
  bzero(v13, 32 * Count);
LABEL_27:
  if (v13 != (_QWORD *)v37)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
    v37 = v13;
  }
  *(_QWORD *)&v35 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v22 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v38 = 0u;
      v39 = 0u;
      GfMatrix2d = RIOPxrVtValueGetGfMatrix2d((uint64_t)ValueAtIndex, &v38);
      v33 = v39;
      v34 = v38;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      if (GfMatrix2d)
        v26 = -1;
      else
        v26 = 0;
      v27 = (int8x16_t)vdupq_n_s64(v26);
      v28 = (int8x16_t *)&v37[v22];
      v31 = vbslq_s8(v27, v33, v31);
      v32 = vbslq_s8(v27, v34, v32);
      *v28 = v32;
      v28[1] = v31;
      v22 += 2;
    }
  }
  v38.i64[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v38.i64, (uint64_t)&v35);
  v29 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v38);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  return v29;
}

void sub_22FFDA410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double RIOPxrVtValueGetMatrix2d(uint64_t a1, _OWORD *a2)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  if (RIOPxrVtValueGetGfMatrix2d(a1, &v5))
  {
    result = *(double *)&v5;
    v4 = v6;
    *a2 = v5;
    a2[1] = v4;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithMatrix3dArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *New;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  CFIndex i;
  const void *ValueAtIndex;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  _OWORD v41[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v43 = 0;
  v42 = 0u;
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v37);
  v3 = v37;
  if ((_QWORD)v37 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v39;
  if (v39)
  {
    if (!*((_QWORD *)&v38 + 1))
    {
      v5 = atomic_load(v39 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v37 < Count)
        {
          v6 = v39;
          if (*(v39 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v37, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8];
                *(_OWORD *)v9 = *(_OWORD *)&v6[v8];
                v10 = *(_OWORD *)&v6[v8 + 2];
                v11 = *(_OWORD *)&v6[v8 + 4];
                v12 = *(_OWORD *)&v6[v8 + 6];
                v9[8] = v6[v8 + 8];
                *((_OWORD *)v9 + 2) = v11;
                *((_OWORD *)v9 + 3) = v12;
                *((_OWORD *)v9 + 1) = v10;
                v8 += 9;
              }
              while (9 * v3 != v8);
            }
          }
          v13 = 9 * v3;
          do
          {
            v14 = &v4[v13];
            *((_OWORD *)v14 + 1) = v41[0];
            *((_OWORD *)v14 + 2) = v41[1];
            *((_OWORD *)v14 + 3) = v42;
            v14[8] = v43;
            *(_OWORD *)v14 = v40;
            v13 += 9;
          }
          while (9 * Count != v13);
        }
        v15 = v4;
        goto LABEL_27;
      }
      v4 = v39;
    }
    v16 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v37, Count);
    v15 = v16;
    if (v3 >= Count)
      v17 = Count;
    else
      v17 = v3;
    if (v17)
    {
      v18 = 72 * v17;
      v19 = v16;
      do
      {
        *(_OWORD *)v19 = *(_OWORD *)v4;
        v20 = *((_OWORD *)v4 + 1);
        v21 = *((_OWORD *)v4 + 2);
        v22 = *((_OWORD *)v4 + 3);
        v19[8] = v4[8];
        *((_OWORD *)v19 + 2) = v21;
        *((_OWORD *)v19 + 3) = v22;
        *((_OWORD *)v19 + 1) = v20;
        v4 += 9;
        v19 += 9;
        v18 -= 72;
      }
      while (v18);
    }
    if (v3 < Count)
    {
      v23 = 9 * v3;
      do
      {
        v24 = &v16[v23];
        *((_OWORD *)v24 + 1) = v41[0];
        *((_OWORD *)v24 + 2) = v41[1];
        *((_OWORD *)v24 + 3) = v42;
        v24[8] = v43;
        *(_OWORD *)v24 = v40;
        v23 += 9;
      }
      while (9 * Count != v23);
    }
    goto LABEL_27;
  }
  if (Count >= 0x38E38E38E38E38FLL)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v37);
    goto LABEL_30;
  }
  v15 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)&v37, Count);
  bzero(v15, 72 * ((72 * Count - 72) / 0x48) + 72);
LABEL_27:
  if (v15 != v39)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v37);
    v39 = v15;
  }
  *(_QWORD *)&v37 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v25 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v43 = 0;
      v42 = 0u;
      v40 = 0u;
      memset(v41, 0, sizeof(v41));
      if (RIOPxrVtValueGetGfMatrix3d((uint64_t)ValueAtIndex, (uint64_t)&v40))
      {
        v35 = *(_QWORD *)&v41[0];
        v36 = v40;
        v33 = *((_QWORD *)&v41[1] + 1);
        v34 = *(_OWORD *)((char *)v41 + 8);
        v31 = v43;
        v32 = v42;
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37);
      v28 = &v39[v25];
      *(_OWORD *)v28 = v36;
      v28[2] = v35;
      *(_OWORD *)(v28 + 3) = v34;
      v28[5] = v33;
      *((_OWORD *)v28 + 3) = v32;
      v28[8] = v31;
      v25 += 9;
    }
  }
  *((_QWORD *)&v40 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v40, (uint64_t)&v37);
  v29 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v40);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v37);
  return v29;
}

void sub_22FFDA84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 RIOPxrVtValueGetMatrix3d(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  if (RIOPxrVtValueGetGfMatrix3d(a1, (uint64_t)v9))
  {
    result = (__n128)v9[0];
    v7 = *(_OWORD *)((char *)&v9[1] + 8);
    *(_QWORD *)&v4 = *(_QWORD *)&v9[1];
    *(_QWORD *)&v5 = *((_QWORD *)&v9[2] + 1);
    v8 = v10;
    *(_QWORD *)&v6 = v11;
    *a2 = v9[0];
    a2[1] = v4;
    a2[2] = v7;
    a2[3] = v5;
    a2[4] = v8;
    a2[5] = v6;
  }
  return result;
}

uint64_t RIOPxrVtValueCreateWithMatrix4dArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *New;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  CFIndex i;
  const void *ValueAtIndex;
  _OWORD *v34;
  uint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v45);
  v3 = v45;
  if ((_QWORD)v45 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_16;
  v4 = v47;
  if (v47)
  {
    if (!*((_QWORD *)&v46 + 1))
    {
      v5 = atomic_load((unint64_t *)v47 - 2);
      if (v5 == 1)
      {
        if ((unint64_t)v45 < Count)
        {
          v6 = v47;
          if (*((_QWORD *)v47 - 1) < Count)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v45, Count);
            v4 = New;
            if (v3)
            {
              v8 = 0;
              do
              {
                v9 = &New[v8 / 8];
                v10 = v6[v8 / 0x10];
                v11 = v6[v8 / 0x10 + 1];
                v12 = v6[v8 / 0x10 + 3];
                v9[2] = v6[v8 / 0x10 + 2];
                v9[3] = v12;
                *v9 = v10;
                v9[1] = v11;
                v13 = v6[v8 / 0x10 + 4];
                v14 = v6[v8 / 0x10 + 5];
                v15 = v6[v8 / 0x10 + 7];
                v9[6] = v6[v8 / 0x10 + 6];
                v9[7] = v15;
                v9[4] = v13;
                v9[5] = v14;
                v8 += 128;
              }
              while (v3 << 7 != v8);
            }
          }
          v16 = v3 << 7;
          do
          {
            v17 = (_OWORD *)((char *)v4 + v16);
            v17[4] = v52;
            v17[5] = v53;
            v17[6] = v54;
            v17[7] = v55;
            *v17 = v48;
            v17[1] = v49;
            v17[2] = v50;
            v17[3] = v51;
            v16 += 128;
          }
          while (Count << 7 != v16);
        }
        v18 = v4;
        goto LABEL_27;
      }
      v4 = v47;
    }
    v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v45, Count);
    v18 = v19;
    if (v3 >= Count)
      v20 = Count;
    else
      v20 = v3;
    if (v20)
    {
      v21 = v20 << 7;
      v22 = v19;
      do
      {
        v23 = *v4;
        v24 = v4[1];
        v25 = v4[3];
        v22[2] = v4[2];
        v22[3] = v25;
        *v22 = v23;
        v22[1] = v24;
        v26 = v4[4];
        v27 = v4[5];
        v28 = v4[7];
        v22[6] = v4[6];
        v22[7] = v28;
        v22[4] = v26;
        v22[5] = v27;
        v4 += 8;
        v22 += 8;
        v21 -= 128;
      }
      while (v21);
    }
    if (v3 < Count)
    {
      v29 = v3 << 7;
      do
      {
        v30 = (_OWORD *)((char *)v19 + v29);
        v30[4] = v52;
        v30[5] = v53;
        v30[6] = v54;
        v30[7] = v55;
        *v30 = v48;
        v30[1] = v49;
        v30[2] = v50;
        v30[3] = v51;
        v29 += 128;
      }
      while (Count << 7 != v29);
    }
    goto LABEL_27;
  }
  if ((Count << 7) / Count != 128)
  {
LABEL_16:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(&v45);
    goto LABEL_30;
  }
  v18 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew((uint64_t)&v45, Count);
  bzero(v18, Count << 7);
LABEL_27:
  if (v18 != (_QWORD *)v47)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v45);
    v47 = v18;
  }
  *(_QWORD *)&v45 = Count;
LABEL_30:
  if ((uint64_t)Count >= 1)
  {
    v31 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      RIOPxrVtValueGetMatrix4d((uint64_t)ValueAtIndex, &v48);
      v43 = v51;
      v44 = v49;
      v39 = v50;
      v40 = v48;
      v41 = v55;
      v42 = v53;
      v37 = v54;
      v38 = v52;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45);
      v34 = &v47[v31];
      *v34 = v40;
      v34[1] = v44;
      v34[2] = v39;
      v34[3] = v43;
      v34[4] = v38;
      v34[5] = v42;
      v34[6] = v37;
      v34[7] = v41;
      v31 += 8;
    }
  }
  *((_QWORD *)&v48 + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v48, (uint64_t)&v45);
  v35 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(&v48);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v48);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v45);
  return v35;
}

void sub_22FFDAC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueGetMatrix4d(uint64_t result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  std::type_info *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = result;
    if (!*(_QWORD *)(result + 24))
      return 0;
    v4 = (uint64_t *)(result + 16);
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16)))
    {
      v5 = *(_QWORD *)(v2 + 24);
      if ((v5 & 4) != 0)
        v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 16);
      else
        v6 = *v4;
      *(_QWORD *)&v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(_OWORD *)(v6 + 16);
      *(_QWORD *)&v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_QWORD *)(v6 + 40);
      v12 = *(_OWORD *)(v6 + 48);
      *(_QWORD *)&v13 = *(_QWORD *)(v6 + 64);
      v14 = *(_QWORD *)(v6 + 72);
      v15 = *(_OWORD *)(v6 + 80);
      *(_QWORD *)&v16 = *(_QWORD *)(v6 + 96);
      v17 = *(_QWORD *)(v6 + 104);
      v18 = *(_OWORD *)(v6 + 112);
      goto LABEL_10;
    }
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
    if ((_DWORD)result)
    {
      v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 16));
      v22 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v21);
      if (v22->__type_name)
      {
        v23 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
        v35 = *(_QWORD *)v23;
        v34 = *(_QWORD *)(v23 + 8);
        v33 = *(_OWORD *)(v23 + 16);
        v32 = *(_QWORD *)(v23 + 32);
        v31 = *(_QWORD *)(v23 + 40);
        v29 = *(_QWORD *)(v23 + 64);
        v30 = *(_OWORD *)(v23 + 48);
        v28 = *(_QWORD *)(v23 + 72);
        v26 = *(_QWORD *)(v23 + 96);
        v27 = *(_OWORD *)(v23 + 80);
        v25 = *(_QWORD *)(v23 + 104);
        v24 = *(_OWORD *)(v23 + 112);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        v18 = v24;
        v17 = v25;
        v15 = v27;
        v14 = v28;
        v12 = v30;
        v11 = v31;
        v9 = v33;
        v8 = v34;
        *(_QWORD *)&v16 = v26;
        *(_QWORD *)&v13 = v29;
        *(_QWORD *)&v10 = v32;
        *(_QWORD *)&v7 = v35;
LABEL_10:
        *((_QWORD *)&v7 + 1) = v8;
        *((_QWORD *)&v10 + 1) = v11;
        *((_QWORD *)&v13 + 1) = v14;
        *((_QWORD *)&v16 + 1) = v17;
        *a2 = v7;
        a2[1] = v9;
        a2[2] = v10;
        a2[3] = v12;
        a2[4] = v13;
        a2[5] = v15;
        a2[6] = v16;
        a2[7] = v18;
        return 1;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      return 0;
    }
  }
  return result;
}

void sub_22FFDAE7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCreateWithTokenArray(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v3;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::VtArray((uint64_t)v8, Count);
  if (Count >= 1)
  {
    v3 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(v8[4] + v3), ValueAtIndex + 2);
      v3 += 8;
    }
  }
  v9[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v9, (uint64_t)v8);
  v6 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v8);
  return v6;
}

void sub_22FFDAF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::VtArray(uint64_t a1, unint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear((_QWORD *)a1);
  v8 = &v7;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::TfToken const&)::_Filler>((uint64_t *)a1, a2, &v8);
  if ((v7 & 7) != 0)
  {
    v4 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return a1;
}

void sub_22FFDB04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  if ((a9 & 7) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreateWithStringArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *New;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex v15;
  char *v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  *(_DWORD *)((char *)v22 + 3) = 0;
  LODWORD(v22[0]) = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(&v19);
  v3 = v19;
  if ((_QWORD)v19 == Count)
    goto LABEL_29;
  if (!Count)
    goto LABEL_12;
  v4 = v21;
  if (!v21)
  {
    if (Count <= 0xAAAAAAAAAAAAAAALL)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v19, Count);
      v7 = New;
      goto LABEL_19;
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(&v19);
    goto LABEL_29;
  }
  if (!*((_QWORD *)&v20 + 1))
  {
    v5 = atomic_load(v21 - 2);
    if (v5 == 1)
    {
      if ((unint64_t)v19 >= Count)
      {
        v10 = 24 * Count;
        v11 = 24 * v19;
        do
        {
          if (SHIBYTE(v4[(unint64_t)v10 / 8 + 2]) < 0)
            operator delete((void *)v4[(unint64_t)v10 / 8]);
          v10 += 24;
        }
        while (v11 != v10);
        New = v4;
        goto LABEL_26;
      }
      v6 = (uint64_t)v21;
      if (*(v21 - 1) < Count)
      {
        v4 = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v19, Count);
        std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v6, v6 + 24 * v3, (uint64_t)v4);
      }
      v7 = &v4[3 * v3];
      New = v4;
      goto LABEL_19;
    }
    v4 = v21;
  }
  New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v19, Count);
  if (v3 >= Count)
    v9 = Count;
  else
    v9 = v3;
  std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>((uint64_t)v4, (uint64_t)&v4[3 * v9], (uint64_t)New);
  if (v3 >= Count)
    goto LABEL_26;
  v7 = &New[3 * v3];
LABEL_19:
  while (v7 != &New[3 * Count])
  {
    *v7 = 0;
    v7[1] = 0;
    *((_DWORD *)v7 + 4) = v22[0];
    *(_DWORD *)((char *)v7 + 19) = *(_DWORD *)((char *)v22 + 3);
    *((_BYTE *)v7 + 23) = 0;
    v7 += 3;
  }
LABEL_26:
  if (New != v21)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v19);
    v21 = New;
  }
  *(_QWORD *)&v19 = Count;
LABEL_29:
  if ((uint64_t)Count >= 1)
  {
    v12 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      v15 = CFStringGetLength(ValueAtIndex) + 1;
      v16 = (char *)malloc_type_malloc(v15, 0x548D303FuLL);
      CFStringGetCString(ValueAtIndex, v16, v15, 0x8000100u);
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
      MEMORY[0x2348B4AD4](&v21[v12], v16);
      free(v16);
      v12 += 3;
    }
  }
  v22[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(v22, (uint64_t)&v19);
  v17 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v19);
  return v17;
}

void sub_22FFDB33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t RIOPxrVtValueCreateWithPathListOp(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  _DWORD *ValueAtIndex;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  void **v21;
  uint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v6 = ValueAtIndex + 4;
      v7 = v19;
      if ((unint64_t)v19 >= v20)
      {
        v8 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v18, v6);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v19, v6);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 1, ValueAtIndex + 5);
        v8 = v7 + 2;
      }
      v19 = v8;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit();
  v22[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(v22, (uint64_t)&v11);
  v9 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
  v21 = (void **)&v17;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)&v16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
  v11 = (void **)&v18;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v9;
}

void sub_22FFDB518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 - 72));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(&a9);
  a9 = (void *)(v9 - 104);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t RIOPxrVtValueCreateWithAssetPathArray(const __CFArray *a1)
{
  unint64_t Count;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *New;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  CFIndex v13;
  uint64_t v14;
  char *ValueAtIndex;
  std::string *v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  void *v22[2];
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(a1);
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v22);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(&v19);
  v3 = v19;
  if ((_QWORD)v19 == Count)
    goto LABEL_30;
  if (!Count)
    goto LABEL_12;
  v4 = v21;
  if (!v21)
  {
    if (Count <= 0x555555555555555)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v19, Count);
      v8 = New;
      goto LABEL_19;
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(&v19);
    goto LABEL_30;
  }
  if (!*((_QWORD *)&v20 + 1))
  {
    v5 = atomic_load(v21 - 2);
    if (v5 == 1)
    {
      if ((unint64_t)v19 >= Count)
      {
        v10 = 48 * Count;
        v11 = 48 * v19;
        do
        {
          v12 = (void **)&v4[(unint64_t)v10 / 8];
          if (SHIBYTE(v4[(unint64_t)v10 / 8 + 5]) < 0)
            operator delete(v12[3]);
          if (*((char *)v12 + 23) < 0)
            operator delete(*v12);
          v10 += 48;
        }
        while (v11 != v10);
        v8 = v4;
        goto LABEL_27;
      }
      v6 = (uint64_t)v21;
      if (*(v21 - 1) < Count)
      {
        v4 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v19, Count);
        std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(v6, v6 + 48 * v3, (uint64_t)v4);
      }
      New = &v4[6 * v3];
      v8 = v4;
      goto LABEL_19;
    }
    v4 = v21;
  }
  v8 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)&v19, Count);
  if (v3 >= Count)
    v9 = Count;
  else
    v9 = v3;
  std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>((uint64_t)v4, (uint64_t)&v4[6 * v9], (uint64_t)v8);
  if (v3 >= Count)
    goto LABEL_27;
  New = &v8[6 * v3];
LABEL_19:
  std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)New, (uint64_t)&v8[6 * Count], (__int128 *)v22);
LABEL_27:
  if (v8 != v21)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v19);
    v21 = v8;
  }
  *(_QWORD *)&v19 = Count;
LABEL_30:
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if ((uint64_t)Count >= 1)
  {
    v13 = 0;
    v14 = 3;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1, v13);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
      v16 = (std::string *)&v21[v14];
      std::string::operator=((std::string *)&v21[v14 - 3], (const std::string *)(ValueAtIndex + 16));
      std::string::operator=(v16, (const std::string *)(ValueAtIndex + 40));
      ++v13;
      v14 += 6;
    }
    while (Count != v13);
  }
  v22[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)v22, (uint64_t)&v19);
  v17 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v22);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v19);
  return v17;
}

void sub_22FFDB874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

CFStringRef RIOPxrVtValueCopyCPPTypeName(uint64_t a1)
{
  const char *p_p;
  CFStringRef v2;
  void *__p;
  char v5;

  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if (v5 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_22FFDB940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrVtValueCopyTypeName(uint64_t a1)
{
  uint64_t TypeName;
  const char *v2;
  uint64_t Type;

  Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (*(char *)(TypeName + 23) >= 0)
    v2 = (const char *)TypeName;
  else
    v2 = *(const char **)TypeName;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7D0], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB790], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7D8], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t RIOPxrVtValueGetGfHalf(uint64_t a1, _WORD *a2)
{
  _WORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  const pxrInternal__aapl__pxrReserved__::VtValue *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  std::type_info v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_WORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_WORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)&v13) & 1) != 0)
  {
    v10 = &v13;
  }
  else
  {
    v10 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v13, v14);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  }
  type_name = v10->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_WORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  return v6;
}

void sub_22FFDBC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec2i(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFDBDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec3i(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = *(_QWORD *)v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  type_name = v11->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v14 = *(_QWORD *)v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v13 + 8);
    *(_QWORD *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_22FFDBED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec4i(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  type_name = v10->__type_name;
  v7 = type_name != 0;
  if (type_name)
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_22FFDBFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t RIOPxrVtValueGetGfVec3h(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v12;
  int v13;
  _BYTE v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = a1 + 16;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    v6 = *(_DWORD *)v4;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v4 + 4);
    *(_DWORD *)a2 = v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  type_name = v10->__type_name;
  v7 = type_name != 0;
  if (type_name)
  {
    v12 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    v13 = *(_DWORD *)v12;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v12 + 4);
    *(_DWORD *)a2 = v13;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  return v7;
}

void sub_22FFDC248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t RIOPxrVtValueGetGfVec2f(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_QWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    *a2 = *v4;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v9 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  type_name = v9->__type_name;
  v6 = type_name != 0;
  if (type_name)
    *a2 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return v6;
}

void sub_22FFDC580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec3f(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = *(_QWORD *)v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  type_name = v11->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v14 = *(_QWORD *)v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v13 + 8);
    *(_QWORD *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_22FFDC6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec4f(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  type_name = v10->__type_name;
  v7 = type_name != 0;
  if (type_name)
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_22FFDC7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfVec2d(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  type_name = v10->__type_name;
  v7 = type_name != 0;
  if (type_name)
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_22FFDC8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t RIOPxrVtValueGetGfVec3d(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v13;
  __int128 v14;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = *(_OWORD *)v6;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)a2 = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  type_name = v11->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v13 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)a2 = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_22FFDCB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t RIOPxrVtValueGetGfVec4d(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _OWORD *v13;
  __int128 v14;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  type_name = v11->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v13 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v14 = v13[1];
    *a2 = *v13;
    a2[1] = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_22FFDCD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t RIOPxrVtValueGetGfQuath(uint64_t a1, std::type_info_vtbl **a2)
{
  std::type_info_vtbl **v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  const pxrInternal__aapl__pxrReserved__::VtValue *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13;
  uint64_t v14;
  std::type_info v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (std::type_info_vtbl **)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v15) & 1) != 0)
      {
        v10 = &v15;
      }
      else
      {
        v10 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v15, v16);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      }
      type_name = v10->__type_name;
      v6 = type_name != 0;
      if (!type_name)
        goto LABEL_17;
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)v10) & 1) != 0)
      {
        v13 = v10->__type_name;
        if ((v13 & 4) == 0)
        {
LABEL_16:
          *a2 = v10->__vftable;
LABEL_17:
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v15);
          return v6;
        }
        v14 = (*(uint64_t (**)(std::type_info *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      }
      else
      {
        v14 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
      }
      v10 = (std::type_info *)v14;
      goto LABEL_16;
    }
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 24);
  if ((v5 & 4) != 0)
    v4 = (std::type_info_vtbl **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  *a2 = *v4;
  return 1;
}

void sub_22FFDD01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t RIOPxrVtValueGetGfQuatf(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  std::type_info *v10;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    *a2 = *v6;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v10 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  type_name = v10->__type_name;
  v7 = type_name != 0;
  if (type_name)
    *a2 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  return v7;
}

void sub_22FFDD174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t RIOPxrVtValueGetGfQuatd(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  const pxrInternal__aapl__pxrReserved__::VtValue *v11;
  std::type_info *v12;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _OWORD *v15;
  __int128 v16;
  std::type_info v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)&v17) & 1) != 0)
  {
    v12 = &v17;
  }
  else
  {
    v12 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v17, v18);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
  }
  type_name = v12->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v15 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
    v16 = v15[1];
    *a2 = *v15;
    a2[1] = v16;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v17);
  return v8;
}

void sub_22FFDD3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t RIOPxrVtValueGetGfMatrix2d(uint64_t a1, _OWORD *a2)
{
  _OWORD **v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  _OWORD *v13;
  __int128 v14;
  _BYTE v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (_OWORD **)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    v7 = v6[1];
    *a2 = *v6;
    a2[1] = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v11 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  type_name = v11->__type_name;
  v8 = type_name != 0;
  if (type_name)
  {
    v13 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v14 = v13[1];
    *a2 = *v13;
    a2[1] = v14;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
  return v8;
}

void sub_22FFDD580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueGetGfMatrix3d(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BOOL8 v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  std::type_info *v13;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v20[16];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v4 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if ((v5 & 4) != 0)
      v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v6 = *v4;
    *(_OWORD *)a2 = *(_OWORD *)v6;
    v7 = *(_OWORD *)(v6 + 16);
    v8 = *(_OWORD *)(v6 + 32);
    v9 = *(_OWORD *)(v6 + 48);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v6 + 64);
    *(_OWORD *)(a2 + 32) = v8;
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 16) = v7;
    return 1;
  }
  Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
  v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  type_name = v13->__type_name;
  v10 = type_name != 0;
  if (type_name)
  {
    v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
    *(_OWORD *)a2 = *(_OWORD *)v15;
    v16 = *(_OWORD *)(v15 + 16);
    v17 = *(_OWORD *)(v15 + 32);
    v18 = *(_OWORD *)(v15 + 48);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v15 + 64);
    *(_OWORD *)(a2 + 32) = v17;
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 16) = v16;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  return v10;
}

void sub_22FFDD6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrVtValueCopyToken(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 24)
      && (v2 = (uint64_t *)(result + 16),
          pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 16))))
    {
      v3 = *(_QWORD *)(v1 + 24);
      if ((v3 & 4) != 0)
        v2 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v1 + 16);
      v4 = *v2;
      v9 = v4;
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
        if ((v6 & 1) == 0)
          v9 = (uint64_t)v5;
      }
      result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v9);
      if ((v9 & 7) != 0)
      {
        v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrVtValueCopyPath(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (_DWORD *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v2 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, v2 + 1);
  v4 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4;
}

void sub_22FFDD878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCopyAssetPath(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t Instance;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string v12;
  std::string __p;

  v1 = a1;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24)
      && (v2 = (uint64_t *)(a1 + 16),
          pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))))
    {
      v3 = *(_QWORD *)(v1 + 24);
      if ((v3 & 4) != 0)
        v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v1 + 16);
      else
        v4 = *v2;
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
      }
      if (*(char *)(v4 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
      }
      else
      {
        v6 = *(_OWORD *)(v4 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1)
        dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
      Instance = _CFRuntimeCreateInstance();
      v1 = Instance;
      if (Instance)
      {
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(Instance + 16), v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
        }
        else
        {
          v8 = v12.__r_.__value_.__r.__words[2];
          *(_OWORD *)(Instance + 16) = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
          *(_QWORD *)(Instance + 32) = v8;
        }
        v9 = (std::string *)(v1 + 40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v10 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v1 + 56) = v10;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_22FFDDA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&__p);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrVtValueCopyString(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  CFStringRef v6;
  const char *p_p;
  std::string::size_type v8;
  std::string *v9;
  void *__p;
  char v12;
  std::string v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    v3 = *(_QWORD *)(a1 + 24);
    if ((v3 & 4) != 0)
      v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
    else
      v4 = *v2;
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v4;
      v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    v6 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::operator<<();
    std::stringbuf::str();
    if (v12 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v6 = CFStringCreateWithCString(0, p_p, 0x8000100u);
    if (v12 < 0)
      operator delete(__p);
    v13.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words
                              + *(_QWORD *)(v13.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
    v13.__r_.__value_.__r.__words[2] = v8;
    v14 = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete(v15);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2348B4DA4](&v17);
  }
  return v6;
}

void sub_22FFDDC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrVtValueCopyBoolArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  char *v10;
  char *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  char *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(char **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithBool(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDDD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 47)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt32Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  int *v10;
  int *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  int *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(int **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 4);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithInt32(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDDEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt64Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t *v10;
  uint64_t *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(uint64_t **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithInt64(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 54)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt8Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  char *v10;
  char *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  char *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(char **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithUInt8(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt32Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  int *v10;
  int *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  int *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(int **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 4);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithUInt32(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyUInt64Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t *v10;
  uint64_t *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(uint64_t **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithUInt64(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 55)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalfArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int16 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  const void *v13;
  __int128 v15;
  __int128 v16;
  unsigned __int16 *v17;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v15 = *(_OWORD *)v4;
  v16 = v5;
  v6 = *(unsigned __int16 **)(v4 + 32);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 8);
    if (*((_QWORD *)&v16 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v10 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v11 = &v17[v15];
  if (v10 != v11)
  {
    v12 = MEMORY[0x24BEE8B20];
    do
    {
      v13 = (const void *)RIOPxrVtValueCreateWithHalf(*(float *)(v12 + 4 * *v10));
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      ++v10;
    }
    while (v10 != v11);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_22FFDE654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyFloatArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  float *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  float *v10;
  float *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  float *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(float **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 4);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithFloat(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyDoubleArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  double *v10;
  double *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  double *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(double **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithDouble(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDE944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt2Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  double *v10;
  double *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  double *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(double **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithInt2(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 16)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt3Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v15 = *(_OWORD *)v4;
  v16 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v16 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v10 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v12 = v17 + 12 * v15;
  while (v10 != v12)
  {
    v11.n128_u64[0] = *(_QWORD *)v10;
    v11.n128_u32[2] = *(_DWORD *)(v10 + 8);
    v13 = (const void *)RIOPxrVtValueCreateWithInt3(v11);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 12;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_22FFDEC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 15)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyInt4Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int8x16_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  int8x16_t *v10;
  int8x16_t *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  int8x16_t *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(int8x16_t **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6[-1];
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithInt4(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDEDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 14)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalf2Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int16 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  double v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  unsigned __int16 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(unsigned __int16 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 8);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v11 = &v18[2 * v16];
  if (v10 != v11)
  {
    v12 = MEMORY[0x24BEE8B20];
    do
    {
      LODWORD(v13) = *(_DWORD *)(v12 + 4 * *v10);
      HIDWORD(v13) = *(_DWORD *)(v12 + 4 * v10[1]);
      v14 = (const void *)RIOPxrVtValueCreateWithHalf2(v13);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v10 += 2;
    }
    while (v10 != v11);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDEF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 19)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyHalf3Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int16 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  unsigned __int16 *v10;
  __n128 v11;
  unsigned __int16 *v12;
  uint64_t v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  unsigned __int16 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(unsigned __int16 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 8);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v12 = &v18[3 * v16];
  if (v10 != v12)
  {
    v13 = MEMORY[0x24BEE8B20];
    do
    {
      v11.n128_u32[0] = *(_DWORD *)(v13 + 4 * *v10);
      v11.n128_u32[1] = *(_DWORD *)(v13 + 4 * v10[1]);
      v11.n128_u32[2] = *(_DWORD *)(v13 + 4 * v10[2]);
      v14 = (const void *)RIOPxrVtValueCreateWithHalf3(v11);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v10 += 3;
    }
    while (v10 != v12);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDF100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrVtValueCopyHalf4Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int16 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  __n128 v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  unsigned __int16 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(unsigned __int16 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 8);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v11 = &v18[4 * v16];
  if (v10 != v11)
  {
    v12 = MEMORY[0x24BEE8B20];
    do
    {
      v13.n128_u32[0] = *(_DWORD *)(v12 + 4 * *v10);
      v13.n128_u32[1] = *(_DWORD *)(v12 + 4 * v10[1]);
      v13.n128_u32[2] = *(_DWORD *)(v12 + 4 * v10[2]);
      v13.n128_u32[3] = *(_DWORD *)(v12 + 4 * v10[3]);
      v14 = (const void *)RIOPxrVtValueCreateWithHalf4(v13);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v10 += 4;
    }
    while (v10 != v11);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDF27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 17)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyFloat2Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  double *v10;
  double *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  double *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(double **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v15 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithFloat2(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDF3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyFloat3Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v15 = *(_OWORD *)v4;
  v16 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v16 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v10 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v12 = v17 + 12 * v15;
  while (v10 != v12)
  {
    v11.n128_u64[0] = *(_QWORD *)v10;
    v11.n128_u32[2] = *(_DWORD *)(v10 + 8);
    v13 = (const void *)RIOPxrVtValueCreateWithFloat3(v11);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 12;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v15);
  return Mutable;
}

void sub_22FFDF578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrVtValueCopyFloat4Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 *v6;
  unint64_t *n128_u64;
  unint64_t v8;
  __CFArray *Mutable;
  __n128 *v10;
  __n128 *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __n128 *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(__n128 **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    n128_u64 = v6[-1].n128_u64;
    if (*((_QWORD *)&v15 + 1))
      n128_u64 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(n128_u64);
    while (__stxr(v8 + 1, n128_u64));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithFloat4(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDF6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyDouble2Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 *v6;
  unint64_t *n128_u64;
  unint64_t v8;
  __CFArray *Mutable;
  __n128 *v10;
  __n128 *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __n128 *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(__n128 **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    n128_u64 = v6[-1].n128_u64;
    if (*((_QWORD *)&v15 + 1))
      n128_u64 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(n128_u64);
    while (__stxr(v8 + 1, n128_u64));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithDouble2(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDF830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyDouble3Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  const void *v13;
  __int128 v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v12 = v18 + 24 * v16;
  while (v10 != v12)
  {
    *(_QWORD *)&v11 = *(_QWORD *)(v10 + 16);
    v15[0] = *(_OWORD *)v10;
    v15[1] = v11;
    v13 = (const void *)RIOPxrVtValueCreateWithDouble3(v15);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 24;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDF9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyDouble4Array(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  const void *v13;
  __int128 v15[2];
  __int128 v16;
  __int128 v17;
  __int128 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(__int128 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 1);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v11 = &v18[2 * v16];
  while (v10 != v11)
  {
    v12 = v10[1];
    v15[0] = *v10;
    v15[1] = v12;
    v13 = (const void *)RIOPxrVtValueCreateWithDouble4(v15);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 2;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyQuathArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned __int16 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  __n128 v13;
  const void *v14;
  __int128 v16;
  __int128 v17;
  unsigned __int16 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(unsigned __int16 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 8);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v11 = &v18[4 * v16];
  if (v10 != v11)
  {
    v12 = MEMORY[0x24BEE8B20];
    do
    {
      v13.n128_u32[0] = *(_DWORD *)(v12 + 4 * *v10);
      v13.n128_u32[1] = *(_DWORD *)(v12 + 4 * v10[1]);
      v13.n128_u32[2] = *(_DWORD *)(v12 + 4 * v10[2]);
      v13.n128_u32[3] = *(_DWORD *)(v12 + 4 * v10[3]);
      v14 = (const void *)RIOPxrVtValueCreateWithQuath(v13);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v10 += 4;
    }
    while (v10 != v11);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyQuatfArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 *v6;
  unint64_t *n128_u64;
  unint64_t v8;
  __CFArray *Mutable;
  __n128 *v10;
  __n128 *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __n128 *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(__n128 **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    n128_u64 = v6[-1].n128_u64;
    if (*((_QWORD *)&v15 + 1))
      n128_u64 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(n128_u64);
    while (__stxr(v8 + 1, n128_u64));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithQuatf(*v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFDFE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrVtValueCopyQuatdArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  const void *v13;
  __int128 v15[2];
  __int128 v16;
  __int128 v17;
  __int128 *v18;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v16 = *(_OWORD *)v4;
  v17 = v5;
  v6 = *(__int128 **)(v4 + 32);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 1);
    if (*((_QWORD *)&v17 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v10 = v18;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
  v11 = &v18[2 * v16];
  while (v10 != v11)
  {
    v12 = v10[1];
    v15[0] = *v10;
    v15[1] = v12;
    v13 = (const void *)RIOPxrVtValueCreateWithQuatd(v15);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 2;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v16);
  return Mutable;
}

void sub_22FFDFFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyMatrix2dArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __n128 *v6;
  unint64_t *n128_u64;
  unint64_t v8;
  __CFArray *Mutable;
  __n128 *v10;
  __n128 *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __n128 *v16;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v14 = *(_OWORD *)v4;
  v15 = v5;
  v6 = *(__n128 **)(v4 + 32);
  v16 = v6;
  if (v6)
  {
    n128_u64 = v6[-1].n128_u64;
    if (*((_QWORD *)&v15 + 1))
      n128_u64 = (unint64_t *)*((_QWORD *)&v15 + 1);
    do
      v8 = __ldxr(n128_u64);
    while (__stxr(v8 + 1, n128_u64));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v10 = v16;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v14);
  v11 = &v16[2 * v14];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrVtValueCreateWithMatrix2d(*v10, v10[1]);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    v10 += 2;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v14);
  return Mutable;
}

void sub_22FFE0144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 31)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyMatrix3dArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  const void *v17;
  __int128 v19[6];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v20 = *(_OWORD *)v4;
  v21 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v22 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v21 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v21 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
  v10 = v22;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
  v14 = v22 + 72 * v20;
  while (v10 != v14)
  {
    *(_QWORD *)&v11 = *(_QWORD *)(v10 + 16);
    v15 = *(_OWORD *)(v10 + 24);
    *(_QWORD *)&v12 = *(_QWORD *)(v10 + 40);
    v16 = *(_OWORD *)(v10 + 48);
    *(_QWORD *)&v13 = *(_QWORD *)(v10 + 64);
    v19[0] = *(_OWORD *)v10;
    v19[1] = v11;
    v19[2] = v15;
    v19[3] = v12;
    v19[4] = v16;
    v19[5] = v13;
    v17 = (const void *)RIOPxrVtValueCreateWithMatrix3d(v19);
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v17);
    v10 += 72;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v20);
  return Mutable;
}

void sub_22FFE02F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 30)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyMatrix4dArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  __int128 v21[8];
  __int128 v22;
  __int128 v23;
  __int128 *v24;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v22 = *(_OWORD *)v4;
  v23 = v5;
  v6 = *(__int128 **)(v4 + 32);
  v24 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 1);
    if (*((_QWORD *)&v23 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v23 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
  v10 = v24;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
  v11 = &v24[8 * (_QWORD)v22];
  while (v10 != v11)
  {
    v12 = v10[1];
    v13 = v10[2];
    v14 = v10[3];
    v15 = v10[4];
    v16 = v10[5];
    v17 = v10[6];
    v18 = v10[7];
    v21[0] = *v10;
    v21[1] = v12;
    v21[2] = v13;
    v21[3] = v14;
    v21[4] = v15;
    v21[5] = v16;
    v21[6] = v17;
    v21[7] = v18;
    v19 = (const void *)RIOPxrVtValueCreateWithMatrix4d(v21);
    CFArrayAppendValue(Mutable, v19);
    CFRelease(v19);
    v10 += 8;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v22);
  return Mutable;
}

void sub_22FFE04BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1 - 80);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrVtValueCopyTokenArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t *v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  const void *v17;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  if (!a1 || !*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    {
      v13 = *(_QWORD *)(a1 + 24);
      if ((v13 & 4) != 0)
        v14 = (*(uint64_t (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
      else
        v14 = *v2;
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v19, v14);
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v15 = (uint64_t *)*((_QWORD *)&v19 + 1);
      v16 = (uint64_t *)v20;
      while (v15 != v16)
      {
        v17 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v15);
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);
        ++v15;
      }
      v26 = (void **)&v25;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v24;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v23;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v21;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v19 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
      return Mutable;
    }
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v19 = *(_OWORD *)v4;
  v20 = v5;
  v6 = *(uint64_t **)(v4 + 32);
  v21 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 2);
    if (*((_QWORD *)&v20 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v20 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
  v10 = v21;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v19);
  v11 = &v21[v19];
  while (v10 != v11)
  {
    v12 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    ++v10;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v19);
  return Mutable;
}

void sub_22FFE06F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

__CFArray *RIOPxrVtValueCopyStringArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  CFStringRef v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v15 = *(_OWORD *)v4;
  v16 = v5;
  v6 = *(_QWORD *)(v4 + 32);
  v17 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*((_QWORD *)&v16 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v16 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v10 = v17;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
  v11 = v17 + 24 * v15;
  while (v10 != v11)
  {
    v12 = (const char *)v10;
    if (*(char *)(v10 + 23) < 0)
      v12 = *(const char **)v10;
    v13 = CFStringCreateWithCString(0, v12, 0x8000100u);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
    v10 += 24;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v15);
  return Mutable;
}

void sub_22FFE095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

__CFArray *RIOPxrVtValueCopyPathListOp(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __CFArray *Mutable;
  _DWORD *v6;
  _DWORD *v7;
  const void *v8;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v10, v4);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (_DWORD *)v11[0];
  v7 = (_DWORD *)v11[1];
  while (v6 != v7)
  {
    v8 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    v6 += 2;
  }
  v17 = (void **)&v16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)v11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return Mutable;
}

void sub_22FFE0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

__CFArray *RIOPxrVtValueCopyAssetPathArray(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  __CFArray *Mutable;
  __int128 *v10;
  __int128 *i;
  uint64_t Instance;
  _QWORD *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 *v20;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v2 = (uint64_t *)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1 + 16);
  else
    v4 = *v2;
  v5 = *(_OWORD *)(v4 + 16);
  v18 = *(_OWORD *)v4;
  v19 = v5;
  v6 = *(__int128 **)(v4 + 32);
  v20 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 1);
    if (*((_QWORD *)&v19 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
  v10 = v20;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
  for (i = &v20[3 * v18]; v10 != i; v10 += 3)
  {
    if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
    Instance = _CFRuntimeCreateInstance();
    v13 = (_QWORD *)Instance;
    if (Instance)
    {
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(Instance + 16), *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v14 = *v10;
        *(_QWORD *)(Instance + 32) = *((_QWORD *)v10 + 2);
        *(_OWORD *)(Instance + 16) = v14;
      }
      v15 = (std::string *)(v13 + 5);
      if (*((char *)v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
      }
      else
      {
        v16 = *(__int128 *)((char *)v10 + 24);
        v13[7] = *((_QWORD *)v10 + 5);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
    }
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v18);
  return Mutable;
}

void sub_22FFE0D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t RIOPxrVtValueCreateEmptyValue()
{
  uint64_t v0;
  _QWORD v2[3];

  v2[2] = *MEMORY[0x24BDAC8D0];
  v2[1] = 0;
  v0 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue>(v2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v2);
  return v0;
}

void sub_22FFE0E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL RIOPxrVtValueIsEmpty(uint64_t a1)
{
  return !a1 || *(_QWORD *)(a1 + 24) == 0;
}

uint64_t RIOPxrVtValueCreateWithDictionary(const __CFDictionary *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)RIOPxrVtValueCreateWithDictionary::$_0::__invoke, &v3);
  v4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy(v4, (uint64_t)&v3);
  v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v3, 0);
  return v1;
}

void sub_22FFE0F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a10);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(const pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrVtValueGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrVtValueGetTypeID::onceToken, &__block_literal_global_7);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(Instance + 16), a1);
  return v3;
}

void _RIOPxrVtValueCFFinalize(char *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
}

uint64_t _RIOPxrVtValueCFEqual(char *a1, char *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 16));
}

uint64_t _RIOPxrVtValueCFHash(char *a1)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::GetHash((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
}

CFStringRef _RIOPxrVtValueCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrVtValue %p>"), a1);
}

CFStringRef _RIOPxrVtValueCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrVtValue %p>"), a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 32), *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 128), *(uint64_t **)(a2 + 128), *(uint64_t **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  return a1;
}

void sub_22FFE1188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  return a1;
}

void sub_22FFE12FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *RIOPxrVtValueCreateWithDictionary::$_0::__invoke(RIOPxrVtValueCreateWithDictionary::$_0 *this, _QWORD *a2, const void *a3, void *a4)
{
  _QWORD *v5;

  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v5 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
  return pxrInternal__aapl__pxrReserved__::VtValue::operator=(v5, a2 + 2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Hash(const char **a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 24);
  v4 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1, v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfAssetPath,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetProxiedAsVtValue@<X0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy((std::string **)a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 47) < 0)
        operator delete(*(void **)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2348B4E1C](v2, 0x1012C402F9EB439);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, uint64_t a3)
{
  const char *v5;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  v16 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  v15 = v6 + 24;
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

__int128 *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_GetMutableObj(__int128 **a1)
{
  unsigned int v2;
  std::string *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v7;

  v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    v3 = (std::string *)operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Counted(v3, *a1);
    v4 = (unsigned int *)&v3[2];
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = (__int128 *)v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::~intrusive_ptr((uint64_t *)&v7);
  }
  return *a1;
}

void sub_22FFE17A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Counted(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  atomic_store(0, (unsigned int *)&this[2]);
  return this;
}

void sub_22FFE184C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy(std::string **a1, __int128 *a2)
{
  std::string *v4;
  std::string *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (std::string *)operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)&v4[2];
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFE18CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Hash(uint64_t *a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v4 = 0;
  v5 = 0;
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return std::operator==[abi:ne180100]<std::allocator<char>>(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return std::operator==[abi:ne180100]<std::allocator<char>>(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetPyObj()
{
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_StreamOut(uint64_t **a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((char *)*a1 + 23);
  if (v3 >= 0)
    v4 = (uint64_t)*a1;
  else
    v4 = **a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)*a1 + 23);
  else
    v5 = (*a1)[1];
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v4, v5);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023020531BLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::string,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>>::_GetProxiedAsVtValue(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy((std::string **)a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2348B4E1C](v2, 0x1012C405C87E9CELL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  std::string *v3;
  std::string *v4;
  uint64_t v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = (std::string *)operator new();
    v4 = v3;
    v5 = *a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
      v5 = *a1;
    }
    else
    {
      v6 = *(_OWORD *)v5;
      v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v6;
    }
    v7 = (unsigned int *)&v4[1];
    atomic_store(0, (unsigned int *)&v4[1]);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v10 = v5;
    *a1 = (uint64_t)v4;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::string>>::~intrusive_ptr(&v10);
  }
  return *a1;
}

void sub_22FFE1BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  unsigned int *v6;
  unsigned int v7;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v6 = (unsigned int *)&v5[1];
  atomic_store(0, (unsigned int *)&v5[1]);
  *a1 = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
}

void sub_22FFE1C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Hash(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetTypeid()
{
  return MEMORY[0x24BEDB798];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB798];
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<int,int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<int>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24FDE9B5B;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Hash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_EqualPtr(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetTypeid()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D0], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB7D0];
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<long long,long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<long long>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24FDE9C13;
  return result;
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_CopyInit(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Move(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Hash(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_Equal(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_EqualPtr(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetTypeid()
{
  return MEMORY[0x24BEDB790];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB790], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB790];
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned char,unsigned char,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned char>>::_GetProxiedAsVtValue@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24FDE9CCB;
  *(_BYTE *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetTypeid()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB7A0];
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned int,unsigned int,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned int>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24FDE9D83;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Hash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_EqualPtr(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetTypeid()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7D8], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB7D8];
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long long,unsigned long long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long long>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24FDE9E3B;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Hash(int8x8_t *a1)
{
  int8x8_t v1;
  int64x2_t v2;
  uint64_t v3;

  v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_Equal(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_EqualPtr(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::GfVec2f,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
        + 3;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 12);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Hash(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_Equal(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_EqualPtr(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
        + 2;
  result = operator new();
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  *(_DWORD *)(result + 8) = v5;
  v6 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)(result + 12));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 12));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_DWORD *)(*a1 + 8);
    *(_QWORD *)v3 = *(_QWORD *)*a1;
    *(_DWORD *)(v3 + 8) = v5;
    v6 = (unsigned int *)(v3 + 12);
    atomic_store(0, (unsigned int *)(v3 + 12));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 12);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Hash(float **a1)
{
  float *v1;
  float *v2;
  float *v3;
  float *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_Equal(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_EqualPtr(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4f,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4f>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
        + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Hash(int8x16_t **a1)
{
  int64x2_t v1;
  uint64_t v2;

  v1 = (int64x2_t)vbicq_s8(**a1, (int8x16_t)vceqzq_f64(*(float64x2_t *)*a1));
  v2 = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.i64[1]
                                                                      + ((unint64_t)(v2 + v2 * v2) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_Equal(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == *(double *)(*(_QWORD *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_EqualPtr(uint64_t a1, double *a2)
{
  return *(double *)(*(_QWORD *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
        + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(*a1 + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v5 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    *a1 = v3;
    v7 = (unsigned int *)(v4 + 16);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 24);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Hash(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_Equal(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_EqualPtr(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
        + 2;
  result = operator new();
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_QWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)(result + 24));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_QWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 24);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Hash(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_Equal(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_EqualPtr(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
        + 2;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = atomic_load((unsigned int *)(*a1 + 32));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 32);
    atomic_store(0, (unsigned int *)(v3 + 32));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *a1 = v3;
    v8 = (unsigned int *)(v4 + 32);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Hash(unsigned __int16 *a1)
{
  unsigned __int16 v2;
  uint64_t v3;
  char v4;

  v2 = a1[3];
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[3]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[3])
      && pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[3]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[3])
      && pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::GfQuath,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
        + 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3h const&>(a1, a3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Hash(float **a1)
{
  float *v1;
  int v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v3 = *((_DWORD *)*a1 + 3);
  v4 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float,pxrInternal__aapl__pxrReserved__::GfVec3f const&>((uint64_t)&v4, (float *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_Equal(float **a1, float **a2)
{
  float *v2;
  float *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_EqualPtr(float **a1, float *a2)
{
  float *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatf,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatf>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Hash(double **a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v3 = *((_QWORD *)*a1 + 3);
  v4 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v4, (double *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_Equal(double **a1, double **a2)
{
  double *v2;
  double *v3;

  v2 = *a1;
  v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_EqualPtr(double **a1, double *a2)
{
  double *v2;

  v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatdE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfQuatd,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfQuatd>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v4 = *(_QWORD *)&v3
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v3
                     + (*(_QWORD *)a1 + *(_QWORD *)&v3) * (*(_QWORD *)a1 + *(_QWORD *)&v3)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3d const&>(a1, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Hash(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1] + ((unint64_t)(a1[1] + (uint64_t)*a1 + (a1[1] + (uint64_t)*a1) * (a1[1] + (uint64_t)*a1)) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::GfVec2i,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&>(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 12);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Hash(int **a1)
{
  int *v1;
  int *v2;
  int *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*a1;
  v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_EqualPtr(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec3i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
        + 2;
  result = operator new();
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  *(_DWORD *)(result + 8) = v5;
  v6 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)(result + 12));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&>(a1, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Hash(int **a1)
{
  int *v1;
  int *v2;
  int *v3;
  int *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)*a1;
  v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_EqualPtr(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4iE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4i,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfVec4i>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
        + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>(uint64_t a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>(a1, a3, a4, a5);
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_CopyInit(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Move(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Hash(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__8pxr_half4halfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedTypeid()
{
}

_WORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetProxiedAsVtValue@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
                      + 3;
  *(_WORD *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Hash(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_Equal(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2)
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[1]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[1]);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_EqualPtr(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2)
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[1]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[1]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::GfVec2h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_CopyInit(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Move(int *result, uint64_t a2)
{
  int v2;

  v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_Hash(unsigned __int16 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::GfVec3h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>>::_GetProxiedAsVtValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_Hash(unsigned __int16 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::GfVec4h,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
        + 3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>(a1, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2)
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[1]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[1])
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[2]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[2])
      && *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[3]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * a2[3]);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Hash(double **a1)
{
  double *v1;
  double *v2;
  double *v3;
  double *v4;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = *a1 + 1;
  v3 = *a1 + 2;
  v4 = *a1 + 3;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix2d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetProxiedAsVtValue@<X0>(_OWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
        + 2;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 72);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 72);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Hash(double **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix3d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
        + 2;
  result = operator new();
  *(_OWORD *)result = *(_OWORD *)v3;
  v6 = *(_OWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 48);
  v7 = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(result + 64) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(result + 32) = v6;
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)(result + 16) = v7;
  v8 = (unsigned int *)(result + 72);
  atomic_store(0, (unsigned int *)(result + 72));
  *a2 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>(uint64_t a1, double *a2)
{
  uint64_t v3;
  char v4;

  v4 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = atomic_load((unsigned int *)(*a1 + 72));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    v6 = *(_OWORD *)(v4 + 32);
    v5 = *(_OWORD *)(v4 + 48);
    v7 = *(_OWORD *)(v4 + 16);
    *(_QWORD *)(v3 + 64) = *(_QWORD *)(v4 + 64);
    *(_OWORD *)(v3 + 32) = v6;
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)(v3 + 16) = v7;
    v8 = (unsigned int *)(v3 + 72);
    atomic_store(0, (unsigned int *)(v3 + 72));
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *a1 = v3;
    v10 = (unsigned int *)(v4 + 72);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 128);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Destroy(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 128);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2348B4E1CLL);
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Hash(double **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::GfMatrix4d,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::_GetProxiedAsVtValue@<X0>(__int128 **a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
        + 2;
  result = operator new();
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(result + 32) = v3[2];
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)result = v7;
  *(_OWORD *)(result + 16) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *(_OWORD *)(result + 96) = v3[6];
  *(_OWORD *)(result + 112) = v8;
  *(_OWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 80) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)(result + 128));
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::GfMatrix4d const&>(uint64_t a1, double *a2)
{
  uint64_t v3;
  char v4;

  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = atomic_load((unsigned int *)(*a1 + 128));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 48);
    v7 = *(_OWORD *)*a1;
    v6 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(*a1 + 32);
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)v3 = v7;
    *(_OWORD *)(v3 + 16) = v6;
    v8 = v4[7];
    v10 = v4[4];
    v9 = v4[5];
    *(_OWORD *)(v3 + 96) = v4[6];
    *(_OWORD *)(v3 + 112) = v8;
    *(_OWORD *)(v3 + 64) = v10;
    *(_OWORD *)(v3 + 80) = v9;
    v11 = (unsigned int *)(v3 + 128);
    atomic_store(0, (unsigned int *)(v3 + 128));
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *a1 = v3;
    v13 = (unsigned int *)(v4 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      __dmb(9u);
      MEMORY[0x2348B4E1C]();
    }
  }
  return *a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE50A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  _BYTE *v8;
  char v9;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique() [T = BOOL]");
      v4 = (char *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = New;
        do
        {
          v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB770];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIbEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)a1) == 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_Streamer>(_QWORD *a1)
{
  ++*a1;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *New;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)New + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v16 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE5778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique() [T = long long]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIxEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<long long>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<long long>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE5C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<int>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_Streamer>(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0)
    v3 = -1;
  else
    v3 = a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE6024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  _BYTE *v8;
  char v9;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]");
      v4 = (char *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = New;
        do
        {
          v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB790];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIhEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_Streamer>(_QWORD *a1)
{
  ++*a1;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE6434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique() [T = unsigned long long]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (const char *)v1[4]);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<long long>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_IsArrayValued()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7D8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIyEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    v3 = -1;
  else
    v3 = 2 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int16 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _WORD *v9;
  __int16 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]");
      v4 = (__int16 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 2 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 2;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Hash(unint64_t **a1)
{
  unint64_t v1;
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned int v4;

  v1 = **a1;
  if (v1)
  {
    v2 = (unsigned __int16 *)(*a1)[4];
    v3 = **a1;
    do
    {
      v4 = *v2++;
      v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_8pxr_half4halfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  BOOL v12;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (unsigned __int16 *)a1[4];
  v6 = *(unsigned __int16 **)(a2 + 32);
  v7 = 2 * *a1 - 2;
  do
  {
    v8 = *v5++;
    v9 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v8);
    v10 = *v6++;
    v11 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v10);
    result = v9 == v11;
    v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_Streamer>(_QWORD *a1)
{
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE6D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2i]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Hash(unint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i> const&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = (int *)a2[4];
    v4 = *a2;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      v3 += 2;
      v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (int *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(int **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v8 == v10 && v9 == v11;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE71EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3i]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 12 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 12);
          v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3i const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec3i const&>(uint64_t a1, int *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (_DWORD *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_Streamer>(_QWORD *a1)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE7798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4i]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4iEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (int *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4i const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4i const&>(uint64_t a1, int *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,int const&,int const&,int const&,int const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (_DWORD *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_Streamer>(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE7D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2h]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Hash(unint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h> const&>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = (unsigned __int16 *)a2[4];
    v4 = *a2;
    do
    {
      v5 = bswap64(0x9E3779B97F4A7C55* (v3[1]+ ((v3[1]+ (unint64_t)*v3+ (v3[1] + *v3) * (unint64_t)(v3[1] + *v3)) >> 1)));
      v2 = v5 + ((v5 + v2 + (v5 + v2) * (v5 + v2)) >> 1);
      v3 += 2;
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (unsigned __int16 *)a1[4];
  v6 = &v5[2 * *a1];
  for (i = *(unsigned __int16 **)(a2 + 32);
        *(float *)(MEMORY[0x24BEE8B20] + 4 * *v5) == *(float *)(MEMORY[0x24BEE8B20] + 4 * *i)
     && *(float *)(MEMORY[0x24BEE8B20] + 4 * v5[1]) == *(float *)(MEMORY[0x24BEE8B20] + 4 * i[1]);
        i += 2)
  {
    v5 += 2;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_Streamer>(_QWORD *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE8258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4h]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4h const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4h const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&,pxrInternal__aapl__pxrReserved__::pxr_half::half const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 8 * v5 - 8;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(v6, v7);
    if (!result)
      break;
    v6 += 4;
    v7 += 4;
    v9 = v8;
    v8 -= 8;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE87E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2f const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2f const&>(uint64_t result, float *a2)
{
  float v2;
  uint64_t v3;
  float v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = LODWORD(v2);
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(float **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE8D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4f const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4f const&>(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,float const&,float const&,float const&,float const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_Streamer>(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE92F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2d const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec2d const&>(uint64_t result, double *a2)
{
  double v2;
  double v3;
  double v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = v2;
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)&v4+ ((*(_QWORD *)&v4 + *(_QWORD *)&v3 + (*(_QWORD *)&v4 + *(_QWORD *)&v3) * (*(_QWORD *)&v4 + *(_QWORD *)&v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(double **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_Streamer>(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE9860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 32 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v4 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4d const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfVec4d const&>(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_Streamer>(_QWORD *a1)
{
  *a1 += 32;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFE9E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuath]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuath const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuath const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  unint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  char v7;

  v5 = a2[3];
  v6 = 0;
  v7 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,pxrInternal__aapl__pxrReserved__::pxr_half::half,pxrInternal__aapl__pxrReserved__::GfVec3h const&>((uint64_t)&v6, &v5, a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::operator==(uint64_t *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int16 *)a1[4];
  v7 = *(unsigned __int16 **)(a2 + 32);
  v8 = 8 * v5;
  v9 = MEMORY[0x24BEE8B20];
  while (*(float *)(v9 + 4 * v6[3]) == *(float *)(v9 + 4 * v7[3]))
  {
    result = pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(v6, v7);
    if (!result)
      return result;
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFEA3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 32 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v4 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatdEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = a2[4];
    do
    {
      --v2;
      v4 = v3 + 32;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatd const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfQuatd const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = 0;
  v7 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double,pxrInternal__aapl__pxrReserved__::GfVec3d const&>((uint64_t)&v6, (double *)&v5, (double *)a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  uint64_t v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)(a1[4] + 16);
  v6 = 32 * *a1;
  for (i = (double *)(*(_QWORD *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_Streamer>(_QWORD *a1)
{
  *a1 += 32;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFEA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 32 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v4 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = 32 * v5 - 32;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 32;
    v7 += 32;
    v9 = v8;
    v8 -= 32;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_Streamer>(_QWORD *a1)
{
  *a1 += 32;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x38E38E38E38E38DLL)
    v3 = -1;
  else
    v3 = 72 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFEAE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 72 * v5;
        v9 = New;
        do
        {
          *(_OWORD *)v9 = *(_OWORD *)v4;
          v10 = *(_OWORD *)(v4 + 16);
          v11 = *(_OWORD *)(v4 + 32);
          v12 = *(_OWORD *)(v4 + 48);
          v9[8] = *(_QWORD *)(v4 + 64);
          *((_OWORD *)v9 + 2) = v11;
          *((_OWORD *)v9 + 3) = v12;
          *((_OWORD *)v9 + 1) = v10;
          v4 += 72;
          v9 += 9;
          v8 -= 72;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 9;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::GfMatrix3d const&>(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v6 = 0;
  v5 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = 72 * v5 - 72;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 72;
    v7 += 72;
    v9 = v8;
    v8 -= 72;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _OWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *((_QWORD *)v4 + 4);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_OWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>>::~intrusive_ptr((uint64_t *)&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_Streamer>(_QWORD *a1)
{
  *a1 += 72;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::TfToken const&)::_Filler>(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *New;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *Copy;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_26;
  New = (uint64_t *)a1[4];
  if (!New)
  {
    if (8 * a2 / a2 == 8)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)a1, a2);
      v15 = *a3;
      v16 = New;
      do
      {
        v17 = *v15;
        *v16 = *v15;
        if ((v17 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v16;
      }
      while (v16 != &New[a2]);
      goto LABEL_45;
    }
LABEL_26:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(a1);
    return;
  }
  if (a1[3])
    goto LABEL_28;
  v8 = atomic_load((unint64_t *)New - 2);
  if (v8 != 1)
  {
    New = (uint64_t *)a1[4];
LABEL_28:
    if (v3 >= a2)
      v20 = a2;
    else
      v20 = *a1;
    Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, New, a2, v20);
    New = Copy;
    if (v3 < a2)
    {
      v22 = &Copy[v3];
      v23 = *a3;
      do
      {
        v24 = *v23;
        *v22 = *v23;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
      }
      while (v22 != &Copy[a2]);
    }
    goto LABEL_45;
  }
  if (v3 >= a2)
  {
    v27 = &New[a2];
    do
    {
      if ((*v27 & 7) != 0)
      {
        v28 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      ++v27;
    }
    while (v27 != &New[v3]);
  }
  else
  {
    v9 = (uint64_t *)a1[4];
    if (*(v9 - 1) < a2)
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, v9, a2, *a1);
    v10 = *a3;
    v11 = &New[v3];
    do
    {
      v12 = *v10;
      *v11 = *v10;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != &New[a2]);
  }
LABEL_45:
  if (New != (uint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
    a1[4] = (uint64_t)New;
  }
  *a1 = a2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Hash(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (uint64_t *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_HashState *pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  uint64_t *v5;

  if (a3)
  {
    v3 = a3;
    v4 = this;
    do
    {
      --v3;
      v5 = a2 + 3;
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      this = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (const char *)a2);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<std::string>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 24 * v5 - 24;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v10, v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 24;
    v7 += 24;
    v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>>::~intrusive_ptr(&v13);
  }
  return *a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_Streamer>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  *a1 += 24;
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Hash(unsigned __int8 **a1)
{
  return pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(*a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtHashValue<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,BOOL const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,BOOL const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  v14 = *(unsigned int **)a2;
  v15 = *(_QWORD *)(a2 + 8) - (_QWORD)v14;
  if (v15)
  {
    v16 = v15 >> 3;
    do
    {
      --v16;
      v17 = v14 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v14);
      v14 = v17;
    }
    while (v16);
  }
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6, a7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;

  v12 = *(unsigned int **)a2;
  v13 = *(_QWORD *)(a2 + 8) - (_QWORD)v12;
  if (v13)
  {
    v14 = v13 >> 3;
    do
    {
      --v14;
      v15 = v12 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v12);
      v12 = v15;
    }
    while (v14);
  }
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;

  v10 = *(unsigned int **)a2;
  v11 = *(_QWORD *)(a2 + 8) - (_QWORD)v10;
  if (v11)
  {
    v12 = v11 >> 3;
    do
    {
      --v12;
      v13 = v10 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v10);
      v10 = v13;
    }
    while (v12);
  }
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v8 = *(unsigned int **)a2;
  v9 = *(_QWORD *)(a2 + 8) - (_QWORD)v8;
  if (v9)
  {
    v10 = v9 >> 3;
    do
    {
      --v10;
      v11 = v8 + 2;
      pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;

  v5 = result;
  v6 = *(unsigned int **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v6;
  if (v7)
  {
    v8 = v7 >> 3;
    do
    {
      --v8;
      v9 = v6 + 2;
      result = pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(v5, v6);
      v6 = v9;
    }
    while (v8);
  }
  v10 = *(unsigned int **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 3;
    do
    {
      --v12;
      v13 = v10 + 2;
      result = pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>(v5, v10);
      v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v7;

  v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(v3, *a1);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (void **)*a1;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~intrusive_ptr(&v7);
  }
  return *a1;
}

void sub_22FFEBF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFEBFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(a1);
    }
    else if (*a1)
    {
      v4 = 48 * *a1;
      v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0)
          operator delete(*(void **)(v5 + 1));
        if (*v5 < 0)
          operator delete(*(void **)(v5 - 23));
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 48 * *a1;
          v10 = (char *)(v8 + 23);
          do
          {
            if (v10[24] < 0)
              operator delete(*(void **)(v10 + 1));
            if (*v10 < 0)
              operator delete(*(void **)(v10 - 23));
            v10 += 48;
            v9 -= 48;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x555555555555554)
    v3 = -1;
  else
    v3 = 48 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FFEC1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  __int128 *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = 0;
    v7 = (__int128 *)((char *)a3 + 24);
    do
    {
      v8 = (std::string *)(v3 + v6);
      if (*((char *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v9 = *a3;
        v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v10 = (std::string *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
      }
      else
      {
        v11 = *v7;
        *(_QWORD *)(v3 + v6 + 40) = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_22FFEC2B4(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_22FFEC2FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v7 = (std::string *)(a3 + v6);
    v8 = (__int128 *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
    }
    v10 = (std::string *)(a3 + v6 + 24);
    v11 = (const std::string::value_type **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_22FFEC3D0(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_22FFEC418(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *New;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      std::__uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,std::__always_false>(v4, v4 + 48 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(this);
      *((_QWORD *)this + 4) = New;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Hash(uint64_t **a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath> const&>((uint64_t)&v2, *a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *a2;
  v8 = 1;
  v7 = v2;
  if (v2)
  {
    v3 = (const char *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfAssetPath const&>((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfAssetPath const&>(uint64_t a1, const char *a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, a2, (uint64_t)(a2 + 24));
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 48 * v5 - 48;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 48;
    v7 += 48;
    v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>>::~intrusive_ptr(&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_Streamer>(_QWORD *a1)
{
  *a1 += 48;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Move(uint64_t **a1, uint64_t **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Hash(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::hash_value(*a1, a2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12VtDictionaryE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtDictionary,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy(a2, v2);
}

uint64_t **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>::~intrusive_ptr(uint64_t **a1)
{
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](v2, 0);
      MEMORY[0x2348B4E1C](v2, 0x1020C403A5D3213);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  if ((pxrInternal__aapl__pxrReserved__::VtDictionary::empty(this) & 1) != 0)
    return 0;
  v4 = *(_QWORD *)this;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendRange<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>((uint64_t)&v5, *(_QWORD **)v4, (_QWORD *)(v4 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendRange<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      v5 = (_QWORD *)a2[1];
      v6 = a2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v4, (const char *)a2 + 32);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2)
{
  const char *v2;

  v2 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::VtValue const&>((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 24));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v7;

  v2 = atomic_load((unsigned int *)(*a1 + 8));
  if (v2 != 1)
  {
    v3 = operator new();
    MEMORY[0x2348B1C60](v3, *a1);
    v4 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (uint64_t *)*a1;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtDictionary>>::~intrusive_ptr(&v7);
  }
  return *a1;
}

void sub_22FFECC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = MEMORY[0x2348B1C60](v4, a2);
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FFECD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::SHADER_SEMANTIC(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SHADER_SEMANTIC(void)::v, "shader");
  }
  return RIO_MTLX::SHADER_SEMANTIC(void)::v;
}

void sub_22FFECD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NodeDef::NODE_ATTRIBUTE(RIO_MTLX::NodeDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeDef::NODE_ATTRIBUTE(void)::v, "node");
  }
  return RIO_MTLX::NodeDef::NODE_ATTRIBUTE(void)::v;
}

void sub_22FFECE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UnitDef::UNITTYPE_ATTRIBUTE(RIO_MTLX::UnitDef *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)qword_255E546A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(qword_255E546A8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_255E546E0, "unittype");
    __cxa_guard_release(qword_255E546A8);
  }
  return qword_255E546E0;
}

void sub_22FFECE84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_255E546A8);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NodeDef::getType(RIO_MTLX::NodeDef *this)
{
  RIO_MTLX *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  void **v7;

  RIO_MTLX::InterfaceElement::getActiveOutputs(this, (uint64_t)&v5);
  if ((unint64_t)(v6 - (_QWORD)v5) < 0x11)
  {
    if (v6 - (_QWORD)v5 == 16)
      v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 56))(*v5);
    else
      v2 = RIO_MTLX::DEFAULT_TYPE_STRING(v1);
  }
  else
  {
    v2 = RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(v1);
  }
  v3 = v2;
  v7 = (void **)&v5;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return v3;
}

void sub_22FFECF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIO_MTLX::NodeDef::getImplementation(std::string *a1@<X0>, uint64_t a2@<X1>, RIO_MTLX::InterfaceElement **a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl **v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl **v26;
  char *v27;
  std::__shared_weak_count_vtbl *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  char *v32;
  char *v33;
  uint64_t shared_owners;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  std::string::size_type v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  RIO_MTLX::Element *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string *InheritString;
  __int128 *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::string *v94;
  std::string *v95;
  RIO_MTLX::InterfaceElement **v96;
  char *v97;
  RIO_MTLX::InterfaceElement *v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *Target;
  std::string *v103;
  std::__shared_weak_count *v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  std::string __p;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v108);
  v6 = (uint64_t)v108;
  RIO_MTLX::Element::getQualifiedName((uint64_t)a1, a1 + 2, &__p);
  RIO_MTLX::Document::getMatchingImplementations(v6, (unsigned __int8 *)&__p, (uint64_t)&v110);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v109;
  if (v109)
  {
    p_shared_owners = (unint64_t *)&v109->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &__p);
  RIO_MTLX::Document::getMatchingImplementations((uint64_t)__p.__r_.__value_.__l.__data_, (unsigned __int8 *)&a1[2], (uint64_t)&v108);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v14 = v108;
  v13 = (std::__shared_weak_count_vtbl **)v109;
  if ((char *)v109 - (char *)v108 >= 1)
  {
    v15 = ((char *)v109 - (char *)v108) >> 4;
    v16 = (unint64_t)v111;
    v17 = v111 - v110;
    v18 = (std::string::size_type)&v110[(v111 - v110) & 0xFFFFFFFFFFFFFFF0];
    if (v15 > (v112 - (uint64_t)v111) >> 4)
    {
      v19 = v17 >> 4;
      v20 = (v17 >> 4) + v15;
      if (v20 >> 60)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      if ((v112 - (uint64_t)v110) >> 3 > v20)
        v20 = (v112 - (uint64_t)v110) >> 3;
      if ((unint64_t)(v112 - (_QWORD)v110) >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      *((_QWORD *)&v115 + 1) = &v112;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v112, v21);
      else
        v22 = 0;
      v31 = (std::string::size_type)&v22[16 * v19];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      *(_QWORD *)&v115 = &v22[16 * v21];
      v32 = (char *)(v31 + 16 * v15);
      v33 = (char *)v31;
      do
      {
        *(_QWORD *)v33 = v14->__vftable;
        shared_owners = v14->__shared_owners_;
        *((_QWORD *)v33 + 1) = shared_owners;
        if (shared_owners)
        {
          v35 = (unint64_t *)(shared_owners + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v33 += 16;
        v14 = (std::__shared_weak_count *)((char *)v14 + 16);
      }
      while (v33 != v32);
      v37 = v110;
      if (v110 != (char *)v18)
      {
        v38 = (char *)v18;
        do
        {
          v39 = *((_OWORD *)v38 - 1);
          v38 -= 16;
          *(_OWORD *)(v31 - 16) = v39;
          v31 -= 16;
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = 0;
        }
        while (v38 != v37);
      }
      __p.__r_.__value_.__l.__size_ = v31;
      v40 = v111;
      if (v111 != (char *)v18)
      {
        do
        {
          *(_OWORD *)v32 = *(_OWORD *)v18;
          v32 += 16;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          v18 += 16;
        }
        while ((char *)v18 != v40);
        v31 = __p.__r_.__value_.__l.__size_;
        v18 = (std::string::size_type)v111;
      }
      v41 = (std::string::size_type)v110;
      v42 = v112;
      v110 = (char *)v31;
      v111 = v32;
      v112 = v115;
      __p.__r_.__value_.__r.__words[2] = v18;
      *(_QWORD *)&v115 = v42;
      __p.__r_.__value_.__r.__words[0] = v41;
      __p.__r_.__value_.__l.__size_ = v41;
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&__p);
      goto LABEL_67;
    }
    v23 = (uint64_t)&v111[-v18];
    v24 = (uint64_t)&v111[-v18] >> 4;
    if (v24 >= v15)
    {
      v25 = (std::__shared_weak_count *)((char *)v108 + 16 * v15);
      v27 = v111;
LABEL_47:
      v43 = &v27[-16 * v15];
      v44 = v27;
      if ((unint64_t)v43 < v16)
      {
        v45 = &v27[-16 * v15];
        v44 = v27;
        do
        {
          *(_OWORD *)v44 = *(_OWORD *)v45;
          v44 += 16;
          *(_QWORD *)v45 = 0;
          *((_QWORD *)v45 + 1) = 0;
          v45 += 16;
        }
        while ((unint64_t)v45 < v16);
      }
      v111 = v44;
      if (v27 != (char *)(v18 + 16 * v15))
      {
        do
        {
          v46 = *((_OWORD *)v43 - 1);
          v43 -= 16;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
          v47 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
          *((_OWORD *)v27 - 1) = v46;
          v27 -= 16;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
        while (v43 != (char *)v18);
      }
      for (; v14 != v25; v18 += 16)
      {
        v51 = v14->__vftable;
        v50 = v14->__shared_owners_;
        if (v50)
        {
          v52 = (unint64_t *)(v50 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = *(std::__shared_weak_count **)(v18 + 8);
        *(_QWORD *)v18 = v51;
        *(_QWORD *)(v18 + 8) = v50;
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v14 = (std::__shared_weak_count *)((char *)v14 + 16);
      }
      goto LABEL_67;
    }
    v25 = (std::__shared_weak_count *)((char *)v108 + 16 * v24);
    if (v25 == v109)
    {
      v27 = v111;
    }
    else
    {
      v26 = (std::__shared_weak_count_vtbl **)(&v108->std::__shared_count + v24);
      v27 = v111;
      do
      {
        *(_QWORD *)v27 = *v26;
        v28 = v26[1];
        *((_QWORD *)v27 + 1) = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->~__shared_weak_count_0;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v26 += 2;
        v27 += 16;
      }
      while (v26 != v13);
    }
    v111 = v27;
    if (v23 >= 1)
      goto LABEL_47;
  }
LABEL_67:
  v57 = *(unsigned __int8 *)(a2 + 23);
  if ((v57 & 0x80u) != 0)
    v57 = *(_QWORD *)(a2 + 8);
  if (!v57)
  {
    v64 = v110;
    if (v110 == v111)
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      *a3 = *(RIO_MTLX::InterfaceElement **)v110;
      v65 = (unint64_t *)*((_QWORD *)v64 + 1);
      a3[1] = (RIO_MTLX::InterfaceElement *)v65;
      if (v65)
      {
        v66 = v65 + 1;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
    }
    goto LABEL_141;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v103);
  v58 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v103[4].__r_.__value_.__r.__words, (unsigned __int8 *)a2);
  v59 = v58;
  if (!v58)
  {
    v61 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    goto LABEL_83;
  }
  v60 = *((_QWORD *)v58 + 5);
  v61 = (std::__shared_weak_count *)*((_QWORD *)v59 + 6);
  __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v59 + 5);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  if (!v60)
  {
LABEL_83:
    v106 = 0;
    v107 = 0;
    if (!v61)
      goto LABEL_88;
LABEL_84:
    v68 = (unint64_t *)&v61->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
    goto LABEL_88;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::TargetDef>(v60, &v106);
  if (v61)
    goto LABEL_84;
LABEL_88:
  v70 = v104;
  if (v104)
  {
    v71 = (unint64_t *)&v104->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (RIO_MTLX::Element *)v106;
  if (v106)
  {
    if (*(char *)(v106 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v106 + 48), *(_QWORD *)(v106 + 56));
    else
      __p = *(std::string *)(v106 + 48);
    v103 = 0;
    v104 = 0;
    v105 = 0;
    *(_QWORD *)&v113 = &v103;
    BYTE8(v113) = 0;
    v103 = (std::string *)operator new(0x18uLL);
    v104 = (std::__shared_weak_count *)v103;
    v105 = v103 + 1;
    v104 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v105, (__int128 *)&__p, &v115, v103);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    InheritString = (std::string *)RIO_MTLX::Element::getInheritString(v73);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>((uint64_t)v73, InheritString, &__p);
    while (__p.__r_.__value_.__r.__words[0])
    {
      v78 = (__int128 *)(__p.__r_.__value_.__r.__words[0] + 48);
      v79 = (std::string *)v104;
      if (v104 >= (std::__shared_weak_count *)v105)
      {
        v81 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v103, v78);
      }
      else
      {
        if (*(char *)(__p.__r_.__value_.__r.__words[0] + 71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v104, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 56));
        }
        else
        {
          v80 = *v78;
          v104->__shared_weak_owners_ = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 64);
          *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
        }
        v81 = v79 + 1;
      }
      v104 = (std::__shared_weak_count *)v81;
      v82 = __p.__r_.__value_.__r.__words[0];
      v83 = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)__p.__r_.__value_.__l.__data_);
      RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(v82, v83, &v113);
      v84 = v113;
      v113 = 0uLL;
      v85 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v84;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
    }
    v91 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v92 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = v103;
    v95 = (std::string *)v104;
    while (v94 != v95)
    {
      v96 = (RIO_MTLX::InterfaceElement **)v110;
      v97 = v111;
      while (v96 != (RIO_MTLX::InterfaceElement **)v97)
      {
        v98 = *v96;
        *a3 = *v96;
        v99 = (unint64_t *)v96[1];
        a3[1] = (RIO_MTLX::InterfaceElement *)v99;
        if (v99)
        {
          v100 = v99 + 1;
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
          v98 = *a3;
        }
        Target = RIO_MTLX::InterfaceElement::getTarget(v98);
        if ((RIO_MTLX::targetStringsMatch((uint64_t)Target, (uint64_t)v94) & 1) != 0)
          goto LABEL_98;
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a3);
        v96 += 2;
      }
      ++v94;
    }
  }
  else
  {
    v103 = 0;
    v104 = 0;
    v105 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_98:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v74 = v107;
  if (v107)
  {
    v75 = (unint64_t *)&v107->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
LABEL_141:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22FFED710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  a10 = &a15;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a15 = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::InterfaceElement::getTarget(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::NodeDef::validate(RIO_MTLX::TypedElement *a1, std::string *a2)
{
  unsigned __int8 *v4;
  char v5;
  uint64_t result;
  void *__p[2];
  char v8;
  char v9;

  v9 = 1;
  v4 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(a1);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Nodedef should not have a type but an explicit output");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v9, a2, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v9)
    return result;
  else
    return 0;
}

void sub_22FFED90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL RIO_MTLX::NodeDef::isVersionCompatible(RIO_MTLX::InterfaceElement *a1, unsigned __int8 *a2)
{
  uint64_t *VersionString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;

  VersionString = RIO_MTLX::InterfaceElement::getVersionString(a1);
  v5 = *((unsigned __int8 *)VersionString + 23);
  if ((v5 & 0x80u) == 0)
    v6 = *((unsigned __int8 *)VersionString + 23);
  else
    v6 = VersionString[1];
  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(unsigned __int8 **)a2;
    if ((v5 & 0x80) != 0)
    {
      VersionString = (uint64_t *)memcmp((const void *)*VersionString, v9, VersionString[1]);
      if (!(_DWORD)VersionString)
        return 1;
    }
    else
    {
      if (!*((_BYTE *)VersionString + 23))
        return 1;
      while (*(unsigned __int8 *)VersionString == *v9)
      {
        VersionString = (uint64_t *)((char *)VersionString + 1);
        ++v9;
        if (!--v5)
          return 1;
      }
    }
  }
  v10 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)VersionString);
  if (!RIO_MTLX::Element::getTypedAttribute<BOOL>((uint64_t)a1, v10))
    return 0;
  v11 = a2[23];
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a2 + 1);
  return !v11;
}

uint64_t *RIO_MTLX::InterfaceElement::getVersionString(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::NodeDef::getDeclaration(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v6, (_QWORD *)(a1 + 8));
  RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22FFEDAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
    v7 = *(_QWORD *)(a1 + 240);
  else
    v7 = 0;
  v20 = v7;
  v21 = v6;
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v7, (unsigned __int8 *)&__p, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v8 = v19;
    *a3 = v18;
    a3[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v7, (unsigned __int8 *)a2, a3);
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22FFEDBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::InterfaceElement::getNodeDefString(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::Implementation::validate(RIO_MTLX::InterfaceElement *a1, std::string *a2)
{
  unsigned __int8 *v4;
  char v5;
  uint64_t result;
  void *__p[2];
  char v8;
  char v9;

  v9 = 1;
  v4 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(a1);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Implementation elements do not support version strings");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v9, a2, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v9)
    return result;
  else
    return 0;
}

void sub_22FFEDD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double RIO_MTLX::Implementation::getDeclaration@<D0>(RIO_MTLX::InterfaceElement *a1@<X0>, _OWORD *a2@<X8>)
{
  std::string *NodeDefString;
  double result;
  __int128 v6;

  NodeDefString = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString(a1);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)a1, NodeDefString, &v6);
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void RIO_MTLX::UnitTypeDef::getUnitDefs(RIO_MTLX::UnitTypeDef *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  RIO_MTLX *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  void **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void **v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void **v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void **v51;
  std::__shared_weak_count *v52;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  RIO_MTLX::Element::getDocument(this, &v44);
  v4 = v44;
  v6 = RIO_MTLX::EMPTY_STRING(v5);
  v7 = *(_QWORD *)(v4 + 136);
  v8 = *(_QWORD *)(v4 + 144);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (v7 != v8)
  {
    v9 = v6;
    do
    {
      v11 = *(void ***)v7;
      v10 = *(std::__shared_weak_count **)(v7 + 8);
      v51 = *(void ***)v7;
      v52 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      RIO_MTLX::Element::asA<RIO_MTLX::UnitDef>((uint64_t)v11, &v49);
      v14 = v49;
      if (!v49)
        goto LABEL_24;
      v15 = *((char *)v9 + 23);
      v16 = v9[1];
      if (v15 >= 0)
        v16 = *((unsigned __int8 *)v9 + 23);
      if (v16)
      {
        v17 = *((unsigned __int8 *)v11 + 47);
        if ((v17 & 0x80u) == 0)
          v18 = (void *)*((unsigned __int8 *)v11 + 47);
        else
          v18 = v11[4];
        if (v18 != (void *)v16)
          goto LABEL_24;
        v19 = (const void **)(v11 + 3);
        if (v15 >= 0)
          v20 = (unsigned __int8 *)v9;
        else
          v20 = (unsigned __int8 *)*v9;
        if ((v17 & 0x80) != 0)
        {
          v6 = (uint64_t *)memcmp(*v19, v20, (size_t)v11[4]);
          if ((_DWORD)v6)
            goto LABEL_24;
        }
        else if (*((_BYTE *)v11 + 47))
        {
          while (*(unsigned __int8 *)v19 == *v20)
          {
            v19 = (const void **)((char *)v19 + 1);
            ++v20;
            if (!--v17)
              goto LABEL_23;
          }
          goto LABEL_24;
        }
      }
LABEL_23:
      std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100]((uint64_t)&v46, v14, (uint64_t)v50);
LABEL_24:
      v21 = v50;
      if (v50)
      {
        v22 = (unint64_t *)&v50->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v52;
      if (v52)
      {
        v25 = (unint64_t *)&v52->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  v27 = v45;
  if (v45)
  {
    v28 = (unint64_t *)&v45->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v46;
  v31 = v47;
  while (v30 != v31)
  {
    v33 = *(void ***)v30;
    v32 = *(std::__shared_weak_count **)(v30 + 8);
    v51 = *(void ***)v30;
    v52 = v32;
    if (v32)
    {
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    RIO_MTLX::UnitDef::UNITTYPE_ATTRIBUTE((RIO_MTLX::UnitDef *)v6);
    v36 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v33 + 20, (unsigned __int8 *)qword_255E546E0);
    if (v36)
      v6 = (uint64_t *)(v36 + 40);
    else
      v6 = RIO_MTLX::EMPTY_STRING(0);
    v37 = *((unsigned __int8 *)v6 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = *((unsigned __int8 *)v6 + 23);
    else
      v38 = v6[1];
    v39 = *((unsigned __int8 *)this + 71);
    v40 = (char)v39;
    if ((v39 & 0x80u) != 0)
      v39 = *((_QWORD *)this + 7);
    if (v38 != v39)
      goto LABEL_63;
    if (v40 >= 0)
      v41 = (unsigned __int8 *)this + 48;
    else
      v41 = (unsigned __int8 *)*((_QWORD *)this + 6);
    if ((v37 & 0x80) != 0)
    {
      v6 = (uint64_t *)memcmp((const void *)*v6, v41, v6[1]);
      if ((_DWORD)v6)
        goto LABEL_63;
    }
    else if (*((_BYTE *)v6 + 23))
    {
      while (*(unsigned __int8 *)v6 == *v41)
      {
        v6 = (uint64_t *)((char *)v6 + 1);
        ++v41;
        if (!--v37)
          goto LABEL_62;
      }
      goto LABEL_63;
    }
LABEL_62:
    std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100]((uint64_t)a2, (uint64_t)v33, (uint64_t)v32);
LABEL_63:
    if (v32)
    {
      v42 = (unint64_t *)&v32->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v30 += 16;
  }
  v51 = (void **)&v46;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v51);
}

void sub_22FFEE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v11 = *(_QWORD **)a1;
    v12 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v14 = v6 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(16 * v15);
    v17 = &v16[16 * v12];
    *(_QWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = a3;
    if (a3)
    {
      v18 = (unint64_t *)(a3 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v11 = *(_QWORD **)a1;
      v7 = *(_QWORD **)(a1 + 8);
    }
    if (v7 == v11)
    {
      v10 = v17 + 16;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
    }
    else
    {
      v20 = &v16[16 * v12];
      do
      {
        v21 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != v11);
      v11 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v10 = v17 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
      while ((_QWORD *)v22 != v11)
      {
        v22 -= 16;
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    if (a3)
    {
      v8 = (unint64_t *)(a3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

void RIO_MTLX::NodeDef::~NodeDef(RIO_MTLX::NodeDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Implementation::~Implementation(RIO_MTLX::Implementation *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned __int8 *RIO_MTLX::Element::getTypedAttribute<BOOL>(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  uint64_t *v6;
  char v7;

  v3 = (_QWORD *)(a1 + 160);
  result = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), a2);
  if (result)
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v3, a2);
    if (v5)
      v6 = (uint64_t *)(v5 + 40);
    else
      v6 = RIO_MTLX::EMPTY_STRING(0);
    v7 = 0;
    return (unsigned __int8 *)(v7 != 0);
  }
  return result;
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FFEE3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22FFEE464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL realityio::OutputsDescriptor::addOutputDescriptor(uint64_t a1, std::string::size_type *a2)
{
  __int128 *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  std::string __p;
  std::__shared_weak_count *v16;

  v4 = (__int128 *)*a2;
  MEMORY[0x2348B2764](&__p, *a2);
  v5 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::find<pxrInternal__aapl__pxrReserved__::TfToken>((_QWORD *)(a1 + 40), &__p);
  v6 = v5;
  if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v7 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (!v5)
  {
    std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<realityio::OutputDescriptor const>&,0>(&__p, v4, a2);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__emplace_unique_impl<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>((_QWORD *)(a1 + 40), (uint64_t)&__p);
    v9 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MEMORY[0x2348B2764](&__p, v4);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken>(a1, &__p, &__p);
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v12 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  return v6 == 0;
}

void sub_22FFEE5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::~pair(uint64_t a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<realityio::OutputDescriptor const>&,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__emplace_unique_impl<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  char v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__construct_node<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>((uint64_t)a1, a2, (uint64_t)&v7);
  inserted = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique(a1, v7);
  if ((v4 & 1) == 0)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_22FFEE710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11)
{
  if (a10)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__construct_node<std::pair<std::string,std::shared_ptr<realityio::OutputDescriptor const>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __n128 result;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  MEMORY[0x2348B2764](v6 + 16, a2);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 24) = result;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *((_QWORD *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * (*((_QWORD *)v6 + 2) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void sub_22FFEE7CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  v4 = a2 + 2;
  v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  *(v4 - 1) = v5;
  v6 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2 % v4;
      if (v4 > a2)
        v6 = a2;
    }
    else
    {
      v6 = (v4 - 1) & a2;
    }
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (v7)
    {
      result = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v9 = result[1];
          if (v9 == a2)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v9 >= v4)
                v9 %= v4;
            }
            else
            {
              v9 &= v4 - 1;
            }
            if (v9 != v6)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  if (v4 && (float)(v11 * (float)v4) >= v10)
    return 0;
  v12 = 1;
  if (v4 >= 3)
    v12 = (v4 & (v4 - 1)) != 0;
  v13 = v12 | (2 * v4);
  v14 = vcvtps_u32_f32(v10 / v11);
  if (v13 <= v14)
    prime = (int8x8_t)v14;
  else
    prime = (int8x8_t)v13;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime > v4)
  {
LABEL_29:
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(8 * *(_QWORD *)&prime);
    v17 = *(void **)a1;
    *(_QWORD *)a1 = v16;
    if (v17)
      operator delete(v17);
    v18 = 0;
    *(int8x8_t *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18++) = 0;
    while (*(_QWORD *)&prime != v18);
    v19 = *(_QWORD **)(a1 + 16);
    if (v19)
    {
      v20 = v19[1];
      v21 = (uint8x8_t)vcnt_s8(prime);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&prime)
          v20 %= *(_QWORD *)&prime;
      }
      else
      {
        v20 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = a1 + 16;
      v25 = (_QWORD *)*v19;
      if (*v19)
      {
        while (1)
        {
          v26 = v25[1];
          if (v21.u32[0] > 1uLL)
          {
            if (v26 >= *(_QWORD *)&prime)
              v26 %= *(_QWORD *)&prime;
          }
          else
          {
            v26 &= *(_QWORD *)&prime - 1;
          }
          if (v26 != v20)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v26))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v19;
              goto LABEL_54;
            }
            *v19 = *v25;
            *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v26);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v26) = v25;
            v25 = v19;
          }
          v26 = v20;
LABEL_54:
          v19 = v25;
          v25 = (_QWORD *)*v25;
          v20 = v26;
          if (!v25)
            return 0;
        }
      }
    }
    return 0;
  }
  if (*(_QWORD *)&prime >= v4)
    return 0;
  v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v4 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
  {
    v22 = std::__next_prime(v22);
  }
  else
  {
    v24 = 1 << -(char)__clz(v22 - 1);
    if (v22 >= 2)
      v22 = v24;
  }
  if (*(_QWORD *)&prime <= v22)
    prime = (int8x8_t)v22;
  if (*(_QWORD *)&prime >= v4)
    return 0;
  if (prime)
    goto LABEL_29;
  v27 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v27)
    operator delete(v27);
  result = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 3));
    v3 = a2[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v7;
  i[2] = *a3;
  *a3 = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22FFEEEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t RIOBuilderDirtyStageDescriptorGetTypeID()
{
  if (RIOBuilderDirtyStageDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyStageDescriptorGetTypeID::onceToken, &__block_literal_global_8);
  return RIOBuilderDirtyStageDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderDirtyStageDescriptorCreateWithPrimDescriptorsAndMetadataDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex i;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  CFIndex v30;
  CFIndex j;
  _QWORD *ValueAtIndex;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v6 = *((_OWORD *)CFArrayGetValueAtIndex(a1, i) + 1);
      v47 = v6;
      v7 = *((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v10 = v50;
        v11 = v51;
        if (v50 >= v51)
        {
LABEL_13:
          v45 = v6;
          v14 = (v10 - v49) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
          v16 = v11 - v49;
          if (v16 >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v51, v17);
          v20 = &v18[16 * v14];
          *(_OWORD *)v20 = v45;
          if (v7)
          {
            v21 = (unint64_t *)(v7 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = v49;
          v24 = v50;
          if (v50 == v49)
          {
            v13 = v20 + 16;
            v49 = &v18[16 * v14];
            v50 = v20 + 16;
            v51 = &v18[16 * v19];
          }
          else
          {
            v25 = &v18[16 * v14];
            do
            {
              v26 = *((_OWORD *)v24 - 1);
              v24 -= 16;
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 16;
              *(_QWORD *)v24 = 0;
              *((_QWORD *)v24 + 1) = 0;
            }
            while (v24 != v23);
            v24 = v49;
            v27 = (uint64_t)v50;
            v13 = v20 + 16;
            v49 = v25;
            v50 = v20 + 16;
            v51 = &v18[16 * v19];
            while ((char *)v27 != v24)
            {
              v27 -= 16;
              std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v27);
            }
          }
          if (v24)
            operator delete(v24);
          goto LABEL_31;
        }
        *(_OWORD *)v50 = v6;
        do
          v12 = __ldxr(v8);
        while (__stxr(v12 + 1, v8));
      }
      else
      {
        v10 = v50;
        v11 = v51;
        if (v50 >= v51)
          goto LABEL_13;
        *(_QWORD *)v50 = v6;
        *((_QWORD *)v10 + 1) = 0;
      }
      v13 = v10 + 16;
LABEL_31:
      v50 = v13;
      if (*((_QWORD *)&v47 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v47 + 1) + 16))(*((_QWORD *)&v47 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
        }
      }
    }
  }
  v47 = 0uLL;
  v48 = 0;
  v30 = CFArrayGetCount(a2);
  if (v30 >= 1)
  {
    for (j = 0; j != v30; ++j)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, j);
      v33 = ValueAtIndex[3];
      *(_QWORD *)&v46 = ValueAtIndex[2];
      *((_QWORD *)&v46 + 1) = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((char **)&v47, &v46);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
  }
  v39 = operator new(0x58uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_24FDEC0E8;
  *(_QWORD *)&v46 = realityio::DirtyStageDescriptor::DirtyStageDescriptor((uint64_t)(v39 + 3), (_QWORD **)&v47, (_QWORD **)&v49);
  *((_QWORD *)&v46 + 1) = v39;
  v40 = RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(&v46);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_QWORD *)&v46 = &v47;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  *(_QWORD *)&v47 = &v49;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  return v40;
}

void sub_22FFEF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a11 = &a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderDirtyStageDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyStageDescriptorGetTypeID::onceToken, &__block_literal_global_8);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

__CFArray *RIOBuilderDirtyStageDescriptorCopyMetadataDescriptors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 8), *(_QWORD **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_22FFEF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderDirtyStageDescriptorCopyPrimDescriptors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 32), *(_QWORD **)(v3 + 40), (uint64_t)(*(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyPrimDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_22FFEF75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderDirtyStageDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderDirtyStageDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyStageDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyStageDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyStageDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderDirtyStageDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyStageDescriptor %p>"), a1);
}

void std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEC0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyStageDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FFEF928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *RIO_MTLX::FileSearchPath::find@<X0>(RIO_MTLX::FileSearchPath *this@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _DWORD *v10;
  std::string *result;
  void **v12;

  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  v7 = *a2;
  v8 = a2[1];
  if (*(_QWORD *)this == v6)
  {
    v9 = a2[1];
    goto LABEL_9;
  }
  v9 = v7;
  if (v7 == v8)
  {
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, v7, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3));
    v10 = a2 + 3;
LABEL_12:
    *(_DWORD *)(a3 + 24) = *v10;
    return result;
  }
  v10 = a2 + 3;
  if (*((_DWORD *)a2 + 6))
  {
LABEL_11:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, v7, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 3));
    goto LABEL_12;
  }
  while (1)
  {
    RIO_MTLX::FilePath::operator/(v5, a2, a3);
    result = (std::string *)RIO_MTLX::FilePath::exists((char **)a3);
    if ((result & 1) != 0)
      return result;
    v12 = (void **)a3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    v5 += 32;
    if (v5 == v6)
    {
      v7 = *a2;
      v8 = a2[1];
      goto LABEL_11;
    }
  }
}

void sub_22FFEFA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t RIO_MTLX::FileSearchPath::append(unint64_t this, const RIO_MTLX::FileSearchPath *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v3)
  {
    v4 = (uint64_t *)this;
    v5 = *(_QWORD *)(this + 8);
    do
    {
      if (v5 >= v4[2])
      {
        this = std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>(v4, v2);
        v5 = this;
      }
      else
      {
        this = (unint64_t)std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>((uint64_t)v4, v2);
        v5 += 32;
      }
      v4[1] = v5;
      v2 += 32;
    }
    while (v2 != v3);
  }
  return this;
}

_QWORD *std::vector<RIO_MTLX::FilePath>::__init_with_size[abi:ne180100]<RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22FFEFB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

realityio::BuilderRegistry *realityio::BuilderRegistry::BuilderRegistry(realityio::BuilderRegistry *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[3];
  _QWORD *v88;
  _QWORD v89[3];
  _QWORD *v90;
  _QWORD v91[3];
  _QWORD *v92;
  _QWORD v93[3];
  _QWORD *v94;
  _QWORD v95[3];
  _QWORD *v96;
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  _QWORD v109[3];
  _QWORD *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  _QWORD v115[3];
  _QWORD *v116;
  _QWORD v117[3];
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  _QWORD v125[3];
  _QWORD *v126;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _QWORD v137[3];
  _QWORD *v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  _QWORD v145[3];
  _QWORD *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  _QWORD v151[3];
  _QWORD *v152;
  _QWORD v153[3];
  _QWORD *v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _QWORD v159[3];
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _QWORD v165[3];
  _QWORD *v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_DWORD *)this + 14) = 1065353216;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  v165[0] = &off_24FDEC688;
  v166 = v165;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v165);
  v2 = v166;
  if (v166 == v165)
  {
    v3 = 4;
    v2 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v163[0] = &off_24FDEC708;
  v164 = v163;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v163);
  v4 = v164;
  if (v164 == v163)
  {
    v5 = 4;
    v4 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v161[0] = &off_24FDEC7D8;
  v162 = v161;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v161);
  v6 = v162;
  if (v162 == v161)
  {
    v7 = 4;
    v6 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v159[0] = &off_24FDEC8A8;
  v160 = v159;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v159);
  v8 = v160;
  if (v160 == v159)
  {
    v9 = 4;
    v8 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v157[0] = &off_24FDEC978;
  v158 = v157;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v157);
  v10 = v158;
  if (v158 == v157)
  {
    v11 = 4;
    v10 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  v155[0] = &off_24FDECA48;
  v156 = v155;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v155);
  v12 = v156;
  if (v156 == v155)
  {
    v13 = 4;
    v12 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_31;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_31:
  v153[0] = &off_24FDECAC8;
  v154 = v153;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v153);
  v14 = v154;
  if (v154 == v153)
  {
    v15 = 4;
    v14 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_36;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_36:
  v151[0] = &off_24FDECB48;
  v152 = v151;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v151);
  v16 = v152;
  if (v152 == v151)
  {
    v17 = 4;
    v16 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_41;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_41:
  v149[0] = &off_24FDECC18;
  v150 = v149;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v149);
  v18 = v150;
  if (v150 == v149)
  {
    v19 = 4;
    v18 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_46;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_46:
  v147[0] = &off_24FDECCE8;
  v148 = v147;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v147);
  v20 = v148;
  if (v148 == v147)
  {
    v21 = 4;
    v20 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_51;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_51:
  v145[0] = &off_24FDECDB8;
  v146 = v145;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v145);
  v22 = v146;
  if (v146 == v145)
  {
    v23 = 4;
    v22 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_56;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_56:
  v143[0] = &off_24FDECE88;
  v144 = v143;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v143);
  v24 = v144;
  if (v144 == v143)
  {
    v25 = 4;
    v24 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_61;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_61:
  v141[0] = &off_24FDECF08;
  v142 = v141;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v141);
  v26 = v142;
  if (v142 == v141)
  {
    v27 = 4;
    v26 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_66;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_66:
  v139[0] = &off_24FDECF88;
  v140 = v139;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v139);
  v28 = v140;
  if (v140 == v139)
  {
    v29 = 4;
    v28 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_71;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_71:
  v137[0] = &off_24FDED008;
  v138 = v137;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v137);
  v30 = v138;
  if (v138 == v137)
  {
    v31 = 4;
    v30 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_76;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_76:
  v135[0] = &off_24FDED088;
  v136 = v135;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v135);
  v32 = v136;
  if (v136 == v135)
  {
    v33 = 4;
    v32 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_81;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_81:
  v133[0] = &off_24FDED158;
  v134 = v133;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v133);
  v34 = v134;
  if (v134 == v133)
  {
    v35 = 4;
    v34 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_86;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_86:
  v131[0] = &off_24FDED228;
  v132 = v131;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v131);
  v36 = v132;
  if (v132 == v131)
  {
    v37 = 4;
    v36 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_91;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_91:
  v129[0] = &off_24FDED2F8;
  v130 = v129;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v129);
  v38 = v130;
  if (v130 == v129)
  {
    v39 = 4;
    v38 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_96;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_96:
  v127[0] = &off_24FDED3C8;
  v128 = v127;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v127);
  v40 = v128;
  if (v128 == v127)
  {
    v41 = 4;
    v40 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_101;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_101:
  v125[0] = &off_24FDED498;
  v126 = v125;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v125);
  v42 = v126;
  if (v126 == v125)
  {
    v43 = 4;
    v42 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_106;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_106:
  v123[0] = &off_24FDED568;
  v124 = v123;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v123);
  v44 = v124;
  if (v124 == v123)
  {
    v45 = 4;
    v44 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_111;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_111:
  v121[0] = &off_24FDED638;
  v122 = v121;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v121);
  v46 = v122;
  if (v122 == v121)
  {
    v47 = 4;
    v46 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_116;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_116:
  v119[0] = &off_24FDED708;
  v120 = v119;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v119);
  v48 = v120;
  if (v120 == v119)
  {
    v49 = 4;
    v48 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_121;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_121:
  v117[0] = &off_24FDED788;
  v118 = v117;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v117);
  v50 = v118;
  if (v118 == v117)
  {
    v51 = 4;
    v50 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_126;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_126:
  v115[0] = &off_24FDED808;
  v116 = v115;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v115);
  v52 = v116;
  if (v116 == v115)
  {
    v53 = 4;
    v52 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_131;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_131:
  v113[0] = &off_24FDED888;
  v114 = v113;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v113);
  v54 = v114;
  if (v114 == v113)
  {
    v55 = 4;
    v54 = v113;
  }
  else
  {
    if (!v114)
      goto LABEL_136;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_136:
  v111[0] = &off_24FDED958;
  v112 = v111;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v111);
  v56 = v112;
  if (v112 == v111)
  {
    v57 = 4;
    v56 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_141;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_141:
  v109[0] = &off_24FDEDA28;
  v110 = v109;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v109);
  v58 = v110;
  if (v110 == v109)
  {
    v59 = 4;
    v58 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_146;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_146:
  v107[0] = &off_24FDEDAF8;
  v108 = v107;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v107);
  v60 = v108;
  if (v108 == v107)
  {
    v61 = 4;
    v60 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_151;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_151:
  v105[0] = &off_24FDEDBC8;
  v106 = v105;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v105);
  v62 = v106;
  if (v106 == v105)
  {
    v63 = 4;
    v62 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_156;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_156:
  v103[0] = &off_24FDEDC48;
  v104 = v103;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v103);
  v64 = v104;
  if (v104 == v103)
  {
    v65 = 4;
    v64 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_161;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_161:
  v101[0] = &off_24FDEDCC8;
  v102 = v101;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v101);
  v66 = v102;
  if (v102 == v101)
  {
    v67 = 4;
    v66 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_166;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_166:
  v99[0] = &off_24FDEDD48;
  v100 = v99;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v99);
  v68 = v100;
  if (v100 == v99)
  {
    v69 = 4;
    v68 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_171;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_171:
  v97[0] = &off_24FDEDDC8;
  v98 = v97;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v97);
  v70 = v98;
  if (v98 == v97)
  {
    v71 = 4;
    v70 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_176;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_176:
  v95[0] = &off_24FDEDE98;
  v96 = v95;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v95);
  v72 = v96;
  if (v96 == v95)
  {
    v73 = 4;
    v72 = v95;
  }
  else
  {
    if (!v96)
      goto LABEL_181;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_181:
  v93[0] = &off_24FDEDF68;
  v94 = v93;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v93);
  v74 = v94;
  if (v94 == v93)
  {
    v75 = 4;
    v74 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_186;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_186:
  v91[0] = &off_24FDEE038;
  v92 = v91;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v91);
  v76 = v92;
  if (v92 == v91)
  {
    v77 = 4;
    v76 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_191;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_191:
  v89[0] = &off_24FDEE0B8;
  v90 = v89;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v89);
  v78 = v90;
  if (v90 == v89)
  {
    v79 = 4;
    v78 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_196;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_196:
  v87[0] = &off_24FDEE138;
  v88 = v87;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v87);
  v80 = v88;
  if (v88 == v87)
  {
    v81 = 4;
    v80 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_201;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_201:
  v85[0] = &off_24FDEE1B8;
  v86 = v85;
  realityio::BuilderRegistry::registerBuilder((uint64_t)this, v85);
  v82 = v86;
  if (v86 == v85)
  {
    v83 = 4;
    v82 = v85;
    goto LABEL_205;
  }
  if (v86)
  {
    v83 = 5;
LABEL_205:
    (*(void (**)(void))(*v82 + 8 * v83))();
  }
  return this;
}

void sub_22FFF0904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == &a10)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v15, *(_QWORD **)(v13 + 120));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v14, *(_QWORD **)(v13 + 72));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(v13 + 24);
  a9 = (void **)v13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::BuilderRegistry::registerBuilder(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  _QWORD **v32;
  _QWORD *i;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void ***v62;
  void ***v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned __int8 v74;
  void ***v75;
  void ***v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v99;
  void ***v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  void ***v105;
  void ***v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  realityio::DirtyStageSubscription *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (!a2[3])
    return 0;
  v114 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v5 = a2[3];
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t *))(*(_QWORD *)v5 + 48))(&v112, v5, &v114);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v112 + 24))(&v111);
  (*(void (**)(realityio::DirtyStageSubscription **__return_ptr))(*(_QWORD *)v112 + 32))(&v109);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  while (v6 != v7)
  {
    v8 = *(_QWORD **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = v111 & 0xFFFFFFFFFFFFFFF8;
      v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v12 == v13)
      {
LABEL_29:
        v24 = 0;
        goto LABEL_162;
      }
    }
    else if ((v111 & 0xFFFFFFFFFFFFFFF8) == (*v8 & 0xFFFFFFFFFFFFFFF8))
    {
      goto LABEL_29;
    }
    v6 += 16;
  }
  v15 = (_QWORD *)operator new();
  v16 = (uint64_t)v15;
  v17 = v111;
  *v15 = v111;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      *v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = v110;
  v15[1] = v109;
  v15[2] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a2[3];
  if (v23)
  {
    if ((_QWORD *)v23 == a2)
    {
      *(_QWORD *)(v16 + 48) = v16 + 24;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
      goto LABEL_31;
    }
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  }
  *(_QWORD *)(v16 + 48) = v23;
LABEL_31:
  v107 = v16;
  v25 = (std::__shared_weak_count *)operator new();
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDEE238;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v108 = v25;
  std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](a1, v16, (uint64_t)v25);
  v27 = v111;
  v28 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
  v29 = bswap64(0x9E3779B97F4A7C55 * (v111 & 0xFFFFFFFFFFFFFFF8));
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v2 = v29;
      if (v29 >= v30)
        v2 = v29 % v30;
    }
    else
    {
      v2 = v29 & (v30 - 1);
    }
    v32 = *(_QWORD ***)(*(_QWORD *)(a1 + 24) + 8 * v2);
    if (v32)
    {
      for (i = *v32; i; i = (_QWORD *)*i)
      {
        v34 = i[1];
        if (v34 == v29)
        {
          if ((unsigned int *)(i[2] & 0xFFFFFFFFFFFFFFF8) == v28)
            goto LABEL_108;
        }
        else
        {
          if (v31.u32[0] > 1uLL)
          {
            if (v34 >= v30)
              v34 %= v30;
          }
          else
          {
            v34 &= v30 - 1;
          }
          if (v34 != v2)
            break;
        }
      }
    }
  }
  v35 = operator new(0x28uLL);
  i = v35;
  *v35 = 0;
  v35[1] = v29;
  v35[2] = v27;
  if ((v27 & 7) != 0)
  {
    do
      v36 = __ldxr(v28);
    while (__stxr(v36 + 2, v28));
    if ((v36 & 1) == 0)
      v35[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v35[3] = 0;
  v35[4] = 0;
  v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 48) + 1);
  v38 = *(float *)(a1 + 56);
  if (!v30 || (float)(v38 * (float)v30) < v37)
  {
    v39 = 1;
    if (v30 >= 3)
      v39 = (v30 & (v30 - 1)) != 0;
    v40 = v39 | (2 * v30);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = (int8x8_t)v41;
    else
      prime = (int8x8_t)v40;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v30 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)&prime > v30)
      goto LABEL_64;
    if (*(_QWORD *)&prime < v30)
    {
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v30 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v30)
      {
        v30 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_64:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v43 = operator new(8 * *(_QWORD *)&prime);
          v44 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v43;
          if (v44)
            operator delete(v44);
          v45 = 0;
          *(int8x8_t *)(a1 + 32) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v45++) = 0;
          while (*(_QWORD *)&prime != v45);
          v46 = *(_QWORD **)(a1 + 40);
          if (v46)
          {
            v47 = v46[1];
            v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(_QWORD *)&prime)
                v47 %= *(_QWORD *)&prime;
            }
            else
            {
              v47 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v47) = a1 + 40;
            v52 = (_QWORD *)*v46;
            if (*v46)
            {
              do
              {
                v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(_QWORD *)&prime)
                    v53 %= *(_QWORD *)&prime;
                }
                else
                {
                  v53 &= *(_QWORD *)&prime - 1;
                }
                if (v53 != v47)
                {
                  v54 = *(_QWORD *)(a1 + 24);
                  if (!*(_QWORD *)(v54 + 8 * v53))
                  {
                    *(_QWORD *)(v54 + 8 * v53) = v46;
                    goto LABEL_89;
                  }
                  *v46 = *v52;
                  *v52 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v53);
                  **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8 * v53) = v52;
                  v52 = v46;
                }
                v53 = v47;
LABEL_89:
                v46 = v52;
                v52 = (_QWORD *)*v52;
                v47 = v53;
              }
              while (v52);
            }
          }
          v30 = (unint64_t)prime;
          goto LABEL_93;
        }
        v99 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v99)
          operator delete(v99);
        v30 = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
LABEL_93:
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v29 >= v30)
        v2 = v29 % v30;
      else
        v2 = v29;
    }
    else
    {
      v2 = (v30 - 1) & v29;
    }
  }
  v55 = *(_QWORD *)(a1 + 24);
  v56 = *(_QWORD **)(v55 + 8 * v2);
  if (v56)
  {
    *i = *v56;
LABEL_106:
    *v56 = i;
    goto LABEL_107;
  }
  *i = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = i;
  *(_QWORD *)(v55 + 8 * v2) = a1 + 40;
  if (*i)
  {
    v57 = *(_QWORD *)(*i + 8);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v57 >= v30)
        v57 %= v30;
    }
    else
    {
      v57 &= v30 - 1;
    }
    v56 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v57);
    goto LABEL_106;
  }
LABEL_107:
  ++*(_QWORD *)(a1 + 48);
  v16 = v107;
  do
LABEL_108:
    v58 = __ldxr(v26);
  while (__stxr(v58 + 1, v26));
  v59 = (std::__shared_weak_count *)i[4];
  i[3] = v16;
  i[4] = v25;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  realityio::DirtyStageSubscription::getExplicitPrimTypes(v109, (uint64_t)&v105);
  v62 = v105;
  v63 = v106;
  if (v105 == v106)
    goto LABEL_133;
  do
  {
    v64 = (unint64_t)*v62;
    v114 = v64;
    if ((v64 & 7) != 0)
    {
      v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 2, v65));
      if ((v66 & 1) == 0)
        v114 = (unint64_t)v65;
    }
    v115 = v107;
    v116 = (uint64_t)v108;
    if (v108)
    {
      v67 = (unint64_t *)&v108->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>((uint64_t **)(a1 + 64), (uint64_t)&v114);
    v69 = (std::__shared_weak_count *)v116;
    if (v116)
    {
      v70 = (unint64_t *)(v116 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if ((v114 & 7) != 0)
    {
      v72 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stlxr(v73 - 2, v72));
    }
    ++v62;
  }
  while (v62 != v63);
  if (v105 == v106)
LABEL_133:
    std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](a1 + 88, v107, (uint64_t)v108);
  v74 = atomic_load((unsigned __int8 *)&_MergedGlobals_13);
  if ((v74 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_13))
  {
    std::set<pxrInternal__aapl__pxrReserved__::TfToken>::set[abi:ne180100]((uint64_t)&v114, 18);
    v100 = (void ***)&v117;
    do
    {
      v102 = (uint64_t)*--v100;
      v101 = v102;
      if ((v102 & 7) != 0)
      {
        v103 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
    }
    while (v100 != (void ***)&v114);
    __cxa_guard_release(&_MergedGlobals_13);
  }
  if (!std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__count_unique<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&qword_255E54700, &v111))
  {
    v75 = v105;
    v76 = v106;
    if (v105 == v106)
      goto LABEL_155;
    do
    {
      v77 = (unint64_t)*v75;
      v114 = v77;
      if ((v77 & 7) != 0)
      {
        v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 2, v78));
        if ((v79 & 1) == 0)
          v114 = (unint64_t)v78;
      }
      v115 = v107;
      v116 = (uint64_t)v108;
      if (v108)
      {
        v80 = (unint64_t *)&v108->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>((uint64_t **)(a1 + 112), (uint64_t)&v114);
      v82 = (std::__shared_weak_count *)v116;
      if (v116)
      {
        v83 = (unint64_t *)(v116 + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if ((v114 & 7) != 0)
      {
        v85 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      ++v75;
    }
    while (v75 != v76);
    if (v105 == v106)
LABEL_155:
      std::vector<std::shared_ptr<RIO_MTLX::UnitDef>>::push_back[abi:ne180100](a1 + 136, v107, (uint64_t)v108);
  }
  v114 = (unint64_t)&v105;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  v87 = v108;
  if (v108)
  {
    v88 = (unint64_t *)&v108->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v24 = 1;
LABEL_162:
  v90 = v110;
  if (v110)
  {
    v91 = (unint64_t *)&v110->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((v111 & 7) != 0)
  {
    v93 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = v113;
  if (v113)
  {
    v96 = (unint64_t *)&v113->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  return v24;
}

