void sub_230058E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  unsigned int **v14;
  std::recursive_mutex *v15;

  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(v14);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->(uint64_t result)
{
  char *v1;
  uint64_t v2;

  if (!result)
  {
    v1 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v1, (const char *)0x2F);
    v2 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return RIOPxrSdfLayerReplicationStopSending(v2);
  }
  return result;
}

unsigned int **RIOPxrSdfLayerReplicationStopSending(unsigned int **result)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;

  if (result)
  {
    v4 = result[2];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v4);
    getOrCreateReplicationLayerStateDelegate((pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase **)&v5, (uint64_t *)&v4);
    v1 = v5;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v5);
    if (!*((_BYTE *)v1 + 48))
    {
LABEL_9:
      pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v5);
      return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v4);
    }
    v2 = (unsigned int *)*((_QWORD *)v1 + 10);
    if (v2 == v1 + 14)
    {
      v3 = 4;
      v2 = v1 + 14;
    }
    else
    {
      if (!v2)
      {
LABEL_8:
        *((_BYTE *)v1 + 48) = 0;
        goto LABEL_9;
      }
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    goto LABEL_8;
  }
  return result;
}

void sub_230059020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned int *a10)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&a10);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a9);
  _Unwind_Resume(a1);
}

unsigned int **RIOPxrSdfLayerReplicationReceive(unsigned int **result, const char *a2, uint64_t a3)
{
  realityio::replication::LayerStateDelegate *v5;
  unsigned int *v6;
  unsigned int *v7;

  if (result)
  {
    if (a2)
    {
      v6 = result[2];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
      getOrCreateReplicationLayerStateDelegate((pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase **)&v7, (uint64_t *)&v6);
      v5 = (realityio::replication::LayerStateDelegate *)pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v7);
      realityio::replication::LayerStateDelegate::Receive(v5, a2, a3);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v7);
      return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v6);
    }
  }
  return result;
}

void sub_2300590B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a9);
  _Unwind_Resume(a1);
}

unsigned int **_RIOPxrSdfLayerCFFinalize(unsigned int **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(a1 + 2);
}

BOOL _RIOPxrSdfLayerCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

uint64_t _RIOPxrSdfLayerCFHash(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = a1[2];
  v1 = a1 + 2;
  if (v2)
    return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v1);
  else
    return 0;
}

CFStringRef _RIOPxrSdfLayerCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfLayer %p>"), a1);
}

CFStringRef _RIOPxrSdfLayerCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfLayer %p>"), a1);
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF02F8;
  return result;
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF02F8;
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::operator()(__CFString **a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  const std::error_category *v4;
  char v5;
  std::string::size_type size;
  std::string v7;
  _BYTE v8[8];
  std::string __p;

  if (*a1 && (realityio::CFStringCopyUTF8String(*a1, (uint64_t)v8), v8[0]))
  {
    v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v7 = __p;
    v5 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    *(_BYTE *)a2 = 1;
    size = v7.__r_.__value_.__l.__size_;
    *(_QWORD *)(a2 + 8) = v7.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = size;
    *(_QWORD *)(a2 + 23) = *(std::string::size_type *)((char *)&v7.__r_.__value_.__r.__words[1] + 7);
    *(_BYTE *)(a2 + 31) = v5;
    if (v3 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = std::system_category();
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v4;
  }
}

void sub_230059280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::target_type()
{
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 20), (_DWORD *)(v4 + v7 - 20));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 16), (_DWORD *)(v4 + v7 - 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 12), (_DWORD *)(v4 + v7 - 12));
      result = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 8), (_DWORD *)(v4 + v7 - 8));
      *(_DWORD *)(v6 + v7 - 4) = *(_DWORD *)(v4 + v7 - 4);
      v7 -= 20;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a1);
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 20;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](i - 20);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;
  _DWORD *result;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  a1[4] = a2[4];
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 20;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef(uint64_t result)
{
  unsigned int *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  char v5;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    v2 = *(_DWORD *)(result + 8);
    if ((v2 & 0x80000000) == 0)
    {
      do
        v3 = __ldxr(v1);
      while (__stxr(v3 + 1, v1));
      return result;
    }
    if (v2 == -1)
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
    v4 = __ldxr(v1);
    if (v4 == v2)
    {
      if (!__stxr(v2 - 1, v1))
      {
        v5 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    v5 = 0;
LABEL_12:
    if ((v5 & 1) != 0)
      return result;
    return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase>::~TfRefPtr(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = v2 + 2;
  v4 = v2[2];
  if ((v4 & 0x80000000) != 0)
  {
    if (v4 == -2)
    {
LABEL_16:
      if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
        return a1;
      goto LABEL_5;
    }
    v8 = __ldxr(v3);
    if (v8 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v9 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_13:
    if (v9)
    {
      if (v4 != -1)
        return a1;
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
LABEL_5:
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(uint64_t result)
{
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(result + 8)))
    {
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = v2 + 2;
  v4 = v2[2];
  if ((v4 & 0x80000000) != 0)
  {
    if (v4 == -2)
    {
LABEL_16:
      if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
        return a1;
      goto LABEL_5;
    }
    v8 = __ldxr(v3);
    if (v8 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v9 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_13:
    if (v9)
    {
      if (v4 != -1)
        return a1;
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
LABEL_5:
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF0388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF0388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::target_type()
{
}

void realityio::MeshAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  const pxrInternal__aapl__pxrReserved__::VtValue *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  _QWORD *v70;
  unsigned int *v71;
  unsigned int v72;
  _QWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  _QWORD *v76;
  unsigned int *v77;
  unsigned int v78;
  char v79;
  void ***v80;
  _OWORD *v81;
  char v82;
  _QWORD *v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t ServiceLocator;
  uint64_t v89;
  uint64_t v90;
  pxrInternal__aapl__pxrReserved__::SdfPath *v91;
  _DWORD *v92;
  _QWORD *v93;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v94;
  int *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  pxrInternal__aapl__pxrReserved__::TfToken *v100;
  _QWORD *v101;
  uint64_t EmptyString;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  realityio::MeshModelDescriptorBuilder *v110;
  std::__shared_weak_count *v111;
  unint64_t *p_shared_owners;
  unint64_t v113;
  _QWORD *v114;
  std::mutex *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int *v119;
  __int128 *v120;
  std::mutex *v121;
  std::__shared_weak_count *v122;
  uint64_t shared_weak_owners;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  realityio::MeshModelDescriptorBuilder *v138;
  unint64_t v139;
  uint64_t v140;
  realityio::MeshModelDescriptorBuilder *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  realityio::Builder *v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  __int128 *v177;
  realityio::SkeletonPoseDefinitionBuilder *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  realityio::SkeletonPoseDefinitionBuilder *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unsigned int *v197;
  unsigned int v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  BOOL v211;
  unint64_t v212;
  _BOOL4 v213;
  _QWORD *v214;
  unsigned int *v215;
  unsigned int v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  _QWORD *v220;
  realityio::MaterialAssetBuilder *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 *v226;
  unint64_t *v227;
  unint64_t v228;
  realityio::MaterialAssetBuilder *v229;
  unint64_t v230;
  uint64_t v231;
  realityio::MaterialAssetBuilder *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  realityio::Inputs *v264;
  _QWORD *v265;
  unint64_t *v266;
  unint64_t v267;
  realityio::MeshAssetBuilder *v268;
  std::__shared_weak_count *v269;
  void **v270;
  unint64_t *v271;
  unint64_t v272;
  const void **v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  __int128 *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  char *v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  __int128 *size;
  uint64_t v297;
  char v298;
  uint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD *v316;
  unint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t **v324;
  uint64_t **v325;
  unint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  unint64_t v329;
  _QWORD *v330;
  _QWORD *i;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  __int128 v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  char *v374;
  _QWORD *v375;
  uint64_t v376;
  __int128 v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v391;
  char *v394;
  char *v395;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v396;
  std::__shared_weak_count *v397;
  char *__s2;
  std::__shared_weak_count *v400;
  _BYTE v401[24];
  int v402;
  _DWORD v403[3];
  _BYTE v404[24];
  uint64_t v405;
  int v406;
  _DWORD v407[3];
  __int128 v408;
  std::__shared_weak_count *v409;
  uint64_t v410;
  int v411;
  int v412;
  uint64_t v413;
  int v414;
  int v415;
  int v416;
  int v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  unint64_t v428;
  char *v429;
  char *v430;
  unint64_t v431;
  __int128 v432;
  unint64_t v433;
  uint64_t v434;
  void **v435;
  _OWORD v436[2];
  int v437;
  _BYTE __p[48];
  __int128 v439;
  __int128 v440;
  _QWORD **v441;
  _QWORD *v442[2];
  _BYTE v443[48];
  __int128 v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  void **v447;
  std::__shared_weak_count *v448;
  __int128 v449;
  _QWORD v450[2];
  __int128 v451;
  std::string v452;
  uint64_t v453;

  v453 = *MEMORY[0x24BDAC8D0];
  std::chrono::steady_clock::now();
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v450, a3);
  v432 = 0uLL;
  v433 = 0;
  v429 = 0;
  v430 = 0;
  v431 = 0;
  v426 = 0;
  v427 = 0;
  v428 = 0;
  v423 = 0;
  v424 = 0;
  v425 = 0;
  v420 = 0;
  v421 = 0;
  v422 = 0;
  v8 = *a4;
  if (a4[1] != *a4)
  {
    v9 = 0;
    v391 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v451, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v9));
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 8 * v9);
      v11 = *((_QWORD *)&v451 + 1);
      if (*((_QWORD *)&v451 + 1))
      {
        if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v451 + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP14REGeomSkeletonEE" & 0x7FFFFFFFFFFFFFFFLL)))goto LABEL_8;
        if ((v11 & 4) != 0
        {
          v11 = *((_QWORD *)&v451 + 1);
LABEL_8:
          if ((v11 & 4) != 0)
            v12 = (uint64_t *)(*(uint64_t (**)(__int128 *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v451);
          else
            v12 = (uint64_t *)v451;
          v13 = *((_QWORD *)&v432 + 1);
          v14 = *v12;
          if (*((_QWORD *)&v432 + 1) >= v433)
          {
            v50 = v432;
            v51 = (uint64_t)(*((_QWORD *)&v432 + 1) - v432) >> 3;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 61)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v53 = v433 - v432;
            if ((uint64_t)(v433 - v432) >> 2 > v52)
              v52 = v53 >> 2;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v54 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            *(_QWORD *)&__p[32] = &v433;
            if (v54)
            {
              if (v54 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v55 = (char *)operator new(8 * v54);
            }
            else
            {
              v55 = 0;
            }
            v60 = &v55[8 * v51];
            *(_QWORD *)__p = v55;
            *(_QWORD *)&__p[8] = v60;
            *(_QWORD *)&__p[16] = v60;
            *(_QWORD *)&__p[24] = &v55[8 * v54];
            *(_QWORD *)v60 = v14;
            if (v14)
            {
              RERetain();
              v13 = *((_QWORD *)&v432 + 1);
              v50 = v432;
              v61 = *(char **)&__p[16];
              v60 = *(char **)&__p[8];
            }
            else
            {
              v61 = v60;
            }
            v15 = v61 + 8;
            *(_QWORD *)&__p[16] = v61 + 8;
            if (v13 == v50)
            {
              v64 = vdupq_n_s64(v50);
            }
            else
            {
              v62 = 0;
              do
              {
                v63 = *(_QWORD *)(v13 + v62 - 8);
                *(_QWORD *)&v60[v62 - 8] = v63;
                if (v63)
                  RERetain();
                v62 -= 8;
              }
              while (v13 + v62 != v50);
              v64 = (int64x2_t)v432;
              v15 = *(_QWORD **)&__p[16];
              v60 += v62;
            }
            *(_QWORD *)&v432 = v60;
            *((_QWORD *)&v432 + 1) = v15;
            *(int64x2_t *)&__p[8] = v64;
            v65 = v433;
            v433 = *(_QWORD *)&__p[24];
            *(_QWORD *)&__p[24] = v65;
            *(_QWORD *)__p = v64.i64[0];
            std::__split_buffer<realityio::WrappedRERef<REGeomSkeleton *>>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            **((_QWORD **)&v432 + 1) = v14;
            if (v14)
              RERetain();
            v15 = (_QWORD *)(v13 + 8);
          }
          *((_QWORD *)&v432 + 1) = v15;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v10);
          v66 = v430;
          if ((unint64_t)v430 >= v431)
          {
            v67 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v429, __p);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v430, __p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v66 + 1, &__p[4]);
            v67 = v66 + 8;
          }
          v430 = v67;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          goto LABEL_160;
        }
      }
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 33) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v451))
      {
        break;
      }
      v21 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](__p, "__materialAssets");
      v22 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      if ((*v21 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8))
      {
        v24 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v451);
        if ((__p[0] & 7) != 0)
        {
          v25 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if (v24)
        {
          if ((BYTE8(v451) & 4) != 0)
            v27 = (*(uint64_t (**)(__int128 *))((*((_QWORD *)&v451 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v451);
          else
            v27 = v451;
          v28 = *(_OWORD *)(v27 + 16);
          *(_OWORD *)v443 = *(_OWORD *)v27;
          *(_OWORD *)&v443[16] = v28;
          v29 = *(_QWORD *)(v27 + 32);
          *(_QWORD *)&v443[32] = v29;
          if (v29)
          {
            v30 = (unint64_t *)(v29 - 16);
            if (*(_QWORD *)&v443[24])
              v30 = *(unint64_t **)&v443[24];
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v443);
          v32 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)&v443[32];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v443);
          v33 = *(_QWORD *)&v443[32] + 16 * *(_QWORD *)v443;
          while (v32 != (const pxrInternal__aapl__pxrReserved__::VtValue *)v33)
          {
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v436, v32);
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>((pxrInternal__aapl__pxrReserved__::VtValue *)v436))
            {
              if ((BYTE8(v436[0]) & 4) != 0)
                v34 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v436[0] + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 168))(v436);
              else
                v34 = *(uint64_t **)&v436[0];
              v35 = v427;
              if ((unint64_t)v427 >= v428)
              {
                v36 = (uint64_t *)std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>(&v426, v34);
              }
              else
              {
                std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)&v428, v427, v34);
                v36 = v35 + 2;
              }
              v427 = v36;
            }
            else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v436))
            {
              if ((BYTE8(v436[0]) & 4) != 0)
                v37 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v436[0] + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 168))(v436);
              else
                v37 = *(uint64_t **)&v436[0];
              v419 = *v37;
              if (v419)
                RERetain();
              v418 = 0;
              realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&v449, &v419, &v418);
              v38 = v427;
              if ((unint64_t)v427 >= v428)
              {
                v40 = ((uint64_t)v427 - v426) >> 4;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 60)
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                v42 = v428 - v426;
                if ((uint64_t)(v428 - v426) >> 3 > v41)
                  v41 = v42 >> 3;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
                  v43 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                *(_QWORD *)&__p[32] = &v428;
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v428, v43);
                v45 = &v44[16 * v40];
                *(_QWORD *)__p = v44;
                *(_QWORD *)&__p[8] = v45;
                *(_QWORD *)&__p[24] = &v44[16 * v46];
                *(_QWORD *)v45 = v449;
                *(_QWORD *)&v449 = 0;
                *((_QWORD *)v45 + 1) = *((_QWORD *)&v449 + 1);
                *((_QWORD *)&v449 + 1) = 0;
                *(_QWORD *)&__p[16] = v45 + 16;
                std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(&v426, __p);
                v39 = v427;
                std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer((void **)__p);
              }
              else
              {
                *v427 = v449;
                v38[1] = *((_QWORD *)&v449 + 1);
                v449 = 0uLL;
                v39 = v38 + 2;
              }
              v427 = v39;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)&v449 + 1);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v449);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v418);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v419);
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v436);
            v32 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v32 + 16);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(v443);
          goto LABEL_160;
        }
      }
      else if ((__p[0] & 7) != 0)
      {
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      v47 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      MEMORY[0x2348B274C](__p, "__materialAssetPaths");
      v48 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      if ((*v47 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8))
      {
        v56 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v451);
        if ((__p[0] & 7) != 0)
        {
          v57 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v58 = __ldxr(v57);
          while (__stlxr(v58 - 2, v57));
        }
        if (v56)
        {
          v59 = (BYTE8(v451) & 4) != 0
              ? (uint64_t *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v451 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v451)
              : (uint64_t *)v451;
          if (&v423 != v59)
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v423, (_DWORD *)*v59, (_DWORD *)v59[1], (v59[1] - *v59) >> 3);
        }
      }
      else if ((__p[0] & 7) != 0)
      {
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
LABEL_160:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v451);
      ++v9;
      v8 = *a4;
      if (v9 >= (a4[1] - *a4) >> 3)
        goto LABEL_173;
    }
    if ((BYTE8(v451) & 4) != 0)
      v18 = (*(uint64_t (**)(__int128 *))((*((_QWORD *)&v451 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v451);
    else
      v18 = v451;
    MEMORY[0x2348B274C](__p, "descriptor");
    v19 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v18, (uint64_t *)__p);
    v20 = (_QWORD *)(v18 + 8);
    if ((_QWORD *)(v18 + 8) == v19)
      *((_QWORD *)&v436[0] + 1) = 0;
    else
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v436, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 5));
    if ((__p[0] & 7) != 0)
    {
      v68 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    MEMORY[0x2348B274C](__p, "xform");
    v70 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v18, (uint64_t *)__p);
    if (v20 == v70)
      *((_QWORD *)&v449 + 1) = 0;
    else
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v449, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v70 + 5));
    if ((__p[0] & 7) != 0)
    {
      v71 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v72 = __ldxr(v71);
      while (__stlxr(v72 - 2, v71));
    }
    MEMORY[0x2348B274C](__p, "providingPrim");
    v73 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v18, (uint64_t *)__p);
    if (v20 == v73)
      v448 = 0;
    else
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v447, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v73 + 5));
    if ((__p[0] & 7) != 0)
    {
      v74 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stlxr(v75 - 2, v74));
    }
    MEMORY[0x2348B274C](__p, "blendShapeInfo");
    v76 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v18, (uint64_t *)__p);
    if (v20 == v76)
      v446 = 0;
    else
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v445, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v76 + 5));
    if ((__p[0] & 7) != 0)
    {
      v77 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v78 = __ldxr(v77);
      while (__stlxr(v78 - 2, v77));
    }
    v79 = BYTE8(v436[0]);
    if (*((_QWORD *)&v436[0] + 1))
    {
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v447))
        {
          if ((v448 & 4) != 0)
            v80 = (void ***)(*(uint64_t (**)(void ***))(((unint64_t)v448 & 0xFFFFFFFFFFFFFFF8) + 168))(&v447);
          else
            v80 = &v447;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v435, v80);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v435 + 4, (_DWORD *)v80 + 1);
        }
        if ((BYTE8(v449) & 4) != 0)
          v81 = (_OWORD *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v449 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v449);
        else
          v81 = (_OWORD *)v449;
        *(_OWORD *)v443 = *v81;
        *(_OWORD *)&v443[16] = v81[1];
        *(_OWORD *)&v443[32] = v81[2];
        v444 = v81[3];
        v82 = (char)v446;
        if (v446
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v435);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], (_DWORD *)&v435 + 1);
          if ((BYTE8(v436[0]) & 4) != 0)
            v83 = (_QWORD *)(*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v436[0] + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                + 168))(v436);
          else
            v83 = *(_QWORD **)&v436[0];
          *(_QWORD *)&__p[8] = *v83;
          if (*(_QWORD *)&__p[8])
            RERetain();
          *(_OWORD *)&__p[16] = *(_OWORD *)v443;
          *(_OWORD *)&__p[32] = *(_OWORD *)&v443[16];
          v439 = *(_OWORD *)&v443[32];
          v440 = v444;
          if ((v446 & 4) != 0)
            v84 = (__int128 *)(*(uint64_t (**)(uint64_t *))(((unint64_t)v446 & 0xFFFFFFFFFFFFFFF8)
                                                                   + 168))(&v445);
          else
            v84 = (__int128 *)v445;
          std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)&v441, (uint64_t)v84);
          std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100]((uint64_t *)&v420, (uint64_t)__p);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v441, v442[0]);
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&__p[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v435);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], (_DWORD *)&v435 + 1);
          if ((BYTE8(v436[0]) & 4) != 0)
            v87 = (_QWORD *)(*(uint64_t (**)(_OWORD *))((*((_QWORD *)&v436[0] + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                + 168))(v436);
          else
            v87 = *(_QWORD **)&v436[0];
          *(_QWORD *)&__p[8] = *v87;
          if (*(_QWORD *)&__p[8])
            RERetain();
          *(_OWORD *)&__p[16] = *(_OWORD *)v443;
          *(_OWORD *)&__p[32] = *(_OWORD *)&v443[16];
          v439 = *(_OWORD *)&v443[32];
          v440 = v444;
          v442[0] = 0;
          v442[1] = 0;
          v441 = v442;
          std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100]((uint64_t *)&v420, (uint64_t)__p);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v441, v442[0]);
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&__p[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v435);
        goto LABEL_159;
      }
      v85 = *((_QWORD *)&v436[0] + 1);
      if (*((_QWORD *)&v436[0] + 1))
      {
        if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v436[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP17REAssetDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
LABEL_150:
          if ((v85 & 4) != 0)
            v86 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(v436);
          else
            v86 = *(uint64_t **)&v436[0];
          v391 = *v86;
          goto LABEL_159;
        }
        if ((v85 & 4) != 0
        {
          v85 = *((_QWORD *)&v436[0] + 1);
          goto LABEL_150;
        }
      }
    }
LABEL_159:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v445);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v447);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v449);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v436);
    goto LABEL_160;
  }
  v391 = 0;
LABEL_173:
  ServiceLocator = REEngineGetServiceLocator();
  v89 = MEMORY[0x2348B1264](ServiceLocator);
  v90 = *(_QWORD *)(a1 + 16);
  if (!v90 || !*(_QWORD *)(v90 + 200))
  {
LABEL_482:
    if (v391)
    {
      REAssetRegistrationOptionsCreate();
      v447 = 0;
      v447 = (void **)REAssetHandleCreateFromAssetRegistrationOptions();
      RERelease();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
      v312 = *(_QWORD *)(a1 + 16);
      if (v312)
        v313 = *(_QWORD *)(v312 + 192);
      else
        v313 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      v335 = v451;
      realityio::WrappedRERef<REAsset *>::operator=((_QWORD *)(v451 + 8), (uint64_t *)&v447);
      *(_OWORD *)__p = __PAIR128__(*((unint64_t *)&v451 + 1), v335);
      if (*((_QWORD *)&v451 + 1))
      {
        v336 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v337 = __ldxr(v336);
        while (__stxr(v337 + 1, v336));
      }
      v338 = *(_QWORD *)(a1 + 16);
      if (v338)
      {
        v339 = *(_QWORD *)(v338 + 184);
        if (!v339)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v339 + 48))(v339, __p);
      }
      v340 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v341 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v342 = __ldaxr(v341);
        while (__stlxr(v342 - 1, v341));
        if (!v342)
        {
          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
          std::__shared_weak_count::__release_weak(v340);
        }
      }
      *(_QWORD *)v404 = a1;
      *(_OWORD *)&v404[8] = v451;
      if (*((_QWORD *)&v451 + 1))
      {
        v343 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v344 = __ldxr(v343);
        while (__stxr(v344 + 1, v343));
      }
      v405 = v89;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v406, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v407, (_DWORD *)a2 + 1);
      *(_QWORD *)&__p[24] = 0;
      v345 = (char *)operator new(0x30uLL);
      *(_QWORD *)v345 = &off_24FDF08E0;
      *(_OWORD *)(v345 + 8) = *(_OWORD *)v404;
      v346 = *(_QWORD *)&v404[16];
      v347 = v405;
      *(_QWORD *)&v404[8] = 0;
      *(_QWORD *)&v404[16] = 0;
      *((_QWORD *)v345 + 3) = v346;
      *((_QWORD *)v345 + 4) = v347;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v345 + 10, &v406);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v345 + 11, v407);
      *(_QWORD *)&__p[24] = v345;
      realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)__p);
      v348 = *(_QWORD **)&__p[24];
      if (*(_BYTE **)&__p[24] == __p)
      {
        v349 = 4;
        v348 = __p;
      }
      else
      {
        if (!*(_QWORD *)&__p[24])
          goto LABEL_538;
        v349 = 5;
      }
      (*(void (**)(void))(*v348 + 8 * v349))();
LABEL_538:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v406);
      if (*(_QWORD *)&v404[16])
      {
        v350 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
        do
          v351 = __ldaxr(v350);
        while (__stlxr(v351 - 1, v350));
        if (!v351)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v404[16] + 16))(*(_QWORD *)&v404[16]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v404[16]);
        }
      }
      RERelease();
      v352 = v451;
      v436[0] = v451;
      if (*((_QWORD *)&v451 + 1))
      {
        v353 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v354 = __ldxr(v353);
        while (__stxr(v354 + 1, v353));
      }
      memset(v443, 0, 24);
      realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(__p, v352, *((uint64_t *)&v352 + 1), (uint64_t *)v443);
      *(_QWORD *)&v449 = v443;
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v449);
      a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy(a6, __p);
      *(_QWORD *)v443 = &__p[16];
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v443);
      v355 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v356 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v357 = __ldaxr(v356);
        while (__stlxr(v357 - 1, v356));
        if (!v357)
        {
          ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
          std::__shared_weak_count::__release_weak(v355);
        }
      }
      v358 = (std::__shared_weak_count *)*((_QWORD *)&v436[0] + 1);
      if (*((_QWORD *)&v436[0] + 1))
      {
        v359 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v361 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
      if (*((_QWORD *)&v451 + 1))
      {
        v362 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v363 = __ldaxr(v362);
        while (__stlxr(v363 - 1, v362));
        if (!v363)
        {
          ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
          std::__shared_weak_count::__release_weak(v361);
        }
      }
      goto LABEL_601;
    }
    REMeshAssetDescriptorCreate();
    v314 = v89;
    *(_QWORD *)&v443[16] = 0;
    *(_QWORD *)&v443[8] = 0;
    *(_QWORD *)v443 = &v443[8];
    v315 = v420;
    v316 = v421;
    while (v315 != v316)
    {
      v317 = v315[1];
      v318 = *(_QWORD **)&v443[8];
      if (*(_QWORD *)&v443[8])
      {
        v319 = *(_QWORD **)&v443[8];
        do
        {
          v320 = v319[4];
          if (v317 >= v320)
          {
            if (v320 >= v317)
            {
              do
              {
                v328 = v318;
                v329 = v318[4];
                v330 = v318 + 1;
                if (v329 >= v317)
                  v330 = v328;
                v318 = (_QWORD *)*v330;
              }
              while (v318);
              goto LABEL_508;
            }
            ++v319;
          }
          v319 = (_QWORD *)*v319;
        }
        while (v319);
      }
      if (v317)
      {
        v321 = REMeshAssetDescriptorAddModel();
        v322 = v315[1];
        v323 = *(uint64_t **)&v443[8];
        v324 = (uint64_t **)&v443[8];
        v325 = (uint64_t **)&v443[8];
        if (*(_QWORD *)&v443[8])
        {
          while (1)
          {
            while (1)
            {
              v325 = (uint64_t **)v323;
              v326 = v323[4];
              if (v326 <= v322)
                break;
              v323 = *v325;
              v324 = v325;
              if (!*v325)
                goto LABEL_501;
            }
            if (v326 >= v322)
              break;
            v323 = v325[1];
            if (!v323)
            {
              v324 = v325 + 1;
              goto LABEL_501;
            }
          }
        }
        else
        {
LABEL_501:
          v327 = (uint64_t *)operator new(0x30uLL);
          v327[4] = v322;
          v327[5] = v321;
          *v327 = 0;
          v327[1] = 0;
          v327[2] = (uint64_t)v325;
          *v324 = v327;
          if (**(_QWORD **)v443)
          {
            *(_QWORD *)v443 = **(_QWORD **)v443;
            v327 = *v324;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v443[8], v327);
          ++*(_QWORD *)&v443[16];
        }
      }
LABEL_508:
      REGeomInstanceCreate();
      REMeshAssetDescriptorAddInstance();
      RERelease();
      v315 += 13;
    }
    v332 = (_QWORD *)*((_QWORD *)&v432 + 1);
    for (i = (_QWORD *)v432; i != v332; ++i)
    {
      *(_QWORD *)__p = *i;
      if (*(_QWORD *)__p)
      {
        RERetain();
        if (*(_QWORD *)__p)
          REMeshAssetDescriptorAddSkeleton();
      }
      realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(__p);
    }
    v445 = 0;
    v445 = REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration();
    if (!v445)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v450);
LABEL_600:
      std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)&v443[8]);
      goto LABEL_601;
    }
    RERelease();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    v333 = *(_QWORD *)(a1 + 16);
    if (v333)
      v334 = *(_QWORD *)(v333 + 192);
    else
      v334 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    v364 = *(_QWORD *)&v436[0];
    realityio::WrappedRERef<REAsset *>::operator=((_QWORD *)(*(_QWORD *)&v436[0] + 8), &v445);
    *(_OWORD *)__p = __PAIR128__(*((unint64_t *)&v436[0] + 1), v364);
    if (*((_QWORD *)&v436[0] + 1))
    {
      v365 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
      do
        v366 = __ldxr(v365);
      while (__stxr(v366 + 1, v365));
    }
    v367 = *(_QWORD *)(a1 + 16);
    if (v367)
    {
      v368 = *(_QWORD *)(v367 + 184);
      if (!v368)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v368 + 48))(v368, __p);
    }
    v369 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v370 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v371 = __ldaxr(v370);
      while (__stlxr(v371 - 1, v370));
      if (!v371)
      {
        ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
        std::__shared_weak_count::__release_weak(v369);
      }
    }
    *(_QWORD *)v401 = a1;
    *(_OWORD *)&v401[8] = v436[0];
    if (*((_QWORD *)&v436[0] + 1))
    {
      v372 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
      do
        v373 = __ldxr(v372);
      while (__stxr(v373 + 1, v372));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v402, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v403, (_DWORD *)a2 + 1);
    *(_QWORD *)&__p[24] = 0;
    v374 = (char *)operator new(0x30uLL);
    *(_QWORD *)v374 = &off_24FDF0960;
    *(_OWORD *)(v374 + 8) = *(_OWORD *)v401;
    *((_QWORD *)v374 + 3) = *(_QWORD *)&v401[16];
    *((_QWORD *)v374 + 4) = v314;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v374 + 10, &v402);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v374 + 11, v403);
    *(_QWORD *)&__p[24] = v374;
    realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)__p);
    v375 = *(_QWORD **)&__p[24];
    if (*(_BYTE **)&__p[24] == __p)
    {
      v376 = 4;
      v375 = __p;
    }
    else
    {
      if (!*(_QWORD *)&__p[24])
      {
LABEL_582:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v402);
        v377 = v436[0];
        v449 = v436[0];
        if (*((_QWORD *)&v436[0] + 1))
        {
          v378 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
          do
            v379 = __ldxr(v378);
          while (__stxr(v379 + 1, v378));
        }
        v451 = 0uLL;
        v452.__r_.__value_.__r.__words[0] = 0;
        realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(__p, v377, *((uint64_t *)&v377 + 1), (uint64_t *)&v451);
        v447 = (void **)&v451;
        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v447);
        RERelease();
        a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy(a6, __p);
        *(_QWORD *)&v451 = &__p[16];
        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v451);
        v380 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v381 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v382 = __ldaxr(v381);
          while (__stlxr(v382 - 1, v381));
          if (!v382)
          {
            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
            std::__shared_weak_count::__release_weak(v380);
          }
        }
        v383 = (std::__shared_weak_count *)*((_QWORD *)&v449 + 1);
        if (*((_QWORD *)&v449 + 1))
        {
          v384 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
          do
            v385 = __ldaxr(v384);
          while (__stlxr(v385 - 1, v384));
          if (!v385)
          {
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
          }
        }
        v386 = (std::__shared_weak_count *)*((_QWORD *)&v436[0] + 1);
        if (*((_QWORD *)&v436[0] + 1))
        {
          v387 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        goto LABEL_600;
      }
      v376 = 5;
    }
    (*(void (**)(void))(*v375 + 8 * v376))();
    goto LABEL_582;
  }
  v395 = *(char **)(v90 + 192);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
  v91 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2348B26F8](&v451, __p);
  if (*(_QWORD *)v443 == (_QWORD)v451)
  {
    v92 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v91);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v416, v92);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v417, v92 + 1);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v451);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v389 = v89;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v443);
  memset(v436, 0, sizeof(v436));
  v437 = 1065353216;
  v93 = operator new(0x130uLL);
  v93[1] = 0;
  v93[2] = 0;
  *v93 = &off_24FDEC278;
  *(_QWORD *)&v449 = realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)(v93 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v416);
  *((_QWORD *)&v449 + 1) = v93;
  v94 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v420;
  v394 = (char *)v421;
  if (v420 != v421)
  {
    v95 = &v415;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v96 = v429;
      if (v430 != v429)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v414, v429);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v95, (_DWORD *)v96 + 1);
      }
      v413 = 0;
      v97 = REMeshCompileOptionsCreate();
      if (v413)
        RERelease();
      v413 = v97;
      REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
      v98 = operator new(0xE0uLL);
      v98[1] = 0;
      v99 = v98 + 1;
      v98[2] = 0;
      *v98 = &off_24FDF04A8;
      __s2 = (char *)(v98 + 3);
      v400 = (std::__shared_weak_count *)v98;
      realityio::Builder::Builder((realityio::Builder *)(v98 + 3), v94);
      v98[26] = 0;
      v98[3] = &off_24FDF04F8;
      v98[27] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      v100 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      memset(v443, 0, 24);
      v451 = 0uLL;
      v452.__r_.__value_.__r.__words[0] = 0;
      v101 = (_QWORD *)*((_QWORD *)v94 + 10);
      if (v101 != (_QWORD *)((char *)v94 + 88))
      {
        do
        {
          if ((v101[5] & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (v101[5] & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v100);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, (_DWORD *)v101 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], (_DWORD *)v101 + 9);
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
          }
          else
          {
            v103 = *(_OWORD *)EmptyString;
            *(_QWORD *)&__p[24] = *(_QWORD *)(EmptyString + 16);
            *(_OWORD *)&__p[8] = v103;
          }
          v104 = *((_QWORD *)&v451 + 1);
          if (*((_QWORD *)&v451 + 1) >= v452.__r_.__value_.__r.__words[0])
          {
            *((_QWORD *)&v451 + 1) = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>((uint64_t *)&v451, (uint64_t)__p);
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v451 + 1), __p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v104 + 4), &__p[4]);
            v105 = *(_OWORD *)&__p[8];
            *(_QWORD *)(v104 + 24) = *(_QWORD *)&__p[24];
            *(_OWORD *)(v104 + 8) = v105;
            memset(&__p[8], 0, 24);
            *((_QWORD *)&v451 + 1) = v104 + 32;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v100 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          v106 = (_QWORD *)v101[1];
          if (v106)
          {
            do
            {
              v107 = v106;
              v106 = (_QWORD *)*v106;
            }
            while (v106);
          }
          else
          {
            do
            {
              v107 = (_QWORD *)v101[2];
              v211 = *v107 == (_QWORD)v101;
              v101 = v107;
            }
            while (!v211);
          }
          v101 = v107;
        }
        while (v107 != (_QWORD *)((char *)v94 + 88));
      }
      v108 = v413;
      v109 = operator new(0x68uLL);
      v109[1] = 0;
      v109[2] = 0;
      *v109 = &off_24FDF0A08;
      *(_QWORD *)__p = v108;
      if (v108)
        RERetain();
      realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT((uint64_t)(v109 + 3), (uint64_t *)__p, v94, &v414, &v434, (_DWORD **)v443, (uint64_t *)&v451);
      v110 = (realityio::MeshModelDescriptorBuilder *)realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(__p);
      v111 = (std::__shared_weak_count *)v98[27];
      v98[26] = v109 + 3;
      v98[27] = v109;
      if (v111)
      {
        p_shared_owners = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldaxr(p_shared_owners);
        while (__stlxr(v113 - 1, p_shared_owners));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v396 = v94;
      v114 = v98;
      v115 = (std::mutex *)v98[5];
      v116 = (std::__shared_weak_count *)v114[6];
      if (v116)
      {
        v117 = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      v397 = v116;
      v119 = v95;
      v120 = (__int128 *)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v110);
      v121 = v115 + 1;
      std::mutex::lock(v115 + 1);
      shared_weak_owners = v400[8].__shared_weak_owners_;
      v122 = (std::__shared_weak_count *)v400[9].__vftable;
      v124 = operator new(0x30uLL);
      v125 = v124;
      v124[1] = 0;
      v124[2] = 0;
      *v124 = &off_24FDF0A58;
      if (v122)
      {
        v126 = (unint64_t *)&v122->__shared_owners_;
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
        v124[3] = &off_24FDF0AA8;
        v124[4] = shared_weak_owners;
        v124[5] = v122;
        do
          v128 = __ldxr(v126);
        while (__stxr(v128 + 1, v126));
        v129 = (uint64_t)v115;
        do
          v130 = __ldaxr(v126);
        while (__stlxr(v130 - 1, v126));
        v131 = v400;
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      else
      {
        v124[3] = &off_24FDF0AA8;
        v124[4] = shared_weak_owners;
        v124[5] = 0;
        v129 = (uint64_t)v115;
        v131 = v400;
      }
      *(_QWORD *)__p = v125 + 3;
      *(_QWORD *)&__p[8] = v125;
      v445 = (uint64_t)v120;
      v132 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v129 + 40), (const void **)v120, (uint64_t)&std::piecewise_construct, (__int128 **)&v445);
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v132 + 7), (__int128 *)__p);
      v133 = *(std::__shared_weak_count **)&__p[8];
      v95 = v119;
      if (*(_QWORD *)&__p[8])
      {
        v134 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v129, (unsigned __int8 *)v120, (uint64_t)v120);
      std::mutex::unlock(v121);
      if (v397)
      {
        v136 = (unint64_t *)&v397->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
          std::__shared_weak_count::__release_weak(v397);
        }
      }
      *(_QWORD *)__p = &v451;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(_QWORD *)__p = v443;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v138 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v434);
      v447 = (void **)__s2;
      v448 = v131;
      *(_QWORD *)v443 = __s2;
      *(_QWORD *)&v443[8] = v131;
      do
        v139 = __ldxr(v99);
      while (__stxr(v139 + 1, v99));
      v140 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v138);
      v141 = (realityio::MeshModelDescriptorBuilder *)MEMORY[0x2348B2764](&v443[16], v140);
      v451 = v449;
      if (*((_QWORD *)&v449 + 1))
      {
        v142 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      v144 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v141);
      MEMORY[0x2348B2764](&v452, v144);
      std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v451, v443);
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v436, (uint64_t)__p);
      if ((__p[40] & 7) != 0)
      {
        v145 = (unsigned int *)(*(_QWORD *)&__p[40] & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      v147 = *(std::__shared_weak_count **)&__p[32];
      if (*(_QWORD *)&__p[32])
      {
        v148 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
      if ((__p[16] & 7) != 0)
      {
        v150 = (unsigned int *)(*(_QWORD *)&__p[16] & 0xFFFFFFFFFFFFFFF8);
        do
          v151 = __ldxr(v150);
        while (__stlxr(v151 - 2, v150));
      }
      v152 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v153 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v155 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v156 = __ldxr(v155);
        while (__stlxr(v156 - 2, v155));
      }
      v157 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
      if (*((_QWORD *)&v451 + 1))
      {
        v158 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      if ((v443[16] & 7) != 0)
      {
        v160 = (unsigned int *)(*(_QWORD *)&v443[16] & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stlxr(v161 - 2, v160));
      }
      v162 = *(std::__shared_weak_count **)&v443[8];
      if (*(_QWORD *)&v443[8])
      {
        v163 = (unint64_t *)(*(_QWORD *)&v443[8] + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      v165 = v448;
      if (v448)
      {
        v166 = (unint64_t *)&v448->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v413);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v414);
      v94 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v396 + 104);
    }
    while ((char *)v396 + 104 != v394);
  }
  v168 = v429;
  if (v430 != v429)
  {
    v169 = 0;
    do
    {
      v170 = (std::__shared_weak_count *)operator new(0xD8uLL);
      v170->__shared_owners_ = 0;
      v171 = (unint64_t *)&v170->__shared_owners_;
      v170->__shared_weak_owners_ = 0;
      v170->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0588;
      v172 = realityio::Builder::Builder((realityio::Builder *)&v170[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v168[8 * v169]);
      v170[8].__shared_weak_owners_ = 0;
      v170[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF05D8;
      v174 = v170[1].__shared_weak_owners_;
      v173 = (std::__shared_weak_count *)v170[2].__vftable;
      if (v173)
      {
        v175 = (unint64_t *)&v173->__shared_owners_;
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      v177 = (__int128 *)realityio::SkeletonPoseDefinitionBuilder::kOutputName(v172);
      *(_QWORD *)__p = v170[8].__shared_weak_owners_;
      realityio::Outputs::storeValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v174, v177, __p);
      if (v173)
      {
        v179 = (unint64_t *)&v173->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      v447 = (void **)&v170[1].__vftable;
      v448 = v170;
      *(_QWORD *)v443 = v170 + 1;
      *(_QWORD *)&v443[8] = v170;
      do
        v181 = __ldxr(v171);
      while (__stxr(v181 + 1, v171));
      v182 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v178);
      v183 = (realityio::SkeletonPoseDefinitionBuilder *)MEMORY[0x2348B2764](&v443[16], v182);
      v451 = v449;
      if (*((_QWORD *)&v449 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
        do
          v185 = __ldxr(v184);
        while (__stxr(v185 + 1, v184));
      }
      v186 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v183);
      MEMORY[0x2348B2764](&v452, v186);
      std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v451, v443);
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v436, (uint64_t)__p);
      if ((__p[40] & 7) != 0)
      {
        v187 = (unsigned int *)(*(_QWORD *)&__p[40] & 0xFFFFFFFFFFFFFFF8);
        do
          v188 = __ldxr(v187);
        while (__stlxr(v188 - 2, v187));
      }
      v189 = *(std::__shared_weak_count **)&__p[32];
      if (*(_QWORD *)&__p[32])
      {
        v190 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      if ((__p[16] & 7) != 0)
      {
        v192 = (unsigned int *)(*(_QWORD *)&__p[16] & 0xFFFFFFFFFFFFFFF8);
        do
          v193 = __ldxr(v192);
        while (__stlxr(v193 - 2, v192));
      }
      v194 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v195 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v197 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v198 = __ldxr(v197);
        while (__stlxr(v198 - 2, v197));
      }
      v199 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
      if (*((_QWORD *)&v451 + 1))
      {
        v200 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      if ((v443[16] & 7) != 0)
      {
        v202 = (unsigned int *)(*(_QWORD *)&v443[16] & 0xFFFFFFFFFFFFFFF8);
        do
          v203 = __ldxr(v202);
        while (__stlxr(v203 - 2, v202));
      }
      v204 = *(std::__shared_weak_count **)&v443[8];
      if (*(_QWORD *)&v443[8])
      {
        v205 = (unint64_t *)(*(_QWORD *)&v443[8] + 8);
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v207 = v448;
      if (v448)
      {
        v208 = (unint64_t *)&v448->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      ++v169;
      v168 = v429;
    }
    while (v169 < (v430 - v429) >> 3);
  }
  v210 = v423;
  v211 = v424 != v423 && (v424 - v423) >> 3 == ((uint64_t)v427 - v426) >> 4;
  if (v211)
  {
    v212 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v210 + 8 * v212));
      std::string::basic_string[abi:ne180100]<0>(__p, "/__builtin/standardNoMaterial");
      MEMORY[0x2348B26F8](&v451, __p);
      if (*(_QWORD *)v443 == (_QWORD)v451)
      {
        v213 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v423 + 8 * v212));
        v214 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v447);
        MEMORY[0x2348B274C](&v445, "__materialAssetWithMeshVertexColors");
        v215 = (unsigned int *)(v445 & 0xFFFFFFFFFFFFFFF8);
        v213 = (*v214 & 0xFFFFFFFFFFFFFFF8) != (v445 & 0xFFFFFFFFFFFFFFF8);
        if ((v445 & 7) != 0)
        {
          do
            v216 = __ldxr(v215);
          while (__stlxr(v216 - 2, v215));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v447);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v451);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v443);
      if (v213)
      {
        v217 = v426;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v423 + 8 * v212));
        v218 = (std::__shared_weak_count *)operator new(0xE8uLL);
        v218->__shared_owners_ = 0;
        v219 = (unint64_t *)&v218->__shared_owners_;
        v218->__shared_weak_owners_ = 0;
        v218->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0650;
        realityio::Builder::Builder((realityio::Builder *)&v218[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v443);
        v220 = (_QWORD *)(v217 + 16 * v212);
        v218[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF06A0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v218[9].__vftable = 0;
        v218[9].__shared_owners_ = 0;
        *(_QWORD *)&v451 = *v220;
        if ((_QWORD)v451)
          RERetain();
        v445 = v220[1];
        if (v445)
          RERetain();
        realityio::MaterialAssetDataT::MaterialAssetDataT((uint64_t)__p, v443, (uint64_t *)&v451, &v445);
        realityio::MaterialAssetDataT::operator=((uint64_t)&v218[8].__shared_weak_owners_, (uint64_t)__p);
        realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)__p);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v445);
        v221 = (realityio::MaterialAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v451);
        v222 = v218[1].__shared_weak_owners_;
        v223 = (std::__shared_weak_count *)v218[2].__vftable;
        if (v223)
        {
          v224 = (unint64_t *)&v223->__shared_owners_;
          do
            v225 = __ldxr(v224);
          while (__stxr(v225 + 1, v224));
        }
        v226 = (__int128 *)realityio::MaterialAssetBuilder::kMaterialDataName(v221);
        *(_QWORD *)__p = (char *)v218 + 208;
        realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(v222, v226, __p);
        if (v223)
        {
          v227 = (unint64_t *)&v223->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
        }
        v447 = (void **)&v218[1].__vftable;
        v448 = v218;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v229 = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v443);
        *(_QWORD *)v443 = v218 + 1;
        *(_QWORD *)&v443[8] = v218;
        do
          v230 = __ldxr(v219);
        while (__stxr(v230 + 1, v219));
        v231 = realityio::MaterialAssetBuilder::kMaterialDataName(v229);
        v232 = (realityio::MaterialAssetBuilder *)MEMORY[0x2348B2764](&v443[16], v231);
        v451 = v449;
        if (*((_QWORD *)&v449 + 1))
        {
          v233 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
          do
            v234 = __ldxr(v233);
          while (__stxr(v234 + 1, v233));
        }
        v235 = realityio::MaterialAssetBuilder::kMaterialDataName(v232);
        MEMORY[0x2348B2764](&v452, v235);
        std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v451, v443);
        std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v436, (uint64_t)__p);
        if ((__p[40] & 7) != 0)
        {
          v236 = (unsigned int *)(*(_QWORD *)&__p[40] & 0xFFFFFFFFFFFFFFF8);
          do
            v237 = __ldxr(v236);
          while (__stlxr(v237 - 2, v236));
        }
        v238 = *(std::__shared_weak_count **)&__p[32];
        if (*(_QWORD *)&__p[32])
        {
          v239 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        if ((__p[16] & 7) != 0)
        {
          v241 = (unsigned int *)(*(_QWORD *)&__p[16] & 0xFFFFFFFFFFFFFFF8);
          do
            v242 = __ldxr(v241);
          while (__stlxr(v242 - 2, v241));
        }
        v243 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v244 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v246 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v247 = __ldxr(v246);
          while (__stlxr(v247 - 2, v246));
        }
        v248 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
        if (*((_QWORD *)&v451 + 1))
        {
          v249 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        if ((v443[16] & 7) != 0)
        {
          v251 = (unsigned int *)(*(_QWORD *)&v443[16] & 0xFFFFFFFFFFFFFFF8);
          do
            v252 = __ldxr(v251);
          while (__stlxr(v252 - 2, v251));
        }
        v253 = *(std::__shared_weak_count **)&v443[8];
        if (*(_QWORD *)&v443[8])
        {
          v254 = (unint64_t *)(*(_QWORD *)&v443[8] + 8);
          do
            v255 = __ldaxr(v254);
          while (__stlxr(v255 - 1, v254));
          if (!v255)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        v256 = v448;
        if (v448)
        {
          v257 = (unint64_t *)&v448->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
      }
      ++v212;
      v210 = v423;
    }
    while (v212 < (v424 - v423) >> 3);
  }
  v259 = *(_QWORD *)(a1 + 16);
  if (v259)
  {
    v260 = *(_QWORD *)(v259 + 200);
    v261 = *(_QWORD *)(v259 + 208);
  }
  else
  {
    v260 = 0;
    v261 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
  MEMORY[0x2348B26F8](v443, __p);
  if (v434 == *(_QWORD *)v443)
  {
    v262 = *(unsigned __int8 *)(*((_QWORD *)v395 + 2) + 272);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v443);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v262)
        goto LABEL_410;
    }
    else if (!v262)
    {
      goto LABEL_410;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/model");
    MEMORY[0x2348B26F8](v443, __p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v434, (int *)v443);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v434 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v443);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_410:
  v263 = operator new();
  v264 = (realityio::Inputs *)v263;
  v265 = (_QWORD *)v449;
  *(_OWORD *)__p = v449;
  if (*((_QWORD *)&v449 + 1))
  {
    v266 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 16);
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
  }
  realityio::Inputs::Inputs(v263, __p, &v434, (uint64_t)v395, (uint64_t)v436, v260, v261);
  if (*(_QWORD *)&__p[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
  v268 = (realityio::MeshAssetBuilder *)(*(uint64_t (**)(_QWORD *, realityio::Inputs *))(*v265 + 64))(v265, v264);
  v270 = (void **)v265[2];
  v269 = (std::__shared_weak_count *)v265[3];
  v447 = v270;
  v448 = v269;
  if (v269)
  {
    v271 = (unint64_t *)&v269->__shared_owners_;
    do
      v272 = __ldxr(v271);
    while (__stxr(v272 + 1, v271));
  }
  v273 = (const void **)realityio::MeshAssetBuilder::kOutputName(v268);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>((std::mutex *)v270, v273, (uint64_t)__p);
  if (__p[0])
  {
    v274 = *(_QWORD *)&__p[8];
    v275 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v276 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v277 = __ldxr(v276);
      while (__stxr(v277 + 1, v276));
      do
        v278 = __ldxr(v276);
      while (__stxr(v278 + 1, v276));
      v443[0] = 1;
      *(_QWORD *)&v443[8] = v274;
      *(_QWORD *)&v443[16] = v275;
      do
        v279 = __ldaxr(v276);
      while (__stlxr(v279 - 1, v276));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    else
    {
      v443[0] = 1;
      *(_QWORD *)&v443[8] = *(_QWORD *)&__p[8];
      *(_QWORD *)&v443[16] = 0;
    }
  }
  else
  {
    v451 = *(_OWORD *)&__p[8];
    if ((__p[47] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v452, *(const std::string::value_type **)&__p[24], *(std::string::size_type *)&__p[32]);
    else
      v452 = *(std::string *)&__p[24];
    v443[0] = 0;
    *(_OWORD *)&v443[8] = v451;
    *(std::string *)&v443[24] = v452;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
  v280 = v448;
  if (v448)
  {
    v281 = (unint64_t *)&v448->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  if (!v443[0])
  {
    v284 = 0;
    v447 = 0;
    v448 = 0;
    goto LABEL_452;
  }
  v283 = *(_QWORD *)&v443[8];
  v284 = *(std::__shared_weak_count **)&v443[16];
  v447 = *(void ***)&v443[8];
  v448 = *(std::__shared_weak_count **)&v443[16];
  if (*(_QWORD *)&v443[16])
  {
    v285 = (unint64_t *)(*(_QWORD *)&v443[16] + 8);
    do
      v286 = __ldxr(v285);
    while (__stxr(v286 + 1, v285));
  }
  if (!v283)
  {
LABEL_452:
    realityio::Inputs::~Inputs(v264);
    MEMORY[0x2348B4E1C]();
    v298 = 1;
    if (!v284)
      goto LABEL_476;
    goto LABEL_472;
  }
  v288 = *(__int128 **)v283;
  v287 = *(std::__shared_weak_count **)(v283 + 8);
  v445 = *(_QWORD *)v283;
  v446 = v287;
  if (v287)
  {
    v289 = (unint64_t *)&v287->__shared_owners_;
    do
      v290 = __ldxr(v289);
    while (__stxr(v290 + 1, v289));
  }
  v451 = 0uLL;
  v452.__r_.__value_.__r.__words[0] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(&v451, *(_QWORD *)(v283 + 40), *(_QWORD *)(v283 + 48), (uint64_t)(*(_QWORD *)(v283 + 48) - *(_QWORD *)(v283 + 40)) >> 3);
  realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(__p, (uint64_t)v288, (uint64_t)v287, (uint64_t *)&v451);
  v435 = (void **)&v451;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v435);
  *(_QWORD *)&v408 = a1;
  *((_QWORD *)&v408 + 1) = v288;
  v409 = v287;
  if (v287)
  {
    v291 = (unint64_t *)&v287->__shared_owners_;
    do
      v292 = __ldxr(v291);
    while (__stxr(v292 + 1, v291));
  }
  v410 = v389;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v411, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v412, (_DWORD *)a2 + 1);
  v452.__r_.__value_.__l.__size_ = 0;
  v293 = (char *)operator new(0x30uLL);
  *(_QWORD *)v293 = &off_24FDF0718;
  *(_OWORD *)(v293 + 8) = v408;
  v294 = v409;
  v295 = v410;
  *((_QWORD *)&v408 + 1) = 0;
  v409 = 0;
  *((_QWORD *)v293 + 3) = v294;
  *((_QWORD *)v293 + 4) = v295;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v293 + 10, &v411);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v293 + 11, &v412);
  v452.__r_.__value_.__l.__size_ = (std::string::size_type)v293;
  realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)&v451);
  size = (__int128 *)v452.__r_.__value_.__l.__size_;
  if ((__int128 *)v452.__r_.__value_.__l.__size_ == &v451)
  {
    v297 = 4;
    size = &v451;
    goto LABEL_455;
  }
  if (v452.__r_.__value_.__l.__size_)
  {
    v297 = 5;
LABEL_455:
    (*(void (**)(void))(*(_QWORD *)size + 8 * v297))();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v411);
  if (v409)
  {
    v299 = &v409->__shared_owners_;
    do
      v300 = __ldaxr((unint64_t *)v299);
    while (__stlxr(v300 - 1, (unint64_t *)v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  realityio::Inputs::~Inputs(v264);
  MEMORY[0x2348B4E1C]();
  a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy(a6, __p);
  *(_QWORD *)&v451 = &__p[16];
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v451);
  v301 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v302 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = v446;
  if (v446)
  {
    v305 = (unint64_t *)&v446->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  v298 = 0;
  v284 = v448;
  if (v448)
  {
LABEL_472:
    v307 = (unint64_t *)&v284->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
LABEL_476:
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v443);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v434);
  v309 = (std::__shared_weak_count *)*((_QWORD *)&v449 + 1);
  v89 = v389;
  if (*((_QWORD *)&v449 + 1))
  {
    v310 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)v436);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v416);
  if ((v298 & 1) != 0)
    goto LABEL_482;
LABEL_601:
  std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100]((void **)&v420);
  *(_QWORD *)__p = &v423;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = &v426;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = &v429;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)__p = &v432;
  std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v450);
}

void sub_23005C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,realityio::Builder *a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 144));
  std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100](&a49);
  STACK[0x260] = (unint64_t)&a52;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&a55;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&a58;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&a61;
  std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 160));
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 >= v4)
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v8 + 1) > 0x276276276276276)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - *a1) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    v29 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x276276276276276)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(104 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (uint64_t)&v12[104 * v8];
    v26 = v12;
    v27.i64[0] = v13;
    v14 = &v12[104 * v11];
    v28 = v14;
    std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(v13, a2);
    v7 = v13 + 104;
    v27.i64[1] = v13 + 104;
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      v24 = vdupq_n_s64(v15);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = v13 + v17;
        v19 = v15 + v17;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v13 + v17 - 104), (_DWORD *)(v15 + v17 - 104));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v13 + v17 - 100), (_DWORD *)(v15 + v17 - 100));
        v20 = *(_QWORD *)(v15 + v17 - 96);
        *(_QWORD *)(v13 + v17 - 96) = v20;
        if (v20)
          RERetain();
        v21 = *(_OWORD *)(v19 - 88);
        v22 = *(_OWORD *)(v19 - 72);
        v23 = *(_OWORD *)(v19 - 56);
        *(_OWORD *)(v18 - 40) = *(_OWORD *)(v19 - 40);
        *(_OWORD *)(v18 - 56) = v23;
        *(_OWORD *)(v18 - 72) = v22;
        *(_OWORD *)(v18 - 88) = v21;
        std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)(v18 - 24), v19 - 24);
        v17 -= 104;
      }
      while (v15 + v17 != v16);
      v24 = *(int64x2_t *)a1;
      v13 += v17;
      v7 = v27.i64[1];
      v14 = v28;
    }
    *a1 = v13;
    a1[1] = v7;
    v27 = v24;
    v25 = a1[2];
    a1[2] = (uint64_t)v14;
    v28 = (char *)v25;
    v26 = (char *)v24.i64[0];
    result = std::__split_buffer<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo> &>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    result = (uint64_t)std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(a1[1], a2);
    v7 = v5 + 104;
    a1[1] = v5 + 104;
  }
  a1[1] = v7;
  return result;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::DescriptorInfo::~DescriptorInfo(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio17MaterialAssetPairE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

_QWORD *realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    v3 = *(_QWORD *)(v2 + 88);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 48))(v3, v7);
    result = v8;
    if (v8 == v7)
    {
      v5 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v5 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  }
}

void sub_23005D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void realityio::MeshAssetWithMaterialArray::~MeshAssetWithMaterialArray(realityio::MeshAssetWithMaterialArray *this)
{
  void **v2;

  v2 = (void **)((char *)this + 16);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_DWORD *std::make_shared[abi:ne180100]<`anonymous namespace'::DeduplicatingMeshActionAsset,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::ImportSession *,void>(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _DWORD *result;

  v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24FDF0860;
  v6[4] = 0;
  *((_BYTE *)v6 + 40) = 0;
  v6[6] = 0;
  v6[7] = 0;
  v6[3] = &off_24FDF08B0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 16, a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 17, a2 + 1);
  v6[9] = a3;
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_1::~$_1(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_2::~$_2(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void **std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 104;
        std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void realityio::BlendShapeWeightsDefinitionAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v10;
  _QWORD *NameToken;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *Copy;
  uint64_t *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t ServiceLocator;
  char *EmptyString;
  char **v46;
  uint64_t *v47;
  uint64_t v48;
  const char *v49;
  _QWORD *v50;
  uint64_t Name;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t AssetWithDefinitions;
  uint64_t v68;
  void *__p;
  _BYTE *v70;
  unint64_t v71;
  _QWORD v72[3];
  __int128 v73;
  __int128 v74;
  uint64_t *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  char v80;
  _BYTE v81[16];
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v81, a1);
  v75 = 0;
  v73 = 0u;
  v74 = 0u;
  memset(v72, 0, sizeof(v72));
  v7 = *a3;
  if (a3[1] != *a3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 8 * v8);
      v10 = *a4;
      NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      MEMORY[0x2348B274C](&v76, "skel:blendShapes");
      v12 = (_QWORD *)(v10 + 16 * v8);
      v13 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((v76 & 7) != 0)
        {
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
LABEL_39:
        v36 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
        MEMORY[0x2348B274C](&v76, "skel:blendShapeTargets");
        v37 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
        if ((*v36 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8))
        {
          v39 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 16 * v8));
          if ((v76 & 7) != 0)
          {
            v40 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
            do
              v41 = __ldxr(v40);
            while (__stlxr(v41 - 2, v40));
          }
          if (v39)
          {
            v42 = *(_QWORD *)(v10 + 16 * v8 + 8);
            v43 = (_QWORD *)((v42 & 4) != 0
                           ? (*(uint64_t (**)(unint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 16 * v8)
                           : *v12);
            if (v72 != v43)
              std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)v72, (_DWORD *)*v43, (_DWORD *)v43[1], (uint64_t)(v43[1] - *v43) >> 3);
          }
        }
        else if ((v76 & 7) != 0)
        {
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        goto LABEL_51;
      }
      v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 16 * v8));
      if ((v76 & 7) != 0)
      {
        v16 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      if (!v15)
        goto LABEL_39;
      v18 = *(_QWORD *)(v10 + 16 * v8 + 8);
      v19 = (_QWORD *)((v18 & 4) != 0
                     ? (*(uint64_t (**)(unint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 16 * v8)
                     : *v12);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve((uint64_t *)&v73, *v19 + v73);
      if (*v19)
        break;
LABEL_51:
      ++v8;
      v7 = *a3;
      if (v8 >= (a3[1] - *a3) >> 3)
        goto LABEL_55;
    }
    v20 = (uint64_t *)v19[4];
    v21 = &v20[*v19];
    while (1)
    {
      if (DWORD2(v73))
      {
        v76 = "vt/array.h";
        v77 = "emplace_back";
        v78 = 433;
        v79 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Ar"
              "gs &&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <const pxrInternal__aapl__pxrReserved__::TfToken &>]";
        v80 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
        goto LABEL_28;
      }
      v22 = v73;
      v23 = v75;
      if (*((_QWORD *)&v74 + 1))
        break;
      if (v75)
      {
        v24 = atomic_load((unint64_t *)v75 - 2);
        v23 = v75;
        if (v24 != 1)
          break;
        v25 = *(v75 - 1);
      }
      else
      {
        v25 = 0;
      }
      if ((_QWORD)v73 == v25)
        break;
      v26 = *v20;
      v23[(_QWORD)v73] = *v20;
      if ((v26 & 7) != 0)
      {
        v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 2, v27));
        if ((v28 & 1) == 0)
          v23[v22] &= 0xFFFFFFFFFFFFFFF8;
      }
LABEL_27:
      *(_QWORD *)&v73 = v73 + 1;
LABEL_28:
      if (++v20 == v21)
        goto LABEL_51;
    }
    v29 = 1;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < (uint64_t)v73 + 1);
    Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v73, v23, v30, v73);
    v32 = Copy;
    v33 = *v20;
    Copy[v22] = *v20;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        Copy[v22] &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v73);
    v75 = v32;
    goto LABEL_27;
  }
LABEL_55:
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<char const*>::resize((uint64_t)&v76, v73);
  v46 = (char **)v76;
  if ((_QWORD)v73)
  {
    v47 = v75;
    v48 = 8 * v73;
    do
    {
      if ((*v47 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (char *)((*v47 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      if (EmptyString[23] < 0)
        EmptyString = *(char **)EmptyString;
      *v46++ = EmptyString;
      ++v47;
      v48 -= 8;
    }
    while (v48);
    v46 = (char **)v76;
  }
  v49 = v77;
  v50 = operator new(0x10uLL);
  *v50 = (v49 - (const char *)v46) >> 3;
  v50[1] = v46;
  __p = 0;
  v70 = 0;
  v71 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v68);
  if (*(char *)(Name + 23) >= 0)
    v52 = Name;
  else
    v52 = *(_QWORD *)Name;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
  v53 = v70;
  if ((unint64_t)v70 >= v71)
  {
    v55 = (v70 - (_BYTE *)__p) >> 5;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 59)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v57 = v71 - (_QWORD)__p;
    if ((uint64_t)(v71 - (_QWORD)__p) >> 4 > v56)
      v56 = v57 >> 4;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
      v58 = 0x7FFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v71, v58);
    else
      v59 = 0;
    v60 = &v59[32 * v55];
    v61 = &v59[32 * v58];
    *v60 = 2;
    *(_DWORD *)(v60 + 1) = 0;
    *((_DWORD *)v60 + 1) = 0;
    v54 = v60 + 32;
    *((_QWORD *)v60 + 2) = 0;
    *((_QWORD *)v60 + 3) = 0;
    *((_QWORD *)v60 + 1) = v52;
    v63 = (char *)__p;
    v62 = v70;
    if (v70 != __p)
    {
      do
      {
        v64 = *((_OWORD *)v62 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v60 - 1) = v64;
        v60 -= 32;
        v62 -= 32;
      }
      while (v62 != v63);
      v62 = v63;
    }
    __p = v60;
    v70 = v54;
    v71 = (unint64_t)v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *v70 = 2;
    *(_DWORD *)(v53 + 1) = 0;
    *((_DWORD *)v53 + 1) = 0;
    v54 = v53 + 32;
    *((_QWORD *)v53 + 2) = 0;
    *((_QWORD *)v53 + 3) = 0;
    *((_QWORD *)v53 + 1) = v52;
  }
  v70 = v54;
  v68 = 0;
  AssetWithDefinitions = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions();
  if (v68)
    RERelease();
  v68 = AssetWithDefinitions;
  a5[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy(a5, &v68);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v68);
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  operator delete(v50);
  if (v76)
  {
    v77 = (const char *)v76;
    operator delete(v76);
  }
  v76 = v72;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v73);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v81);
}

void sub_23005D994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;

  __p = &a18;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a21);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 112));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *New;
  _QWORD *v7;

  v4 = (uint64_t *)a1[4];
  if (!v4)
  {
    if (!a2)
      return;
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3])
    v5 = a1;
  else
    v5 = v4 - 1;
  if (*v5 < a2)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, v4, a2, *a1);
LABEL_9:
    v7 = New;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
    a1[4] = (uint64_t)v7;
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *realityio::MaterialAssetPair::MaterialAssetPair(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  *a1 = *a2;
  if (v5)
    RERetain();
  v6 = *a3;
  a1[1] = *a3;
  if (v6)
    RERetain();
  return a1;
}

void sub_23005DBB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v3 = a2[1];
  *result = *a2;
  result[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[2];
  result[2] = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = a3[1];
  result[3] = *a3;
  result[4] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a3[2];
  result[5] = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      result[5] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *v5;
  unint64_t v6;

  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    v5 = (unint64_t *)(a3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(a1 + 2, *a4, a4[1], (a4[1] - *a4) >> 3);
  return a1;
}

void sub_23005DCCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<realityio::MaterialAssetPair>::__base_destruct_at_end[abi:ne180100](v2, *v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<realityio::MaterialAssetPair>::__base_destruct_at_end[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 2;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4 - 1);
      result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 80, *(_QWORD **)(a1 + 88));
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REGeomSkeleton *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef((_QWORD *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = (_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a1 + 88;
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a2 + 80) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v11;
  }
  return result;
}

uint64_t std::__split_buffer<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_23005DFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken> const&>(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken> const&>(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]((uint64_t)(v7 + 4), a4);
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *New;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtValue]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(v4, v4 + 16 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(this);
      *((_QWORD *)this + 4) = New;
    }
  }
}

uint64_t std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (uint64_t *)&v8[16 * v3];
  v14 = &v8[16 * v7];
  std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)(a1 + 2), v12, a2);
  v13 = v12 + 2;
  std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer(&v11);
  return v9;
}

void sub_23005E30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *a3;
  *a2 = *a3;
  if (v5)
    RERetain();
  result = a3[1];
  a2[1] = result;
  if (result)
    return RERetain();
  return result;
}

void sub_23005E360(_Unwind_Exception *a1)
{
  _QWORD *v1;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 2;
      std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>(a1, (uint64_t *)(v7 - 16), v9);
      v7 = *((_QWORD *)&v16 + 1) - 16;
      *((_QWORD *)&v16 + 1) -= 16;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_23005E49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 1);
    result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
    v1 += 2;
  }
  return result;
}

void **std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer(void **a1)
{
  std::__split_buffer<realityio::MaterialAssetPair>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<realityio::MaterialAssetPair>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = (_QWORD *)(v2 - 16);
      v4[2] = v2 - 16;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v2 - 8));
      result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v5);
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinyMeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF04A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinyMeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF04A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::TinyMeshModelDescriptorBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::TinyMeshModelDescriptorBuilder::~TinyMeshModelDescriptorBuilder(_anonymous_namespace_::TinyMeshModelDescriptorBuilder *this)
{
  *(_QWORD *)this = &off_24FDF04F8;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  realityio::Builder::~Builder(this);
}

{
  *(_QWORD *)this = &off_24FDF04F8;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void `anonymous namespace'::TinyBuilder::description(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `anonymous namespace'::TinyMeshModelDescriptorBuilder::identifier(_anonymous_namespace_::TinyMeshModelDescriptorBuilder *this)
{
  JUMPOUT(0x2348B274CLL);
}

void `anonymous namespace'::TinyBuilder::dirtyStageSubscription(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `anonymous namespace'::TinyBuilder::inputsDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `anonymous namespace'::TinyBuilder::outputsDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 1, (_DWORD *)(a2 + 4));
  v12 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v15[2] = v11 + 32;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer(v15);
  return v13;
}

void sub_23005E7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 32;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 32), (_DWORD *)v9);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 28), (_DWORD *)(v9 + 4));
      v10 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v7 - 24) = v10;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 32;
      *((_QWORD *)&v17 + 1) -= 32;
      v11 = v9 == a5;
      v9 -= 32;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

void **std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 32;
      result = std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v4, v1 - 32);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__on_zero_shared(uint64_t a1)
{
  realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT((realityio::MeshModelDescriptorBuilder::MeshModelDataT *)(a1 + 24));
}

uint64_t realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT(uint64_t a1, uint64_t *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v13;

  v13 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v13)
    RERetain();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a4 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), a5 + 1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)(a1 + 32), *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>((_QWORD *)(a1 + 56), *a7, a7[1], (a7[1] - *a7) >> 5);
  return a1;
}

void sub_23005EB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v3);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23005EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23005ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  std::string *v5;
  __int128 v6;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_23005ED2C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 32;
      result = (uint64_t *)std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(realityio::MeshModelDescriptorBuilder::MeshModelDataT *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF0AA8;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__construct_node<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_23005EFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__construct_node<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_OWORD *)v7 + 1) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v7 + 7) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  result = realityio::BuilderAndIOName::Hash::operator()(a1 + 24, (_QWORD *)v7 + 2);
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_23005F084(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = realityio::BuilderAndIOName::Hash::operator()((uint64_t)(a1 + 3), a2 + 2);
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3 && (v16[4] & 0xFFFFFFFFFFFFFFF8) == (a3[2] & 0xFFFFFFFFFFFFFFF8);
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2] && (i[4] & 0xFFFFFFFFFFFFFFF8) == (v13[4] & 0xFFFFFFFFFFFFFFF8));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::TinySkeletonPoseDefinitionBuilder::~TinySkeletonPoseDefinitionBuilder(_anonymous_namespace_::TinySkeletonPoseDefinitionBuilder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24FDF05D8;
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  v2 = (_QWORD *)((char *)this + 184);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  realityio::Builder::~Builder(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24FDF05D8;
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  v2 = (_QWORD *)((char *)this + 184);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void `anonymous namespace'::TinySkeletonPoseDefinitionBuilder::identifier(_anonymous_namespace_::TinySkeletonPoseDefinitionBuilder *this)
{
  JUMPOUT(0x2348B274CLL);
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinyMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::TinyMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::TinyMaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::TinyMaterialAssetBuilder::~TinyMaterialAssetBuilder(_anonymous_namespace_::TinyMaterialAssetBuilder *this)
{
  *(_QWORD *)this = &off_24FDF06A0;
  realityio::MaterialAssetDataT::~MaterialAssetDataT((_anonymous_namespace_::TinyMaterialAssetBuilder *)((char *)this + 184));
  realityio::Builder::~Builder(this);
}

{
  *(_QWORD *)this = &off_24FDF06A0;
  realityio::MaterialAssetDataT::~MaterialAssetDataT((_anonymous_namespace_::TinyMaterialAssetBuilder *)((char *)this + 184));
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void `anonymous namespace'::TinyMaterialAssetBuilder::identifier(_anonymous_namespace_::TinyMaterialAssetBuilder *this)
{
  JUMPOUT(0x2348B274CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF0718;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF0718;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_24FDF0718;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF0718;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *__p[2];
  char v6;

  v2 = a1[1];
  v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_23005F87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
  return a1;
}

uint64_t std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = atomic_load((unsigned int *)(*result + 40));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>::_Counted(v3, (_QWORD *)*v2);
    v4 = (unsigned int *)(v3 + 40);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_23005FA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40ABECFA7DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio26MeshAssetWithMaterialArrayE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedAsVtValue@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void **v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v8 = (void **)(v2 + 16);
      std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v8);
      v6 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C40ABECFA7DLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  if (*a1 != *a2)
    return 0;
  v3 = a1[2];
  v2 = a1[3];
  v4 = (uint64_t *)a2[2];
  if (v2 - v3 != a2[3] - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(_QWORD *)(v5 - 8) == v6;
    v8 = *(_QWORD *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>::_Counted(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((_QWORD *)(a1 + 16), a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 3);
  atomic_store(0, (unsigned int *)(a1 + 40));
  return a1;
}

void sub_23005FCC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 40);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23005FD40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40ABECFA7DLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshActionAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshActionAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshActionAsset>::__on_zero_shared(_QWORD *a1)
{
  a1[3] = &off_24FDF08B0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
  a1[3] = &off_24FDF09F0;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

_QWORD *`anonymous namespace'::DeduplicatingMeshActionAsset::onComplete(_anonymous_namespace_::DeduplicatingMeshActionAsset *this)
{
  _QWORD *v1;
  uint64_t *v3;

  v1 = (_QWORD *)((char *)this + 8);
  v3 = realityio::ImportSession::deduplicateMeshAsset(*((_QWORD *)this + 6), (_anonymous_namespace_::DeduplicatingMeshActionAsset *)((char *)this + 40), *((uint64_t **)this + 1), 0);
  return realityio::WrappedRERef<REAsset *>::operator=(v1, (uint64_t *)&v3);
}

_QWORD *realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF08E0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF08E0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_24FDF08E0;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF08E0;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *__p[2];
  char v6;

  v2 = a1[1];
  v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_230060028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF0960;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF0960;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_24FDF0960;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF0960;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Size;
  uint64_t v5;
  uint64_t i;
  uint64_t Asset;
  const __CFString *Type;
  int v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v2 = a1[1];
  v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v13 < 0)
    operator delete(__p[0]);
  REAssetCopyDependencyArray();
  Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    v5 = Size;
    for (i = 0; i != v5; ++i)
    {
      Asset = REAssetDynamicArrayGetAsset();
      Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, CFSTR("Skeleton"), 0) == kCFCompareEqualTo)
      {
        v11 = Asset;
        if (Asset)
          RERetain();
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
        realityio::ECSAction::addAsset(v2, &v11, (uint64_t)__p, &v10);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
        if (v13 < 0)
          operator delete(__p[0]);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
      }
    }
  }
  return RERelease();
}

void sub_23006037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a12);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
}

void Exec::setPropertiesDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  unint64_t NextSubtree;
  std::mutex *v6;
  char *opaque;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  _DWORD *v14;
  int *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  std::mutex *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  _QWORD v25[2];

  std::mutex::lock(this);
  v17 = this;
  v25[1] = 0;
  v25[0] = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(this[3].__m_.__opaque, (unsigned int *)a2);
  NextSubtree = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)v25);
  v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v25[0];
  if (NextSubtree != v25[0])
  {
    v6 = this + 1;
    opaque = this[1].__m_.__opaque;
    v8 = &v20;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
      v9 = v8;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v24);
      v10 = v25[0];
      v11 = v23;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      if (v10 != v11)
        break;
      v8 = v9;
      v12 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v6, v24);
      v13 = (uint64_t *)(v12 + 96);
      if (opaque == v12)
        v13 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      if (*v13 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
      {
        v14 = (_DWORD *)((char *)v24 + 4);
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, v24);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, v14);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v15 = &v21;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, v24);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, v14);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v15 = &v19;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
      }
      v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)v24 + 4);
      if (!v16)
        v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)&v24);
      v24 = v16;
    }
    while (v16 != (pxrInternal__aapl__pxrReserved__::SdfPath *)NextSubtree);
  }
  std::mutex::unlock(v17);
}

void sub_23006064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void Exec::setHierarchyDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  unint64_t NextSubtree;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  Exec *v8;
  uint64_t *v9;
  _DWORD *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  _QWORD v17[2];

  std::mutex::lock(this);
  v17[1] = 0;
  v17[0] = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(this[3].__m_.__opaque, (unsigned int *)a2);
  NextSubtree = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)v17);
  v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v17[0];
  v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v17[0];
  if (NextSubtree != v17[0])
  {
    do
    {
      v8 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[1], v7);
      v9 = (uint64_t *)((char *)v8 + 96);
      if (this[1].__m_.__opaque == (char *)v8)
        v9 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      if (*v9 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
      {
        v10 = (_DWORD *)((char *)v16 + 4);
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v16);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v10);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v11 = &v14;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, v16);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, v10);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v11 = &v12;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
      }
      v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)v16 + 4);
      if (!v7)
        v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)&v16);
      v16 = v7;
    }
    while (v7 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)NextSubtree);
  }
  std::mutex::unlock(this);
}

void sub_230060808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

_QWORD *Exec::setValue(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  char *v5;
  char *v6;
  int v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 200;
  if (pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find((_QWORD *)this + 25, (unsigned int *)a2))
  {
    v6 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::operator[]((uint64_t)v5, a2);
    return pxrInternal__aapl__pxrReserved__::VtValue::operator=(v6, a3);
  }
  else
  {
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert((uint64_t)v5, &v8);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
}

void sub_230060928(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::operator[](uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  _QWORD v5[2];
  int v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v5[1] = 0;
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)&v6, a2, v5);
  v3 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(a1, &v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return (char *)v3 + 8;
}

void sub_2300609EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPath *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  _DWORD *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTableImpl<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTable(std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue> const&)::{lambda(pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *)#1}>(a1, a2, &v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_UpdateTreeForNewEntry(a1, v5);
    return v5[0];
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void Exec::setValueAndFault(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  char *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  uint64_t v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  char v58;

  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(a3))
  {
    if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(a3) & 1) != 0)
    {
      v7 = *((_QWORD *)a3 + 1);
      if ((v7 & 4) == 0)
      {
        v8 = *(_QWORD *)a3;
LABEL_5:
        Exec::setValue(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 32));
        v9 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1)));
        v10 = *((_QWORD *)this + 31);
        if (v10)
        {
          v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            v3 = v9;
            if (v9 >= v10)
              v3 = v9 % v10;
          }
          else
          {
            v3 = v9 & (v10 - 1);
          }
          v16 = *(uint64_t ***)(*((_QWORD *)this + 30) + 8 * v3);
          if (v16)
          {
            for (i = *v16; i; i = (uint64_t *)*i)
            {
              v18 = i[1];
              if (v18 == v9)
              {
                if (i[2] == *(_QWORD *)a2)
                {
                  *((_DWORD *)i + 6) = *(_DWORD *)v8;
                  std::string::operator=((std::string *)(i + 4), (const std::string *)(v8 + 8));
                  pxrInternal__aapl__pxrReserved__::VtValue::operator=(i + 7, (_QWORD *)(v8 + 32));
                  return;
                }
              }
              else
              {
                if (v11.u32[0] > 1uLL)
                {
                  if (v18 >= v10)
                    v18 %= v10;
                }
                else
                {
                  v18 &= v10 - 1;
                }
                if (v18 != v3)
                  break;
              }
            }
          }
        }
        v19 = (char *)operator new(0x48uLL);
        v55 = (_QWORD *)((char *)this + 256);
        v56 = v19;
        v57 = (char *)this + 256;
        v58 = 0;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = v9;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 4, a2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 5, (_DWORD *)a2 + 1);
        *((_DWORD *)v19 + 6) = *(_DWORD *)v8;
        if (*(char *)(v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
        }
        else
        {
          v20 = *(_OWORD *)(v8 + 8);
          *((_QWORD *)v19 + 6) = *(_QWORD *)(v8 + 24);
          *((_OWORD *)v19 + 2) = v20;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 32));
        v58 = 1;
        v21 = (float)(unint64_t)(*((_QWORD *)this + 33) + 1);
        v22 = *((float *)this + 68);
        if (v10 && (float)(v22 * (float)v10) >= v21)
        {
LABEL_89:
          v44 = *(_QWORD **)(*((_QWORD *)this + 30) + 8 * v3);
          v45 = v56;
          if (v44)
          {
            *v56 = *v44;
          }
          else
          {
            *v56 = *((_QWORD *)this + 32);
            *((_QWORD *)this + 32) = v45;
            *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v3) = v55;
            if (!*v45)
            {
LABEL_98:
              v56 = 0;
              ++*((_QWORD *)this + 33);
              goto LABEL_99;
            }
            v46 = *(_QWORD *)(*v45 + 8);
            if ((v10 & (v10 - 1)) != 0)
            {
              if (v46 >= v10)
                v46 %= v10;
            }
            else
            {
              v46 &= v10 - 1;
            }
            v44 = (_QWORD *)(*((_QWORD *)this + 30) + 8 * v46);
          }
          *v44 = v45;
          goto LABEL_98;
        }
        v23 = 1;
        if (v10 >= 3)
          v23 = (v10 & (v10 - 1)) != 0;
        v24 = v23 | (2 * v10);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          prime = (int8x8_t)v25;
        else
          prime = (int8x8_t)v24;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v10 = *((_QWORD *)this + 31);
        if (*(_QWORD *)&prime > v10)
          goto LABEL_55;
        if (*(_QWORD *)&prime < v10)
        {
          v38 = vcvtps_u32_f32((float)*((unint64_t *)this + 33) / *((float *)this + 68));
          if (v10 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
          {
            v38 = std::__next_prime(v38);
          }
          else
          {
            v40 = 1 << -(char)__clz(v38 - 1);
            if (v38 >= 2)
              v38 = v40;
          }
          if (*(_QWORD *)&prime <= v38)
            prime = (int8x8_t)v38;
          if (*(_QWORD *)&prime >= v10)
          {
            v10 = *((_QWORD *)this + 31);
          }
          else
          {
            if (prime)
            {
LABEL_55:
              if (*(_QWORD *)&prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v32 = operator new(8 * *(_QWORD *)&prime);
              v33 = (void *)*((_QWORD *)this + 30);
              *((_QWORD *)this + 30) = v32;
              if (v33)
                operator delete(v33);
              v34 = 0;
              *((int8x8_t *)this + 31) = prime;
              do
                *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v34++) = 0;
              while (*(_QWORD *)&prime != v34);
              v35 = (_QWORD *)*v55;
              if (*v55)
              {
                v36 = v35[1];
                v37 = (uint8x8_t)vcnt_s8(prime);
                v37.i16[0] = vaddlv_u8(v37);
                if (v37.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v36) = v55;
                v41 = (_QWORD *)*v35;
                if (*v35)
                {
                  do
                  {
                    v42 = v41[1];
                    if (v37.u32[0] > 1uLL)
                    {
                      if (v42 >= *(_QWORD *)&prime)
                        v42 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v42 &= *(_QWORD *)&prime - 1;
                    }
                    if (v42 != v36)
                    {
                      v43 = *((_QWORD *)this + 30);
                      if (!*(_QWORD *)(v43 + 8 * v42))
                      {
                        *(_QWORD *)(v43 + 8 * v42) = v35;
                        goto LABEL_80;
                      }
                      *v35 = *v41;
                      *v41 = **(_QWORD **)(*((_QWORD *)this + 30) + 8 * v42);
                      **(_QWORD **)(*((_QWORD *)this + 30) + 8 * v42) = v41;
                      v41 = v35;
                    }
                    v42 = v36;
LABEL_80:
                    v35 = v41;
                    v41 = (_QWORD *)*v41;
                    v36 = v42;
                  }
                  while (v41);
                }
              }
              v10 = (unint64_t)prime;
              goto LABEL_84;
            }
            v47 = (void *)*((_QWORD *)this + 30);
            *((_QWORD *)this + 30) = 0;
            if (v47)
              operator delete(v47);
            v10 = 0;
            *((_QWORD *)this + 31) = 0;
          }
        }
LABEL_84:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_89;
      }
      v54 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(a3);
    }
    else
    {
      v54 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    }
    v8 = v54;
    goto LABEL_5;
  }
  Exec::setValue(this, a2, a3);
  v12 = *(int8x8_t *)((char *)this + 248);
  if (!*(_QWORD *)&v12)
    return;
  v13 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1)));
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v13;
    if (v13 >= *(_QWORD *)&v12)
      v15 = v13 % *(_QWORD *)&v12;
  }
  else
  {
    v15 = v13 & (*(_QWORD *)&v12 - 1);
  }
  v27 = *((_QWORD *)this + 30);
  v28 = *(_QWORD ***)(v27 + 8 * v15);
  if (!v28)
    return;
  v29 = *v28;
  if (!v29)
    return;
  v30 = *(_QWORD *)&v12 - 1;
  while (1)
  {
    v31 = v29[1];
    if (v31 == v13)
      break;
    if (v14.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&v12)
        v31 %= *(_QWORD *)&v12;
    }
    else
    {
      v31 &= v30;
    }
    if (v31 != v15)
      return;
LABEL_50:
    v29 = (_QWORD *)*v29;
    if (!v29)
      return;
  }
  if (v29[2] != *(_QWORD *)a2)
    goto LABEL_50;
  if (v14.u32[0] > 1uLL)
  {
    if (v13 >= *(_QWORD *)&v12)
      v13 %= *(_QWORD *)&v12;
  }
  else
  {
    v13 &= v30;
  }
  v48 = *(_QWORD **)(v27 + 8 * v13);
  do
  {
    v49 = v48;
    v48 = (_QWORD *)*v48;
  }
  while (v48 != v29);
  if (v49 == (_QWORD *)((char *)this + 256))
    goto LABEL_127;
  v50 = v49[1];
  if (v14.u32[0] > 1uLL)
  {
    if (v50 >= *(_QWORD *)&v12)
      v50 %= *(_QWORD *)&v12;
  }
  else
  {
    v50 &= v30;
  }
  if (v50 != v13)
  {
LABEL_127:
    if (!*v29)
      goto LABEL_128;
    v51 = *(_QWORD *)(*v29 + 8);
    if (v14.u32[0] > 1uLL)
    {
      if (v51 >= *(_QWORD *)&v12)
        v51 %= *(_QWORD *)&v12;
    }
    else
    {
      v51 &= v30;
    }
    if (v51 != v13)
LABEL_128:
      *(_QWORD *)(v27 + 8 * v13) = 0;
  }
  v52 = *v29;
  if (*v29)
  {
    v53 = *(_QWORD *)(v52 + 8);
    if (v14.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v12)
        v53 %= *(_QWORD *)&v12;
    }
    else
    {
      v53 &= v30;
    }
    if (v53 != v13)
    {
      *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v53) = v49;
      v52 = *v29;
    }
  }
  *v49 = v52;
  *v29 = 0;
  --*((_QWORD *)this + 33);
  v56 = v29;
  v57 = (char *)this + 256;
  v58 = 1;
LABEL_99:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100]((uint64_t)&v56);
}

void sub_2300611D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"9ExecFault" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t Exec::gatherFaultRecords(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  uint64_t Text;
  _QWORD *v5;

  for (i = *(uint64_t **)(result + 256); i; i = (uint64_t *)*i)
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2));
    v5 = i + 4;
    if (*((char *)i + 55) < 0)
      v5 = (_QWORD *)*v5;
    result = std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(a2, Text, *((_DWORD *)i + 6), (uint64_t)v5);
  }
  return result;
}

uint64_t std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = a2;
  v7 = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

unint64_t Exec::_ensureTarget(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD **v4;
  Exec *v5;
  uint64_t **v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  char *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;

  v4 = (_QWORD **)((char *)this + 64);
  v5 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 64, a2);
  v6 = (uint64_t **)((char *)this + 72);
  v7 = (unint64_t *)((char *)v5 + 96);
  if ((Exec *)((char *)this + 72) == v5)
    v7 = (unint64_t *)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  v8 = *v7;
  if (*v7 == realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    v9 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v4, a2);
    if (v6 != v9)
    {
      v8 = (unint64_t)v9[12];
LABEL_64:
      v41 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)v4, v8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v41 + 8, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v41 + 12, (_DWORD *)a2 + 1);
      v42 = (std::__shared_weak_count *)*((_QWORD *)v41 + 4);
      *((_QWORD *)v41 + 3) = 0;
      *((_QWORD *)v41 + 4) = 0;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *((_BYTE *)v41 + 48) = 1;
      return v8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v48 = 0;
    v49 = 0uLL;
    v10 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v4, a2);
    if (v6 != v10)
    {
      v8 = (unint64_t)v10[12];
LABEL_55:
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if ((v48 & 7) != 0)
      {
        v39 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
      goto LABEL_64;
    }
    v8 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v8 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, &v46);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, &v47);
    v65 = v48;
    if ((v48 & 7) != 0)
    {
      v11 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    v66 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v67 = v50;
    LOBYTE(v68) = 0;
    *((_QWORD *)&v68 + 1) = v8;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v51, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v52, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v53, &v61);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, &v62);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, &v63);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56, &v64);
    v57 = v65;
    if ((v65 & 7) != 0)
    {
      v15 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    v58 = v66;
    if (*((_QWORD *)&v66 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v59 = v67;
    v60 = v68;
    v19 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v19;
          v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 4);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 4)))break;
          v19 = *v20;
          v6 = v20;
          if (!*v20)
            goto LABEL_32;
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51))break;
        v6 = v20 + 1;
        v19 = v20[1];
        if (!v19)
          goto LABEL_32;
      }
      v22 = (char *)*v6;
      if (*v6)
        goto LABEL_35;
    }
    else
    {
      v20 = (uint64_t **)((char *)this + 72);
    }
LABEL_32:
    v22 = (char *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 8, &v51);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 9, &v52);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 10, &v53);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 11, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 12, &v55);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v22 + 13, &v56);
    *((_QWORD *)v22 + 7) = v57;
    v57 = 0;
    *((_OWORD *)v22 + 4) = v58;
    v58 = 0uLL;
    *((_QWORD *)v22 + 10) = v59;
    *(_OWORD *)(v22 + 88) = v60;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v20;
    *v6 = (uint64_t *)v22;
    v23 = (_QWORD *)**v4;
    v24 = (uint64_t *)v22;
    if (v23)
    {
      *v4 = v23;
      v24 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 9), v24);
    ++*((_QWORD *)this + 10);
LABEL_35:
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair((uint64_t)&v51);
    v26 = (uint64_t **)((char *)this + 96);
    v25 = (uint64_t *)*((_QWORD *)this + 12);
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          v27 = (uint64_t **)v25;
          v28 = v25[4];
          if (v28 <= v8)
            break;
          v25 = *v27;
          v26 = v27;
          if (!*v27)
            goto LABEL_43;
        }
        if (v28 >= v8)
          break;
        v25 = v27[1];
        if (!v25)
        {
          v26 = v27 + 1;
          goto LABEL_43;
        }
      }
    }
    else
    {
      v27 = (uint64_t **)((char *)this + 96);
LABEL_43:
      v29 = (uint64_t *)operator new(0x30uLL);
      v29[4] = v8;
      v29[5] = (uint64_t)(v22 + 40);
      *v29 = 0;
      v29[1] = 0;
      v29[2] = (uint64_t)v27;
      *v26 = v29;
      v30 = **((_QWORD **)this + 11);
      if (v30)
      {
        *((_QWORD *)this + 11) = v30;
        v29 = *v26;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v29);
      ++*((_QWORD *)this + 13);
    }
    std::vector<std::set<unsigned long>>::resize((uint64_t *)this + 17, *((_QWORD *)this + 20));
    std::vector<std::set<unsigned long>>::resize((uint64_t *)this + 14, *((_QWORD *)this + 20));
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if ((v65 & 7) != 0)
    {
      v34 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
    goto LABEL_55;
  }
  return v8;
}

void sub_2300618AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage(v10 - 152);
  Exec::TargetVertex::~TargetVertex((Exec::TargetVertex *)va);
  _Unwind_Resume(a1);
}

uint64_t *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;

  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_18);
  if ((v2 & 1) == 0)
  {
    v9 = a1;
    v10 = a2;
    v11 = __cxa_guard_acquire(&_MergedGlobals_18);
    a2 = v10;
    v12 = v11;
    a1 = v9;
    if (v12)
    {
      qword_255E548B8 = 0;
      qword_255E548B0 = 0;
      qword_255E548A8 = (uint64_t)&qword_255E548B0;
      __cxa_guard_release(&_MergedGlobals_18);
      a1 = v9;
      a2 = v10;
    }
  }
  v3 = *(_QWORD **)(a1 + 32);
  if (!v3)
    return &qword_255E548A8;
  v4 = (_QWORD *)(a1 + 32);
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != (_QWORD *)(a1 + 32) && v4[4] <= a2)
    return (uint64_t *)(*(_QWORD *)(a1 + 48) + 24 * a2);
  else
    return &qword_255E548A8;
}

void Exec::ensureTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD **v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32[2];
  uint64_t v33[3];
  __int128 v34;
  _QWORD **v35;
  uint64_t *v36;
  _QWORD **v37;
  uint64_t *v38;

  std::mutex::lock((std::mutex *)a1);
  v6 = Exec::_ensureTarget((Exec *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  v32[0] = 0;
  v32[1] = 0;
  v31 = (uint64_t *)v32;
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    v9 = (uint64_t *)v32;
    do
    {
      v25 = (_QWORD **)Exec::_ensureTarget((Exec *)a1, v7);
      v10 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(&v31, v9, v33, &v28, (unint64_t *)&v25);
      v11 = *v10;
      if (!*v10)
      {
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = (uint64_t)v25;
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(&v31, v33[0], v10, v11);
      }
      v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          v9 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v13 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (!v13);
      }
      v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != v8);
  }
  v14 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom(a1 + 64, v6);
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = &v29;
  v25 = &v26;
  v26 = 0;
  v15 = (uint64_t *)*v14;
  v37 = (_QWORD **)(v14 + 1);
  v38 = v15;
  v36 = v31;
  *((_QWORD *)&v34 + 1) = &v29;
  v35 = v32;
  *(_QWORD *)&v34 = &v28;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>((uint64_t)v33, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v34);
  v16 = (uint64_t *)*v14;
  v37 = v32;
  v38 = v31;
  v36 = v16;
  *((_QWORD *)&v34 + 1) = v25;
  v35 = (_QWORD **)(v14 + 1);
  *(_QWORD *)&v34 = &v25;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>((uint64_t)v33, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v34);
  if (v27 | v30)
  {
    *(_BYTE *)(a1 + 192) = 1;
    *((_BYTE *)realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(a1 + 64, v6) + 48) = 1;
    v17 = v25;
    if (v25 != &v26)
    {
      do
      {
        v18 = v17[4];
        v33[0] = v6;
        *(_QWORD *)&v34 = v18;
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(_QWORD *)(a1 + 112) + 24 * v6), (unint64_t *)&v34, (uint64_t *)&v34);
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(_QWORD *)(a1 + 136) + 24 * v34), (unint64_t *)v33, v33);
        v19 = (_QWORD *)v17[1];
        if (v19)
        {
          do
          {
            v20 = (_QWORD **)v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD **)v17[2];
            v13 = *v20 == v17;
            v17 = v20;
          }
          while (!v13);
        }
        v17 = v20;
      }
      while (v20 != &v26);
    }
    v21 = v28;
    if (v28 != &v29)
    {
      do
      {
        v22 = v21[4];
        std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)(*(_QWORD *)(a1 + 112) + 24 * v6), v22);
        std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)(*(_QWORD *)(a1 + 136) + 24 * v22), v6);
        v23 = (_QWORD *)v21[1];
        if (v23)
        {
          do
          {
            v24 = (_QWORD **)v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD **)v21[2];
            v13 = *v24 == v21;
            v21 = v24;
          }
          while (!v13);
        }
        v21 = v24;
      }
      while (v24 != &v29);
    }
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v25, v26);
  std::__tree<unsigned int>::destroy((uint64_t)&v28, v29);
  std::__tree<unsigned int>::destroy((uint64_t)&v31, v32[0]);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_230061CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  std::mutex *v16;

  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

double realityio::RioTimer::stop(std::chrono::steady_clock::time_point *this)
{
  double result;

  ++this[2].__d_.__rep_;
  this[4].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  result = *(double *)&this[1].__d_.__rep_
         + (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - this[3].__d_.__rep_) / 1000) / 1000.0)
                 / 1000.0);
  *(double *)&this[1].__d_.__rep_ = result;
  return result;
}

void Exec::execGraphSerial(std::chrono::steady_clock::time_point *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  std::vector<int>::size_type rep;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  std::vector<int>::pointer begin;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t *i;
  uint64_t *v42;
  uint64_t v43;
  Exec *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  std::vector<int>::pointer v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  std::vector<int> *v55;
  std::vector<int> *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *j;
  unint64_t v70;
  _QWORD *v71;
  const pxrInternal__aapl__pxrReserved__::VtValue *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void ***v85;
  char v86;
  pxrInternal__aapl__pxrReserved__::SdfPath *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  _QWORD v92[2];
  _BYTE v93[16];
  std::vector<int>::value_type __x[4];
  __int128 v95;
  __int128 v96;
  void **v97[2];
  std::vector<int> v98;
  int *v99;
  _QWORD *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if (LOBYTE(this[24].__d_.__rep_))
  {
    this[39].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    rep = this[20].__d_.__rep_;
    __x[0] = 0;
    std::vector<int>::vector(&v98, rep, __x);
    v4 = (_QWORD *)this[17].__d_.__rep_;
    v5 = (_QWORD *)this[18].__d_.__rep_;
    if (v4 != v5)
    {
      v6 = 0;
      do
      {
        v7 = (_QWORD *)*v4;
        if ((_QWORD *)*v4 != v4 + 1)
        {
          begin = v98.__begin_;
          do
          {
            v9 = v7[4];
            if (v9 != v6)
              ++begin[v9];
            v10 = (_QWORD *)v7[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v7[2];
                v12 = *v11 == (_QWORD)v7;
                v7 = v11;
              }
              while (!v12);
            }
            v7 = v11;
          }
          while (v11 != v4 + 1);
        }
        v4 += 3;
        ++v6;
      }
      while (v4 != v5);
    }
    v95 = 0u;
    v96 = 0u;
    *(_OWORD *)__x = 0u;
    *(_QWORD *)&v91 = 0;
    v14 = v98.__begin_;
    end = v98.__end_;
    if (v98.__end_ != v98.__begin_)
    {
      v15 = 0;
      do
      {
        if (!v14[v15])
        {
          std::deque<unsigned long>::push_back(__x, &v91);
          v15 = v91;
          v14 = v98.__begin_;
          end = v98.__end_;
        }
        *(_QWORD *)&v91 = ++v15;
      }
      while (v15 < end - v14);
    }
    v16 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
    v17 = *((_QWORD *)&v96 + 1);
    if (*((_QWORD *)&v96 + 1))
    {
      v18 = v16;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__x[2] + (((unint64_t)v96 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v96 & 0x1FF));
        *(_QWORD *)&v96 = v96 + 1;
        *((_QWORD *)&v96 + 1) = v17 - 1;
        if ((unint64_t)v96 >= 0x400)
        {
          operator delete(**(void ***)&__x[2]);
          *(_QWORD *)&__x[2] += 8;
          *(_QWORD *)&v96 = v96 - 512;
        }
        v23 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)&this[8], v22);
        v24 = v23;
        if (v23 != v18)
        {
          if (v20 >= v21)
          {
            v25 = (v20 - v19) >> 3;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if ((v21 - v19) >> 2 > v26)
              v26 = (v21 - v19) >> 2;
            if ((unint64_t)(v21 - v19) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
            {
              if (v27 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v28 = (char *)operator new(8 * v27);
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v24;
            v30 = v29 + 8;
            while (v20 != v19)
            {
              v31 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v29 - 1) = v31;
              v29 -= 8;
            }
            v21 = &v28[8 * v27];
            if (v19)
              operator delete(v19);
            v19 = v29;
            v20 = v30;
          }
          else
          {
            *(_QWORD *)v20 = v23;
            v20 += 8;
          }
        }
        v32 = (_QWORD *)(this[17].__d_.__rep_ + 24 * v22);
        v35 = (_QWORD *)*v32;
        v33 = v32 + 1;
        v34 = v35;
        if (v35 != v33)
        {
          do
          {
            v36 = v34[4];
            v37 = v98.__begin_[v36] - 1;
            v98.__begin_[v36] = v37;
            if (!v37)
              std::deque<unsigned long>::push_back(__x, v34 + 4);
            v38 = (_QWORD *)v34[1];
            if (v38)
            {
              do
              {
                v39 = v38;
                v38 = (_QWORD *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v39 = (_QWORD *)v34[2];
                v12 = *v39 == (_QWORD)v34;
                v34 = v39;
              }
              while (!v12);
            }
            v34 = v39;
          }
          while (v39 != v33);
        }
        v17 = *((_QWORD *)&v96 + 1);
      }
      while (*((_QWORD *)&v96 + 1));
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    std::deque<unsigned long>::~deque[abi:ne180100](__x);
    if (v98.__begin_)
    {
      v98.__end_ = v98.__begin_;
      operator delete(v98.__begin_);
    }
    v40 = (void *)this[21].__d_.__rep_;
    if (v40)
    {
      this[22].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v40;
      operator delete(v40);
    }
    this[21].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v19;
    this[22].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v20;
    this[23].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v21;
    LOBYTE(this[24].__d_.__rep_) = 0;
    realityio::RioTimer::stop(this + 36);
  }
  __x[0] = 0;
  *(_QWORD *)&__x[2] = 0;
  v95 = 0uLL;
  *((_QWORD *)&v96 + 1) = 0;
  this[44].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this[46].__d_.__rep_ = 0;
  this[47].__d_.__rep_ = 0;
  v42 = (uint64_t *)this[21].__d_.__rep_;
  for (i = (uint64_t *)this[22].__d_.__rep_; v42 != i; ++v42)
  {
    v43 = *v42;
    ++this[46].__d_.__rep_;
    if (*(_BYTE *)(v43 + 48))
    {
      v89 = 0uLL;
      v90 = 0;
      std::mutex::lock((std::mutex *)this);
      v87 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v43 + 8);
      v88 = v43;
      v44 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v43 + 8));
      v45 = (unint64_t *)((char *)v44 + 96);
      if (&this[9] == (std::chrono::steady_clock::time_point *)v44)
        v45 = (unint64_t *)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      v46 = *v45;
      v47 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      std::mutex::unlock((std::mutex *)this);
      if (v46 != v47)
      {
        v49 = *((_QWORD *)&v89 + 1);
        v48 = v89;
        while (v49 != v48)
        {
          v49 -= 8;
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v90, v49);
        }
        *((_QWORD *)&v89 + 1) = v48;
        v50 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom((uint64_t)&this[8], v46);
        std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v98, (uint64_t)v50);
        v91 = 0uLL;
        v92[0] = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve((uint64_t *)&v91, (unint64_t)v98.__end_cap_.__value_);
        v51 = v98.__begin_;
        if ((std::vector<int>::pointer *)v98.__begin_ != &v98.__end_)
        {
          do
          {
            v52 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)&this[8], *((_QWORD *)v51 + 4));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v97, v52);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v97 + 1, v52 + 1);
            v53 = *((_QWORD *)&v91 + 1);
            if (*((_QWORD *)&v91 + 1) >= v92[0])
            {
              v54 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v91, v97);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v91 + 1), v97);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v53 + 4), (_DWORD *)v97 + 1);
              v54 = v53 + 8;
            }
            *((_QWORD *)&v91 + 1) = v54;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v97);
            v55 = (std::vector<int> *)*((_QWORD *)v51 + 1);
            if (v55)
            {
              do
              {
                v56 = v55;
                v55 = (std::vector<int> *)v55->__begin_;
              }
              while (v55);
            }
            else
            {
              do
              {
                v56 = (std::vector<int> *)*((_QWORD *)v51 + 2);
                v12 = v56->__begin_ == v51;
                v51 = (std::vector<int>::pointer)v56;
              }
              while (!v12);
            }
            v51 = (std::vector<int>::pointer)v56;
          }
          while (v56 != (std::vector<int> *)&v98.__end_);
        }
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)&v89);
        v89 = v91;
        v90 = v92[0];
        v92[0] = 0;
        v91 = 0uLL;
        v97[0] = (void **)&v91;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v97);
        std::__tree<unsigned int>::destroy((uint64_t)&v98, (_QWORD *)v98.__end_);
      }
      v57 = v88;
      if (*(_QWORD *)(v88 + 24))
      {
        Exec::getValue((Exec *)this, v87, (pxrInternal__aapl__pxrReserved__::VtValue *)v93);
        v91 = 0uLL;
        v92[0] = 0;
        v59 = *((_QWORD *)&v89 + 1);
        v58 = v89;
        v60 = *((_QWORD *)&v89 + 1) - v89;
        if (*((_QWORD *)&v89 + 1) != (_QWORD)v89)
        {
          if ((unint64_t)v60 > 0x7FFFFFFFFFFFFFF8)
LABEL_142:
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v100 = v92;
          v57 = v88;
          v98.__begin_ = (std::vector<int>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v60 >> 3);
          v98.__end_ = v98.__begin_;
          v98.__end_cap_.__value_ = v98.__begin_;
          v99 = &v98.__begin_[4 * v61];
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
          v59 = *((_QWORD *)&v89 + 1);
          v58 = v89;
        }
        if (v59 == v58)
          goto LABEL_132;
        v62 = 0;
        v86 = 1;
        do
        {
          v63 = (unsigned int *)(v58 + 8 * v62);
          v64 = (int8x8_t)this[31].__d_.__rep_;
          if (v64)
          {
            v65 = bswap64(0x9E3779B97F4A7C55* (v63[1]+ ((v63[1]+ (unint64_t)*v63+ (v63[1] + (unint64_t)*v63) * (v63[1] + (unint64_t)*v63)) >> 1)));
            v66 = (uint8x8_t)vcnt_s8(v64);
            v66.i16[0] = vaddlv_u8(v66);
            if (v66.u32[0] > 1uLL)
            {
              v67 = v65;
              if (v65 >= *(_QWORD *)&v64)
                v67 = v65 % *(_QWORD *)&v64;
            }
            else
            {
              v67 = v65 & (*(_QWORD *)&v64 - 1);
            }
            v68 = *(_QWORD **)(this[30].__d_.__rep_ + 8 * v67);
            if (v68)
            {
              for (j = (_QWORD *)*v68; j; j = (_QWORD *)*j)
              {
                v70 = j[1];
                if (v65 == v70)
                {
                  if (j[2] == *(_QWORD *)v63)
                  {
                    v86 &= j[8] != 0;
                    break;
                  }
                }
                else
                {
                  if (v66.u32[0] > 1uLL)
                  {
                    if (v70 >= *(_QWORD *)&v64)
                      v70 %= *(_QWORD *)&v64;
                  }
                  else
                  {
                    v70 &= *(_QWORD *)&v64 - 1;
                  }
                  if (v70 != v67)
                    break;
                }
              }
            }
          }
          v71 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(&this[25].__d_.__rep_, v63);
          if (v71)
          {
            v72 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v71 + 1);
            v73 = *((_QWORD *)&v91 + 1);
            if (*((_QWORD *)&v91 + 1) >= v92[0])
            {
              v77 = (uint64_t)(*((_QWORD *)&v91 + 1) - v91) >> 4;
              if ((unint64_t)(v77 + 1) >> 60)
                goto LABEL_142;
              v78 = (uint64_t)(v92[0] - v91) >> 3;
              if (v78 <= v77 + 1)
                v78 = v77 + 1;
              if (v92[0] - (_QWORD)v91 >= 0x7FFFFFFFFFFFFFF0uLL)
                v79 = 0xFFFFFFFFFFFFFFFLL;
              else
                v79 = v78;
              v100 = v92;
              if (v79)
                v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v79);
              else
                v80 = 0;
              v98.__begin_ = (std::vector<int>::pointer)v79;
              v98.__end_ = (std::vector<int>::pointer)(v79 + 16 * v77);
              v98.__end_cap_.__value_ = v98.__end_;
              v99 = (int *)(v79 + 16 * v80);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v98.__end_, v72);
              v98.__end_cap_.__value_ += 4;
              std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
              v74 = *((_QWORD *)&v91 + 1);
              std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v91 + 1), v72);
              v74 = v73 + 16;
            }
            *((_QWORD *)&v91 + 1) = v74;
          }
          else
          {
            v97[1] = 0;
            v75 = *((_QWORD *)&v91 + 1);
            if (*((_QWORD *)&v91 + 1) >= v92[0])
            {
              v81 = (uint64_t)(*((_QWORD *)&v91 + 1) - v91) >> 4;
              if ((unint64_t)(v81 + 1) >> 60)
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              v82 = (uint64_t)(v92[0] - v91) >> 3;
              if (v82 <= v81 + 1)
                v82 = v81 + 1;
              if (v92[0] - (_QWORD)v91 >= 0x7FFFFFFFFFFFFFF0uLL)
                v83 = 0xFFFFFFFFFFFFFFFLL;
              else
                v83 = v82;
              v100 = v92;
              if (v83)
                v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v83);
              else
                v84 = 0;
              v98.__begin_ = (std::vector<int>::pointer)v83;
              v98.__end_ = (std::vector<int>::pointer)(v83 + 16 * v81);
              v98.__end_cap_.__value_ = v98.__end_;
              v99 = (int *)(v83 + 16 * v84);
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v98.__end_, (const pxrInternal__aapl__pxrReserved__::VtValue *)v97);
              v98.__end_cap_.__value_ += 4;
              std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
              v76 = *((_QWORD *)&v91 + 1);
              std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v91 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v97);
              v76 = v75 + 16;
            }
            *((_QWORD *)&v91 + 1) = v76;
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v97);
          }
          ++v62;
          v58 = v89;
        }
        while (v62 < (uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 3);
        v57 = v88;
        if ((v86 & 1) != 0
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v88 + 24) + 8))(*(_QWORD *)(v88 + 24)))
        {
LABEL_132:
          (***(void (****)(std::vector<int> *__return_ptr, _QWORD, pxrInternal__aapl__pxrReserved__::SdfPath *, _BYTE *, __int128 *, __int128 *))(v57 + 24))(&v98, *(_QWORD *)(v57 + 24), v87, v93, &v89, &v91);
          Exec::setValueAndFault((Exec *)this, v87, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
        }
        else
        {
          v98.__end_ = (std::vector<int>::pointer)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy((uint64_t *)&v98, (uint64_t)__x);
          Exec::setValueAndFault((Exec *)this, v87, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
        *(_BYTE *)(v57 + 48) = 0;
        v98.__begin_ = (std::vector<int>::pointer)&v91;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v85);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v93);
      }
      else
      {
        *(_BYTE *)(v88 + 48) = 0;
      }
      v98.__begin_ = (std::vector<int>::pointer)&v89;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      i = (uint64_t *)this[22].__d_.__rep_;
    }
    else
    {
      ++this[47].__d_.__rep_;
    }
  }
  realityio::RioTimer::stop(this + 41);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v96);
  if (SHIBYTE(v95) < 0)
    operator delete(*(void **)&__x[2]);
}

void sub_230062730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

void ExecFault::~ExecFault(void **this)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void Exec::getStatistics(Exec *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  void *__p[2];
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:time:computeMakeOrder");
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:time:computeLoop");
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:numTraversedInCompute");
  v6 = *((_QWORD *)this + 46);
  v7 = &unk_24FDF0B93;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:numSkippedClean");
  v6 = *((_QWORD *)this + 47);
  v7 = &unk_24FDF0B93;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_230062A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::timerStat(uint64_t a1, const void **a2, uint64_t a3)
{
  size_t v5;
  void **v6;
  const void *v7;
  double v8;
  size_t v9;
  void **v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  double v15;
  void *__p[2];
  char v17;
  double v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 6);
  if (v17 < 0)
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ":total");
  v8 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a3 + 24)) / 1000) / 1000.0)
             / 1000.0);
  v19 = &unk_24FDE5B2B;
  v18 = v8;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 6);
  if (v17 < 0)
    v10 = (void **)__p[0];
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ":count");
  v18 = *(double *)(a3 + 16);
  v19 = &unk_24FDF0B93;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (*((char *)a2 + 23) >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 4);
  if (v17 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *a2;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ":avg");
  v15 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a3 + 24)) / 1000) / 1000.0)
              / 1000.0)
      / (double)*(unint64_t *)(a3 + 16);
  v19 = &unk_24FDE5B2B;
  v18 = v15;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_230062D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Exec::getUnreachableTargets(Exec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  char **v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD **v31;
  _QWORD *v32[2];
  uint64_t *v33;
  _QWORD *v34[2];
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v34[0] = 0;
  v34[1] = 0;
  v32[1] = 0;
  v33 = (uint64_t *)v34;
  v31 = v32;
  v32[0] = 0;
  a3[2] = 0;
  a3[1] = 0;
  *a3 = a3 + 1;
  v5 = (char **)((char *)this + 64);
  v37[0] = &off_24FDF0C58;
  v37[1] = &v31;
  v38 = v37;
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 64, a2);
  v7 = (char *)this + 72;
  if ((uint64_t *)((char *)this + 72) == v6)
    goto LABEL_12;
  v8 = (uint64_t)v38;
  if (v38)
  {
    if (v38 == v37)
    {
      v40 = v39;
      (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v39);
      goto LABEL_7;
    }
    v8 = (*(uint64_t (**)(void))(*v38 + 16))();
  }
  v40 = (_QWORD *)v8;
LABEL_7:
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse((uint64_t)v5, (uint64_t)v39, v6[12], (_QWORD *)this + 14, 1);
  v9 = v40;
  if (v40 == v39)
  {
    v10 = 4;
    v9 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_12;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_12:
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
    goto LABEL_16;
  }
  if (v38)
  {
    v12 = 5;
LABEL_16:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13 = *v5;
  if (v13 != v7)
  {
    do
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 32), (_DWORD *)v13 + 8);
      v14 = (char *)*((_QWORD *)v13 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v13 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != v7);
  }
  v17 = v33;
  v18 = v31;
  v19 = *a3;
  v35 = a3;
  v36 = v19;
  if (v33 == (uint64_t *)v34)
    goto LABEL_59;
  if (v31 == v32)
  {
    v28 = a3;
    goto LABEL_52;
  }
  do
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28)))
    {
      std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100]((uint64_t)&v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
      v20 = (uint64_t *)v17[1];
      if (v20)
      {
        do
        {
          v17 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = v17;
          v17 = (uint64_t *)v17[2];
        }
        while ((uint64_t *)*v17 != v21);
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28)))
      {
        v22 = (_QWORD *)v18[1];
        if (v22)
        {
          do
          {
            v18 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = v18;
            v18 = (_QWORD *)v18[2];
          }
          while ((_QWORD *)*v18 != v23);
        }
        continue;
      }
      v24 = (uint64_t *)v17[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (uint64_t *)v17[2];
          v16 = *v25 == (_QWORD)v17;
          v17 = v25;
        }
        while (!v16);
      }
      v26 = (_QWORD *)v18[1];
      if (v26)
      {
        do
        {
          v18 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = v18;
          v18 = (_QWORD *)v18[2];
        }
        while ((_QWORD *)*v18 != v27);
      }
      v17 = v25;
    }
    if (v17 == (uint64_t *)v34)
      goto LABEL_59;
  }
  while (v18 != v32);
  v28 = v35;
  v19 = v36;
LABEL_52:
  v39[0] = v28;
  v39[1] = v19;
  do
  {
    std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100]((uint64_t)v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
    v29 = (uint64_t *)v17[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (uint64_t *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (uint64_t *)v17[2];
        v16 = *v30 == (_QWORD)v17;
        v17 = v30;
      }
      while (!v16);
    }
    v17 = v30;
  }
  while (v30 != (uint64_t *)v34);
LABEL_59:
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v31, v32[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v33, v34[0]);
}

void sub_230063108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  char *v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v28 = a25;
  if (a25 == v26)
  {
    v29 = 4;
    v28 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a21;
  if (a21 == &a18)
  {
    v31 = 4;
    v30 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v25, *(_QWORD **)(v25 + 8));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a10, a11);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void Exec::dumpDotfile(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t String;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t EmptyString;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  _QWORD *v38;
  pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *__p[2];
  unsigned __int8 v65;
  char **v66;
  char *v67;
  uint64_t v68;
  _DWORD *v69;
  char __str[128];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v68 = 0;
  v66 = &v67;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"node [shape=record];\n", 21);
  v3 = (_QWORD *)a1[11];
  v4 = a1 + 12;
  if (v3 != a1 + 12)
  {
    do
    {
      v5 = v3[5];
      if (*(_BYTE *)(v5 + 48))
        v6 = "red";
      else
        v6 = "black";
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      snprintf(__str, 0x80uLL, "node_%i", v68);
      v69 = (_DWORD *)(v5 + 8);
      v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8), &v69);
      MEMORY[0x2348B4AD4](v7 + 5, __str);
      v8 = strlen(__str);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__str, v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[ label=\"{", 10);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8));
      v12 = *(char *)(String + 23);
      if (v12 >= 0)
        v13 = String;
      else
        v13 = *(_QWORD *)String;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(String + 23);
      else
        v14 = *(_QWORD *)(String + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"| ", 2);
      v17 = v16;
      if ((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      v19 = *(char *)(EmptyString + 23);
      if (v19 >= 0)
        v20 = EmptyString;
      else
        v20 = *(_QWORD *)EmptyString;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(EmptyString + 23);
      else
        v21 = *(_QWORD *)(EmptyString + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"}\" color=", 9);
      if ((v65 & 0x80u) == 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if ((v65 & 0x80u) == 0)
        v25 = v65;
      else
        v25 = (uint64_t)__p[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" fillcolor=none style=filled];\n",
        31);
      if ((char)v65 < 0)
        operator delete(__p[0]);
      v27 = (_QWORD *)v3[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v3[2];
          v29 = *v28 == (_QWORD)v3;
          v3 = v28;
        }
        while (!v29);
      }
      v3 = v28;
    }
    while (v28 != v4);
  }
  v31 = (_QWORD *)a1[14];
  v30 = (_QWORD *)a1[15];
  if (v31 != v30)
  {
    v32 = 0;
    do
    {
      v33 = (_QWORD *)*v4;
      if (*v4)
      {
        v34 = a1 + 12;
        do
        {
          v35 = v33[4];
          v36 = v35 >= v32;
          if (v35 >= v32)
            v37 = v33;
          else
            v37 = v33 + 1;
          if (v36)
            v34 = v33;
          v33 = (_QWORD *)*v37;
        }
        while (*v37);
        if (v34 != v4 && v32 >= v34[4])
        {
          v38 = (_QWORD *)*v31;
          if ((_QWORD *)*v31 != v31 + 1)
          {
            v39 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v34[5] + 8);
            do
            {
              v40 = (_QWORD *)*v4;
              if (*v4)
              {
                v41 = v38[4];
                v42 = a1 + 12;
                do
                {
                  v43 = v40[4];
                  v44 = v43 >= v41;
                  if (v43 >= v41)
                    v45 = v40;
                  else
                    v45 = v40 + 1;
                  if (v44)
                    v42 = v40;
                  v40 = (_QWORD *)*v45;
                }
                while (*v45);
                if (v42 != v4 && v41 >= v42[4])
                {
                  v46 = v42[5];
                  *(_QWORD *)__str = v39;
                  v47 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, v39, (_DWORD **)__str);
                  *(_QWORD *)__str = v46 + 8;
                  v48 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v46 + 8), (_DWORD **)__str);
                  v51 = v47[5];
                  v50 = v47 + 5;
                  v49 = v51;
                  v52 = *((char *)v50 + 23);
                  if (v52 >= 0)
                    v53 = (uint64_t)v50;
                  else
                    v53 = v49;
                  if (v52 >= 0)
                    v54 = *((unsigned __int8 *)v50 + 23);
                  else
                    v54 = v50[1];
                  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v53, v54);
                  v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" -> ", 4);
                  v57 = *((char *)v48 + 63);
                  if (v57 >= 0)
                    v58 = (uint64_t)(v48 + 5);
                  else
                    v58 = v48[5];
                  if (v57 >= 0)
                    v59 = *((unsigned __int8 *)v48 + 63);
                  else
                    v59 = v48[6];
                  v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\n", 1);
                }
              }
              v61 = (_QWORD *)v38[1];
              if (v61)
              {
                do
                {
                  v62 = v61;
                  v61 = (_QWORD *)*v61;
                }
                while (v61);
              }
              else
              {
                do
                {
                  v62 = (_QWORD *)v38[2];
                  v29 = *v62 == (_QWORD)v38;
                  v38 = v62;
                }
                while (!v29);
              }
              v38 = v62;
            }
            while (v62 != v31 + 1);
            v30 = (_QWORD *)a1[15];
          }
        }
      }
      v31 += 3;
      ++v32;
    }
    while (v31 != v30);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}\n", 2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(v67);
}

void sub_2300635BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char *a19)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(a19);
  _Unwind_Resume(a1);
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _DWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 2), a3);
  return a1;
}

void sub_230063644(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer(pxrInternal__aapl__pxrReserved__::VtValue *result, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = 0;
  v6 = *(_QWORD *)result;
  v5 = *((_QWORD *)result + 1);
  v7 = a2[1];
  while (v5 + v4 != v6)
  {
    v4 -= 16;
    result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v7), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v5));
  }
  a2[1] = v7 + v4;
  v8 = *(_QWORD *)v3;
  *(_QWORD *)v3 = v7 + v4;
  a2[1] = v8;
  v9 = *((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = a2[2];
  a2[2] = v9;
  v10 = *((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree(uint64_t a1)
{
  uint64_t i;
  unint64_t result;
  BOOL v4;

  if (!*(_QWORD *)a1)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 40); ; i = *(_QWORD *)(result + 40))
  {
    result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0)
      break;
    if (result)
      v4 = (i & 7) == 0;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _DWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(a1 + 8), a3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_UpdateTreeForNewEntry(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _QWORD v9[2];
  _BYTE v10[8];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v9[1] = 0;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)v10, &v8, v9);
    v4 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(a1, v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    v5 = *(_QWORD *)(v4 + 32);
    if (v5)
      v6 = v5 | 1;
    else
      v6 = v4;
    *((_QWORD *)v3 + 5) = v6;
    *(_QWORD *)(v4 + 32) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_230063888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTableImpl<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTable(std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue> const&)::{lambda(pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *)#1}>(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (uint64_t *)(*(_QWORD *)a1
                 + 8
                 * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = *v7;
  if (*v7)
  {
    v9 = *v7;
    while (*(_QWORD *)v9 != *(_QWORD *)a2)
    {
      v9 = *(_QWORD *)(v9 + 24);
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow((void **)a1);
      v7 = (uint64_t *)(*(_QWORD *)a1
                     + 8
                     * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = *v7;
    }
    v9 = operator new();
    v10 = *a3;
    v11 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9, v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 1, v10 + 1);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 8), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 2));
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_230063A24(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  MEMORY[0x2348B4E1C]();
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow(void **a1)
{
  unsigned __int8 v2;
  _BOOL4 v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v17;
  int v18;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v17);
  v2 = atomic_load(MEMORY[0x24BEE7DE0]);
  v3 = (v2 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin() != 0;
  if (((2 * (_QWORD)a1[4]) | 1uLL) <= 7)
    v4 = 7;
  else
    v4 = (2 * (_QWORD)a1[4]) | 1;
  a1[4] = (void *)v4;
  v5 = v4 + 1;
  if (v4 == -1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v9 = 8 * v5;
    v6 = (char *)operator new(8 * v5);
    v8 = &v6[8 * v5];
    bzero(v6, v9);
    v7 = &v6[v9];
  }
  v10 = a1[1];
  if (v10 != *a1)
  {
    v11 = 0;
    v12 = (v10 - (_BYTE *)*a1) >> 3;
    do
    {
      v13 = (unsigned int *)*((_QWORD *)*a1 + v11);
      if (v13)
      {
        do
        {
          v14 = (unsigned int *)*((_QWORD *)v13 + 3);
          v15 = bswap64(0x9E3779B97F4A7C55* (v13[1]+ ((v13[1]+ (unint64_t)*v13+ (v13[1] + (unint64_t)*v13) * (v13[1] + (unint64_t)*v13)) >> 1))) & v4;
          *((_QWORD *)v13 + 3) = *(_QWORD *)&v6[8 * v15];
          *(_QWORD *)&v6[8 * v15] = v13;
          v13 = v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v12);
    v10 = *a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  if (v10)
    operator delete(v10);
  if (!v3)
    goto LABEL_21;
  do
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
LABEL_21:
    ;
  }
  while (v18--);
}

void sub_230063BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<ExecFault>::Invoke@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = (_OWORD *)operator new();
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *a1 = v2;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<ExecFault>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<ExecFault>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void Exec::TargetVertex::~TargetVertex(Exec::TargetVertex *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage::~NodeStorage(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void **std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(v7);
  }
  return result;
}

void sub_230063F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, __int128 *a6)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;

  v7 = result;
  v8 = *(_QWORD **)a2;
  v9 = (_QWORD *)*a3;
  if (*(_QWORD *)a2 == *a3)
  {
LABEL_38:
    v27 = *a6;
    v9 = v8;
    goto LABEL_39;
  }
  for (i = *(_QWORD **)a4; *(_QWORD *)a4 != *a5; i = *(_QWORD **)a4)
  {
    v15 = v8[4];
    v16 = i[4];
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        v23 = (_QWORD *)v8[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v8[2];
            v20 = *v24 == (_QWORD)v8;
            v8 = v24;
          }
          while (!v20);
        }
        *(_QWORD *)a2 = v24;
        v25 = *(_QWORD **)a4;
        v26 = *(_QWORD **)(*(_QWORD *)a4 + 8);
        if (v26)
        {
          do
          {
            v22 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v25[2];
            v20 = *v22 == (_QWORD)v25;
            v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        v21 = (_QWORD *)i[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)i[2];
            v20 = *v22 == (_QWORD)i;
            i = v22;
          }
          while (!v20);
        }
      }
      *(_QWORD *)a4 = v22;
    }
    else
    {
      result = std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100]((uint64_t)a6, v8 + 4);
      v17 = *(_QWORD **)a2;
      v18 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v17[2];
          v20 = *v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v20);
      }
      *(_QWORD *)a2 = v19;
    }
    v8 = *(_QWORD **)a2;
    v9 = (_QWORD *)*a3;
    if (*(_QWORD *)a2 == *a3)
      goto LABEL_38;
  }
  v27 = *a6;
  v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      result = std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100]((uint64_t)&v30, v8 + 4);
      v28 = (_QWORD *)v8[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v8[2];
          v20 = *v29 == (_QWORD)v8;
          v8 = v29;
        }
        while (!v20);
      }
      v8 = v29;
    }
    while (v29 != v9);
    v27 = v30;
  }
LABEL_39:
  *(_QWORD *)v7 = v9;
  *(_OWORD *)(v7 + 8) = v27;
  return result;
}

uint64_t std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, (uint64_t *)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void std::__tree<unsigned long>::__erase_unique<unsigned long>(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"9ExecFault" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 32));
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      MEMORY[0x2348B4E1C](v2, 0x1072C40FD54DC68);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a2 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32));
    return 0;
  }
  if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32));
    }
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;

  v2 = atomic_load((unsigned int *)(*a1 + 48));
  if (v2 != 1)
  {
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>::_Counted(v3, *a1);
    v4 = (unsigned int *)(v3 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = *a1;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>::~intrusive_ptr(&v7);
  }
  return *a1;
}

void sub_2300645B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1072C40FD54DC68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>::_Counted(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32));
  atomic_store(0, (unsigned int *)(a1 + 48));
  return a1;
}

void sub_230064650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2300646D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1072C40FD54DC68);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Hash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Equal(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_EqualPtr(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetTypeid()
{
  return MEMORY[0x24BEDB7B0];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7B0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7B0], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB7B0];
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_24FDF0B93;
  return result;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, a3 + 1);
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v2 + 28);
    operator delete(v2);
  }
}

void std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF0C58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF0C58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::operator()(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)(a1 + 8), a2, a2);
  return 1;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target_type()
{
}

uint64_t std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100](uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)a1, *(_QWORD **)(a1 + 8), a2, a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 7, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, a4 + 1);
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 32));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    v10[5] = 0;
    v10[6] = 0;
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

uint64_t GetCoreRealityIOBundleVersion()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.CoreRealityIO"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForInfoDictionaryKey:", *MEMORY[0x24BDBD2A0]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("."));
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    v6 = 1000000000000;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v6 /= 0x3E8uLL;
        v3 += v6 * (int)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "intValue", (_QWORD)v9);
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  return v3;
}

void sub_230064E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL IsCoreRIOBundleVersionValid()
{
  void *v0;
  void *v1;
  int v2;
  _BOOL8 v4;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.CoreRealityIO"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForInfoDictionaryKey:", *MEMORY[0x24BDBD2A0]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "intValue");
  v4 = v2 != 0xFFFF && v2 != 0;

  return v4;
}

void sub_230064EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFStringRef RIOCopyMtlxFromUsdFile(char *__s)
{
  void **v1;
  CFStringRef v2;
  void *v4;
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(&v4, __s);
  realityio::mtlxFromUsd(__p);
  if (v7 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4);
  return v2;
}

void sub_230064F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::AcousticMeshComponentBuilder::kOutputName(realityio::AcousticMeshComponentBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255E548E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E548E0))
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "acoustic_mesh_scene_data");
    qword_255E548D8 = (uint64_t)v3;
    __cxa_guard_release(&qword_255E548E0);
  }
  return qword_255E548D8;
}

void sub_230065000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E548E0);
  _Unwind_Resume(a1);
}

realityio::AcousticMeshComponentBuilder *realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(realityio::AcousticMeshComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  void **v30[3];
  _QWORD *v31[3];
  _BYTE v32[8];
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35[3];
  _QWORD *v36[3];
  __int128 v37;
  _QWORD *v38[3];
  uint64_t v39;
  uint64_t v40;
  void ***v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v28, "AcousticMeshComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kAcousticMeshComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E548D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E548D0))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v36, 0, sizeof(v36));
    v17 = (_BYTE *)operator new();
    MEMORY[0x2348B274C](&v46, "RealityKitComponent");
    MEMORY[0x2348B274C](&v47, "Component");
    std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v32, &v46, 2);
    memset(v31, 0, sizeof(v31));
    memset(v30, 0, sizeof(v30));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t)v32, v31, v30);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v34, (uint64_t)v17);
    v48 = v34;
    v34 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v35, &v48, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v36, v35);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v37, v16);
    v49 = v37;
    v37 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v38, &v49, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v38);
    v18 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v39, v15);
    _MergedGlobals_19 = v39;
    *(_QWORD *)algn_255E548C8 = v40;
    v39 = 0;
    v40 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v18);
    v41 = (void ***)v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    v41 = (void ***)v35;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    v41 = v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    v30[0] = (void **)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v30);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v32, v33);
    v19 = (uint64_t *)&v48;
    do
    {
      v21 = *--v19;
      v20 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
    }
    while (v19 != &v46);
    v35[0] = v36;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
    __cxa_guard_release(&qword_255E548D0);
  }
  v24 = _MergedGlobals_19;
  v25 = *(std::__shared_weak_count **)algn_255E548C8;
  if (*(_QWORD *)algn_255E548C8)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E548C8 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v45 = v44;
  v42[0] = &off_24FDF0F70;
  v43 = v42;
  v44[0] = &off_24FDF0D50;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v28, (uint64_t)__p, &v24, (uint64_t)v44, (uint64_t)v42);
  v7 = v43;
  if (v43 == v42)
  {
    v8 = 4;
    v7 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v45;
  if (v45 == v44)
  {
    v10 = 4;
    v9 = v44;
    goto LABEL_14;
  }
  if (v45)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  *(_QWORD *)this = &off_24FDF0CD8;
  return this;
}

void sub_230065444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v42 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  *(_QWORD *)(v42 - 216) = &a35;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 216));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v42 - 128);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  *(_QWORD *)(v42 - 216) = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 216));
  a23 = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a30, a31);
  v44 = v42 - 128;
  while (1)
  {
    v46 = *(_QWORD *)(v44 - 8);
    v44 -= 8;
    v45 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    if (v44 == v42 - 144)
    {
      a35 = &a38;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      MEMORY[0x2348B4E1C](v41, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_255E548D0);
      if (a16 < 0)
        operator delete(__p);
      if (a22 < 0)
        operator delete(a17);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *realityio::AcousticMeshComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 48);
  v5 = a2;
  v6[0] = &off_24FDF0FF0;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23006578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::AcousticMeshComponentBuilder::~AcousticMeshComponentBuilder(realityio::AcousticMeshComponentBuilder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::AcousticMeshComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::AcousticMeshComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::AcousticMeshComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::AcousticMeshComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::AcousticMeshComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::AcousticMeshComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::AcousticMeshComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::AcousticMeshComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF0D50;
  return result;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF0D50;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  realityio::MeshModelDescriptorBuilder *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  char v43;
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)__p, &v40);
  v38 = v40;
  v39 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v38);
  v8 = v39;
  if (v39)
  {
    v9 = (unint64_t *)&v39->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v11)
    v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v12 = (std::__shared_weak_count *)operator new(0x48uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v12[1].__vftable, (uint64_t)__p, (uint64_t *)v11 + 2, 1);
  if (v43 < 0)
    operator delete(__p[0]);
  v36 = v12 + 1;
  v37 = v12;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = (realityio::MeshModelDescriptorBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v36);
  v16 = v37;
  if (v37)
  {
    v17 = (unint64_t *)&v37->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  __p[0] = &off_24FDF0E50;
  v44 = __p;
  v19 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v15);
  v20 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v33 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>(v19, (uint64_t *)v20 + 13, (uint64_t)__p, &v33, &v34);
  v35 = v34;
  v34 = 0uLL;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v35);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v27 = v44;
  if (v44 == __p)
  {
    v28 = 4;
    v27 = __p;
  }
  else
  {
    if (!v44)
      goto LABEL_39;
    v28 = 5;
  }
  (*((void (**)(void))*v27 + v28))();
  do
LABEL_39:
    v29 = __ldaxr(v13);
  while (__stlxr(v29 - 1, v13));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v30 = v41;
  if (v41)
  {
    v31 = (unint64_t *)&v41->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_230065D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  do
    v33 = __ldaxr(v29);
  while (__stlxr(v33 - 1, v29));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_230066008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDF0DC0;
  std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>::construct[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23006606C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>::construct[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_230066150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDF0E10;
  return a1;
}

void sub_230066200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::EntityGeneratingOwningPrimInputDescriptor::~EntityGeneratingOwningPrimInputDescriptor(realityio::EntityGeneratingOwningPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *realityio::EntityGeneratingOwningPrimInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  _BYTE v15[8];

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v8 = (char *)a2 + 48;
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((_QWORD *)((char *)a2 + 56) != v9)
  {
    v10 = *((_QWORD *)a2 + 3);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 104 * v9[5] + 24);
      return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v11, v11);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1);
  v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
  if ((_QWORD *)((char *)a2 + 56) == v12)
    v13 = 0;
  else
    v13 = *((_QWORD *)a2 + 3) + 104 * v12[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
  if (v13)
  {
    v11 = (unsigned int *)(v13 + 24);
    return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v11, v11);
  }
  return result;
}

void sub_23006632C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF0E50;
  return result;
}

{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFC098;
  return result;
}

void std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF0E50;
}

{
  *a2 = &off_24FDFC098;
}

uint64_t std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  realityio *PrimAtPath;
  NSObject *v6;
  uint64_t String;
  uint64_t v8;
  unint64_t Data;
  realityio *v10;
  NSObject *v11;
  uint64_t Text;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t result;
  void **v28;
  _QWORD v29[3];
  char v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8_t v40[4];
  _BYTE v41[12];
  uint64_t v42;
  uint64_t v43;
  uint8_t buf[4];
  _BYTE v45[12];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  PrimAtPath = (realityio *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  v6 = *(id *)(realityio::logObjects(PrimAtPath) + 24);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v32))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v32, v40);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v40);
      if (*(char *)(String + 23) >= 0)
        v8 = String;
      else
        v8 = *(_QWORD *)String;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v45 = v8;
      _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_DEFAULT, "AcousticMeshComponent generateInputsDescriptor(prim.path=%s)", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v40);
    }
    else
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v45 = "<invalid>";
      _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_DEFAULT, "AcousticMeshComponent generateInputsDescriptor(prim.path=%s)", buf, 0xCu);
    }
  }

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v32) & 1) != 0)
  {
    Data = atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 32));
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf) & 1) == 0)
      goto LABEL_43;
    v31 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>() & 1) == 0)
      goto LABEL_40;
    v10 = (realityio *)atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
    if (!v10)
      v10 = (realityio *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((v31 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v10 + 6) & 0xFFFFFFFFFFFFFFF8))
    {
      v10 = (realityio *)atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
      if (!v10)
        v10 = (realityio *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
      if ((v31 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v10 + 7) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_40:
        if ((v31 & 7) != 0)
        {
          v21 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
LABEL_43:
        if ((v47 & 7) != 0)
        {
          v23 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
        if (*(_QWORD *)&v45[4])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v45[4]);
        goto LABEL_48;
      }
    }
    v11 = *(id *)(realityio::logObjects(v10) + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      *(_DWORD *)v40 = 136315138;
      *(_QWORD *)v41 = Text;
      _os_log_impl(&dword_22FF26000, v11, OS_LOG_TYPE_DEFAULT, "AcousticMeshComponent generateInputsDescriptor->CustomInputDescriptorCallback (prim.path=%s) component type = 'AcousticMesh'!", v40, 0xCu);
    }

    v30 = 0;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v32, (uint64_t)v40);
    v13 = atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
    if (!v13)
      v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 72));
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36))
    {
      memset(v29, 0, sizeof(v29));
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v28 = (void **)v29;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v28);
    }
    if ((v39 & 7) != 0)
    {
      v14 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    if (v37)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
    v39 = 0;
    v16 = operator new(0x20uLL);
    *v16 = &off_24FDF0EC0;
    v16[1] = a2;
    v16[2] = &v30;
    v16[3] = a3;
    v39 = (unint64_t)v16;
    v17 = (uint64_t *)v39;
    if ((uint64_t *)v39 == &v36)
    {
      v18 = 4;
      v17 = &v36;
    }
    else
    {
      if (!v39)
      {
LABEL_35:
        if ((v43 & 7) != 0)
        {
          v19 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
        if (*(_QWORD *)&v41[4])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v41[4]);
        goto LABEL_40;
      }
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    goto LABEL_35;
  }
LABEL_48:
  if ((v35 & 7) != 0)
  {
    v25 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
  result = v33;
  if (v33)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  pxrInternal__aapl__pxrReserved__::UsdObject *i;
  int HasCustomDataKey;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdObject *v17;
  pxrInternal__aapl__pxrReserved__::UsdObject *v18;
  char v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((pxrInternal__aapl__pxrReserved__::UsdPrim *)v19);
  v4 = v17;
  for (i = v18; v4 != i; v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v4 + 32))
  {
    MEMORY[0x2348B274C](&v14, "isEntityHandle");
    HasCustomDataKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14);
    if ((v14 & 7) != 0)
    {
      v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if (HasCustomDataKey)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v14;
      v10 = v15;
      while (v9 != v10)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v9);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)&v23, &v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
        v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
      }
      v23 = (void **)&v14;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v23);
    }
  }
  v14 = (unint64_t)&v17;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if ((v22 & 7) != 0)
  {
    v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  result = v20;
  if (v20)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  return result;
}

void sub_230066900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

{
}

uint64_t `anonymous namespace'::visitChildren(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1);
  if ((_DWORD)result)
  {
    v5 = a2[3];
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    v6 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::UsdObject *))(*(_QWORD *)v5 + 48))(v5, a1);
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v6);
    v9 = *UsdPrimDefaultPredicate;
    v8 = UsdPrimDefaultPredicate[1];
    v10 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    v24 = v9;
    v25 = v8;
    *(_QWORD *)&v26 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a1, &v24, (uint64_t)&v28);
    v24 = v28;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v29);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v25 + 1, &v30);
    v26 = v31;
    v27 = v32;
    v20 = v33;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v34);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, &v35);
    v22 = v36;
    v23 = v37;
    while (1)
    {
      if (v24 == v20
        && v25 == v21
        && pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v26, (uint64_t)&v22))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v24, (uint64_t)v16);
      v11 = a2[3];
      if (!v11)
        goto LABEL_14;
      if ((_QWORD *)v11 != a2)
        break;
      v39 = v38;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v38);
LABEL_16:
      v12 = v39;
      if (v39 == v38)
      {
        v12 = v38;
        v13 = 4;
      }
      else
      {
        if (!v39)
          goto LABEL_21;
        v13 = 5;
      }
      (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
LABEL_21:
      if ((v19 & 7) != 0)
      {
        v14 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      if (v17)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v24);
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_14:
    v39 = (_BYTE *)v11;
    goto LABEL_16;
  }
  return result;
}

void sub_230066EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::AcousticMeshBuilderTokens_StaticTokenType(v0);
  while (!__ldaxr(&realityio::tokens::AcousticMeshBuilderTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::AcousticMeshBuilderTokens))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::~AcousticMeshBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
}

void sub_230066FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40374522CDLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF0EC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF0EC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, pxrInternal__aapl__pxrReserved__ **this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  char HasPrefix;
  pxrInternal__aapl__pxrReserved__ *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12);
  v4 = v12;
  v5 = **(_QWORD **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v4 != v5)
  {
    if (**(_BYTE **)(a1 + 16)
      || (pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12), HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8)), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(), result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12), (HasPrefix & 1) == 0))
    {
      v9 = this[1];
      if (!v9 || (*((_BYTE *)v9 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v7);
      v10 = (_QWORD *)*((_QWORD *)v9 + 3);
      result = atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
      if (!result)
        result = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
      if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(_QWORD *)(a1 + 24);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v11, (unsigned int *)&v12, &v12);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
      }
    }
  }
  return result;
}

void sub_23006718C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<`anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF0F70;
  return result;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF0F70;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::AcousticMeshComponentBuilder::kOutputName((realityio::AcousticMeshComponentBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 42, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300673C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF0FF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF0FF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  uint64_t String;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  __int128 v27;
  realityio::AcousticMeshComponentBuilder *v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::mutex *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  const void **EmptyString;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::string *v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unsigned int *v54;
  unsigned int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  const void **v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v69[8];
  __int128 v70;
  _BYTE v71[24];
  std::mutex *v72;
  std::__shared_weak_count *v73;
  _BYTE __p[24];
  std::string v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  _BYTE v79[48];
  std::string v80;
  std::string v81;
  __int128 v82;
  std::string v83;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = realityio::AcousticMeshComponentBuilder::kOutputName((realityio::AcousticMeshComponentBuilder *)a1);
  v76 = 0;
  v77 = 0;
  v5 = *(std::__shared_weak_count **)(v3 + 24);
  if (v5)
  {
    v77 = std::__shared_weak_count::lock(v5);
    if (v77)
      v76 = *(_QWORD *)(v3 + 16);
  }
  MEMORY[0x2348B2764](&v78, v4);
  v6 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(v3 + 8), &v76);
  if (v6 == v7)
  {
    std::operator+<char>();
    v19 = std::string::append(&v80, ") at prim path (");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    v22 = *(char *)(String + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)String;
    else
      v23 = *(const std::string::value_type **)String;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(String + 23);
    else
      v24 = *(_QWORD *)(String + 8);
    v25 = std::string::append(&v81, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__r.__words[2];
    v82 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)&v82, ")");
    goto LABEL_22;
  }
  v8 = 1;
  v9 = v6;
  do
  {
    v9 = (_QWORD *)*v9;
    --v8;
  }
  while (v9 != v7);
  if (v8)
  {
    std::operator+<char>();
    v10 = std::string::append(&v80, ") at prim path (");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v12;
    else
      v14 = *(const std::string::value_type **)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    v16 = std::string::append(&v81, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__r.__words[2];
    v82 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)&v82, ") because more than one connected builder produced the same output type");
LABEL_22:
    v27 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v27;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v28 = (realityio::AcousticMeshComponentBuilder *)realityio::DetailedError::DetailedError(v79, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v70 = *(_OWORD *)v79;
    *(_OWORD *)v71 = *(_OWORD *)&v79[16];
    *(_QWORD *)&v71[15] = *(_QWORD *)&v79[31];
    v29 = v79[39];
    memset(&v79[16], 0, 24);
    v69[0] = 0;
    v71[23] = v29;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v83.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v82);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    goto LABEL_71;
  }
  v30 = v6[5];
  v32 = *(std::mutex **)(v30 + 16);
  v31 = *(std::__shared_weak_count **)(v30 + 24);
  v72 = v32;
  v73 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  if ((v6[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v6[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
  std::mutex::lock(v32 + 1);
  v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v32->__m_.__opaque[32], EmptyString);
  if (&v32->__m_.__opaque[40] == (char *)v36)
  {
    std::operator+<char>();
    v42 = std::string::append(&v80, "\" does not exist in the builder outputs");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v82, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)&v81);
    *(_OWORD *)&v79[8] = v82;
    *(_OWORD *)&v79[24] = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
    *(_QWORD *)&v79[39] = *(std::string::size_type *)((char *)&v83.__r_.__value_.__r.__words[1] + 7);
    v44 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    memset(&v83, 0, sizeof(v83));
    v79[0] = 0;
    v79[47] = v44;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
  else
  {
    v37 = *(_QWORD *)(v36 + 56);
    v39 = *(_QWORD *)(v37 + 8);
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v79[0] = 1;
    *(_QWORD *)&v79[8] = v39;
    *(_QWORD *)&v79[16] = v38;
  }
  std::mutex::unlock(v32 + 1);
  if (v79[0])
  {
    v45 = *(_QWORD *)&v79[8];
    v46 = *(std::__shared_weak_count **)&v79[16];
    if (*(_QWORD *)&v79[16])
    {
      v47 = (unint64_t *)(*(_QWORD *)&v79[16] + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldxr(v47);
      while (__stxr(v49 + 1, v47));
      __p[0] = 1;
      *(_QWORD *)&__p[8] = v45;
      *(_QWORD *)&__p[16] = v46;
      do
        v50 = __ldaxr(v47);
      while (__stlxr(v50 - 1, v47));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      __p[0] = 1;
      *(_QWORD *)&__p[8] = *(_QWORD *)&v79[8];
      *(_QWORD *)&__p[16] = 0;
    }
  }
  else
  {
    v82 = *(_OWORD *)&v79[8];
    if ((v79[47] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)&v79[24], *(std::string::size_type *)&v79[32]);
    else
      v83 = *(std::string *)&v79[24];
    __p[0] = 0;
    *(_OWORD *)&__p[8] = v82;
    v75 = v83;
  }
  realityio::Result<std::shared_ptr<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentDataT>,realityio::DetailedError>::~Result((uint64_t)v79);
  if (v73)
  {
    v51 = &v73->__shared_owners_;
    do
      v52 = __ldaxr((unint64_t *)v51);
    while (__stlxr(v52 - 1, (unint64_t *)v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (__p[0])
  {
    v53 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v69[0] = 1;
    v70 = v53;
  }
  else
  {
    *(_OWORD *)v79 = *(_OWORD *)&__p[8];
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)&v79[16], v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    else
      *(std::string *)&v79[16] = v75;
    v69[0] = 0;
    v70 = *(_OWORD *)v79;
    *(_OWORD *)v71 = *(_OWORD *)&v79[16];
    *(_QWORD *)&v71[16] = *(_QWORD *)&v79[32];
  }
  v28 = (realityio::AcousticMeshComponentBuilder *)realityio::Result<std::shared_ptr<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
LABEL_71:
  if ((v78 & 7) != 0)
  {
    v54 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = v77;
  if (v77)
  {
    v57 = (unint64_t *)&v77->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v69[0])
  {
    v60 = *(_QWORD *)(v2 + 16);
    v59 = *(std::__shared_weak_count **)(v2 + 24);
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = (const void **)realityio::AcousticMeshComponentBuilder::kOutputName(v28);
    std::mutex::lock((std::mutex *)(v60 + 64));
    if (v60 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v60 + 40, v63))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v60 + 40), v63);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v60, (unsigned __int8 *)v63);
    std::mutex::unlock((std::mutex *)(v60 + 64));
    if (v59)
    {
      v64 = (unint64_t *)&v59->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  v66 = **(_QWORD **)(a1 + 8);
  v67 = realityio::EntityBuilder::kInputName(v28);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v66, v67, (uint64_t)v79);
  if (v79[0])
  {
    *(_QWORD *)__p = *(_QWORD *)&v79[8];
    if (*(_QWORD *)&v79[8])
    {
      RERetain();
      if (*(_QWORD *)__p)
      {
        REAcousticMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
    }
  }
  else
  {
    *(_QWORD *)__p = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v79);
  return realityio::Result<std::shared_ptr<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentDataT>,realityio::DetailedError>::~Result((uint64_t)v69);
}

void sub_230067BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  unsigned int *v27;
  unsigned int v28;

  realityio::Result<std::shared_ptr<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentDataT>,realityio::DetailedError>::~Result((uint64_t)&a17);
  if ((a26 & 7) != 0)
  {
    v27 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::Result<std::shared_ptr<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentDataT>,realityio::DetailedError>::~Result(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t realityio::GeomSubsetBuilder::kGeomSubsetOutputName(realityio::GeomSubsetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255E548F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E548F0))
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "geom_subset");
    _MergedGlobals_20 = (uint64_t)v3;
    __cxa_guard_release(&qword_255E548F0);
  }
  return _MergedGlobals_20;
}

void sub_230067E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E548F0);
  _Unwind_Resume(a1);
}

realityio::GeomSubsetBuilder *realityio::GeomSubsetBuilder::GeomSubsetBuilder(realityio::GeomSubsetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "GeomSubsetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kGeomSubsetBuilderIdentifier);
  realityio::generateGeomSubsetDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF10E8;
  v21 = v20;
  v18[0] = &off_24FDF1168;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF1070;
  realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT((realityio::GeomSubsetBuilder *)((char *)this + 280));
  return this;
}

void sub_230068054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::GeomSubsetBuilder::run(realityio::GeomSubsetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  realityio::Inputs *size;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  realityio::MaterialAssetBuilder *PrimAtPath;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t String;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  __int128 v31;
  realityio *v32;
  uint64_t v33;
  std::mutex *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  std::string::size_type v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  const void **EmptyString;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  unsigned int *v58;
  unsigned int v59;
  realityio::GeomSubsetBuilder *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  const void **v65;
  _QWORD *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t result;
  __int128 v79;
  int v80;
  int v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  std::mutex *v85;
  uint64_t Text;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  std::string::size_type v91;
  std::string v92;
  uint64_t v93;
  _BYTE v94[8];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string v98;
  std::string v99;
  void *__p[2];
  std::string v101;
  _BYTE buf[56];
  uint64_t v103;
  uint64_t v104;

  size = a2;
  v104 = *MEMORY[0x24BDAC8D0];
  v5 = (realityio::Inputs *)((char *)a2 + 32);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, v5);
  v8 = realityio::MaterialAssetBuilder::kMaterialDataName(PrimAtPath);
  v89 = 0uLL;
  v9 = (std::__shared_weak_count *)*((_QWORD *)size + 3);
  if (v9)
  {
    *((_QWORD *)&v89 + 1) = std::__shared_weak_count::lock(v9);
    if (*((_QWORD *)&v89 + 1))
      *(_QWORD *)&v89 = *((_QWORD *)size + 2);
  }
  MEMORY[0x2348B2764](&v90, v8);
  v10 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)size + 1), &v89);
  if (v10 == v11)
  {
    std::operator+<char>();
    v23 = std::string::append(&v98, ") at prim path (");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
    v26 = *(char *)(String + 23);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)String;
    else
      v27 = *(const std::string::value_type **)String;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(String + 23);
    else
      v28 = *(_QWORD *)(String + 8);
    v29 = std::string::append(&v99, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v92, ")");
    goto LABEL_22;
  }
  v12 = 1;
  v13 = v10;
  do
  {
    v13 = (_QWORD *)*v13;
    --v12;
  }
  while (v13 != v11);
  if (v12)
  {
    std::operator+<char>();
    v14 = std::string::append(&v98, ") at prim path (");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
    v17 = *(char *)(v16 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)v16;
    else
      v18 = *(const std::string::value_type **)v16;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v16 + 23);
    else
      v19 = *(_QWORD *)(v16 + 8);
    v20 = std::string::append(&v99, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v92, ") because more than one connected builder produced the same output type");
LABEL_22:
    v31 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[0] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v31;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v32 = (realityio *)realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v33 = *(_QWORD *)buf;
    v34 = *(std::mutex **)&buf[16];
    v2 = buf[39];
    memset(&buf[16], 0, 24);
    if (v101.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  v46 = v10[5];
  v34 = *(std::mutex **)(v46 + 16);
  v47 = *(std::__shared_weak_count **)(v46 + 24);
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  v92.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(p_shared_owners);
    while (__stxr(v49 + 1, p_shared_owners));
  }
  if ((v10[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v10[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v34, EmptyString, (uint64_t)buf);
  v80 = buf[0];
  if (buf[0])
  {
    *(_QWORD *)&v79 = *(_QWORD *)&buf[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&buf[8];
    v32 = (realityio *)&v101;
    if ((buf[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
      if (buf[0])
        v82 = 0;
      else
        v82 = buf[47] < 0;
      v81 = v82;
    }
    else
    {
      v81 = 0;
      v101 = *(std::string *)&buf[24];
    }
    v79 = *(_OWORD *)__p;
    size = (realityio::Inputs *)v101.__r_.__value_.__l.__size_;
    v34 = (std::mutex *)v101.__r_.__value_.__r.__words[0];
    v2 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    if (v81)
    {
      v87 = *(_OWORD *)__p;
      operator delete(*(void **)&buf[24]);
      v79 = v87;
    }
  }
  if (v47)
  {
    v83 = (unint64_t *)&v47->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      v88 = v79;
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v79 = v88;
    }
  }
  v33 = v79;
  if (v80)
  {
    v35 = 0;
  }
  else
  {
    *(_OWORD *)buf = v79;
    if ((v2 & 0x80) == 0)
    {
LABEL_30:
      v35 = 1;
      goto LABEL_31;
    }
    std::string::__init_copy_ctor_external((std::string *)&buf[16], (const std::string::value_type *)v34, (std::string::size_type)size);
    v33 = *(_QWORD *)buf;
    v85 = *(std::mutex **)&buf[16];
    v2 = buf[39];
    operator delete(v34);
    v35 = 1;
    v34 = v85;
  }
LABEL_31:
  if ((v90 & 7) != 0)
  {
    v36 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v33)
    v41 = v35;
  else
    v41 = 1;
  if (v41 == 1)
  {
    v42 = *(id *)(realityio::logObjects(v32) + 24);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v94, __p);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = Text;
      _os_log_error_impl(&dword_22FF26000, v42, OS_LOG_TYPE_ERROR, "Stopping operation to set material shader because it didn't exist on GeomSubset prim \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    }

    if (v2 < 0)
      v43 = v35;
    else
      v43 = 0;
    if (v43 == 1)
      operator delete(v34);
  }
  else
  {
    v44 = *(_QWORD *)(v33 + 8);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v99.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9D28] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v99);
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, (uint64_t)buf);
    if (buf[0])
    {
      *(_OWORD *)__p = *(_OWORD *)&buf[8];
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[24];
      v45 = *(_QWORD *)&buf[40];
    }
    else
    {
      *(_OWORD *)__p = v89;
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v90;
      v45 = v91;
    }
    v101.__r_.__value_.__r.__words[2] = v45;
    if (v45)
    {
      v51 = (unint64_t *)(v45 - 16);
      if (v101.__r_.__value_.__l.__size_)
        v51 = (unint64_t *)v101.__r_.__value_.__l.__size_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)buf);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v89);
    if ((v93 & 7) != 0)
    {
      v53 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
      do
        v54 = __ldxr(v53);
      while (__stlxr(v54 - 2, v53));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92.__r_.__value_.__r.__words[2]);
    if (v92.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v92.__r_.__value_.__l.__size_);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v94, (uint64_t)&v89);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v92);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v94, &v98);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(buf, &v92);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[4], (_DWORD *)v92.__r_.__value_.__r.__words + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[8], &v98);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[12], (_DWORD *)v98.__r_.__value_.__r.__words + 1);
    *(_OWORD *)&buf[16] = *(_OWORD *)__p;
    *(std::string *)&buf[32] = v101;
    if (v101.__r_.__value_.__r.__words[2])
    {
      v55 = (unint64_t *)(v101.__r_.__value_.__r.__words[2] - 16);
      if (*(_QWORD *)&buf[40])
        v55 = *(unint64_t **)&buf[40];
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v103 = v44;
    if (v44)
      RERetain();
    v57 = (char *)this + 280;
    realityio::GeomSubsetBuilder::SubsetDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)buf);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
    if ((BYTE8(v90) & 7) != 0)
    {
      v58 = (unsigned int *)(*((_QWORD *)&v90 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
    v60 = (realityio::GeomSubsetBuilder *)*((_QWORD *)&v89 + 1);
    if (*((_QWORD *)&v89 + 1))
      v60 = (realityio::GeomSubsetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v89 + 1));
    v62 = *((_QWORD *)this + 2);
    v61 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v89 = v62;
    *((_QWORD *)&v89 + 1) = v61;
    if (v61)
    {
      v63 = (unint64_t *)&v61->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(v60);
    std::mutex::lock((std::mutex *)(v62 + 64));
    v66 = operator new(0x28uLL);
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = &off_24FDF1238;
    *v66 = &off_24FDF11E8;
    v66[4] = v57;
    *(_QWORD *)buf = v66 + 3;
    *(_QWORD *)&buf[8] = v66;
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
    v67 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v62 + 40), v65, (uint64_t)&std::piecewise_construct, (__int128 **)&v92);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v68 = (std::__shared_weak_count *)v67[8];
    v67[7] = (uint64_t)(v66 + 3);
    v67[8] = (uint64_t)v66;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v62, (unsigned __int8 *)v65, (uint64_t)v65);
    std::mutex::unlock((std::mutex *)(v62 + 64));
    if (v61)
    {
      v74 = (unint64_t *)&v61->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    MEMORY[0x2348B1D44](&v99);
  }
  if ((v97 & 7) != 0)
  {
    v76 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
  result = v95;
  if (v95)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
  return result;
}

void sub_2300689A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t realityio::GeomSubsetBuilder::SubsetDataT::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 8, (int *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 12);
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 16);
    v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  if (v5 != v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a2 + 56) = v5;
  }
  return a1;
}

void realityio::GeomSubsetBuilder::clear(realityio::GeomSubsetBuilder *this, realityio::Inputs *a2)
{
  int v2;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  std::mutex *v9;
  uint64_t v10;
  char *v11;
  realityio::GeomSubsetBuilder *v12;
  std::string *v13;
  __int128 v14;
  std::string::size_type v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::mutex *v31;
  std::__shared_weak_count *v32;
  std::string v33;
  __int128 v34;
  std::string::size_type v35;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v31 = v5;
  v32 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(this);
  v9 = v5 + 1;
  std::mutex::lock(v5 + 1);
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v5->__m_.__opaque[32], v8);
  v11 = &v5->__m_.__opaque[40];
  if (&v5->__m_.__opaque[40] == (char *)v10)
  {
    std::operator+<char>();
    v13 = std::string::append(&v33, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v35 = v13->__r_.__value_.__r.__words[2];
    v34 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v27, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v34);
    v26 = v27;
    v15 = *((_QWORD *)&v28 + 1);
    v8 = (const void **)v28;
    v2 = SBYTE7(v29);
    *(_QWORD *)&v29 = 0;
    v28 = 0uLL;
    if (SHIBYTE(v35) < 0)
      operator delete((void *)v34);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    std::mutex::unlock(v9);
    v27 = v26;
    if (v2 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v28, (const std::string::value_type *)v8, v15);
      v16 = (const void **)v28;
      LOBYTE(v2) = BYTE7(v29);
      operator delete(v8);
      v8 = v16;
    }
  }
  else
  {
    std::mutex::unlock(v5 + 1);
  }
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v11 == (char *)v10)
  {
    if ((v2 & 0x80) != 0)
      operator delete(v8);
  }
  else
  {
    v20 = *((_QWORD *)this + 2);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v27 = v20;
    *((_QWORD *)&v27 + 1) = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(v12);
    std::mutex::lock((std::mutex *)(v20 + 64));
    if (v20 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v20 + 40, v23))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v20 + 40), v23);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v20, (unsigned __int8 *)v23);
    std::mutex::unlock((std::mutex *)(v20 + 64));
    if (v19)
    {
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)&v27);
    realityio::GeomSubsetBuilder::SubsetDataT::operator=((uint64_t)this + 280, (uint64_t)&v27);
    realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)&v27);
  }
}

void sub_230068EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void realityio::GeomSubsetBuilder::~GeomSubsetBuilder(realityio::GeomSubsetBuilder *this)
{
  realityio::GeomSubsetBuilder::~GeomSubsetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::GeomSubsetBuilder *v2;
  uint64_t v3;
  realityio::GeomSubsetBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDF1070;
  realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder *)((char *)this + 280));
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::GeomSubsetBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::GeomSubsetBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::GeomSubsetBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::GeomSubsetBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::GeomSubsetBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::GeomSubsetBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

realityio::GeomSubsetBuilder::SubsetDataT *realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT(realityio::GeomSubsetBuilder::SubsetDataT *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  return this;
}

void realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT(realityio::GeomSubsetBuilder::SubsetDataT *this)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 7);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF10E8;
  return result;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF10E8;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::MaterialAssetBuilder::kMaterialDataName((realityio::MaterialAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v14) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 22, (uint64_t)realityio::materialBindingCallback, (int *)&v14, &v16);
  v14 = v16;
  v15 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2300692D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF1168;
  return result;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF1168;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::GeomSubsetBuilder::kGeomSubsetOutputName((realityio::GeomSubsetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 9, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230069580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF11E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF11E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::generateSceneLibraryDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t Data;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17[3];
  __int128 v18;
  _QWORD *v19[3];
  __int128 v20;
  _QWORD *v21[3];
  _QWORD *v22[3];
  __int128 v23;
  _QWORD *v24[3];
  uint64_t v25;
  uint64_t v26;
  void ***v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54908);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54908))
  {
    v16 = a1;
    v7 = operator new();
    v8 = operator new();
    memset(v22, 0, sizeof(v22));
    v9 = operator new();
    v10 = operator new();
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v12 = *(_QWORD *)(Data + 208);
    *(_QWORD *)v10 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      v12 = *(_QWORD *)v10;
      if ((v14 & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v10 = v12;
      }
    }
    *(_BYTE *)(v10 + 8) = v12 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v18, v10);
    v28 = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v19, &v28, 1uLL);
    memset(v17, 0, sizeof(v17));
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v19, v17);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v20, v9);
    v29 = v20;
    v20 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v21, &v29, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v22, v21);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v23, v8);
    v30 = v23;
    v23 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v24, &v30, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v24);
    v15 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v25, v7);
    _MergedGlobals_21 = v25;
    unk_255E54900 = v26;
    v25 = 0;
    v26 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v15);
    v27 = (void ***)v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    v27 = (void ***)v21;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v20);
    v27 = v17;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    v17[0] = (void **)v19;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v17);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    v21[0] = v22;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
    __cxa_guard_release(&qword_255E54908);
    a1 = v16;
  }
  v4 = unk_255E54900;
  *a1 = _MergedGlobals_21;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2300699D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x2348B4E1C](v27, 0x1060C40E5A1EACFLL);
  MEMORY[0x2348B4E1C](v26, 0x10A1C402FEF67C7);
  a21 = (void **)&a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  MEMORY[0x2348B4E1C](v25, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v24, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54908);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfValueTypeNameGetTypeID()
{
  if (RIOPxrSdfValueTypeNameGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfValueTypeNameGetTypeID::onceToken, &__block_literal_global_12);
  return RIOPxrSdfValueTypeNameGetTypeID::typeID;
}

uint64_t RIOPxrSdfValueTypeNameCreateBool()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(Data);
}

uint64_t RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(_QWORD *a1)
{
  uint64_t result;

  if (RIOPxrSdfValueTypeNameGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfValueTypeNameGetTypeID::onceToken, &__block_literal_global_12);
  result = _CFRuntimeCreateInstance();
  if (result)
    *(_QWORD *)(result + 16) = *a1;
  return result;
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 2);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 4);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 3);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 5);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 6);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 16);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 17);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 18);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 7);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 19);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 20);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 21);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 8);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 22);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 23);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 24);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 25);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 26);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 27);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 28);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 29);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 30);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 47);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 48);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 49);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 50);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 51);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 52);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 13);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 14);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 15);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 37);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 38);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 39);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 31);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 32);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 33);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3h()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 34);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3f()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 35);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 36);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuath()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 40);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatf()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 41);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatd()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 42);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 43);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 44);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 45);
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4d()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 46);
}

uint64_t RIOPxrSdfValueTypeNameCreateString()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 10);
}

uint64_t RIOPxrSdfValueTypeNameCreateToken()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 11);
}

uint64_t RIOPxrSdfValueTypeNameCreateBoolArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 56);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 58);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 61);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 60);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 57);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 62);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 70);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 71);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 72);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 94);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 95);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 96);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 88);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 89);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 90);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 91);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 92);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 93);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalfArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 63);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 73);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 74);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 75);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloatArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 64);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 76);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 77);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 78);
}

uint64_t RIOPxrSdfValueTypeNameCreateDoubleArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 65);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 79);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 80);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4Array()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 81);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 82);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 83);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 84);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 85);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 86);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 87);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 104);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 105);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 106);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3hArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 107);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3fArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 108);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 109);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuathArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 97);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatfArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 98);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatdArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 99);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 100);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 101);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 102);
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4dArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 103);
}

uint64_t RIOPxrSdfValueTypeNameCreateStringArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 67);
}

uint64_t RIOPxrSdfValueTypeNameCreateTokenArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 68);
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPath()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 12);
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPathArray()
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;

  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>((_QWORD *)Data + 69);
}

CFStringRef RIOPxrSdfValueTypeNameCopyCppTypeName(uint64_t a1)
{
  uint64_t CPPTypeName;
  const char *v2;

  if (!a1)
    return &stru_24FDFD990;
  CPPTypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
  if (*(char *)(CPPTypeName + 23) >= 0)
    v2 = (const char *)CPPTypeName;
  else
    v2 = *(const char **)CPPTypeName;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t RIOPxrSdfValueTypeNameCopyToken(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
    result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v4);
    if ((v4 & 7) != 0)
    {
      v2 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

uint64_t _RIOPxrSdfValueTypeNameCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t _RIOPxrSdfValueTypeNameCFHash(char *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
}

CFStringRef _RIOPxrSdfValueTypeNameCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfValueTypeName %p>"), a1);
}

CFStringRef _RIOPxrSdfValueTypeNameCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfValueTypeName %p>"), a1);
}

void realityio::BuilderDependencyDAG::SocketQuery::~SocketQuery(realityio::BuilderDependencyDAG::SocketQuery *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 4);
}

void realityio::BuilderDependencyDAG::getDirectlyProvidingBuilders(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(a3);
  v6 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v15);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  for (i = (_QWORD *)v9[18]; i; i = (_QWORD *)*i)
  {
    v15 = 0;
    v16 = 0;
    v11 = (std::__shared_weak_count *)i[4];
    if (v11)
    {
      v16 = std::__shared_weak_count::lock(v11);
      if (v16)
        v15 = i[3];
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(a3, &v15, (uint64_t)&v15);
    v12 = v16;
    if (v16)
    {
      p_shared_owners = &v16->__shared_owners_;
      do
        v14 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v14 - 1, (unint64_t *)p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_23006B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(a3);
  v6 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v15);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  for (i = (_QWORD *)v9[23]; i; i = (_QWORD *)*i)
  {
    v15 = 0;
    v16 = 0;
    v11 = (std::__shared_weak_count *)i[4];
    if (v11)
    {
      v16 = std::__shared_weak_count::lock(v11);
      if (v16)
        v15 = i[3];
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(a3, &v15, (uint64_t)&v15);
    v12 = v16;
    if (v16)
    {
      p_shared_owners = &v16->__shared_owners_;
      do
        v14 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v14 - 1, (unint64_t *)p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_23006B58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::generateBuilderProviderInfo(realityio::BuilderDependencyDAG *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  _QWORD *j;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
  {
    for (j = (_QWORD *)i[18]; j; j = (_QWORD *)*j)
    {
      v41 = 0;
      v42 = 0;
      v5 = (std::__shared_weak_count *)i[3];
      if (v5)
      {
        v42 = std::__shared_weak_count::lock(v5);
        if (v42)
          v41 = i[2];
      }
      v6 = j[2];
      v43 = v6;
      if ((v6 & 7) != 0)
      {
        v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 2, v7));
        if ((v8 & 1) == 0)
          v43 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = 0;
      v39 = 0;
      v9 = (std::__shared_weak_count *)j[4];
      if (v9)
      {
        v39 = std::__shared_weak_count::lock(v9);
        if (v39)
          v38 = j[3];
      }
      v10 = j[5];
      v40 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v40 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(&v33, &v41, &v38);
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>((_QWORD *)a2, (uint64_t)&v33);
      if ((v37 & 7) != 0)
      {
        v13 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      v15 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if ((v35 & 7) != 0)
      {
        v18 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      v20 = v34;
      if (v34)
      {
        v21 = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if ((v40 & 7) != 0)
      {
        v23 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      v25 = v39;
      if (v39)
      {
        v26 = (unint64_t *)&v39->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((v43 & 7) != 0)
      {
        v28 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      v30 = v42;
      if (v42)
      {
        v31 = (unint64_t *)&v42->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
}

void sub_23006B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;

  std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>((uint64_t)&a9);
  if ((a17 & 7) != 0)
  {
    v20 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v22 = *(_QWORD *)(v18 - 40);
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v18 - 56);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int8x8_t *v10;
  uint64_t v11;
  int8x8_t *v12;
  int8x8_t *v13;
  int8x8_t *v14;
  uint64_t v15;
  int8x8_t *v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t *v23;
  int8x8_t *v24;
  int8x8_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t *v32;
  int v33;
  _QWORD *v34;
  uint8x8_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  unsigned int v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  int8x8_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  std::__shared_weak_count *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t ***v77;
  uint64_t **i;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  int8x8_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint8x8_t v95;
  unint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint8x8_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  float v121;
  float v122;
  _BOOL8 v123;
  unint64_t v124;
  unint64_t v125;
  int8x8_t prime;
  void *v127;
  void *v128;
  uint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  uint8x8_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int8x8_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  void *v154;
  void *v155;
  _QWORD *exception;
  _QWORD *v157;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  unint64_t v166;
  uint64_t v167;
  float *v168;
  _QWORD v169[2];
  _QWORD v170[2];
  int v171;
  char v172;
  _QWORD v173[2];
  __int128 v174;
  int v175;
  char v176;
  std::__shared_weak_count *v177[2];
  __int128 v178;
  int v179;
  uint64_t v180;
  int8x8_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184[10];
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  _OWORD v190[2];
  int v191;
  _BYTE v192[32];
  int v193;
  _BYTE v194[32];
  int v195;
  _BYTE v196[32];
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  _QWORD v202[2];
  _QWORD v203[2];
  int v204;
  char v205;
  _QWORD v206[2];
  __int128 v207;
  int v208;
  char v209;
  uint64_t v210;
  __int128 v211;
  char v212;

  v210 = a3;
  *((_QWORD *)&v178 + 1) = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)a4);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v162 = a4;
  *(_QWORD *)(a4 + 16) = 0;
  v177[1] = 0;
  *(_QWORD *)&v178 = 0;
  v177[0] = 0;
  *(_QWORD *)&v189 = v177;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
  v6 = (_QWORD *)a1[2];
  v161 = a1 + 2;
  v163 = a1;
  if (!v6)
    goto LABEL_116;
  do
  {
    v211 = 0uLL;
    v7 = (std::__shared_weak_count *)v6[3];
    if (v7)
    {
      *((_QWORD *)&v211 + 1) = std::__shared_weak_count::lock(v7);
      if (*((_QWORD *)&v211 + 1))
        *(_QWORD *)&v211 = v6[2];
    }
    realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()((uint64_t)v177, (uint64_t)&v210, (uint64_t)&v211);
    if (v6[9] == *((_QWORD *)&v178 + 1))
    {
      v8 = v6[8];
      if (v8)
      {
        v159 = v6;
        v166 = v6[7];
        v167 = v6[6];
        v164 = v177[1];
        v165 = v177[0];
        while (2)
        {
          v9 = *(_QWORD *)(v8 + 16);
          v10 = (int8x8_t *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>(v167, v166, v9);
          v8 = v11;
          v12 = (int8x8_t *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v165, (unint64_t)v164, v9);
          v14 = v12;
          if (v10 == (int8x8_t *)v8)
          {
            v15 = 0;
          }
          else
          {
            v15 = 0;
            v16 = v10;
            do
            {
              ++v15;
              v16 = (int8x8_t *)*v16;
            }
            while (v16 != (int8x8_t *)v8);
          }
          if (v12 == v13)
          {
            v17 = 0;
          }
          else
          {
            v17 = 0;
            v18 = v12;
            do
            {
              ++v17;
              v18 = (int8x8_t *)*v18;
            }
            while (v18 != v13);
          }
          if (v15 == v17)
          {
            while (v10 != (int8x8_t *)v8)
            {
              if ((*(_QWORD *)&v10[2] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)&v14[2] & 0xFFFFFFFFFFFFFFF8)
                || !realityio::operator==((uint64_t)&v10[3], v14 + 3))
              {
                if (v10 != (int8x8_t *)v8)
                {
                  v19 = 0;
                  v20 = 2;
                  v21 = v10;
                  do
                  {
                    v22 = v20;
                    ++v19;
                    v21 = (int8x8_t *)*v21;
                    ++v20;
                  }
                  while (v21 != (int8x8_t *)v8);
                  if (v19 != 1)
                  {
                    v23 = v14;
                    do
                    {
                      v23 = (int8x8_t *)*v23;
                      --v22;
                    }
                    while (v22 > 1);
                    v24 = v10;
                    while (1)
                    {
                      v25 = v10;
                      if (v24 != v10)
                      {
                        v26 = *(_QWORD *)&v24[2] & 0xFFFFFFFFFFFFFFF8;
                        v25 = v10;
                        while ((*(_QWORD *)&v25[2] & 0xFFFFFFFFFFFFFFF8) != v26
                             || !realityio::operator==((uint64_t)&v25[3], v24 + 3))
                        {
                          v25 = (int8x8_t *)*v25;
                          if (v25 == v24)
                            goto LABEL_38;
                        }
                      }
                      if (v25 == v24)
                      {
LABEL_38:
                        if (v14 == v23)
                          goto LABEL_54;
                        v27 = 0;
                        v28 = (uint64_t)&v24[3];
                        v29 = *(_QWORD *)&v24[2] & 0xFFFFFFFFFFFFFFF8;
                        v30 = v14;
                        do
                        {
                          if (v29 == (*(_QWORD *)&v30[2] & 0xFFFFFFFFFFFFFFF8))
                            v27 += realityio::operator==((uint64_t)&v24[3], v30 + 3);
                          v30 = (int8x8_t *)*v30;
                        }
                        while (v30 != v23);
                        if (!v27)
                          goto LABEL_54;
                        v24 = (int8x8_t *)*v24;
                        v31 = 1;
                        if (v24 != (int8x8_t *)v8)
                        {
                          v32 = v24;
                          do
                          {
                            if (v29 == (*(_QWORD *)&v32[2] & 0xFFFFFFFFFFFFFFF8))
                              v31 += realityio::operator==(v28, v32 + 3);
                            v32 = (int8x8_t *)*v32;
                          }
                          while (v32 != (int8x8_t *)v8);
                        }
                        if (v31 != v27)
                          goto LABEL_54;
                      }
                      else
                      {
                        v24 = (int8x8_t *)*v24;
                      }
                      if (v24 == (int8x8_t *)v8)
                        goto LABEL_51;
                    }
                  }
                  goto LABEL_54;
                }
                break;
              }
              v10 = (int8x8_t *)*v10;
              v14 = (int8x8_t *)*v14;
            }
LABEL_51:
            if (v8)
              continue;
            v33 = 1;
          }
          else
          {
LABEL_54:
            v33 = 0;
          }
          break;
        }
        a1 = v163;
        v6 = v159;
      }
      else
      {
        v33 = 1;
      }
    }
    else
    {
      v33 = 0;
    }
    if (v6[14] != v183)
    {
LABEL_80:
      v37 = 0;
      goto LABEL_81;
    }
    v34 = v6 + 13;
    v35 = (uint8x8_t)vcnt_s8(v181);
    v35.i16[0] = vaddlv_u8(v35);
    v36 = *(_QWORD *)&v181 - 1;
LABEL_59:
    v34 = (_QWORD *)*v34;
    v37 = v34 == 0;
    if (v34 && *(_QWORD *)&v181)
    {
      v38 = v34[2] & 0xFFFFFFFFFFFFFFF8;
      v39 = bswap64(0x9E3779B97F4A7C55 * v38);
      if (v35.u32[0] > 1uLL)
      {
        v40 = v39;
        if (v39 >= *(_QWORD *)&v181)
          v40 = v39 % *(_QWORD *)&v181;
      }
      else
      {
        v40 = v39 & v36;
      }
      v41 = *(uint64_t ***)(v180 + 8 * v40);
      if (v41)
      {
        v42 = *v41;
        if (v42)
        {
          while (1)
          {
            v43 = v42[1];
            if (v39 == v43)
            {
              if ((v42[2] & 0xFFFFFFFFFFFFFFF8) == v38)
              {
                if (*((_DWORD *)v34 + 6) != *((_DWORD *)v42 + 6)
                  || (v34[4] & 0xFFFFFFFFFFFFFFF8) != (v42[4] & 0xFFFFFFFFFFFFFFF8))
                {
                  break;
                }
                goto LABEL_59;
              }
            }
            else
            {
              if (v35.u32[0] > 1uLL)
              {
                if (v43 >= *(_QWORD *)&v181)
                  v43 %= *(_QWORD *)&v181;
              }
              else
              {
                v43 &= v36;
              }
              if (v43 != v40)
                goto LABEL_80;
            }
            v42 = (uint64_t *)*v42;
            if (!v42)
              goto LABEL_80;
          }
        }
      }
    }
LABEL_81:
    v44 = atomic_load((unsigned int *)(a1[16] + 28));
    if (v44 == 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v189, "addBuildersAndResyncIODescriptorsCancel");
      realityio::ImportSession::CancelledException::CancelledException(exception, &v189);
    }
    if ((v33 & 1) != 0)
    {
      v45 = 0;
      LOBYTE(v206[0]) = 0;
    }
    else
    {
      v46 = v177[0];
      v47 = (unint64_t)v177[1];
      v177[0] = 0;
      v177[1] = 0;
      v206[0] = v46;
      v206[1] = v47;
      v207 = v178;
      v208 = v179;
      if (*((_QWORD *)&v178 + 1))
      {
        v48 = *(_QWORD *)(v178 + 8);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v48 >= v47)
            v48 %= v47;
        }
        else
        {
          v48 &= v47 - 1;
        }
        *((_QWORD *)&v46->__vftable + v48) = &v207;
        v45 = 1;
        v178 = 0uLL;
      }
      else
      {
        v45 = 1;
      }
    }
    v209 = v45;
    if (v37)
    {
      v49 = 0;
      LOBYTE(v202[0]) = 0;
    }
    else
    {
      v50 = v180;
      v51 = v181;
      v180 = 0;
      v181 = 0;
      v202[0] = v50;
      v202[1] = v51;
      v203[0] = v182;
      v203[1] = v183;
      v204 = v184[0];
      if (v183)
      {
        v52 = *(_QWORD *)(v182 + 8);
        if ((*(_QWORD *)&v51 & (*(_QWORD *)&v51 - 1)) != 0)
        {
          if (v52 >= *(_QWORD *)&v51)
            v52 %= *(_QWORD *)&v51;
        }
        else
        {
          v52 &= *(_QWORD *)&v51 - 1;
        }
        *(_QWORD *)(v50 + 8 * v52) = v203;
        v49 = 1;
        v182 = 0;
        v183 = 0;
      }
      else
      {
        v49 = 1;
      }
    }
    v205 = v49;
    realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(a1, (unint64_t *)&v211, (uint64_t)v206, (uint64_t)v202);
    if (v205)
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v202);
    if (!v33)
    {
      if (v209)
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v206);
LABEL_109:
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(v162, &v211);
      goto LABEL_110;
    }
    if (v209)
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v206);
    if (!v37)
      goto LABEL_109;
LABEL_110:
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&v180);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v177);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v6 = (_QWORD *)*v6;
  }
  while (v6);
LABEL_116:
  v56 = *a2;
  v57 = a2[1];
  if (*a2 != v57)
  {
    v160 = a1 + 12;
    v58 = a1 + 3;
    v168 = (float *)(a1 + 4);
    while (1)
    {
      v59 = (std::__shared_weak_count *)v56[1];
      v177[0] = (std::__shared_weak_count *)*v56;
      v177[1] = v59;
      if (v59)
      {
        p_shared_weak_owners = (unint64_t *)&v59->__shared_weak_owners_;
        do
          v61 = __ldxr(p_shared_weak_owners);
        while (__stxr(v61 + 1, p_shared_weak_owners));
      }
      v62 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v177);
      if (v177[1])
        std::__shared_weak_count::__release_weak(v177[1]);
      if (!v62)
        break;
LABEL_326:
      v56 += 2;
      if (v56 == v57)
        return;
    }
    v63 = atomic_load((unsigned int *)(a1[16] + 28));
    if (v63 == 1)
    {
      v157 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v177, "addBuildersAndResyncIODescriptorsCancel");
      realityio::ImportSession::CancelledException::CancelledException(v157, (__int128 *)v177);
    }
    v64 = (std::__shared_weak_count *)*v56;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v199, (_DWORD *)(*v56 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v200, (_DWORD *)&v64->__shared_owners_ + 1);
    (*(void (**)(uint64_t))(*(_QWORD *)*v56 + 24))(*v56);
    v66 = *v56;
    v65 = v56[1];
    if (v65)
    {
      v67 = (unint64_t *)(v65 + 16);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v177, &v199);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v177 + 1, &v200);
    v69 = v201;
    v177[1] = (std::__shared_weak_count *)v201;
    if ((v201 & 7) != 0)
    {
      v70 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 2, v70));
      v69 = (unint64_t)v177[1];
      if ((v71 & 1) == 0)
      {
        v69 = (unint64_t)v177[1] & 0xFFFFFFFFFFFFFFF8;
        v177[1] = (std::__shared_weak_count *)((unint64_t)v177[1] & 0xFFFFFFFFFFFFFFF8);
      }
    }
    *(_QWORD *)&v178 = v66;
    *((_QWORD *)&v178 + 1) = v65;
    v72 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v177[0])+ ((HIDWORD(v177[0])+ (unint64_t)LODWORD(v177[0])+ (HIDWORD(v177[0]) + (unint64_t)LODWORD(v177[0]))* (HIDWORD(v177[0]) + (unint64_t)LODWORD(v177[0]))) >> 1)));
    v73 = v69 & 0xFFFFFFFFFFFFFFF8;
    v74 = (bswap64(0x9E3779B97F4A7C55 * v73) - 0x61C8864680B583ABLL + (v72 << 6) + (v72 >> 2) - 62) ^ v72;
    v75 = a1[11];
    if (v75)
    {
      v76 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v76.i16[0] = vaddlv_u8(v76);
      if (v76.u32[0] > 1uLL)
      {
        v66 = v74;
        if (v74 >= v75)
          v66 = v74 % v75;
      }
      else
      {
        v66 = v74 & (v75 - 1);
      }
      v77 = *(uint64_t ****)(a1[10] + 8 * v66);
      if (v77)
      {
        for (i = *v77; i; i = (uint64_t **)*i)
        {
          v79 = (unint64_t)i[1];
          if (v79 == v74)
          {
            if (i[2] == (uint64_t *)v177[0] && ((unint64_t)i[3] & 0xFFFFFFFFFFFFFFF8) == v73)
              goto LABEL_210;
          }
          else
          {
            if (v76.u32[0] > 1uLL)
            {
              if (v79 >= v75)
                v79 %= v75;
            }
            else
            {
              v79 &= v75 - 1;
            }
            if (v79 != v66)
              break;
          }
        }
      }
    }
    v80 = operator new(0x30uLL);
    *(_QWORD *)&v189 = v80;
    *((_QWORD *)&v189 + 1) = v160;
    *v80 = 0;
    v80[1] = v74;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v80 + 4, v177);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v80 + 5, (_DWORD *)v177 + 1);
    v81 = (unint64_t)v177[1];
    v80[3] = v177[1];
    if ((v81 & 7) != 0)
    {
      v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 2, v82));
      if ((v83 & 1) == 0)
        v80[3] &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_OWORD *)v80 + 2) = v178;
    v178 = 0uLL;
    LOBYTE(v190[0]) = 1;
    v84 = (float)(unint64_t)(a1[13] + 1);
    v85 = *((float *)a1 + 28);
    if (v75 && (float)(v85 * (float)v75) >= v84)
    {
LABEL_201:
      v102 = *(_QWORD **)(a1[10] + 8 * v66);
      if (v102)
      {
        *(_QWORD *)v189 = *v102;
        *v102 = v189;
      }
      else
      {
        *(_QWORD *)v189 = a1[12];
        a1[12] = v189;
        *(_QWORD *)(a1[10] + 8 * v66) = v160;
        if (*(_QWORD *)v189)
        {
          v103 = *(_QWORD *)(*(_QWORD *)v189 + 8);
          if ((v75 & (v75 - 1)) != 0)
          {
            if (v103 >= v75)
              v103 %= v75;
          }
          else
          {
            v103 &= v75 - 1;
          }
          *(_QWORD *)(a1[10] + 8 * v103) = v189;
        }
      }
      *(_QWORD *)&v189 = 0;
      ++a1[13];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v189, 0);
      v65 = *((_QWORD *)&v178 + 1);
LABEL_210:
      if (v65)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v65);
      if (((uint64_t)v177[1] & 7) != 0)
      {
        v104 = (unsigned int *)((unint64_t)v177[1] & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v177);
      v106 = a1[15];
      v188 = v106;
      if (v106)
      {
        RERetain();
        v106 = v188;
      }
      memset(v190, 0, sizeof(v190));
      v189 = 0u;
      memset(v192, 0, sizeof(v192));
      v191 = 1065353216;
      v193 = 1065353216;
      memset(v194, 0, sizeof(v194));
      memset(v196, 0, sizeof(v196));
      v195 = 1065353216;
      v197 = 1065353216;
      v198 = v106;
      if (v106)
        RERetain();
      v107 = v57;
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v188);
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](&v189, v56);
      v109 = (std::__shared_weak_count *)*v56;
      v108 = (std::__shared_weak_count *)v56[1];
      if (v108)
      {
        v110 = (unint64_t *)&v108->__shared_weak_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v177[0] = v109;
      v177[1] = v108;
      realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode((uint64_t)&v178, (uint64_t)&v189);
      v112 = realityio::WeakBuilderPtrHash::operator()((uint64_t)v58, (unint64_t *)v177);
      v113 = v112;
      v114 = a1[1];
      if (v114)
      {
        v115 = (uint8x8_t)vcnt_s8((int8x8_t)v114);
        v115.i16[0] = vaddlv_u8(v115);
        v116 = v115.u32[0];
        if (v115.u32[0] > 1uLL)
        {
          v65 = v112;
          if (v112 >= v114)
            v65 = v112 % v114;
        }
        else
        {
          v65 = (v114 - 1) & v112;
        }
        v117 = *(_QWORD **)(*a1 + 8 * v65);
        if (v117)
        {
          v118 = (_QWORD *)*v117;
          if (*v117)
          {
            while (1)
            {
              v119 = v118[1];
              if (v119 == v113)
              {
                if (realityio::WeakBuilderPtrEqual::operator()((uint64_t)v168, v118 + 2, v177))
                  goto LABEL_294;
              }
              else
              {
                if (v116 > 1)
                {
                  if (v119 >= v114)
                    v119 %= v114;
                }
                else
                {
                  v119 &= v114 - 1;
                }
                if (v119 != v65)
                {
LABEL_238:
                  a1 = v163;
                  break;
                }
              }
              v118 = (_QWORD *)*v118;
              if (!v118)
                goto LABEL_238;
            }
          }
        }
      }
      v120 = operator new(0xD8uLL);
      *(_QWORD *)&v211 = v120;
      *((_QWORD *)&v211 + 1) = v161;
      *v120 = 0;
      v120[1] = v113;
      *((_OWORD *)v120 + 1) = *(_OWORD *)v177;
      v177[0] = 0;
      v177[1] = 0;
      realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode((uint64_t)(v120 + 4), (uint64_t)&v178);
      v212 = 1;
      v121 = (float)(*v58 + 1);
      v122 = *v168;
      if (v114 && (float)(v122 * (float)v114) >= v121)
        goto LABEL_285;
      v123 = (v114 & (v114 - 1)) != 0;
      if (v114 < 3)
        v123 = 1;
      v124 = v123 | (2 * v114);
      v125 = vcvtps_u32_f32(v121 / v122);
      if (v124 <= v125)
        prime = (int8x8_t)v125;
      else
        prime = (int8x8_t)v124;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v114 = a1[1];
      if (*(_QWORD *)&prime > v114)
        goto LABEL_251;
      if (*(_QWORD *)&prime < v114)
      {
        v133 = vcvtps_u32_f32((float)*v58 / *v168);
        if (v114 < 3 || (v134 = (uint8x8_t)vcnt_s8((int8x8_t)v114), v134.i16[0] = vaddlv_u8(v134), v134.u32[0] > 1uLL))
        {
          v133 = std::__next_prime(v133);
        }
        else
        {
          v135 = 1 << -(char)__clz(v133 - 1);
          if (v133 >= 2)
            v133 = v135;
        }
        if (*(_QWORD *)&prime <= v133)
          prime = (int8x8_t)v133;
        if (*(_QWORD *)&prime >= v114)
        {
          v114 = a1[1];
        }
        else
        {
          if (prime)
          {
LABEL_251:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v127 = operator new(8 * *(_QWORD *)&prime);
            v128 = (void *)*a1;
            *a1 = v127;
            if (v128)
              operator delete(v128);
            v129 = 0;
            a1[1] = prime;
            do
              *(_QWORD *)(*a1 + 8 * v129++) = 0;
            while (*(_QWORD *)&prime != v129);
            v130 = (_QWORD *)*v161;
            if (*v161)
            {
              v131 = v130[1];
              v132 = (uint8x8_t)vcnt_s8(prime);
              v132.i16[0] = vaddlv_u8(v132);
              if (v132.u32[0] > 1uLL)
              {
                if (v131 >= *(_QWORD *)&prime)
                  v131 %= *(_QWORD *)&prime;
              }
              else
              {
                v131 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*a1 + 8 * v131) = v161;
              v136 = (_QWORD *)*v130;
              if (*v130)
              {
                do
                {
                  v137 = v136[1];
                  if (v132.u32[0] > 1uLL)
                  {
                    if (v137 >= *(_QWORD *)&prime)
                      v137 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v137 &= *(_QWORD *)&prime - 1;
                  }
                  if (v137 != v131)
                  {
                    if (!*(_QWORD *)(*a1 + 8 * v137))
                    {
                      *(_QWORD *)(*a1 + 8 * v137) = v130;
                      goto LABEL_276;
                    }
                    *v130 = *v136;
                    *v136 = **(_QWORD **)(*a1 + 8 * v137);
                    **(_QWORD **)(*a1 + 8 * v137) = v136;
                    v136 = v130;
                  }
                  v137 = v131;
LABEL_276:
                  v130 = v136;
                  v136 = (_QWORD *)*v136;
                  v131 = v137;
                }
                while (v136);
              }
            }
            v114 = (unint64_t)prime;
            goto LABEL_280;
          }
          v155 = (void *)*a1;
          *a1 = 0;
          if (v155)
            operator delete(v155);
          v114 = 0;
          a1[1] = 0;
        }
      }
LABEL_280:
      if ((v114 & (v114 - 1)) != 0)
      {
        if (v113 >= v114)
          v65 = v113 % v114;
        else
          v65 = v113;
      }
      else
      {
        v65 = (v114 - 1) & v113;
      }
LABEL_285:
      v138 = *(_QWORD **)(*a1 + 8 * v65);
      if (v138)
      {
        *(_QWORD *)v211 = *v138;
        *v138 = v211;
      }
      else
      {
        *(_QWORD *)v211 = a1[2];
        a1[2] = v211;
        *(_QWORD *)(*a1 + 8 * v65) = v161;
        if (*(_QWORD *)v211)
        {
          v139 = *(_QWORD *)(*(_QWORD *)v211 + 8);
          if ((v114 & (v114 - 1)) != 0)
          {
            if (v139 >= v114)
              v139 %= v114;
          }
          else
          {
            v139 &= v114 - 1;
          }
          *(_QWORD *)(*a1 + 8 * v139) = v211;
        }
      }
      *(_QWORD *)&v211 = 0;
      ++*v58;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100]((uint64_t)&v211, 0);
LABEL_294:
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v187);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)&v186);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)&v185);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v184);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)&v179);
      v140 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
      v57 = v107;
      if (*((_QWORD *)&v178 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (v177[1])
        std::__shared_weak_count::__release_weak(v177[1]);
      realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()((uint64_t)v177, (uint64_t)&v210, (uint64_t)v56);
      a1 = v163;
      v143 = v177[0];
      v144 = (unint64_t)v177[1];
      v177[0] = 0;
      v177[1] = 0;
      v173[0] = v143;
      v173[1] = v144;
      v174 = v178;
      v175 = v179;
      if (*((_QWORD *)&v178 + 1))
      {
        v145 = *(_QWORD *)(v178 + 8);
        if ((v144 & (v144 - 1)) != 0)
        {
          if (v145 >= v144)
            v145 %= v144;
        }
        else
        {
          v145 &= v144 - 1;
        }
        *((_QWORD *)&v143->__vftable + v145) = &v174;
        v178 = 0uLL;
      }
      v176 = 1;
      v146 = v180;
      v147 = v181;
      v180 = 0;
      v181 = 0;
      v169[0] = v146;
      v169[1] = v147;
      v170[0] = v182;
      v170[1] = v183;
      v171 = v184[0];
      if (v183)
      {
        v148 = *(_QWORD *)(v182 + 8);
        if ((*(_QWORD *)&v147 & (*(_QWORD *)&v147 - 1)) != 0)
        {
          if (v148 >= *(_QWORD *)&v147)
            v148 %= *(_QWORD *)&v147;
        }
        else
        {
          v148 &= *(_QWORD *)&v147 - 1;
        }
        *(_QWORD *)(v146 + 8 * v148) = v170;
        v182 = 0;
        v183 = 0;
      }
      v172 = 1;
      realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(v163, (unint64_t *)v56, (uint64_t)v173, (uint64_t)v169);
      if (v172)
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v169);
      if (v176)
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v173);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&v180);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v177);
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v198);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)v196);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)v194);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v192);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v190);
      v149 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
      if (*((_QWORD *)&v189 + 1))
      {
        v150 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      if ((v201 & 7) != 0)
      {
        v152 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v199);
      goto LABEL_326;
    }
    v86 = (v75 & (v75 - 1)) != 0;
    if (v75 < 3)
      v86 = 1;
    v87 = v86 | (2 * v75);
    v88 = vcvtps_u32_f32(v84 / v85);
    if (v87 <= v88)
      v89 = (int8x8_t)v88;
    else
      v89 = (int8x8_t)v87;
    if (*(_QWORD *)&v89 == 1)
    {
      v89 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v89 & (*(_QWORD *)&v89 - 1)) != 0)
    {
      v89 = (int8x8_t)std::__next_prime(*(_QWORD *)&v89);
    }
    v75 = a1[11];
    if (*(_QWORD *)&v89 > v75)
      goto LABEL_167;
    if (*(_QWORD *)&v89 < v75)
    {
      v96 = vcvtps_u32_f32((float)(unint64_t)a1[13] / *((float *)a1 + 28));
      if (v75 < 3 || (v97 = (uint8x8_t)vcnt_s8((int8x8_t)v75), v97.i16[0] = vaddlv_u8(v97), v97.u32[0] > 1uLL))
      {
        v96 = std::__next_prime(v96);
      }
      else
      {
        v98 = 1 << -(char)__clz(v96 - 1);
        if (v96 >= 2)
          v96 = v98;
      }
      if (*(_QWORD *)&v89 <= v96)
        v89 = (int8x8_t)v96;
      if (*(_QWORD *)&v89 >= v75)
      {
        v75 = a1[11];
      }
      else
      {
        if (v89)
        {
LABEL_167:
          if (*(_QWORD *)&v89 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v90 = operator new(8 * *(_QWORD *)&v89);
          v91 = (void *)a1[10];
          a1[10] = v90;
          if (v91)
            operator delete(v91);
          v92 = 0;
          a1[11] = v89;
          do
            *(_QWORD *)(a1[10] + 8 * v92++) = 0;
          while (*(_QWORD *)&v89 != v92);
          v93 = (_QWORD *)*v160;
          if (*v160)
          {
            v94 = v93[1];
            v95 = (uint8x8_t)vcnt_s8(v89);
            v95.i16[0] = vaddlv_u8(v95);
            if (v95.u32[0] > 1uLL)
            {
              if (v94 >= *(_QWORD *)&v89)
                v94 %= *(_QWORD *)&v89;
            }
            else
            {
              v94 &= *(_QWORD *)&v89 - 1;
            }
            *(_QWORD *)(a1[10] + 8 * v94) = v160;
            v99 = (_QWORD *)*v93;
            if (*v93)
            {
              do
              {
                v100 = v99[1];
                if (v95.u32[0] > 1uLL)
                {
                  if (v100 >= *(_QWORD *)&v89)
                    v100 %= *(_QWORD *)&v89;
                }
                else
                {
                  v100 &= *(_QWORD *)&v89 - 1;
                }
                if (v100 != v94)
                {
                  v101 = a1[10];
                  if (!*(_QWORD *)(v101 + 8 * v100))
                  {
                    *(_QWORD *)(v101 + 8 * v100) = v93;
                    goto LABEL_192;
                  }
                  *v93 = *v99;
                  *v99 = **(_QWORD **)(a1[10] + 8 * v100);
                  **(_QWORD **)(a1[10] + 8 * v100) = v99;
                  v99 = v93;
                }
                v100 = v94;
LABEL_192:
                v93 = v99;
                v99 = (_QWORD *)*v99;
                v94 = v100;
              }
              while (v99);
            }
          }
          v75 = (unint64_t)v89;
          goto LABEL_196;
        }
        v154 = (void *)a1[10];
        a1[10] = 0;
        if (v154)
          operator delete(v154);
        v75 = 0;
        a1[11] = 0;
      }
    }
LABEL_196:
    if ((v75 & (v75 - 1)) != 0)
    {
      if (v74 >= v75)
        v66 = v74 % v75;
      else
        v66 = v74;
    }
    else
    {
      v66 = (v75 - 1) & v74;
    }
    goto LABEL_201;
  }
}

void sub_23006CC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t v69;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100](v69 - 112, 0);
  std::pair<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>::~pair((uint64_t)&__p);
  realityio::BuilderDependencyDAG::BuilderGraphNode::~BuilderGraphNode((realityio::BuilderDependencyDAG::BuilderGraphNode *)&a69);
  realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery((realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *)(v69 - 232));
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::string::size_type v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  int8x8_t v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *i;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint8x8_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  void *v58;
  _QWORD *j;
  __int128 *v60;
  int v61;
  __int128 v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *k;
  unint64_t v71;
  float v72;
  _BOOL8 v73;
  unint64_t v74;
  unint64_t v75;
  int8x8_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  _QWORD **v80;
  unint64_t v81;
  uint8x8_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *m;
  unint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  void *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  _BYTE v112[32];
  float v113[10];
  uint64_t v114;
  std::string v115;
  __int128 v116;
  float v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  float v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  char v126;

  v3 = a3;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a3 + 40))(&v122);
  v119 = 0u;
  v120 = 0u;
  v121 = 1.0;
  v5 = *(_QWORD **)(v122 + 16);
  if (v5)
  {
    v108 = a2;
    v107 = v3;
    do
    {
      v7 = (uint64_t *)v5[3];
      v6 = (uint64_t *)v5[4];
      v106 = v5;
      v109 = v6;
      while (v7 != v6)
      {
        *(_OWORD *)&v115.__r_.__value_.__r.__words[1] = 0u;
        v116 = 0u;
        v117 = 1.0;
        v118 = 0;
        v8 = *v7;
        LODWORD(v115.__r_.__value_.__l.__data_) = *(_DWORD *)(*v7 + 40);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v118, (_QWORD *)(v8 + 32));
        v9 = *v7;
        v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v112, v9, v10, *(_QWORD *)v3 + 8, *(_QWORD *)a2 + 16);
        v117 = v113[0];
        v11 = *(uint64_t **)&v112[16];
        v12 = v115.__r_.__value_.__r.__words[2];
        if (v115.__r_.__value_.__r.__words[2])
        {
          v13 = 0;
          do
            *(_QWORD *)(v115.__r_.__value_.__l.__size_ + 8 * v13++) = 0;
          while (v12 != v13);
          v14 = (_QWORD *)v116;
          v116 = 0uLL;
          if (v14)
            v15 = v11 == 0;
          else
            v15 = 1;
          if (v15)
          {
            v16 = v14;
          }
          else
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v14 + 2), (_DWORD *)v11 + 4);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v14 + 20, (_DWORD *)v11 + 5);
              v16 = (_QWORD *)*v14;
              std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi((uint64_t)&v115.__r_.__value_.__l.__size_, (uint64_t)v14);
              v11 = (uint64_t *)*v11;
              if (v16)
                v17 = v11 == 0;
              else
                v17 = 1;
              v14 = v16;
            }
            while (!v17);
          }
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node((uint64_t)&v115.__r_.__value_.__l.__size_, v16);
        }
        for (; v11; v11 = (uint64_t *)*v11)
        {
          v18 = operator new(0x18uLL);
          v124 = v18;
          v125 = (std::__shared_weak_count *)&v116;
          *v18 = 0;
          v18[1] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 4, (_DWORD *)v11 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 5, (_DWORD *)v11 + 5);
          v126 = 1;
          v18[1] = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v18 + 5)+ ((*((unsigned int *)v18 + 5)+ (unint64_t)*((unsigned int *)v18 + 4)+ (*((unsigned int *)v18 + 5) + (unint64_t)*((unsigned int *)v18 + 4))* (*((unsigned int *)v18 + 5) + (unint64_t)*((unsigned int *)v18 + 4))) >> 1)));
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi((uint64_t)&v115.__r_.__value_.__l.__size_, (uint64_t)v18);
          v124 = 0;
          std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)&v124, 0);
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v112);
        v19 = *v7;
        if (*(char *)(*v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v112, *(const std::string::value_type **)(v19 + 8), *(_QWORD *)(v19 + 16));
        }
        else
        {
          v20 = *(_OWORD *)(v19 + 8);
          *(_QWORD *)&v112[16] = *(_QWORD *)(v19 + 24);
          *(_OWORD *)v112 = v20;
        }
        *(_DWORD *)&v112[24] = v115.__r_.__value_.__l.__data_;
        std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)v113, (uint64_t)&v115.__r_.__value_.__l.__size_);
        v114 = v118;
        v118 = 0;
        v21 = operator new(0x50uLL);
        v124 = v21;
        v125 = (std::__shared_weak_count *)&v120;
        v126 = 0;
        *v21 = 0;
        v21[1] = 0;
        MEMORY[0x2348B2764](v21 + 2, v112);
        *((_DWORD *)v21 + 6) = *(_DWORD *)&v112[24];
        std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)(v21 + 4), (uint64_t)v113);
        v21[9] = v114;
        v114 = 0;
        v126 = 1;
        v22 = bswap64(0x9E3779B97F4A7C55 * (v21[2] & 0xFFFFFFFFFFFFFFF8));
        v21[1] = v22;
        v23 = *(int8x8_t *)((char *)&v119 + 8);
        v24 = (float)(unint64_t)(*((_QWORD *)&v120 + 1) + 1);
        if (!*((_QWORD *)&v119 + 1) || (float)(v121 * (float)*((unint64_t *)&v119 + 1)) < v24)
        {
          v25 = (*((_QWORD *)&v119 + 1) & (*((_QWORD *)&v119 + 1) - 1)) != 0;
          if (*((_QWORD *)&v119 + 1) < 3uLL)
            v25 = 1;
          v26 = v25 | (2 * *((_QWORD *)&v119 + 1));
          v27 = vcvtps_u32_f32(v24 / v121);
          if (v26 <= v27)
            prime = (int8x8_t)v27;
          else
            prime = (int8x8_t)v26;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v23 = *(int8x8_t *)((char *)&v119 + 8);
          }
          if (*(_QWORD *)&prime > *(_QWORD *)&v23)
          {
LABEL_37:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v29 = operator new(8 * *(_QWORD *)&prime);
            v30 = (void *)v119;
            *(_QWORD *)&v119 = v29;
            if (v30)
              operator delete(v30);
            v31 = 0;
            *((int8x8_t *)&v119 + 1) = prime;
            do
              *(_QWORD *)(v119 + 8 * v31++) = 0;
            while (*(_QWORD *)&prime != v31);
            v32 = (_QWORD *)v120;
            if ((_QWORD)v120)
            {
              v33 = *(_QWORD *)(v120 + 8);
              v34 = (uint8x8_t)vcnt_s8(prime);
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.u32[0] > 1uLL)
              {
                if (v33 >= *(_QWORD *)&prime)
                  v33 %= *(_QWORD *)&prime;
              }
              else
              {
                v33 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(v119 + 8 * v33) = &v120;
              for (i = (_QWORD *)*v32; *v32; i = (_QWORD *)*v32)
              {
                v39 = i[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 == v33)
                {
                  v32 = i;
                }
                else
                {
                  v40 = i;
                  if (*(_QWORD *)(v119 + 8 * v39))
                  {
                    do
                    {
                      v41 = v40;
                      v40 = (_QWORD *)*v40;
                    }
                    while (v40 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v40[2] & 0xFFFFFFFFFFFFFFF8));
                    *v32 = v40;
                    *v41 = **(_QWORD **)(v119 + 8 * v39);
                    **(_QWORD **)(v119 + 8 * v39) = i;
                  }
                  else
                  {
                    *(_QWORD *)(v119 + 8 * v39) = v32;
                    v32 = i;
                    v33 = v39;
                  }
                }
              }
            }
            v23 = prime;
            goto LABEL_67;
          }
          if (*(_QWORD *)&prime >= *(_QWORD *)&v23)
            goto LABEL_67;
          v35 = vcvtps_u32_f32((float)*((unint64_t *)&v120 + 1) / v121);
          if (*(_QWORD *)&v23 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v23), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            v35 = std::__next_prime(v35);
          }
          else
          {
            v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2)
              v35 = v37;
          }
          if (*(_QWORD *)&prime <= v35)
            prime = (int8x8_t)v35;
          if (*(_QWORD *)&prime >= *(_QWORD *)&v23)
          {
            v23 = *(int8x8_t *)((char *)&v119 + 8);
LABEL_67:
            v3 = v107;
            goto LABEL_68;
          }
          if (prime)
            goto LABEL_37;
          v58 = (void *)v119;
          *(_QWORD *)&v119 = 0;
          v3 = v107;
          if (v58)
            operator delete(v58);
          v23 = 0;
          *((_QWORD *)&v119 + 1) = 0;
        }
LABEL_68:
        v42 = (uint8x8_t)vcnt_s8(v23);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] > 1uLL)
        {
          v43 = v22;
          if (*(_QWORD *)&v23 <= v22)
            v43 = v22 % *(_QWORD *)&v23;
        }
        else
        {
          v43 = (*(_QWORD *)&v23 - 1) & v22;
        }
        v44 = v119;
        v45 = *(_QWORD **)(v119 + 8 * v43);
        if (v45)
        {
          v46 = 0;
          do
          {
            v47 = v45;
            v45 = (_QWORD *)*v45;
            if (!v45)
              break;
            v48 = v45[1];
            if (v42.u32[0] > 1uLL)
            {
              v49 = v45[1];
              if (v48 >= *(_QWORD *)&v23)
                v49 = v48 % *(_QWORD *)&v23;
            }
            else
            {
              v49 = v48 & (*(_QWORD *)&v23 - 1);
            }
            if (v49 != v43)
              break;
            v50 = v48 == v22 && (v45[2] & 0xFFFFFFFFFFFFFFF8) == (v21[2] & 0xFFFFFFFFFFFFFFF8);
            v51 = v46 & !v50;
            v46 |= v50;
          }
          while (v51 != 1);
        }
        else
        {
          v47 = 0;
        }
        v52 = v21[1];
        if (v42.u32[0] > 1uLL)
        {
          if (v52 >= *(_QWORD *)&v23)
            v52 %= *(_QWORD *)&v23;
        }
        else
        {
          v52 &= *(_QWORD *)&v23 - 1;
        }
        if (!v47)
        {
          *v21 = v120;
          *(_QWORD *)&v120 = v21;
          *(_QWORD *)(v44 + 8 * v52) = &v120;
          if (!*v21)
            goto LABEL_104;
          v53 = *(_QWORD *)(*v21 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v53 >= *(_QWORD *)&v23)
              v53 %= *(_QWORD *)&v23;
          }
          else
          {
            v53 &= *(_QWORD *)&v23 - 1;
          }
LABEL_103:
          *(_QWORD *)(v119 + 8 * v53) = v21;
          goto LABEL_104;
        }
        *v21 = *v47;
        *v47 = v21;
        if (*v21)
        {
          v53 = *(_QWORD *)(*v21 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v53 >= *(_QWORD *)&v23)
              v53 %= *(_QWORD *)&v23;
          }
          else
          {
            v53 &= *(_QWORD *)&v23 - 1;
          }
          if (v53 != v52)
            goto LABEL_103;
        }
LABEL_104:
        ++*((_QWORD *)&v120 + 1);
        v124 = 0;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100]((uint64_t)&v124);
        if ((v114 & 7) != 0)
        {
          v54 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v113);
        a2 = v108;
        if ((v112[23] & 0x80000000) != 0)
          operator delete(*(void **)v112);
        if ((v118 & 7) != 0)
        {
          v56 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v115.__r_.__value_.__l.__size_);
        v7 += 2;
        v6 = v109;
      }
      v5 = (_QWORD *)*v106;
    }
    while (*v106);
  }
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)v3 + 48))(&v124);
  memset(v112, 0, sizeof(v112));
  v113[0] = 1.0;
  for (j = (_QWORD *)v124[7]; j; j = (_QWORD *)*j)
  {
    v111 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v111, (_QWORD *)(j[3] + 24));
    v60 = (__int128 *)j[3];
    v61 = *((_DWORD *)v60 + 8);
    v110 = v61;
    if (*((char *)v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v60, *((_QWORD *)v60 + 1));
      v61 = v110;
    }
    else
    {
      v62 = *v60;
      v115.__r_.__value_.__r.__words[2] = *((_QWORD *)v60 + 2);
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v62;
    }
    LODWORD(v116) = v61;
    *((_QWORD *)&v116 + 1) = v111;
    v111 = 0;
    v63 = operator new(0x28uLL);
    *v63 = 0;
    v63[1] = 0;
    MEMORY[0x2348B2764](v63 + 2, &v115);
    *((_DWORD *)v63 + 6) = v116;
    v63[4] = *((_QWORD *)&v116 + 1);
    *((_QWORD *)&v116 + 1) = 0;
    v64 = v63[2] & 0xFFFFFFFFFFFFFFF8;
    v65 = bswap64(0x9E3779B97F4A7C55 * v64);
    v63[1] = v65;
    v66 = *(int8x8_t *)&v112[8];
    if (*(_QWORD *)&v112[8])
    {
      v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v112[8]);
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        v68 = v65;
        if (*(_QWORD *)&v112[8] <= v65)
          v68 = v65 % *(_QWORD *)&v112[8];
      }
      else
      {
        v68 = v65 & (*(_QWORD *)&v112[8] - 1);
      }
      v69 = *(_QWORD **)(*(_QWORD *)v112 + 8 * v68);
      if (v69)
      {
        for (k = (_QWORD *)*v69; k; k = (_QWORD *)*k)
        {
          v71 = k[1];
          if (v71 == v65)
          {
            if ((k[2] & 0xFFFFFFFFFFFFFFF8) == v64)
            {
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](1, v63);
              goto LABEL_198;
            }
          }
          else
          {
            if (v67.u32[0] > 1uLL)
            {
              if (v71 >= *(_QWORD *)&v112[8])
                v71 %= *(_QWORD *)&v112[8];
            }
            else
            {
              v71 &= *(_QWORD *)&v112[8] - 1;
            }
            if (v71 != v68)
              break;
          }
        }
      }
    }
    v72 = (float)(unint64_t)(*(_QWORD *)&v112[24] + 1);
    if (!*(_QWORD *)&v112[8] || (float)(v113[0] * (float)*(unint64_t *)&v112[8]) < v72)
    {
      v73 = (*(_QWORD *)&v112[8] & (*(_QWORD *)&v112[8] - 1)) != 0;
      if (*(_QWORD *)&v112[8] < 3uLL)
        v73 = 1;
      v74 = v73 | (2 * *(_QWORD *)&v112[8]);
      v75 = vcvtps_u32_f32(v72 / v113[0]);
      if (v74 <= v75)
        v76 = (int8x8_t)v75;
      else
        v76 = (int8x8_t)v74;
      if (*(_QWORD *)&v76 == 1)
      {
        v76 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v76 & (*(_QWORD *)&v76 - 1)) != 0)
      {
        v76 = (int8x8_t)std::__next_prime(*(_QWORD *)&v76);
        v66 = *(int8x8_t *)&v112[8];
      }
      if (*(_QWORD *)&v76 > *(_QWORD *)&v66)
        goto LABEL_232;
      if (*(_QWORD *)&v76 >= *(_QWORD *)&v66)
        goto LABEL_184;
      v83 = vcvtps_u32_f32((float)*(unint64_t *)&v112[24] / v113[0]);
      if (*(_QWORD *)&v66 < 3uLL || (v84 = (uint8x8_t)vcnt_s8(v66), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
      {
        v83 = std::__next_prime(v83);
      }
      else
      {
        v85 = 1 << -(char)__clz(v83 - 1);
        if (v83 >= 2)
          v83 = v85;
      }
      if (*(_QWORD *)&v76 <= v83)
        v76 = (int8x8_t)v83;
      if (*(_QWORD *)&v76 >= *(_QWORD *)&v66)
      {
        v66 = *(int8x8_t *)&v112[8];
        goto LABEL_184;
      }
      if (v76)
      {
LABEL_232:
        if (*(_QWORD *)&v76 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v77 = operator new(8 * *(_QWORD *)&v76);
        v78 = *(void **)v112;
        *(_QWORD *)v112 = v77;
        if (v78)
          operator delete(v78);
        v79 = 0;
        *(int8x8_t *)&v112[8] = v76;
        do
          *(_QWORD *)(*(_QWORD *)v112 + 8 * v79++) = 0;
        while (*(_QWORD *)&v76 != v79);
        v80 = *(_QWORD ***)&v112[16];
        if (*(_QWORD *)&v112[16])
        {
          v81 = *(_QWORD *)(*(_QWORD *)&v112[16] + 8);
          v82 = (uint8x8_t)vcnt_s8(v76);
          v82.i16[0] = vaddlv_u8(v82);
          if (v82.u32[0] > 1uLL)
          {
            if (v81 >= *(_QWORD *)&v76)
              v81 %= *(_QWORD *)&v76;
          }
          else
          {
            v81 &= *(_QWORD *)&v76 - 1;
          }
          *(_QWORD *)(*(_QWORD *)v112 + 8 * v81) = &v112[16];
          for (m = *v80; m; v81 = v87)
          {
            v87 = m[1];
            if (v82.u32[0] > 1uLL)
            {
              if (v87 >= *(_QWORD *)&v76)
                v87 %= *(_QWORD *)&v76;
            }
            else
            {
              v87 &= *(_QWORD *)&v76 - 1;
            }
            if (v87 != v81)
            {
              if (!*(_QWORD *)(*(_QWORD *)v112 + 8 * v87))
              {
                *(_QWORD *)(*(_QWORD *)v112 + 8 * v87) = v80;
                goto LABEL_180;
              }
              *v80 = (_QWORD *)*m;
              *m = **(_QWORD **)(*(_QWORD *)v112 + 8 * v87);
              **(_QWORD **)(*(_QWORD *)v112 + 8 * v87) = m;
              m = v80;
            }
            v87 = v81;
LABEL_180:
            v80 = (_QWORD **)m;
            m = (_QWORD *)*m;
          }
        }
        v66 = v76;
      }
      else
      {
        v97 = *(void **)v112;
        *(_QWORD *)v112 = 0;
        if (v97)
          operator delete(v97);
        v66 = 0;
        *(_QWORD *)&v112[8] = 0;
      }
    }
LABEL_184:
    v88 = v63[1];
    v89 = (uint8x8_t)vcnt_s8(v66);
    v89.i16[0] = vaddlv_u8(v89);
    if (v89.u32[0] > 1uLL)
    {
      if (v88 >= *(_QWORD *)&v66)
        v88 %= *(_QWORD *)&v66;
    }
    else
    {
      v88 &= *(_QWORD *)&v66 - 1;
    }
    v90 = *(_QWORD *)v112;
    v91 = *(_QWORD **)(*(_QWORD *)v112 + 8 * v88);
    if (v91)
    {
      *v63 = *v91;
    }
    else
    {
      *v63 = *(_QWORD *)&v112[16];
      *(_QWORD *)&v112[16] = v63;
      *(_QWORD *)(v90 + 8 * v88) = &v112[16];
      if (!*v63)
        goto LABEL_197;
      v92 = *(_QWORD *)(*v63 + 8);
      if (v89.u32[0] > 1uLL)
      {
        if (v92 >= *(_QWORD *)&v66)
          v92 %= *(_QWORD *)&v66;
      }
      else
      {
        v92 &= *(_QWORD *)&v66 - 1;
      }
      v91 = (_QWORD *)(*(_QWORD *)v112 + 8 * v92);
    }
    *v91 = v63;
LABEL_197:
    ++*(_QWORD *)&v112[24];
LABEL_198:
    if ((BYTE8(v116) & 7) != 0)
    {
      v93 = (unsigned int *)(*((_QWORD *)&v116 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v94 = __ldxr(v93);
      while (__stlxr(v94 - 2, v93));
    }
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    if ((v111 & 7) != 0)
    {
      v95 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
      do
        v96 = __ldxr(v95);
      while (__stlxr(v96 - 2, v95));
    }
  }
  v98 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1, (uint64_t *)&v119);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(v98 + 40, (uint64_t *)v112);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v112);
  v99 = v125;
  if (v125)
  {
    p_shared_owners = (unint64_t *)&v125->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)&v119);
  v102 = v123;
  if (v123)
  {
    v103 = (unint64_t *)&v123->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
}

void sub_23006DAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(v1 - 176);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_23006DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36)
{
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](1, v36);
  if ((a36 & 7) != 0)
  {
    v39 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if (a34 < 0)
    operator delete(__p);
  if ((a18 & 7) != 0)
  {
    v41 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&a19);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(v37 - 176);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v37 - 128);
  _Unwind_Resume(a1);
}

void sub_23006DB9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100](v39 - 112);
  std::pair<std::string,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>::~pair((uint64_t)&__p);
  if ((a38 & 7) != 0)
  {
    v40 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v38);
  JUMPOUT(0x23006DC80);
}

void sub_23006DC10(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_23006DC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __cxa_end_catch();
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x23006DC58);
}

void realityio::ImportSession::CancelledException::~CancelledException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_24FDF1300;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_24FDF1300;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x2348B4E1CLL);
}

std::chrono::steady_clock::time_point realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *j;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void **v47;
  uint64_t v48;
  uint64_t k;
  void *v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  _QWORD *m;
  uint64_t *n;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  _QWORD *ii;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  _QWORD *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unsigned int *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;

  std::chrono::steady_clock::now();
  if (*(_BYTE *)(a3 + 40))
    realityio::BuilderDependencyDAG::removeInputDataForGraphNode(a1, a2);
  if (*(_BYTE *)(a4 + 40))
    realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(a1, a2);
  v8 = (std::__shared_weak_count *)a2[1];
  v169 = *a2;
  v170 = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v169);
  v164 = a4;
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v165 = v11;
  if (v170)
    std::__shared_weak_count::__release_weak(v170);
  v163 = a3;
  if (*(_BYTE *)(a3 + 40))
  {
    v12 = (void **)(v165 + 6);
    if (v165[9])
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node((uint64_t)(v165 + 6), (_QWORD *)v165[8]);
      v165[8] = 0;
      v13 = v165[7];
      if (v13)
      {
        for (i = 0; i != v13; ++i)
          *((_QWORD *)*v12 + i) = 0;
      }
      v165[9] = 0;
    }
    v15 = *(void **)a3;
    *(_QWORD *)a3 = 0;
    v16 = *v12;
    *v12 = v15;
    if (v16)
      operator delete(v16);
    v17 = *(_QWORD **)(a3 + 16);
    v18 = *(_QWORD *)(a3 + 8);
    v165[8] = v17;
    v19 = v165 + 8;
    v165[7] = v18;
    *(_QWORD *)(a3 + 8) = 0;
    v20 = *(_QWORD *)(a3 + 24);
    v165[9] = v20;
    *((_DWORD *)v165 + 20) = *(_DWORD *)(a3 + 32);
    if (v20)
    {
      v21 = v17[1];
      v22 = v165[7];
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v21 >= v22)
          v21 %= v22;
      }
      else
      {
        v21 &= v22 - 1;
      }
      *((_QWORD *)*v12 + v21) = v19;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v17 = (_QWORD *)*v19;
    }
    for (; v17; v17 = (_QWORD *)*v17)
    {
      for (j = (uint64_t *)v17[6]; j; j = (uint64_t *)*j)
      {
        v175 = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v176, (_DWORD *)j + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v177, (_DWORD *)j + 5);
        v24 = v17[9];
        v178 = v24;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            v178 &= 0xFFFFFFFFFFFFFFF8;
        }
        v27 = a2[1];
        v166 = *a2;
        v167 = (std::__shared_weak_count *)v27;
        if (v27)
        {
          v28 = (unint64_t *)(v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = (unsigned int *)v17[2];
        v168 = v30;
        if ((v30 & 7) != 0)
        {
          v31 = (unsigned int *)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 2, v31));
          if ((v32 & 1) == 0)
            v168 = v31;
        }
        std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)&v169, (uint64_t)&v175, (uint64_t)&v166);
        std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t)(a1 + 5), (uint64_t)&v169);
        if ((v174 & 7) != 0)
        {
          v33 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
        v35 = v173;
        if (v173)
        {
          p_shared_owners = (unint64_t *)&v173->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if ((v171 & 7) != 0)
        {
          v38 = (unsigned int *)((unint64_t)v171 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169 + 4);
        if ((v168 & 7) != 0)
        {
          v40 = (unsigned int *)((unint64_t)v168 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        v42 = v167;
        if (v167)
        {
          v43 = (unint64_t *)&v167->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if ((v178 & 7) != 0)
        {
          v45 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v176);
      }
    }
  }
  if (*(_BYTE *)(v164 + 40))
  {
    v47 = (void **)(v165 + 11);
    if (v165[14])
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node((_DWORD)v165 + 88, (_QWORD *)v165[13]);
      v165[13] = 0;
      v48 = v165[12];
      if (v48)
      {
        for (k = 0; k != v48; ++k)
          *((_QWORD *)*v47 + k) = 0;
      }
      v165[14] = 0;
    }
    v50 = *(void **)v164;
    *(_QWORD *)v164 = 0;
    v51 = *v47;
    *v47 = v50;
    if (v51)
      operator delete(v51);
    v52 = *(_QWORD **)(v164 + 16);
    v53 = *(_QWORD *)(v164 + 8);
    v165[13] = v52;
    v54 = v165 + 13;
    v165[12] = v53;
    *(_QWORD *)(v164 + 8) = 0;
    v55 = *(_QWORD *)(v164 + 24);
    v165[14] = v55;
    *((_DWORD *)v165 + 30) = *(_DWORD *)(v164 + 32);
    if (v55)
    {
      v56 = v52[1];
      v57 = v165[12];
      if ((v57 & (v57 - 1)) != 0)
      {
        if (v56 >= v57)
          v56 %= v57;
      }
      else
      {
        v56 &= v57 - 1;
      }
      *((_QWORD *)*v47 + v56) = v54;
      *(_QWORD *)(v164 + 16) = 0;
      *(_QWORD *)(v164 + 24) = 0;
      v52 = (_QWORD *)*v54;
    }
    for (; v52; v52 = (_QWORD *)*v52)
    {
      v175 = 0;
      v58 = v165[4];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v176, (_DWORD *)(v58 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v177, (_DWORD *)(v58 + 12));
      v59 = v52[4];
      v178 = v59;
      if ((v59 & 7) != 0)
      {
        v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 2, v60));
        if ((v61 & 1) == 0)
          v178 &= 0xFFFFFFFFFFFFFFF8;
      }
      v62 = a2[1];
      v166 = *a2;
      v167 = (std::__shared_weak_count *)v62;
      if (v62)
      {
        v63 = (unint64_t *)(v62 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = (unsigned int *)v52[2];
      v168 = v65;
      if ((v65 & 7) != 0)
      {
        v66 = (unsigned int *)((unint64_t)v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 2, v66));
        if ((v67 & 1) == 0)
          v168 = v66;
      }
      std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)&v169, (uint64_t)&v175, (uint64_t)&v166);
      std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t)(a1 + 5), (uint64_t)&v169);
      if ((v174 & 7) != 0)
      {
        v68 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      v70 = v173;
      if (v173)
      {
        v71 = (unint64_t *)&v173->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if ((v171 & 7) != 0)
      {
        v73 = (unsigned int *)((unint64_t)v171 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169 + 4);
      if ((v168 & 7) != 0)
      {
        v75 = (unsigned int *)((unint64_t)v168 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      v77 = v167;
      if (v167)
      {
        v78 = (unint64_t *)&v167->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if ((v178 & 7) != 0)
      {
        v80 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v176);
    }
  }
  if (*(_BYTE *)(v163 + 40))
  {
    for (m = (_QWORD *)v165[8]; m; m = (_QWORD *)*m)
    {
      for (n = (uint64_t *)m[6]; n; n = (uint64_t *)*n)
      {
        v175 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v176, (_DWORD *)n + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v177, (_DWORD *)n + 5);
        v84 = m[9];
        v178 = v84;
        if ((v84 & 7) != 0)
        {
          v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 2, v85));
          if ((v86 & 1) == 0)
            v178 &= 0xFFFFFFFFFFFFFFF8;
        }
        v87 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v175);
        if (v87 != v88)
        {
          v89 = v87;
          v90 = v88;
          do
          {
            v91 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v89 + 5);
            if (!v91)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v93 = (std::__shared_weak_count *)*a2;
            v92 = (std::__shared_weak_count *)a2[1];
            if (v92)
            {
              v94 = (unint64_t *)&v92->__shared_weak_owners_;
              do
                v95 = __ldxr(v94);
              while (__stxr(v95 + 1, v94));
            }
            v96 = m[2];
            if ((v96 & 7) != 0)
            {
              v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 2, v97));
              if ((v98 & 1) == 0)
                v96 &= 0xFFFFFFFFFFFFFFF8;
            }
            v99 = v89[7];
            v169 = v99;
            if ((v99 & 7) != 0)
            {
              v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 2, v100));
              if ((v101 & 1) == 0)
                v169 = (unint64_t)v100;
            }
            v170 = v93;
            v171 = v92;
            v172 = v96;
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>((uint64_t)(v91 + 21), (uint64_t *)&v169);
            if ((v172 & 7) != 0)
            {
              v102 = (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFF8);
              do
                v103 = __ldxr(v102);
              while (__stlxr(v103 - 2, v102));
            }
            if (v171)
              std::__shared_weak_count::__release_weak(v171);
            if ((v169 & 7) != 0)
            {
              v104 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
              do
                v105 = __ldxr(v104);
              while (__stlxr(v105 - 2, v104));
            }
            v107 = (std::__shared_weak_count *)v89[5];
            v106 = (std::__shared_weak_count *)v89[6];
            if (v106)
            {
              v108 = (unint64_t *)&v106->__shared_weak_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            v110 = v89[7];
            if ((v110 & 7) != 0)
            {
              v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 2, v111));
              if ((v112 & 1) == 0)
                v110 &= 0xFFFFFFFFFFFFFFF8;
            }
            v113 = m[2];
            v169 = v113;
            if ((v113 & 7) != 0)
            {
              v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 2, v114));
              if ((v115 & 1) == 0)
                v169 = (unint64_t)v114;
            }
            v170 = v107;
            v171 = v106;
            v172 = v110;
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>((uint64_t)(v165 + 16), (uint64_t *)&v169);
            if ((v172 & 7) != 0)
            {
              v116 = (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFF8);
              do
                v117 = __ldxr(v116);
              while (__stlxr(v117 - 2, v116));
            }
            if (v171)
              std::__shared_weak_count::__release_weak(v171);
            if ((v169 & 7) != 0)
            {
              v118 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
              do
                v119 = __ldxr(v118);
              while (__stlxr(v119 - 2, v118));
            }
            v89 = (uint64_t *)*v89;
          }
          while (v89 != v90);
        }
        if ((v178 & 7) != 0)
        {
          v120 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
          do
            v121 = __ldxr(v120);
          while (__stlxr(v121 - 2, v120));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v176);
      }
    }
  }
  if (*(_BYTE *)(v164 + 40))
  {
    for (ii = (_QWORD *)v165[13]; ii; ii = (_QWORD *)*ii)
    {
      v175 = 1;
      v123 = v165[4];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v176, (_DWORD *)(v123 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v177, (_DWORD *)(v123 + 12));
      v124 = ii[4];
      v178 = v124;
      if ((v124 & 7) != 0)
      {
        v125 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 2, v125));
        if ((v126 & 1) == 0)
          v178 &= 0xFFFFFFFFFFFFFFF8;
      }
      v127 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v175);
      if (v127 != v128)
      {
        v129 = v127;
        v130 = v128;
        do
        {
          v131 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v129 + 5);
          if (!v131)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v133 = (std::__shared_weak_count *)*a2;
          v132 = (std::__shared_weak_count *)a2[1];
          if (v132)
          {
            v134 = (unint64_t *)&v132->__shared_weak_owners_;
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          v136 = ii[2];
          if ((v136 & 7) != 0)
          {
            v137 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 2, v137));
            if ((v138 & 1) == 0)
              v136 &= 0xFFFFFFFFFFFFFFF8;
          }
          v139 = v129[7];
          v169 = v139;
          if ((v139 & 7) != 0)
          {
            v140 = (unsigned int *)(v139 & 0xFFFFFFFFFFFFFFF8);
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 2, v140));
            if ((v141 & 1) == 0)
              v169 = (unint64_t)v140;
          }
          v170 = v133;
          v171 = v132;
          v172 = v136;
          std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>((uint64_t)(v131 + 16), (uint64_t *)&v169);
          if ((v172 & 7) != 0)
          {
            v142 = (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFF8);
            do
              v143 = __ldxr(v142);
            while (__stlxr(v143 - 2, v142));
          }
          if (v171)
            std::__shared_weak_count::__release_weak(v171);
          if ((v169 & 7) != 0)
          {
            v144 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
            do
              v145 = __ldxr(v144);
            while (__stlxr(v145 - 2, v144));
          }
          v147 = (std::__shared_weak_count *)v129[5];
          v146 = (std::__shared_weak_count *)v129[6];
          if (v146)
          {
            v148 = (unint64_t *)&v146->__shared_weak_owners_;
            do
              v149 = __ldxr(v148);
            while (__stxr(v149 + 1, v148));
          }
          v150 = v129[7];
          if ((v150 & 7) != 0)
          {
            v151 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
            do
              v152 = __ldxr(v151);
            while (__stxr(v152 + 2, v151));
            if ((v152 & 1) == 0)
              v150 &= 0xFFFFFFFFFFFFFFF8;
          }
          v153 = ii[2];
          v169 = v153;
          if ((v153 & 7) != 0)
          {
            v154 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFF8);
            do
              v155 = __ldxr(v154);
            while (__stxr(v155 + 2, v154));
            if ((v155 & 1) == 0)
              v169 = (unint64_t)v154;
          }
          v170 = v147;
          v171 = v146;
          v172 = v150;
          std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>((uint64_t)(v165 + 21), (uint64_t *)&v169);
          if ((v172 & 7) != 0)
          {
            v156 = (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFF8);
            do
              v157 = __ldxr(v156);
            while (__stlxr(v157 - 2, v156));
          }
          if (v171)
            std::__shared_weak_count::__release_weak(v171);
          if ((v169 & 7) != 0)
          {
            v158 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
            do
              v159 = __ldxr(v158);
            while (__stlxr(v159 - 2, v158));
          }
          v129 = (uint64_t *)*v129;
        }
        while (v129 != v130);
      }
      if ((v178 & 7) != 0)
      {
        v160 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stlxr(v161 - 2, v160));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v176);
    }
  }
  std::chrono::steady_clock::now();
  return std::chrono::steady_clock::now();
}

void sub_23006E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  _Unwind_Resume(exception_object);
}

void realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(uint64_t a1, __int128 *a2)
{
  char v3;

  std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a1, a2);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v3, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
}

uint64_t std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>::~pair(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1 + 16;
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 192));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(a1 + 152);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(a1 + 112);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table(a1 + 72);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void realityio::BuilderDependencyDAG::BuilderGraphNode::~BuilderGraphNode(realityio::BuilderDependencyDAG::BuilderGraphNode *this)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)this + 22);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)this + 16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void realityio::BuilderDependencyDAG::removeInputDataForGraphNode(_QWORD *a1, unint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *i;
  _QWORD *v27;
  _QWORD *v28;
  int8x8_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  _BOOL4 v42;
  unint64_t *v43;
  unint64_t v44;
  int8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t j;
  _QWORD *v58;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  char v66;

  v3 = (std::__shared_weak_count *)a2[1];
  v64 = (_QWORD *)*a2;
  v65 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v6 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v64);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  v58 = v6;
  v7 = (_QWORD *)v6[8];
  if (v7)
  {
    v8 = a1 + 5;
    while (1)
    {
      v9 = (uint64_t *)v7[6];
      if (v9)
        break;
LABEL_38:
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_39;
    }
    while (1)
    {
      v60 = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, (_DWORD *)v9 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, (_DWORD *)v9 + 5);
      v10 = v7[9];
      v63 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v63 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(v8, (uint64_t)&v60);
      if (v14 != v13)
        break;
LABEL_34:
      if ((v63 & 7) != 0)
      {
        v24 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_38;
    }
    v15 = v13;
    v16 = v14;
    while (1)
    {
      v17 = (std::__shared_weak_count *)v15[6];
      if (v17)
      {
        v18 = std::__shared_weak_count::lock(v17);
        if (v18)
          v19 = v15[5];
        else
          v19 = 0;
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      if (v19 == *a2)
      {
        v20 = (v15[7] & 0xFFFFFFFFFFFFFFF8) == (v7[2] & 0xFFFFFFFFFFFFFFF8);
        if (!v18)
          goto LABEL_29;
      }
      else
      {
        v20 = 0;
        if (!v18)
          goto LABEL_29;
      }
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (v22)
      {
LABEL_29:
        if (!v20)
          goto LABEL_32;
        goto LABEL_30;
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v20)
      {
LABEL_32:
        v15 = (uint64_t *)*v15;
        goto LABEL_33;
      }
LABEL_30:
      v23 = (uint64_t *)*v15;
      std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove((uint64_t)&v64, v8, v15);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v64);
      v15 = v23;
LABEL_33:
      if (v15 == v16)
        goto LABEL_34;
    }
  }
LABEL_39:
  for (i = (_QWORD *)v58[18]; i; i = (_QWORD *)*i)
  {
    v27 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, i + 3);
    if (!v27)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v28 = v27;
    v29 = (int8x8_t)v27[22];
    if (!*(_QWORD *)&v29)
      continue;
    v30 = i[5] & 0xFFFFFFFFFFFFFFF8;
    v31 = bswap64(0x9E3779B97F4A7C55 * v30);
    v32 = (uint8x8_t)vcnt_s8(v29);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v33 = v31;
      if (v31 >= *(_QWORD *)&v29)
        v33 = v31 % *(_QWORD *)&v29;
    }
    else
    {
      v33 = v31 & (*(_QWORD *)&v29 - 1);
    }
    v34 = *(_QWORD **)(v27[21] + 8 * v33);
    if (!v34)
      continue;
    v35 = (_QWORD *)*v34;
    if (!*v34)
      continue;
    while (1)
    {
      v36 = v35[1];
      if (v36 == v31)
        break;
      if (v32.u32[0] > 1uLL)
      {
        if (v36 >= *(_QWORD *)&v29)
          v36 %= *(_QWORD *)&v29;
      }
      else
      {
        v36 &= *(_QWORD *)&v29 - 1;
      }
      if (v36 != v33)
        goto LABEL_105;
LABEL_56:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_105;
    }
    if ((v35[2] & 0xFFFFFFFFFFFFFFF8) != v30)
      goto LABEL_56;
    v37 = v35;
    do
      v37 = (_QWORD *)*v37;
    while (v37 && (v37[2] & 0xFFFFFFFFFFFFFFF8) == v30);
    if (v37 != v35)
    {
      v38 = v27 + 23;
      do
      {
        v39 = (std::__shared_weak_count *)v35[4];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
            v41 = v35[3];
          else
            v41 = 0;
        }
        else
        {
          v41 = 0;
          v40 = 0;
        }
        if (v41 == *a2)
        {
          v42 = (v35[5] & 0xFFFFFFFFFFFFFFF8) == (i[2] & 0xFFFFFFFFFFFFFFF8);
          if (!v40)
            goto LABEL_74;
        }
        else
        {
          v42 = 0;
          if (!v40)
            goto LABEL_74;
        }
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (v44)
        {
LABEL_74:
          if (v42)
            goto LABEL_75;
          goto LABEL_85;
        }
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        if (v42)
        {
LABEL_75:
          v45 = (int8x8_t)v28[22];
          v46 = v35[1];
          v47 = (uint8x8_t)vcnt_s8(v45);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] > 1uLL)
          {
            if (v46 >= *(_QWORD *)&v45)
              v46 %= *(_QWORD *)&v45;
          }
          else
          {
            v46 &= *(_QWORD *)&v45 - 1;
          }
          v48 = (_QWORD *)*v35;
          v49 = v28[21];
          v50 = *(_QWORD **)(v49 + 8 * v46);
          do
          {
            v51 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50 != v35);
          if (v51 == v38)
            goto LABEL_116;
          v52 = v51[1];
          if (v47.u32[0] > 1uLL)
          {
            if (v52 >= *(_QWORD *)&v45)
              v52 %= *(_QWORD *)&v45;
          }
          else
          {
            v52 &= *(_QWORD *)&v45 - 1;
          }
          v53 = *v35;
          if (v52 == v46)
          {
LABEL_96:
            if (v53)
              goto LABEL_97;
          }
          else
          {
LABEL_116:
            if (!v48)
              goto LABEL_95;
            v54 = v48[1];
            if (v47.u32[0] > 1uLL)
            {
              if (v54 >= *(_QWORD *)&v45)
                v54 %= *(_QWORD *)&v45;
            }
            else
            {
              v54 &= *(_QWORD *)&v45 - 1;
            }
            v53 = *v35;
            if (v54 != v46)
            {
LABEL_95:
              *(_QWORD *)(v49 + 8 * v46) = 0;
              v53 = *v35;
              goto LABEL_96;
            }
LABEL_97:
            v55 = *(_QWORD *)(v53 + 8);
            if (v47.u32[0] > 1uLL)
            {
              if (v55 >= *(_QWORD *)&v45)
                v55 %= *(_QWORD *)&v45;
            }
            else
            {
              v55 &= *(_QWORD *)&v45 - 1;
            }
            if (v55 != v46)
            {
              *(_QWORD *)(v28[21] + 8 * v55) = v51;
              v53 = *v35;
            }
          }
          *v51 = v53;
          *v35 = 0;
          --v28[24];
          v64 = v35;
          v65 = (std::__shared_weak_count *)(v28 + 23);
          v66 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v64);
          goto LABEL_104;
        }
LABEL_85:
        v48 = (_QWORD *)*v35;
LABEL_104:
        v35 = v48;
      }
      while (v48 != v37);
    }
LABEL_105:
    ;
  }
  if (v58[19])
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node((uint64_t)(v58 + 16), (_QWORD *)v58[18]);
    v58[18] = 0;
    v56 = v58[17];
    if (v56)
    {
      for (j = 0; j != v56; ++j)
        *(_QWORD *)(v58[16] + 8 * j) = 0;
    }
    v58[19] = 0;
  }
}

void sub_23006F0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(_QWORD *a1, unint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *i;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  int8x8_t shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  _BOOL4 v42;
  unint64_t *v43;
  unint64_t v44;
  int8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  _QWORD *v48;
  uint64_t shared_owners;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t j;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  char v65;

  v3 = (std::__shared_weak_count *)a2[1];
  v63 = (_QWORD *)*a2;
  v64 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v6 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v63);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v7 = (_QWORD *)v6[13];
  if (v7)
  {
    v8 = a1 + 5;
    while (1)
    {
      v59 = 0;
      v9 = v6[4];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v60, (_DWORD *)(v9 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, (_DWORD *)(v9 + 12));
      v10 = v7[4];
      v62 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v62 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(v8, (uint64_t)&v59);
      if (v14 != v13)
        break;
LABEL_33:
      if ((v62 & 7) != 0)
      {
        v24 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_37;
    }
    v15 = v13;
    v16 = v14;
    while (1)
    {
      v17 = (std::__shared_weak_count *)v15[6];
      if (v17)
      {
        v18 = std::__shared_weak_count::lock(v17);
        if (v18)
          v19 = v15[5];
        else
          v19 = 0;
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      if (v19 == *a2)
      {
        v20 = (v15[7] & 0xFFFFFFFFFFFFFFF8) == (v7[2] & 0xFFFFFFFFFFFFFFF8);
        if (!v18)
          goto LABEL_28;
      }
      else
      {
        v20 = 0;
        if (!v18)
          goto LABEL_28;
      }
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (v22)
      {
LABEL_28:
        if (!v20)
          goto LABEL_31;
        goto LABEL_29;
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v20)
      {
LABEL_31:
        v15 = (uint64_t *)*v15;
        goto LABEL_32;
      }
LABEL_29:
      v23 = (uint64_t *)*v15;
      std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove((uint64_t)&v63, v8, v15);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v63);
      v15 = v23;
LABEL_32:
      if (v15 == v16)
        goto LABEL_33;
    }
  }
LABEL_37:
  for (i = (_QWORD *)v6[23]; i; i = (_QWORD *)*i)
  {
    v27 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, i + 3);
    if (!v27)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v28 = v27;
    shared_weak_owners = (int8x8_t)v27[5].__shared_weak_owners_;
    if (!*(_QWORD *)&shared_weak_owners)
      continue;
    v30 = i[5] & 0xFFFFFFFFFFFFFFF8;
    v31 = bswap64(0x9E3779B97F4A7C55 * v30);
    v32 = (uint8x8_t)vcnt_s8(shared_weak_owners);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v33 = v31;
      if (v31 >= *(_QWORD *)&shared_weak_owners)
        v33 = v31 % *(_QWORD *)&shared_weak_owners;
    }
    else
    {
      v33 = v31 & (*(_QWORD *)&shared_weak_owners - 1);
    }
    v34 = *(_QWORD **)(v27[5].__shared_owners_ + 8 * v33);
    if (!v34)
      continue;
    v35 = (_QWORD *)*v34;
    if (!*v34)
      continue;
    while (1)
    {
      v36 = v35[1];
      if (v36 == v31)
        break;
      if (v32.u32[0] > 1uLL)
      {
        if (v36 >= *(_QWORD *)&shared_weak_owners)
          v36 %= *(_QWORD *)&shared_weak_owners;
      }
      else
      {
        v36 &= *(_QWORD *)&shared_weak_owners - 1;
      }
      if (v36 != v33)
        goto LABEL_103;
LABEL_54:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_103;
    }
    if ((v35[2] & 0xFFFFFFFFFFFFFFF8) != v30)
      goto LABEL_54;
    v37 = v35;
    do
      v37 = (_QWORD *)*v37;
    while (v37 && (v37[2] & 0xFFFFFFFFFFFFFFF8) == v30);
    if (v37 != v35)
    {
      v38 = &v27[6].__vftable;
      do
      {
        v39 = (std::__shared_weak_count *)v35[4];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
            v41 = v35[3];
          else
            v41 = 0;
        }
        else
        {
          v41 = 0;
          v40 = 0;
        }
        if (v41 == *a2)
        {
          v42 = (v35[5] & 0xFFFFFFFFFFFFFFF8) == (i[2] & 0xFFFFFFFFFFFFFFF8);
          if (!v40)
            goto LABEL_72;
        }
        else
        {
          v42 = 0;
          if (!v40)
            goto LABEL_72;
        }
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (v44)
        {
LABEL_72:
          if (v42)
            goto LABEL_73;
          goto LABEL_83;
        }
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        if (v42)
        {
LABEL_73:
          v45 = (int8x8_t)v28[5].__shared_weak_owners_;
          v46 = v35[1];
          v47 = (uint8x8_t)vcnt_s8(v45);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] > 1uLL)
          {
            if (v46 >= *(_QWORD *)&v45)
              v46 %= *(_QWORD *)&v45;
          }
          else
          {
            v46 &= *(_QWORD *)&v45 - 1;
          }
          v48 = (_QWORD *)*v35;
          shared_owners = v28[5].__shared_owners_;
          v50 = *(_QWORD **)(shared_owners + 8 * v46);
          do
          {
            v51 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50 != v35);
          if (v51 == v38)
            goto LABEL_114;
          v52 = v51[1];
          if (v47.u32[0] > 1uLL)
          {
            if (v52 >= *(_QWORD *)&v45)
              v52 %= *(_QWORD *)&v45;
          }
          else
          {
            v52 &= *(_QWORD *)&v45 - 1;
          }
          v53 = *v35;
          if (v52 == v46)
          {
LABEL_94:
            if (v53)
              goto LABEL_95;
          }
          else
          {
LABEL_114:
            if (!v48)
              goto LABEL_93;
            v54 = v48[1];
            if (v47.u32[0] > 1uLL)
            {
              if (v54 >= *(_QWORD *)&v45)
                v54 %= *(_QWORD *)&v45;
            }
            else
            {
              v54 &= *(_QWORD *)&v45 - 1;
            }
            v53 = *v35;
            if (v54 != v46)
            {
LABEL_93:
              *(_QWORD *)(shared_owners + 8 * v46) = 0;
              v53 = *v35;
              goto LABEL_94;
            }
LABEL_95:
            v55 = *(_QWORD *)(v53 + 8);
            if (v47.u32[0] > 1uLL)
            {
              if (v55 >= *(_QWORD *)&v45)
                v55 %= *(_QWORD *)&v45;
            }
            else
            {
              v55 &= *(_QWORD *)&v45 - 1;
            }
            if (v55 != v46)
            {
              *(_QWORD *)(v28[5].__shared_owners_ + 8 * v55) = v51;
              v53 = *v35;
            }
          }
          *v51 = v53;
          *v35 = 0;
          --v28[6].__shared_owners_;
          v63 = v35;
          v64 = v28 + 6;
          v65 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v63);
          goto LABEL_102;
        }
LABEL_83:
        v48 = (_QWORD *)*v35;
LABEL_102:
        v35 = v48;
      }
      while (v48 != v37);
    }
LABEL_103:
    ;
  }
  if (v6[24])
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node((uint64_t)(v6 + 21), (_QWORD *)v6[23]);
    v6[23] = 0;
    v56 = v6[22];
    if (v56)
    {
      for (j = 0; j != v56; ++j)
        *(_QWORD *)(v6[21] + 8 * j) = 0;
    }
    v6[24] = 0;
  }
}

void sub_23006F62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = a1 + 24;
  v3 = *(_QWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  v6 = *(_QWORD *)(a1 + 16);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 4);
  return a1;
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>::~pair(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = a1[3];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  if ((*a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return a1;
}

void realityio::BuilderDependencyDAG::topologicalSort(realityio::BuilderDependencyDAG *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t i;
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  float v83;
  __int128 v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  char v89;

  v4 = *(_QWORD *)a2;
  for (i = *(_QWORD *)(a2 + 8);
        i != v4;
  *(_QWORD *)(a2 + 8) = v4;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  realityio::BuilderDependencyDAG::findRoots((uint64_t)a1, (uint64_t)&v85);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  MEMORY[0x2348B274C](&v81, realityio::kEndOfUpdateBuilderIdentifier);
  realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(a1, v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, &v84);
  if ((v81 & 7) != 0)
  {
    v7 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((_QWORD)v84)
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase((uint64_t *)&v85, &v84);
  v81 = 0u;
  v82 = 0u;
  v83 = 1.0;
  v9 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (!v9)
    goto LABEL_60;
  do
  {
    v10 = v9[19];
    v80 = 0uLL;
    v11 = (std::__shared_weak_count *)v9[3];
    if (!v11)
    {
      v12 = 0;
LABEL_14:
      v13 = 0;
      goto LABEL_15;
    }
    v12 = std::__shared_weak_count::lock(v11);
    *((_QWORD *)&v80 + 1) = v12;
    if (!v12)
      goto LABEL_14;
    v13 = v9[2];
    *(_QWORD *)&v80 = v13;
LABEL_15:
    v14 = 0x9DDFEA08EB382D69 * (((8 * v13) + 8) ^ HIDWORD(v13));
    v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ (v14 >> 47) ^ v14);
    v4 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
    v16 = *((_QWORD *)&v81 + 1);
    if (!*((_QWORD *)&v81 + 1))
      goto LABEL_31;
    v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v81 + 8));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v2 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      if (v4 >= *((_QWORD *)&v81 + 1))
        v2 = v4 % *((_QWORD *)&v81 + 1);
    }
    else
    {
      v2 = v4 & (*((_QWORD *)&v81 + 1) - 1);
    }
    v18 = *(uint64_t ***)(v81 + 8 * v2);
    if (!v18 || (v19 = *v18) == 0)
    {
LABEL_31:
      v21 = operator new(0x28uLL);
      *(_QWORD *)&v88 = v21;
      *((_QWORD *)&v88 + 1) = &v82;
      *v21 = 0;
      v21[1] = v4;
      v21[2] = v13;
      v21[3] = v12;
      v80 = 0uLL;
      *((_DWORD *)v21 + 8) = 0;
      v89 = 1;
      v22 = (float)(unint64_t)(*((_QWORD *)&v82 + 1) + 1);
      if (!v16 || (float)(v83 * (float)v16) < v22)
      {
        v23 = (v16 & (v16 - 1)) != 0;
        if (v16 < 3)
          v23 = 1;
        v24 = v23 | (2 * v16);
        v25 = vcvtps_u32_f32(v22 / v83);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v81, v26);
        v16 = *((_QWORD *)&v81 + 1);
        if ((*((_QWORD *)&v81 + 1) & (*((_QWORD *)&v81 + 1) - 1)) != 0)
        {
          if (v4 >= *((_QWORD *)&v81 + 1))
            v2 = v4 % *((_QWORD *)&v81 + 1);
          else
            v2 = v4;
        }
        else
        {
          v2 = (*((_QWORD *)&v81 + 1) - 1) & v4;
        }
      }
      v27 = v81;
      v28 = *(_QWORD **)(v81 + 8 * v2);
      if (v28)
      {
        *v21 = *v28;
      }
      else
      {
        *v21 = v82;
        *(_QWORD *)&v82 = v21;
        *(_QWORD *)(v27 + 8 * v2) = &v82;
        if (!*v21)
        {
LABEL_52:
          *(_QWORD *)&v88 = 0;
          ++*((_QWORD *)&v82 + 1);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)&v88);
          *((_DWORD *)v21 + 8) = v10;
          goto LABEL_53;
        }
        v29 = *(_QWORD *)(*v21 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v29 >= v16)
            v29 %= v16;
        }
        else
        {
          v29 &= v16 - 1;
        }
        v28 = (_QWORD *)(v81 + 8 * v29);
      }
      *v28 = v21;
      goto LABEL_52;
    }
    while (1)
    {
      v20 = v19[1];
      if (v20 == v4)
        break;
      if (v17.u32[0] > 1uLL)
      {
        if (v20 >= *((_QWORD *)&v81 + 1))
          v20 %= *((_QWORD *)&v81 + 1);
      }
      else
      {
        v20 &= *((_QWORD *)&v81 + 1) - 1;
      }
      if (v20 != v2)
        goto LABEL_31;
LABEL_30:
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_31;
    }
    if (v19[2] != v13)
      goto LABEL_30;
    *((_DWORD *)v19 + 8) = v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
LABEL_53:
    v9 = (_QWORD *)*v9;
  }
  while (v9);
LABEL_60:
  v32 = v85;
  v33 = v86;
  if (v85 != (_QWORD *)v86)
  {
    while (1)
    {
      v34 = v32[1];
      *(_QWORD *)&v80 = *v32;
      *((_QWORD *)&v80 + 1) = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v33 = v86;
      }
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>((uint64_t)v32, v33, (uint64_t)&v88, (v33 - (uint64_t)v32) >> 4);
      v86 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v86 - 16);
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a2, &v80);
      v88 = v80;
      if (*((_QWORD *)&v80 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 16);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v88);
      if (!v39)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (*((_QWORD *)&v88 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v88 + 1));
      v40 = (_QWORD *)v39[23];
      if (v40)
        break;
LABEL_126:
      if (v85 == (_QWORD *)v86 && (_QWORD)v84 != 0)
      {
        realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t)&v85, &v84);
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
        v84 = 0uLL;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
      if (*((_QWORD *)&v80 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v32 = v85;
      v33 = v86;
      if (v85 == (_QWORD *)v86)
        goto LABEL_141;
    }
    while (2)
    {
      v79 = 0uLL;
      v41 = (std::__shared_weak_count *)v40[4];
      if (v41)
      {
        v42 = std::__shared_weak_count::lock(v41);
        *((_QWORD *)&v79 + 1) = v42;
        if (v42)
        {
          v43 = v40[3];
          *(_QWORD *)&v79 = v43;
        }
        else
        {
          v43 = v79;
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
      v44 = 0x9DDFEA08EB382D69 * (((8 * v43) + 8) ^ HIDWORD(v43));
      v45 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v44 >> 47) ^ v44);
      v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
      v47 = *((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1))
      {
        v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v81 + 8));
        v48.i16[0] = vaddlv_u8(v48);
        if (v48.u32[0] > 1uLL)
        {
          v4 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
          if (v46 >= *((_QWORD *)&v81 + 1))
            v4 = v46 % *((_QWORD *)&v81 + 1);
        }
        else
        {
          v4 = v46 & (*((_QWORD *)&v81 + 1) - 1);
        }
        v49 = *(_QWORD **)(v81 + 8 * v4);
        if (v49)
        {
          v50 = (_QWORD *)*v49;
          if (*v49)
          {
            do
            {
              v51 = v50[1];
              if (v51 == v46)
              {
                if (v50[2] == v43)
                  goto LABEL_118;
              }
              else
              {
                if (v48.u32[0] > 1uLL)
                {
                  if (v51 >= *((_QWORD *)&v81 + 1))
                    v51 %= *((_QWORD *)&v81 + 1);
                }
                else
                {
                  v51 &= *((_QWORD *)&v81 + 1) - 1;
                }
                if (v51 != v4)
                  break;
              }
              v50 = (_QWORD *)*v50;
            }
            while (v50);
          }
        }
      }
      v52 = operator new(0x28uLL);
      v50 = v52;
      *(_QWORD *)&v88 = v52;
      *((_QWORD *)&v88 + 1) = &v82;
      *v52 = 0;
      v52[1] = v46;
      v52[2] = v43;
      v52[3] = v42;
      if (v42)
      {
        v53 = (unint64_t *)&v42->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      *((_DWORD *)v52 + 8) = 0;
      v89 = 1;
      v55 = (float)(unint64_t)(*((_QWORD *)&v82 + 1) + 1);
      if (!v47 || (float)(v83 * (float)v47) < v55)
      {
        v56 = (v47 & (v47 - 1)) != 0;
        if (v47 < 3)
          v56 = 1;
        v57 = v56 | (2 * v47);
        v58 = vcvtps_u32_f32(v55 / v83);
        if (v57 <= v58)
          v59 = v58;
        else
          v59 = v57;
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v81, v59);
        v47 = *((_QWORD *)&v81 + 1);
        if ((*((_QWORD *)&v81 + 1) & (*((_QWORD *)&v81 + 1) - 1)) != 0)
        {
          if (v46 >= *((_QWORD *)&v81 + 1))
            v4 = v46 % *((_QWORD *)&v81 + 1);
          else
            v4 = v46;
        }
        else
        {
          v4 = (*((_QWORD *)&v81 + 1) - 1) & v46;
        }
      }
      v60 = v81;
      v61 = *(_QWORD **)(v81 + 8 * v4);
      if (v61)
      {
        *v50 = *v61;
        goto LABEL_116;
      }
      *v50 = v82;
      *(_QWORD *)&v82 = v50;
      *(_QWORD *)(v60 + 8 * v4) = &v82;
      if (*v50)
      {
        v62 = *(_QWORD *)(*v50 + 8);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v62 >= v47)
            v62 %= v47;
        }
        else
        {
          v62 &= v47 - 1;
        }
        v61 = (_QWORD *)(v81 + 8 * v62);
LABEL_116:
        *v61 = v50;
      }
      *(_QWORD *)&v88 = 0;
      ++*((_QWORD *)&v82 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)&v88);
LABEL_118:
      v63 = *((_DWORD *)v50 + 8) - 1;
      *((_DWORD *)v50 + 8) = v63;
      if (!v63)
        realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t)&v85, &v79);
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_126;
      continue;
    }
  }
LABEL_141:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::~__hash_table((uint64_t)&v81);
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  *(_QWORD *)&v81 = &v85;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
}

void sub_23006FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  a15 = (void **)&a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::findRoots(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  unsigned int *v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;

  v39 = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)a2);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v38 = 0;
  v37 = 0uLL;
  v40 = (void **)&v37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v40);
  v4 = *(_QWORD **)(a1 + 16);
  if (!v4)
    return;
  v5 = (_QWORD *)(a1 + 40);
  do
  {
    v6 = v4 + 8;
    v35 = v4;
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      v7 = (uint64_t *)v6[6];
      v8 = v6[9];
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (v7)
      {
        v36 = v6;
        v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        while (1)
        {
          LODWORD(v37) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v37 + 1, (_DWORD *)v7 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v37 + 2, (_DWORD *)v7 + 5);
          v38 = v8;
          if ((v8 & 7) != 0)
          {
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 2, v11));
            if ((v12 & 1) == 0)
              v38 &= 0xFFFFFFFFFFFFFFF8;
          }
          v13 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(v5, (uint64_t)&v37);
          if (v13 && (v14 = v13, (v15 = (std::__shared_weak_count *)v13[6]) != 0))
          {
            v16 = std::__shared_weak_count::lock(v15);
            v17 = v16;
            if (v16)
            {
              v18 = v14[5];
              p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
              do
                v20 = __ldxr(p_shared_weak_owners);
              while (__stxr(v20 + 1, p_shared_weak_owners));
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v22 = __ldaxr(p_shared_owners);
              while (__stlxr(v22 - 1, p_shared_owners));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            else
            {
              v18 = 0;
            }
          }
          else
          {
            v18 = 0;
            v17 = 0;
          }
          if ((v38 & 7) != 0)
          {
            v23 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37 + 4);
          if (v17)
          {
            v25 = std::__shared_weak_count::lock(v17);
            std::__shared_weak_count::__release_weak(v17);
            if (v25)
            {
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
              if (v18)
                break;
            }
          }
          v7 = (uint64_t *)*v7;
          if (!v7)
          {
            v28 = 0;
            goto LABEL_42;
          }
        }
        v28 = 1;
LABEL_42:
        v4 = v35;
        v6 = v36;
        if ((v8 & 7) == 0)
          goto LABEL_45;
LABEL_43:
        v29 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
        goto LABEL_45;
      }
      v28 = 0;
      if ((v8 & 7) != 0)
        goto LABEL_43;
LABEL_45:
      if ((v28 & 1) != 0)
        goto LABEL_55;
    }
    v37 = 0uLL;
    v31 = (std::__shared_weak_count *)v4[3];
    if (v31)
    {
      *((_QWORD *)&v37 + 1) = std::__shared_weak_count::lock(v31);
      if (*((_QWORD *)&v37 + 1))
        *(_QWORD *)&v37 = v4[2];
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a2, &v37);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
LABEL_55:
    v4 = (_QWORD *)*v4;
  }
  while (v4);
}

void sub_230070298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char v17;
  char v18;

  v3 = *a1;
  v4 = (_QWORD *)a1[1];
  if ((_QWORD *)v3 == v4)
  {
    v5 = (_QWORD *)v3;
  }
  else
  {
    v5 = (_QWORD *)v3;
    while (*v5 != *a2)
    {
      v5 += 2;
      if (v5 == v4)
      {
        v5 = (_QWORD *)a1[1];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    if (v5 == (_QWORD *)v3)
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v3, a1[1], (uint64_t)&v17, ((uint64_t)v4 - v3) >> 4);
      a1[1] = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1[1] - 16);
    }
    else
    {
      v6 = v5;
      if (v5 + 2 == v4)
      {
        v9 = a1[1];
      }
      else
      {
        v7 = (uint64_t)v5;
        do
        {
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v7, (__int128 *)(v7 + 16));
          v6 += 2;
          v8 = v7 + 32;
          v7 += 16;
        }
        while ((_QWORD *)v8 != v4);
        v9 = a1[1];
      }
      while ((_QWORD *)v9 != v6)
        v9 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v9 - 16);
      a1[1] = (uint64_t)v6;
      v10 = *a1;
      v11 = (uint64_t)v6 - v10;
      if ((uint64_t)v6 - v10 >= 17)
      {
        v12 = v11 >> 4;
        v13 = (unint64_t)((v11 >> 4) - 2) >> 1;
        v14 = v13 + 1;
        v15 = (_QWORD *)(v10 + 16 * v13);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v10, (uint64_t)&v18, v12, v15);
          v15 -= 2;
          --v14;
        }
        while (v14);
      }
    }
  }
  return v5 != v4;
}

void realityio::BuilderDependencyDAG::findDownstreamDependencies(_QWORD *a1, __int128 **a2, uint64_t a3)
{
  __int128 *v5;
  __int128 *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  void **v26;
  void ***v27;
  void ***v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *i;
  _QWORD *exception;
  __int128 v38;
  void **v39;
  std::__shared_weak_count *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  __int128 v44;
  _OWORD *v45;
  char *v46;
  unint64_t *v47;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      v9 = *((_QWORD *)v5 + 1);
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      if ((unint64_t)v7 >= v43)
      {
        v38 = v8;
        v12 = (v7 - v41) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)(v43 - (_QWORD)v41) >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if (v43 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v47 = &v43;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v43, v14);
        v16 = &v15[16 * v12];
        *(_QWORD *)&v44 = v15;
        *((_QWORD *)&v44 + 1) = v16;
        v46 = &v15[16 * v17];
        *(_OWORD *)v16 = v38;
        v45 = v16 + 16;
        std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer((uint64_t *)&v41, &v44);
        v7 = v42;
        std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer((void **)&v44);
      }
      else
      {
        *(_QWORD *)v7 = v8;
        *((_QWORD *)v7 + 1) = v9;
        v7 += 16;
      }
      v42 = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  v46 = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)a3);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v45 = 0;
  v44 = 0uLL;
  v39 = (void **)&v44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  while (1)
  {
    v18 = v42;
    if (v41 == v42)
      break;
    v19 = v42 - 16;
    v39 = (void **)*((_QWORD *)v42 - 2);
    v20 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
    v40 = v20;
    if (v20)
    {
      p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
      do
        v22 = __ldxr(p_shared_weak_owners);
      while (__stxr(v22 + 1, p_shared_weak_owners));
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
    if (v23)
      std::__shared_weak_count::__release_weak(v23);
    v42 = v19;
    v24 = atomic_load((unsigned int *)(a1[16] + 28));
    if (v24 == 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v44, "findDownstreamDependenciesCancel");
      realityio::ImportSession::CancelledException::CancelledException(exception, &v44);
    }
    if (v40)
    {
      v25 = std::__shared_weak_count::lock(v40);
      v26 = v39;
      if (!v25)
        v26 = 0;
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    v27 = *(void ****)a3;
    v28 = *(void ****)(a3 + 8);
    if (*(void ****)a3 != v28)
    {
      while (*v27 != v26)
      {
        v27 += 2;
        if (v27 == v28)
        {
          v27 = *(void ****)(a3 + 8);
          break;
        }
      }
    }
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v31 = v40;
    if (v27 == v28)
    {
      v44 = 0uLL;
      if (v40)
      {
        *((_QWORD *)&v44 + 1) = std::__shared_weak_count::lock(v40);
        if (*((_QWORD *)&v44 + 1))
          *(_QWORD *)&v44 = v39;
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a3, &v44);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v39);
      if (!v35)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      for (i = v35 + 23;
            ;
            std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100]((uint64_t *)&v41, (__int128 *)(i + 3)))
      {
        i = (_QWORD *)*i;
        if (!i)
          break;
      }
      v31 = v40;
      if (v40)
LABEL_54:
        std::__shared_weak_count::__release_weak(v31);
    }
    else if (v40)
    {
      goto LABEL_54;
    }
  }
  *(_QWORD *)&v44 = &v41;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
}

void sub_230070764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  a11 = &a13;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void **std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 16);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer(v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 16);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_230070910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::BuilderDependencyDAG::findUnsatisfiableBuilders(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  int64x2_t v52;
  void **v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *j;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  int8x8_t prime;
  void *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint8x8_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v112;
  uint64_t v113;
  int64x2_t v114;
  _QWORD v115[2];
  __int128 v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD v120[2];
  int v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  int64x2_t v127;
  void **v128;
  unint64_t v129;

  if (*(_QWORD *)(a2 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(a2, *(char **)(a2 + 16));
    *(_QWORD *)(a2 + 16) = 0;
    v3 = *(_QWORD *)(a2 + 8);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)a2 + 8 * i) = 0;
    }
    *(_QWORD *)(a2 + 24) = 0;
  }
  memset(v120, 0, sizeof(v120));
  v121 = 1065353216;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  realityio::BuilderDependencyDAG::findRoots((uint64_t)a1, (uint64_t)&v117);
  v5 = v117;
  v6 = v118;
  if (v117 != (_QWORD *)v118)
  {
    v7 = a1 + 5;
    v8 = (unint64_t)v115;
    v108 = (_QWORD *)(a2 + 16);
    v110 = a2;
    while (1)
    {
      v9 = v5[1];
      *(_QWORD *)&v116 = *v5;
      *((_QWORD *)&v116 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v6 = v118;
      }
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>((uint64_t)v5, v6, (uint64_t)&v126, (v6 - (uint64_t)v5) >> 4);
      v118 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v118 - 16);
      v122 = v116;
      if (*((_QWORD *)&v116 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 16);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v122);
      if (!v14)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (*((_QWORD *)&v122 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v122 + 1));
      std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)v120, &v116, &v116);
      v114 = 0uLL;
      v115[0] = 0;
      v112 = v14;
      v15 = (uint64_t *)v14[8];
      if (!v15)
        goto LABEL_180;
      do
      {
        if (*((_DWORD *)v15 + 6) != 1)
        {
          v16 = (uint64_t *)v15[6];
          if (v16)
          {
            while (1)
            {
              LODWORD(v122) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v122 + 1, (_DWORD *)v16 + 4);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v122 + 2, (_DWORD *)v16 + 5);
              v17 = v15[9];
              v123 = v17;
              if ((v17 & 7) != 0)
              {
                v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
                do
                  v19 = __ldxr(v18);
                while (__stxr(v19 + 2, v18));
                v17 = v123;
                if ((v19 & 1) == 0)
                {
                  v17 = v123 & 0xFFFFFFFFFFFFFFF8;
                  v123 &= 0xFFFFFFFFFFFFFFF8;
                }
              }
              v20 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(v7, (uint64_t)&v122);
              v21 = v20;
              if (v20)
              {
                v22 = v20;
                do
                  v22 = (uint64_t *)*v22;
                while (v22
                     && *((_DWORD *)v22 + 4) == (_DWORD)v122
                     && *(uint64_t *)((char *)v22 + 20) == *(_QWORD *)((char *)&v122 + 4)
                     && (v22[4] & 0xFFFFFFFFFFFFFFF8) == (v17 & 0xFFFFFFFFFFFFFFF8));
              }
              else
              {
                v22 = 0;
              }
              if ((v17 & 7) != 0)
              {
                v23 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
                do
                  v24 = __ldxr(v23);
                while (__stlxr(v24 - 2, v23));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v122 + 4);
              if (v22 != v21)
                break;
              v16 = (uint64_t *)*v16;
              if (!v16)
                goto LABEL_39;
            }
          }
          else
          {
LABEL_39:
            v25 = v15[2];
            *(_QWORD *)&v122 = v25;
            if ((v25 & 7) != 0)
            {
              v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 2, v26));
              if ((v27 & 1) == 0)
                *(_QWORD *)&v122 = v122 & 0xFFFFFFFFFFFFFFF8;
            }
            v28 = v15[9];
            *((_QWORD *)&v122 + 1) = v28;
            if ((v28 & 7) != 0)
            {
              v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 2, v29));
              if ((v30 & 1) == 0)
                *((_QWORD *)&v122 + 1) &= 0xFFFFFFFFFFFFFFF8;
            }
            std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)&v123, (uint64_t)(v15 + 4));
            v31 = v114.i64[1];
            if (v114.i64[1] >= v115[0])
            {
              v33 = 0x6DB6DB6DB6DB6DB7 * ((v114.i64[1] - v114.i64[0]) >> 3);
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) > 0x492492492492492)
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              if (0xDB6DB6DB6DB6DB6ELL * ((v115[0] - v114.i64[0]) >> 3) > v34)
                v34 = 0xDB6DB6DB6DB6DB6ELL * ((v115[0] - v114.i64[0]) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v115[0] - v114.i64[0]) >> 3)) >= 0x249249249249249)
                v35 = 0x492492492492492;
              else
                v35 = v34;
              v129 = v8;
              if (v35)
              {
                if (v35 > 0x492492492492492)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v36 = (void **)operator new(56 * v35);
              }
              else
              {
                v36 = 0;
              }
              v37 = (_QWORD *)v8;
              v126 = v36;
              v127.i64[0] = (uint64_t)&v36[7 * v33];
              v127.i64[1] = v127.i64[0];
              v128 = &v36[7 * v35];
              std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>(v127.i64[0], &v122);
              v38 = (_QWORD *)v127.i64[0];
              v32 = v127.i64[1] + 56;
              v127.i64[1] += 56;
              v39 = v114.i64[1];
              v40 = v114.i64[0];
              if (v114.i64[1] == v114.i64[0])
              {
                v52 = vdupq_n_s64(v114.u64[1]);
                v8 = (unint64_t)v37;
              }
              else
              {
                v41 = 0;
                v42 = (_QWORD *)v127.i64[0];
                v43 = (_QWORD *)v127.i64[0];
                v44 = v114.i64[1];
                do
                {
                  v46 = *(_QWORD *)(v44 - 56);
                  v44 -= 56;
                  v45 = v46;
                  *(v43 - 7) = v46;
                  v43 -= 7;
                  if ((v46 & 7) != 0)
                  {
                    v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v48 = __ldxr(v47);
                    while (__stxr(v48 + 2, v47));
                    if ((v48 & 1) == 0)
                      *v43 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v49 = *(_QWORD *)(v39 - 48);
                  *(v42 - 6) = v49;
                  if ((v49 & 7) != 0)
                  {
                    v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v51 = __ldxr(v50);
                    while (__stxr(v51 + 2, v50));
                    if ((v51 & 1) == 0)
                      *(v42 - 6) &= 0xFFFFFFFFFFFFFFF8;
                  }
                  std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)(v42 - 5), v39 - 40);
                  v41 -= 56;
                  v42 = v43;
                  v39 = v44;
                }
                while (v44 != v40);
                v52 = v114;
                v32 = v127.i64[1];
                v38 = v43;
                v8 = (unint64_t)v37;
                v7 = a1 + 5;
              }
              v114.i64[0] = (uint64_t)v38;
              v114.i64[1] = v32;
              v127 = v52;
              v53 = (void **)v115[0];
              v115[0] = v128;
              v128 = v53;
              v126 = (void **)v52.i64[0];
              std::__split_buffer<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::~__split_buffer((uint64_t)&v126);
            }
            else
            {
              std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>((_QWORD *)v114.i64[1], &v122);
              v32 = v31 + 56;
            }
            v114.i64[1] = v32;
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v123);
            if ((BYTE8(v122) & 7) != 0)
            {
              v54 = (unsigned int *)(*((_QWORD *)&v122 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v55 = __ldxr(v54);
              while (__stlxr(v55 - 2, v54));
            }
            if ((v122 & 7) != 0)
            {
              v56 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
              do
                v57 = __ldxr(v56);
              while (__stlxr(v57 - 2, v56));
            }
          }
        }
        v15 = (uint64_t *)*v15;
      }
      while (v15);
      v58 = v114.i64[1];
      v59 = v114.i64[0];
      if (v114.i64[0] == v114.i64[1])
        goto LABEL_180;
      v60 = (_QWORD *)v112[23];
      if (v60)
      {
        do
        {
          v122 = 0uLL;
          v61 = (std::__shared_weak_count *)v60[4];
          if (v61)
          {
            *((_QWORD *)&v122 + 1) = std::__shared_weak_count::lock(v61);
            if (*((_QWORD *)&v122 + 1))
              *(_QWORD *)&v122 = v60[3];
          }
          if (!std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(v120, &v122))realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t)&v117, &v122);
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
          if (*((_QWORD *)&v122 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v60 = (_QWORD *)*v60;
        }
        while (v60);
        v58 = v114.i64[1];
        v59 = v114.i64[0];
      }
      v65 = v116;
      v122 = v116;
      v113 = *((_QWORD *)&v116 + 1);
      v116 = 0uLL;
      v123 = v59;
      v124 = v58;
      v109 = v115[0];
      v125 = v115[0];
      v115[0] = 0;
      v114 = 0uLL;
      v66 = 0x9DDFEA08EB382D69 * (((8 * v122) + 8) ^ DWORD1(v122));
      v67 = 0x9DDFEA08EB382D69 * (DWORD1(v122) ^ (v66 >> 47) ^ v66);
      v68 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
      v69 = *(_QWORD *)(v110 + 8);
      if (v69)
      {
        v70 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
        v70.i16[0] = vaddlv_u8(v70);
        if (v70.u32[0] > 1uLL)
        {
          v71 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
          if (v68 >= v69)
            v71 = v68 % v69;
        }
        else
        {
          v71 = v68 & (v69 - 1);
        }
        v8 = v71;
        v72 = *(_QWORD **)(*(_QWORD *)v110 + 8 * v71);
        if (v72)
        {
          for (j = (_QWORD *)*v72; j; j = (_QWORD *)*j)
          {
            v74 = j[1];
            if (v74 == v68)
            {
              if (j[2] == v65)
                goto LABEL_175;
            }
            else
            {
              if (v70.u32[0] > 1uLL)
              {
                if (v74 >= v69)
                  v74 %= v69;
              }
              else
              {
                v74 &= v69 - 1;
              }
              if (v74 != v71)
                break;
            }
          }
        }
      }
      v75 = operator new(0x38uLL);
      v76 = v75;
      *v75 = 0;
      v75[1] = v68;
      v75[2] = v65;
      v75[3] = v113;
      if (v113)
      {
        v77 = (unint64_t *)(v113 + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
        v59 = v123;
        v58 = v124;
        v79 = v125;
      }
      else
      {
        v79 = v109;
      }
      v75[4] = v59;
      v75[5] = v58;
      v75[6] = v79;
      v124 = 0;
      v125 = 0;
      v123 = 0;
      v80 = (float)(unint64_t)(*(_QWORD *)(v110 + 24) + 1);
      v81 = *(float *)(v110 + 32);
      if (!v69 || (float)(v81 * (float)v69) < v80)
        break;
LABEL_165:
      v97 = *(_QWORD **)v110;
      v98 = *(_QWORD **)(*(_QWORD *)v110 + 8 * v8);
      if (v98)
      {
        *v76 = *v98;
      }
      else
      {
        *v76 = *v108;
        *v108 = v76;
        v97[v8] = v108;
        if (!*v76)
          goto LABEL_174;
        v99 = *(_QWORD *)(*v76 + 8);
        if ((v69 & (v69 - 1)) != 0)
        {
          if (v99 >= v69)
            v99 %= v69;
        }
        else
        {
          v99 &= v69 - 1;
        }
        v98 = (_QWORD *)(*(_QWORD *)v110 + 8 * v99);
      }
      *v98 = v76;
LABEL_174:
      ++*(_QWORD *)(v110 + 24);
LABEL_175:
      v126 = (void **)&v123;
      std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v126);
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      v8 = (unint64_t)v115;
      if (*((_QWORD *)&v122 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
LABEL_180:
      *(_QWORD *)&v122 = &v114;
      std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v5 = v117;
      v6 = v118;
      v7 = a1 + 5;
      if (v117 == (_QWORD *)v118)
        goto LABEL_196;
    }
    v82 = (v69 & (v69 - 1)) != 0;
    if (v69 < 3)
      v82 = 1;
    v83 = v82 | (2 * v69);
    v84 = vcvtps_u32_f32(v80 / v81);
    if (v83 <= v84)
      prime = (int8x8_t)v84;
    else
      prime = (int8x8_t)v83;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v69 = *(_QWORD *)(v110 + 8);
    if (*(_QWORD *)&prime > v69)
      goto LABEL_131;
    if (*(_QWORD *)&prime < v69)
    {
      v92 = vcvtps_u32_f32((float)*(unint64_t *)(v110 + 24) / *(float *)(v110 + 32));
      if (v69 < 3 || (v93 = (uint8x8_t)vcnt_s8((int8x8_t)v69), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
      {
        v92 = std::__next_prime(v92);
      }
      else
      {
        v94 = 1 << -(char)__clz(v92 - 1);
        if (v92 >= 2)
          v92 = v94;
      }
      if (*(_QWORD *)&prime <= v92)
        prime = (int8x8_t)v92;
      if (*(_QWORD *)&prime >= v69)
      {
        v69 = *(_QWORD *)(v110 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_131:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v86 = operator new(8 * *(_QWORD *)&prime);
          v87 = *(_QWORD **)v110;
          *(_QWORD *)v110 = v86;
          if (v87)
            operator delete(v87);
          v88 = 0;
          *(int8x8_t *)(v110 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v110 + 8 * v88++) = 0;
          while (*(_QWORD *)&prime != v88);
          v89 = (_QWORD *)*v108;
          if (*v108)
          {
            v90 = v89[1];
            v91 = (uint8x8_t)vcnt_s8(prime);
            v91.i16[0] = vaddlv_u8(v91);
            if (v91.u32[0] > 1uLL)
            {
              if (v90 >= *(_QWORD *)&prime)
                v90 %= *(_QWORD *)&prime;
            }
            else
            {
              v90 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v110 + 8 * v90) = v108;
            v95 = (_QWORD *)*v89;
            if (*v89)
            {
              do
              {
                v96 = v95[1];
                if (v91.u32[0] > 1uLL)
                {
                  if (v96 >= *(_QWORD *)&prime)
                    v96 %= *(_QWORD *)&prime;
                }
                else
                {
                  v96 &= *(_QWORD *)&prime - 1;
                }
                if (v96 != v90)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v110 + 8 * v96))
                  {
                    *(_QWORD *)(*(_QWORD *)v110 + 8 * v96) = v89;
                    goto LABEL_156;
                  }
                  *v89 = *v95;
                  *v95 = **(_QWORD **)(*(_QWORD *)v110 + 8 * v96);
                  **(_QWORD **)(*(_QWORD *)v110 + 8 * v96) = v95;
                  v95 = v89;
                }
                v96 = v90;
LABEL_156:
                v89 = v95;
                v95 = (_QWORD *)*v95;
                v90 = v96;
              }
              while (v95);
            }
          }
          v69 = (unint64_t)prime;
          goto LABEL_160;
        }
        v106 = *(_QWORD **)v110;
        *(_QWORD *)v110 = 0;
        if (v106)
          operator delete(v106);
        v69 = 0;
        *(_QWORD *)(v110 + 8) = 0;
      }
    }
LABEL_160:
    if ((v69 & (v69 - 1)) != 0)
    {
      if (v68 >= v69)
        v8 = v68 % v69;
      else
        v8 = v68;
    }
    else
    {
      v8 = (v69 - 1) & v68;
    }
    goto LABEL_165;
  }
LABEL_196:
  *(_QWORD *)&v122 = &v117;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  return std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v120);
}

void sub_23007141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,std::__shared_weak_count *a34)
{
  a33 = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<realityio::Builder> const,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1);
}

uint64_t realityio::BuilderDependencyDAG::removeBuilder(_QWORD *a1, unint64_t *a2)
{
  unint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)(*a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)(v4 + 12));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v14);
  v5 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>(a1 + 10, &v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1 + 10, v5, (uint64_t)&v15);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v15, 0);
  realityio::BuilderDependencyDAG::removeInputDataForGraphNode(a1, a2);
  realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(a1, a2);
  v6 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__erase_unique<std::weak_ptr<realityio::Builder>>(a1, &v15);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
}

void sub_2300716F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery((realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 72);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  _QWORD *i;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL4 v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;

  v4 = bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 20)+ ((*(unsigned int *)(a2 + 20)+ (unint64_t)*(unsigned int *)(a2 + 16)+ (*(unsigned int *)(a2 + 20) + (unint64_t)*(unsigned int *)(a2 + 16))* (*(unsigned int *)(a2 + 20) + (unint64_t)*(unsigned int *)(a2 + 16))) >> 1)));
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_43;
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (*(_QWORD *)&prime <= v18)
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(_QWORD **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
        {
          v22 = i[1];
          if (v17.u32[0] > 1uLL)
          {
            if (v22 >= *(_QWORD *)&prime)
              v22 %= *(_QWORD *)&prime;
          }
          else
          {
            v22 &= *(_QWORD *)&prime - 1;
          }
          if (v22 == v16)
          {
            v15 = i;
          }
          else
          {
            v23 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
            {
              do
              {
                v24 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23 && i[2] == v23[2]);
              *v15 = v23;
              *v24 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v22);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v22) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v15;
              v15 = i;
              v16 = v22;
            }
          }
        }
      }
      v5 = (unint64_t)prime;
    }
    else
    {
      v36 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v36)
        operator delete(v36);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = v4;
    if (v5 <= v4)
      v26 = v4 % v5;
  }
  else
  {
    v26 = (v5 - 1) & v4;
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v26);
  if (v27)
  {
    v28 = 0;
    do
    {
      v29 = v27;
      v27 = (_QWORD *)*v27;
      if (!v27)
        break;
      v30 = v27[1];
      if (v25.u32[0] > 1uLL)
      {
        v31 = v27[1];
        if (v30 >= v5)
          v31 = v30 % v5;
      }
      else
      {
        v31 = v30 & (v5 - 1);
      }
      if (v31 != v26)
        break;
      v32 = v30 == v4 && v27[2] == *(_QWORD *)(a2 + 16);
      v33 = v28 & !v32;
      v28 |= v32;
    }
    while (v33 != 1);
  }
  else
  {
    v29 = 0;
  }
  v34 = *(_QWORD *)(a2 + 8);
  if (v25.u32[0] > 1uLL)
  {
    if (v34 >= v5)
      v34 %= v5;
  }
  else
  {
    v34 &= v5 - 1;
  }
  if (!v29)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_79;
    v35 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v35 >= v5)
        v35 %= v5;
    }
    else
    {
      v35 &= v5 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = a2;
    goto LABEL_79;
  }
  *(_QWORD *)a2 = *v29;
  *v29 = a2;
  if (*(_QWORD *)a2)
  {
    v35 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v35 >= v5)
        v35 %= v5;
    }
    else
    {
      v35 &= v5 - 1;
    }
    if (v35 != v34)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(v1 + 2);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v2 = a1[7];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)(a1 + 2));
  if ((*a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (a1)
  {
    v2 = __p[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = __p[2];
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[4];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      v7 = v2[2];
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *realityio::ImportSession::CancelledException::CancelledException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_24FDF1300;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_230071EA8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = a1[3];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  if ((*a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

uint64_t realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1 + 16, (uint64_t *)(a2 + 16));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1 + 56, (uint64_t *)(a2 + 56));
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v6;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(a1 + 104);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v4 + 8 * v7) = a1 + 112;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v10;
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v11;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(a1 + 144);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v12 %= v13;
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(_QWORD *)(v9 + 8 * v12) = a1 + 152;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  return a1;
}

uint64_t std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  return a1;
}

void realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo::~UnsatisfiedInputDescriptorInfo(realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

uint64_t std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  *a2 = 0;
  a1[1] = a2[1];
  a2[1] = 0;
  return std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)(a2 + 2));
  v4 = a2[1];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((*a2 & 7) != 0)
  {
    v7 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

uint64_t std::__split_buffer<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100](v4, (_QWORD *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::weak_ptr<realityio::Builder>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::weak_ptr<realityio::Builder>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[2];
  char v26;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x20uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v12 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v12;
}

void sub_230072848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *i;
  unint64_t v9;

  v4 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()((unsigned int *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v9 = i[1];
      if (v4 == v9)
      {
        if (*((_DWORD *)i + 4) == *(_DWORD *)a2
          && *(uint64_t *)((char *)i + 20) == *(_QWORD *)(a2 + 4)
          && (i[4] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8))
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

unint64_t realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(unsigned int *a1)
{
  unint64_t v1;

  v1 = (((unint64_t)*a1 << 6)
      + ((unint64_t)*a1 >> 2)
      - 0x61C8864680B583E9
      + bswap64(0x9E3779B97F4A7C55* (a1[2]+ ((a1[2] + (unint64_t)a1[1] + (a1[2] + (unint64_t)a1[1]) * (a1[2] + (unint64_t)a1[1])) >> 1)))) ^ *a1;
  return (bswap64(0x9E3779B97F4A7C55 * (*((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFFFF8))
        + (v1 << 6)
        + (v1 >> 2)
        - 0x61C8864680B583E9) ^ v1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(_QWORD *a1, unint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = realityio::WeakBuilderPtrHash::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v6 == v13)
      {
        if (realityio::WeakBuilderPtrEqual::operator()(v12, v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = realityio::WeakBuilderPtrHash::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (realityio::WeakBuilderPtrEqual::operator()(v12, v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t realityio::WeakBuilderPtrHash::operator()(uint64_t a1, unint64_t *a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
      v5 = *a2;
    else
      v5 = 0;
    if (v4)
    {
      v6 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v9 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v9 >> 47) ^ v9);
  return 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
}

BOOL realityio::WeakBuilderPtrEqual::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BOOL8 v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    if (v6)
      v7 = *a2;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (std::__shared_weak_count *)a3[1];
  if (v8 && (v9 = std::__shared_weak_count::lock(v8)) != 0)
  {
    v10 = v9;
    v11 = v7 == *a3;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v11 = v7 == 0;
  }
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  if (!a2)
    return 0;
  v3 = a3 & 0xFFFFFFFFFFFFFFF8;
  v4 = bswap64(0x9E3779B97F4A7C55 * (a3 & 0xFFFFFFFFFFFFFFF8));
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= a2)
      v6 = v4 % a2;
  }
  else
  {
    v6 = v4 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v6);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (!*v8)
    return result;
  while (1)
  {
    v9 = result[1];
    if (v4 == v9)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= a2)
        v9 %= a2;
    }
    else
    {
      v9 &= a2 - 1;
    }
    if (v9 != v6)
      return 0;
LABEL_18:
    result = (_QWORD *)*result;
    if (!result)
      return result;
  }
  if ((result[2] & 0xFFFFFFFFFFFFFFF8) != v3)
    goto LABEL_18;
  v10 = result;
  do
    v10 = (_QWORD *)*v10;
  while (v10 && (v10[2] & 0xFFFFFFFFFFFFFFF8) == v3);
  return result;
}

void std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL realityio::operator==(uint64_t a1, int8x8_t *a2)
{
  uint64_t **v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  if (*(_DWORD *)a1 == a2->i32[0] && *(_QWORD *)(a1 + 32) == *(_QWORD *)&a2[4])
  {
    v2 = *(uint64_t ***)(a1 + 24);
    if (!v2)
      return (*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)&a2[6] & 0xFFFFFFFFFFFFFFF8);
    v3 = a2[2];
    if (v3)
    {
      v4 = (uint8x8_t)vcnt_s8(v3);
      v4.i16[0] = vaddlv_u8(v4);
      v5 = *(_QWORD *)&v3 - 1;
LABEL_6:
      v6 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v2 + 5)+ ((*((unsigned int *)v2 + 5)+ (unint64_t)*((unsigned int *)v2 + 4)+ (*((unsigned int *)v2 + 5) + (unint64_t)*((unsigned int *)v2 + 4))* (*((unsigned int *)v2 + 5) + (unint64_t)*((unsigned int *)v2 + 4))) >> 1)));
      if (v4.u32[0] > 1uLL)
      {
        v7 = v6;
        if (v6 >= *(_QWORD *)&v3)
          v7 = v6 % *(_QWORD *)&v3;
      }
      else
      {
        v7 = v6 & v5;
      }
      v8 = *(_QWORD **)(*(_QWORD *)&a2[1] + 8 * v7);
      if (!v8)
        return 0;
      v9 = (_QWORD *)*v8;
      if (!v9)
        return 0;
      do
      {
        v10 = v9[1];
        if (v6 == v10)
        {
          if ((uint64_t *)v9[2] == v2[2])
          {
            v2 = (uint64_t **)*v2;
            if (!v2)
              return (*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)&a2[6] & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_6;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v10 >= *(_QWORD *)&v3)
              v10 %= *(_QWORD *)&v3;
          }
          else
          {
            v10 &= v5;
          }
          if (v10 != v7)
            return 0;
        }
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
  }
  return 0;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  __int128 *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v8 = v6 >> 1;
    v9 = (__int128 *)(a1 + 16 * (v6 >> 1));
    v10 = (_QWORD *)(a2 - 16);
    v11 = *(_QWORD *)(a2 - 16);
    if (*(_DWORD *)(*(_QWORD *)v9 + 176) > *(_DWORD *)(v11 + 176))
    {
      v16 = *(_OWORD *)(a2 - 16);
      *v10 = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = (uint64_t)v9;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v10, v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 16 * v8);
        v10 = (_QWORD *)v12;
      }
      while (*(_DWORD *)(*(_QWORD *)v9 + 176) > *(_DWORD *)(v11 + 176));
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v12, &v16);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
      if (*((_QWORD *)&v16 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1 + 16;
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 192));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(a1 + 152);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(a1 + 112);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table(a1 + 72);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(a1 + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t *v12;

  v4 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()((unsigned int *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = *v9;
  if (!*v9)
    return result;
  while (1)
  {
    v11 = result[1];
    if (v11 == v6)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v5)
        v11 %= *(_QWORD *)&v5;
    }
    else
    {
      v11 &= *(_QWORD *)&v5 - 1;
    }
    if (v11 != v8)
      return 0;
LABEL_18:
    result = (uint64_t *)*result;
    if (!result)
      return result;
  }
  if (*((_DWORD *)result + 4) != *(_DWORD *)a2
    || *(uint64_t *)((char *)result + 20) != *(_QWORD *)(a2 + 4)
    || (result[4] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    goto LABEL_18;
  }
  v12 = result;
  do
    v12 = (uint64_t *)*v12;
  while (v12
       && *((_DWORD *)v12 + 4) == *(_DWORD *)a2
       && *(uint64_t *)((char *)v12 + 20) == *(_QWORD *)(a2 + 4)
       && (v12[4] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(v1 + 2);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = a1[5];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = a1[2];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 4);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(v1 + 2);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>(uint64_t a1, uint64_t a2)
{
  uint64_t ***v4;
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t *i;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD v46[2];
  char v47;

  v4 = (uint64_t ***)(a1 + 16);
  v5 = (char *)operator new(0x40uLL);
  v46[0] = v5;
  v46[1] = v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)a2;
  v6 = (unsigned int *)(v5 + 16);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 5, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 6, (_DWORD *)(a2 + 8));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 5) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v5 + 6) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *((_QWORD *)v5 + 7) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v47 = 1;
  *((_QWORD *)v5 + 1) = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(v6);
  v12 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(v6);
  *((_QWORD *)v5 + 1) = v12;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v13 || (float)(v15 * (float)v13) < v14)
  {
    v16 = 1;
    if (v13 >= 3)
      v16 = (v13 & (v13 - 1)) != 0;
    v17 = v16 | (2 * v13);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v13)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v13)
      goto LABEL_48;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v13 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v13)
    {
      v13 = *(_QWORD *)(a1 + 8);
      goto LABEL_48;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * *(_QWORD *)&prime);
      v21 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v20;
      if (v21)
        operator delete(v21);
      v22 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
      while (*(_QWORD *)&prime != v22);
      v23 = *v4;
      if (*v4)
      {
        v24 = (unint64_t)v23[1];
        v25 = (uint8x8_t)vcnt_s8(prime);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v24 >= *(_QWORD *)&prime)
            v24 %= *(_QWORD *)&prime;
        }
        else
        {
          v24 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v4;
        for (i = *v23; *v23; i = *v23)
        {
          v30 = i[1];
          if (v25.u32[0] > 1uLL)
          {
            if (v30 >= *(_QWORD *)&prime)
              v30 %= *(_QWORD *)&prime;
          }
          else
          {
            v30 &= *(_QWORD *)&prime - 1;
          }
          if (v30 == v24)
          {
            v23 = (uint64_t **)i;
          }
          else
          {
            v31 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
            {
              do
              {
                v32 = v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31
                   && *((_DWORD *)i + 4) == *((_DWORD *)v31 + 4)
                   && *(uint64_t *)((char *)i + 20) == *(uint64_t *)((char *)v31 + 20)
                   && (i[4] & 0xFFFFFFFFFFFFFFF8) == (v31[4] & 0xFFFFFFFFFFFFFFF8));
              *v23 = v31;
              *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
              v23 = (uint64_t **)i;
              v24 = v30;
            }
          }
        }
      }
      v13 = (unint64_t)prime;
    }
    else
    {
      v45 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v45)
        operator delete(v45);
      v13 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_48:
  v33 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    v34 = v12;
    if (v13 <= v12)
      v34 = v12 % v13;
  }
  else
  {
    v34 = (v13 - 1) & v12;
  }
  v35 = *(_QWORD **)a1;
  v36 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v34);
  if (v36)
  {
    v37 = 0;
    do
    {
      v38 = v36;
      v36 = (uint64_t *)*v36;
      if (!v36)
        break;
      v39 = v36[1];
      if (v33.u32[0] > 1uLL)
      {
        v40 = v36[1];
        if (v39 >= v13)
          v40 = v39 % v13;
      }
      else
      {
        v40 = v39 & (v13 - 1);
      }
      if (v40 != v34)
        break;
      v41 = v39 == v12
         && *((_DWORD *)v36 + 4) == *((_DWORD *)v5 + 4)
         && *(uint64_t *)((char *)v36 + 20) == *(_QWORD *)(v5 + 20)
         && (v36[4] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 4) & 0xFFFFFFFFFFFFFFF8);
      v42 = v37 & !v41;
      v37 |= v41;
    }
    while (v42 != 1);
  }
  else
  {
    v38 = 0;
  }
  v43 = *((_QWORD *)v5 + 1);
  if (v33.u32[0] > 1uLL)
  {
    if (v43 >= v13)
      v43 %= v13;
  }
  else
  {
    v43 &= v13 - 1;
  }
  if (!v38)
  {
    *(_QWORD *)v5 = *v4;
    *v4 = (uint64_t **)v5;
    v35[v43] = v4;
    if (!*(_QWORD *)v5)
      goto LABEL_86;
    v44 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v33.u32[0] > 1uLL)
    {
      if (v44 >= v13)
        v44 %= v13;
    }
    else
    {
      v44 &= v13 - 1;
    }
LABEL_85:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v5;
    goto LABEL_86;
  }
  *(_QWORD *)v5 = *v38;
  *v38 = v5;
  if (*(_QWORD *)v5)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v33.u32[0] > 1uLL)
    {
      if (v44 >= v13)
        v44 %= v13;
    }
    else
    {
      v44 &= v13 - 1;
    }
    if (v44 != v43)
      goto LABEL_85;
  }
LABEL_86:
  ++*(_QWORD *)(a1 + 24);
  v46[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)v46);
}

void sub_230073BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>(uint64_t a1, uint64_t *a2)
{
  _QWORD **v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *i;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD v45[2];
  char v46;

  v4 = (_QWORD **)(a1 + 16);
  v5 = (char *)operator new(0x30uLL);
  v6 = v5;
  v45[0] = v5;
  v45[1] = v4;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v7 = *a2;
  *((_QWORD *)v5 + 2) = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    v7 = *((_QWORD *)v5 + 2);
    if ((v9 & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v5 + 2) = v7;
    }
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 1);
  v10 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *((_QWORD *)v5 + 5) = v10;
  v46 = 1;
  v11 = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)v5 + 1) = v11;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v12 || (float)(v14 * (float)v12) < v13)
  {
    v15 = 1;
    if (v12 >= 3)
      v15 = (v12 & (v12 - 1)) != 0;
    v16 = v15 | (2 * v12);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v12)
      goto LABEL_97;
    if (*(_QWORD *)&prime >= v12)
      goto LABEL_48;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v12)
    {
      v12 = *(_QWORD *)(a1 + 8);
      goto LABEL_48;
    }
    if (prime)
    {
LABEL_97:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * *(_QWORD *)&prime);
      v20 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v19;
      if (v20)
        operator delete(v20);
      v21 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
      while (*(_QWORD *)&prime != v21);
      v22 = *v4;
      if (*v4)
      {
        v23 = v22[1];
        v24 = (uint8x8_t)vcnt_s8(prime);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          if (v23 >= *(_QWORD *)&prime)
            v23 %= *(_QWORD *)&prime;
        }
        else
        {
          v23 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v4;
        for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
        {
          v29 = i[1];
          if (v24.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&prime)
              v29 %= *(_QWORD *)&prime;
          }
          else
          {
            v29 &= *(_QWORD *)&prime - 1;
          }
          if (v29 == v23)
          {
            v22 = i;
          }
          else
          {
            v30 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
            {
              do
              {
                v31 = v30;
                v30 = (_QWORD *)*v30;
              }
              while (v30 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v30[2] & 0xFFFFFFFFFFFFFFF8));
              *v22 = v30;
              *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
              v22 = i;
              v23 = v29;
            }
          }
        }
      }
      v12 = (unint64_t)prime;
    }
    else
    {
      v44 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v44)
        operator delete(v44);
      v12 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_48:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = v11;
    if (v12 <= v11)
      v33 = v11 % v12;
  }
  else
  {
    v33 = (v12 - 1) & v11;
  }
  v34 = *(_QWORD **)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
  if (v35)
  {
    v36 = 0;
    do
    {
      v37 = v35;
      v35 = (_QWORD *)*v35;
      if (!v35)
        break;
      v38 = v35[1];
      if (v32.u32[0] > 1uLL)
      {
        v39 = v35[1];
        if (v38 >= v12)
          v39 = v38 % v12;
      }
      else
      {
        v39 = v38 & (v12 - 1);
      }
      if (v39 != v33)
        break;
      v40 = v38 == v11 && (v35[2] & 0xFFFFFFFFFFFFFFF8) == (v6[2] & 0xFFFFFFFFFFFFFFF8);
      v41 = v36 & !v40;
      v36 |= v40;
    }
    while (v41 != 1);
  }
  else
  {
    v37 = 0;
  }
  v42 = v6[1];
  if (v32.u32[0] > 1uLL)
  {
    if (v42 >= v12)
      v42 %= v12;
  }
  else
  {
    v42 &= v12 - 1;
  }
  if (!v37)
  {
    *v6 = *v4;
    *v4 = v6;
    v34[v42] = v4;
    if (!*v6)
      goto LABEL_84;
    v43 = *(_QWORD *)(*v6 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v43 >= v12)
        v43 %= v12;
    }
    else
    {
      v43 &= v12 - 1;
    }
LABEL_83:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v6;
    goto LABEL_84;
  }
  *v6 = *v37;
  *v37 = v6;
  if (*v6)
  {
    v43 = *(_QWORD *)(*v6 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v43 >= v12)
        v43 %= v12;
    }
    else
    {
      v43 &= v12 - 1;
    }
    if (v43 != v42)
      goto LABEL_83;
  }
LABEL_84:
  ++*(_QWORD *)(a1 + 24);
  v45[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v45);
}

void sub_2300740AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>(uint64_t a1, uint64_t *a2)
{
  _QWORD **v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *i;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD v45[2];
  char v46;

  v4 = (_QWORD **)(a1 + 16);
  v5 = (char *)operator new(0x30uLL);
  v6 = v5;
  v45[0] = v5;
  v45[1] = v4;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v7 = *a2;
  *((_QWORD *)v5 + 2) = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    v7 = *((_QWORD *)v5 + 2);
    if ((v9 & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v5 + 2) = v7;
    }
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 1);
  v10 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *((_QWORD *)v5 + 5) = v10;
  v46 = 1;
  v11 = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)v5 + 1) = v11;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v12 || (float)(v14 * (float)v12) < v13)
  {
    v15 = 1;
    if (v12 >= 3)
      v15 = (v12 & (v12 - 1)) != 0;
    v16 = v15 | (2 * v12);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v12)
      goto LABEL_97;
    if (*(_QWORD *)&prime >= v12)
      goto LABEL_48;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v12)
    {
      v12 = *(_QWORD *)(a1 + 8);
      goto LABEL_48;
    }
    if (prime)
    {
LABEL_97:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * *(_QWORD *)&prime);
      v20 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v19;
      if (v20)
        operator delete(v20);
      v21 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
      while (*(_QWORD *)&prime != v21);
      v22 = *v4;
      if (*v4)
      {
        v23 = v22[1];
        v24 = (uint8x8_t)vcnt_s8(prime);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          if (v23 >= *(_QWORD *)&prime)
            v23 %= *(_QWORD *)&prime;
        }
        else
        {
          v23 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v4;
        for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
        {
          v29 = i[1];
          if (v24.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&prime)
              v29 %= *(_QWORD *)&prime;
          }
          else
          {
            v29 &= *(_QWORD *)&prime - 1;
          }
          if (v29 == v23)
          {
            v22 = i;
          }
          else
          {
            v30 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
            {
              do
              {
                v31 = v30;
                v30 = (_QWORD *)*v30;
              }
              while (v30 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v30[2] & 0xFFFFFFFFFFFFFFF8));
              *v22 = v30;
              *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
              v22 = i;
              v23 = v29;
            }
          }
        }
      }
      v12 = (unint64_t)prime;
    }
    else
    {
      v44 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v44)
        operator delete(v44);
      v12 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_48:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = v11;
    if (v12 <= v11)
      v33 = v11 % v12;
  }
  else
  {
    v33 = (v12 - 1) & v11;
  }
  v34 = *(_QWORD **)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
  if (v35)
  {
    v36 = 0;
    do
    {
      v37 = v35;
      v35 = (_QWORD *)*v35;
      if (!v35)
        break;
      v38 = v35[1];
      if (v32.u32[0] > 1uLL)
      {
        v39 = v35[1];
        if (v38 >= v12)
          v39 = v38 % v12;
      }
      else
      {
        v39 = v38 & (v12 - 1);
      }
      if (v39 != v33)
        break;
      v40 = v38 == v11 && (v35[2] & 0xFFFFFFFFFFFFFFF8) == (v6[2] & 0xFFFFFFFFFFFFFFF8);
      v41 = v36 & !v40;
      v36 |= v40;
    }
    while (v41 != 1);
  }
  else
  {
    v37 = 0;
  }
  v42 = v6[1];
  if (v32.u32[0] > 1uLL)
  {
    if (v42 >= v12)
      v42 %= v12;
  }
  else
  {
    v42 &= v12 - 1;
  }
  if (!v37)
  {
    *v6 = *v4;
    *v4 = v6;
    v34[v42] = v4;
    if (!*v6)
      goto LABEL_84;
    v43 = *(_QWORD *)(*v6 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v43 >= v12)
        v43 %= v12;
    }
    else
    {
      v43 &= v12 - 1;
    }
LABEL_83:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v6;
    goto LABEL_84;
  }
  *v6 = *v37;
  *v37 = v6;
  if (*v6)
  {
    v43 = *(_QWORD *)(*v6 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v43 >= v12)
        v43 %= v12;
    }
    else
    {
      v43 &= v12 - 1;
    }
    if (v43 != v42)
      goto LABEL_83;
  }
LABEL_84:
  ++*(_QWORD *)(a1 + 24);
  v45[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v45);
}

void sub_230074580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v25 = v4;
    v26 = v5;
    v7 = (uint64_t)a4;
    v9 = (uint64_t)a4 - a1;
    v10 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v12 = v9 >> 3;
      v13 = (v9 >> 3) | 1;
      v14 = (__int128 *)(a1 + 16 * v13);
      v15 = v12 + 2;
      if (v12 + 2 >= a3)
      {
        v16 = *(_QWORD *)v14;
      }
      else
      {
        v16 = *(_QWORD *)v14;
        if (*(_DWORD *)(*(_QWORD *)v14 + 176) > *(_DWORD *)(*((_QWORD *)v14 + 2) + 176))
        {
          v16 = *((_QWORD *)v14++ + 2);
          v13 = v15;
        }
      }
      v17 = *a4;
      if (*(_DWORD *)(v16 + 176) <= *(_DWORD *)(*a4 + 176))
      {
        v18 = a4[1];
        *(_QWORD *)&v24 = *a4;
        *((_QWORD *)&v24 + 1) = v18;
        *a4 = 0;
        a4[1] = 0;
        do
        {
          v19 = v7;
          v7 = (uint64_t)v14;
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v19, v14);
          if (v10 < v13)
            break;
          v14 = (__int128 *)(a1 + 16 * ((2 * v13) | 1));
          if (2 * v13 + 2 >= a3)
          {
            v20 = *(_QWORD *)v14;
            v13 = (2 * v13) | 1;
          }
          else
          {
            v20 = *(_QWORD *)v14;
            if (*(_DWORD *)(*(_QWORD *)v14 + 176) <= *(_DWORD *)(*((_QWORD *)v14 + 2) + 176))
            {
              v13 = (2 * v13) | 1;
            }
            else
            {
              v20 = *((_QWORD *)v14++ + 2);
              v13 = 2 * v13 + 2;
            }
          }
        }
        while (*(_DWORD *)(v20 + 176) <= *(_DWORD *)(v17 + 176));
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v7, &v24);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if (v9 == v7)
    {
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v7, &v13);
    }
    else
    {
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v7, v9);
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(a1, (uint64_t)(v8 + 1), a3, ((uint64_t)v8 - a1 + 16) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_230074A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = (__int128 *)(a1 + 16 * v4 + 16);
    v8 = (2 * v4) | 1;
    v9 = 2 * v4 + 2;
    if (v9 < a3 && *(_DWORD *)(*(_QWORD *)v7 + 176) > *(_DWORD *)(*((_QWORD *)v7 + 2) + 176))
    {
      ++v7;
      v8 = v9;
    }
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1, v7);
    a1 = (uint64_t)v7;
    v4 = v8;
  }
  while (v8 <= v6);
  return v7;
}

void std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

void std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 32);
      std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 16));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = a1 + 16;
  v15 = operator new(0x20uLL);
  v28[0] = v15;
  v28[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v14;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9)
          v26 %= v9;
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v12 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v12;
}

void sub_230074F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 4;
    std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(__p + 2));
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__erase_unique<std::weak_ptr<realityio::Builder>>(_QWORD *a1, unint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t RIOPxrUsdRelationshipSetTargets(uint64_t a1, CFArrayRef theArray)
{
  realityio::UsdLayerMutexTracker *v2;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  _DWORD *ValueAtIndex;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  std::recursive_mutex *v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  void **v17;

  if (a1)
    v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v2 = 0;
  if (!a1)
    return 0;
  Count = CFArrayGetCount(theArray);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v8 = ValueAtIndex + 4;
      v9 = v15;
      if ((unint64_t)v15 >= v16)
      {
        v10 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14, v8);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, v8);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, ValueAtIndex + 5);
        v10 = v9 + 2;
      }
      v15 = v10;
    }
  }
  v11 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>(v2);
  std::recursive_mutex::lock(v11);
  v12 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
  std::recursive_mutex::unlock(v11);
  v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v12;
}

void sub_2300751B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::recursive_mutex *v12;

  std::recursive_mutex::unlock(v12);
  a12 = &a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>(realityio::UsdLayerMutexTracker *a1)
{
  void *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t *EditTarget;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v22);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    v5 = EditTarget[1];
    v20 = *EditTarget;
    v21 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = v23;
    if (v23)
    {
      v9 = (unsigned int *)(v23 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v20);
  v14 = v13;
  v15 = v21;
  if (v21)
  {
    v16 = (unsigned int *)(v21 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  return v14;
}

void sub_2300752CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdRelationshipClearTargets(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdRelationship *v1;
  std::recursive_mutex *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdRelationship *)(a1 + 24);
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>((realityio::UsdLayerMutexTracker *)(a1 + 24));
  std::recursive_mutex::lock(v2);
  v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_230075388(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFMutableArrayRef RIOPxrUsdRelationshipCopyTargets(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  _QWORD v3[3];
  void **v4;

  if (!a1)
    return 0;
  memset(v3, 0, sizeof(v3));
  if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets())
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  else
    Mutable = 0;
  v4 = (void **)v3;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
  return Mutable;
}

void sub_23007544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef realityio::DirtyMetadataDescriptor::description@<X0>(realityio::DirtyMetadataDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  unint64_t v3;
  const char *v4;
  CFStringRef result;

  *a2 = 0;
  v3 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0)
      v4 = *(const char **)v4;
  }
  else
  {
    v4 = "";
  }
  result = CFStringCreateWithFormat(0, 0, CFSTR("<DirtyMetadataDescriptor: %p { metadataName: %s } >"), this, v4);
  *a2 = result;
  return result;
}

void sub_2300754DC(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t getLocalTransformation(uint64_t result, _BYTE *a2, _QWORD *a3, uint64_t a4)
{
  _OWORD *v6;
  unint64_t Data;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v25;
  uint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  size_t v30;
  size_t v31;
  const char *v32;
  pxrInternal__aapl__pxrReserved__::TfToken *v33;
  int v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  const void **v37;
  char v38;
  const std::string *v39;
  const void **v40;
  pxrInternal__aapl__pxrReserved__::TfToken *v41;
  void *v42;
  void *v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  void *v47;
  pxrInternal__aapl__pxrReserved__::TfToken *v48;
  const void **v49;
  const void **v50;
  pxrInternal__aapl__pxrReserved__::TfToken *v51;
  size_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  size_t *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  void *v64;
  pxrInternal__aapl__pxrReserved__::TfToken *v65;
  uint64_t v66;
  std::string::size_type v67;
  unsigned int *v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned __int8 v76;
  unint64_t v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  int v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  double v96;
  float *v97;
  float v98;
  uint64_t v99;
  unsigned __int16 *v100;
  double v101;
  float64x2_t *v102;
  float32x2_t *v103;
  float64_t v104;
  uint64_t v105;
  float64x2_t v106;
  unsigned __int16 *v107;
  float64_t v108;
  float64_t v109;
  double v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float32x2_t *v114;
  size_t v115;
  float64_t v116;
  float64_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v127;
  unsigned int v128;
  unsigned __int16 *v129;
  float64_t v130;
  double v131;
  float64_t v132;
  _OWORD *v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  pxrInternal__aapl__pxrReserved__::UsdObject *v139;
  float64x2_t v140;
  _BYTE *v141;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  uint64_t v151[3];
  char v152;
  void *v153[2];
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64_t v157;
  _OWORD v158[4];
  float64_t v159;
  __int128 v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64_t v164;
  __int128 v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64_t v169;
  float64x2_t v170[2];
  size_t __n[2];
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  void *__s1[2];
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t *v187;
  uint64_t v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v6 = (_OWORD *)result;
    Data = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
    v8 = v184;
    v6[4] = v183;
    v6[5] = v8;
    v9 = v186;
    v6[6] = v185;
    v6[7] = v9;
    v10 = v180;
    *v6 = *(_OWORD *)__s1;
    v6[1] = v10;
    v11 = v182;
    v6[2] = v181;
    v6[3] = v11;
    if (a2)
    {
      *a2 = 0;
      if (*a3)
      {
        v12 = a3[4] + 8 * *a3;
        v13 = (unint64_t *)&unk_255E54920;
        __asm { FMOV            V0.2D, #1.0 }
        v140 = _Q0;
        v141 = a2;
        while (1)
        {
          v19 = v13;
          v21 = (unint64_t *)(v12 - 8);
          v20 = *(_QWORD *)(v12 - 8);
          v151[0] = v20;
          if ((v20 & 7) != 0)
          {
            v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 2, v22));
            if ((v23 & 1) == 0)
              v151[0] &= 0xFFFFFFFFFFFFFFF8;
          }
          if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (*v21 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Data);
          if ((*((_QWORD *)v25 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
            v26 = (*((_QWORD *)v25 + 3) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
          if (*(char *)(v26 + 23) >= 0)
            v27 = (const char *)v26;
          else
            v27 = *(const char **)v26;
          v28 = *(char *)(EmptyString + 23);
          if (v28 >= 0)
            v29 = *(unsigned __int8 *)(EmptyString + 23);
          else
            v29 = *(_QWORD *)(EmptyString + 8);
          v30 = strlen(v27);
          if (v29 < v30
            || ((v31 = v30, v28 >= 0) ? (v32 = (const char *)EmptyString) : (v32 = *(const char **)EmptyString),
                v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)strncmp(v32, v27, v31),
                (_DWORD)v33))
          {
            v34 = 0;
          }
          else
          {
            if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0)
              v39 = (const std::string *)((*v21 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v39 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
            if ((*((_QWORD *)v65 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              v66 = (*((_QWORD *)v65 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              v66 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v65);
            if (*(char *)(v66 + 23) < 0)
              v67 = *(_QWORD *)(v66 + 8);
            else
              v67 = *(unsigned __int8 *)(v66 + 23);
            std::string::basic_string((std::string *)__s1, v39, v67, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v143);
            MEMORY[0x2348B2764](__n, __s1);
            if ((v151[0] & 7) != 0)
            {
              v68 = (unsigned int *)(v151[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v69 = __ldxr(v68);
              while (__stlxr(v69 - 2, v68));
            }
            v151[0] = __n[0];
            __n[0] = 0;
            if (SHIBYTE(v180.f64[0]) < 0)
              operator delete(__s1[0]);
            v34 = 1;
          }
          Data = (unint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a4, v151);
          v35 = Data;
          if (a4 + 8 == Data)
          {
            v38 = 0;
            goto LABEL_157;
          }
          if (v21 != (unint64_t *)a3[4])
            break;
LABEL_107:
          Data = atomic_load(MEMORY[0x24BEE8388]);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType>>::_TryToCreateData();
          if ((*v21 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(Data + 104) & 0xFFFFFFFFFFFFFFF8))
          {
            v149 = 0u;
            v150 = 0u;
            v147 = 0u;
            v148 = 0u;
            v145 = 0u;
            v146 = 0u;
            v143 = 0u;
            v144 = 0u;
            v70 = *v21;
            if ((*v21 & 7) != 0)
            {
              v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 2, v71));
              if ((v72 & 1) == 0)
                v70 &= 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v187, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v35 + 40));
            v73 = v70;
            if ((v70 & 7) != 0)
            {
              v74 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 2, v74));
              if ((v75 & 1) != 0)
                v73 = v70;
              else
                v73 = v70 & 0xFFFFFFFFFFFFFFF8;
            }
            v76 = atomic_load((unsigned __int8 *)&qword_255E54928);
            if ((v76 & 1) == 0)
            {
              v139 = (pxrInternal__aapl__pxrReserved__::UsdObject *)__cxa_guard_acquire(&qword_255E54928);
              if ((_DWORD)v139)
              {
                _MergedGlobals_22 = pxrInternal__aapl__pxrReserved__::UsdObject::GetNamespaceDelimiter(v139);
                __cxa_guard_release(&qword_255E54928);
                a2 = v141;
              }
            }
            v77 = v73 & 0xFFFFFFFFFFFFFFF8;
            if ((v73 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v78 = (char *)(v77 + 16);
              if (*(char *)(v77 + 39) < 0)
                v78 = *(char **)v78;
            }
            else
            {
              v78 = "";
            }
            v79 = _MergedGlobals_22;
            v80 = strchr(v78, _MergedGlobals_22);
            if (v80)
            {
              v81 = v80 + 1;
              v82 = strchr(v80 + 1, v79);
              if (!v82)
                v82 = &v81[strlen(v81)];
              switch(v82 - v81)
              {
                case 5:
                  if (strncmp("scale", v81, 5uLL))
                    goto LABEL_141;
                  v83 = 0;
                  v84 = 0;
                  v85 = 2;
                  goto LABEL_168;
                case 6:
                  if (strncmp("orient", v81, 6uLL))
                    goto LABEL_141;
                  v83 = 0;
                  v84 = 1;
                  v85 = 12;
                  goto LABEL_168;
                case 7:
                  if (!strncmp("rotateX", v81, 7uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 3;
                  }
                  else if (!strncmp("rotateY", v81, 7uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 4;
                  }
                  else
                  {
                    if (strncmp("rotateZ", v81, 7uLL))
                      goto LABEL_141;
                    v83 = 0;
                    v84 = 0;
                    v85 = 5;
                  }
                  goto LABEL_168;
                case 9:
                  if (!strncmp("transform", v81, 9uLL))
                  {
                    v84 = 0;
                    v83 = 1;
                    v85 = 13;
                    goto LABEL_168;
                  }
                  if (!strncmp("translate", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 1;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateXYZ", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 6;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateXZY", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 7;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateYXZ", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 8;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateYZX", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 9;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateZXY", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 10;
                    goto LABEL_168;
                  }
                  if (!strncmp("rotateZYX", v81, 9uLL))
                  {
                    v83 = 0;
                    v84 = 0;
                    v85 = 11;
LABEL_168:
                    a2 = v141;
                    goto LABEL_169;
                  }
LABEL_141:
                  __s1[0] = "V2/XFormUtils.mm";
                  __s1[1] = "getTransformOpType";
                  *(_QWORD *)&v180.f64[0] = 105;
                  *(_QWORD *)&v180.f64[1] = "XformOpType (anonymous namespace)::getTransformOpType(TfToken)";
                  LOBYTE(v181.f64[0]) = 0;
                  std::string::__init_with_size[abi:ne180100]<char *,char *>(__n, v81, v82, v82 - v81);
                  a2 = v141;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                  if (SHIBYTE(v172.f64[0]) < 0)
                    operator delete((void *)__n[0]);
                  break;
                default:
                  goto LABEL_141;
              }
            }
            else
            {
              __s1[0] = "V2/XFormUtils.mm";
              __s1[1] = "getTransformOpType";
              *(_QWORD *)&v180.f64[0] = 94;
              *(_QWORD *)&v180.f64[1] = "XformOpType (anonymous namespace)::getTransformOpType(TfToken)";
              LOBYTE(v181.f64[0]) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            }
            v83 = 0;
            v84 = 0;
            v85 = 0;
LABEL_169:
            if ((v73 & 7) != 0)
            {
              do
                v87 = __ldxr((unsigned int *)v77);
              while (__stlxr(v87 - 2, (unsigned int *)v77));
            }
            v13 = v19;
            if (v83)
            {
              pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
              {
                if ((v188 & 4) != 0)
                  v88 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
                else
                  v88 = v187;
                v89 = *v88;
                v90 = v88[1];
                v91 = v88[3];
                v181 = v88[2];
                v182 = v91;
                *(float64x2_t *)__s1 = v89;
                v180 = v90;
                v92 = v88[4];
                v93 = v88[5];
                v94 = v88[7];
                v185 = v88[6];
                v186 = v94;
                v183 = v92;
                v184 = v93;
                if (!v34)
                  goto LABEL_190;
LABEL_189:
                *(_QWORD *)&v165 = 0;
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (double *)&v165, 0.0);
                v183 = v175;
                v184 = v176;
                v185 = v177;
                v186 = v178;
                *(_OWORD *)__s1 = *(_OWORD *)__n;
                v180 = v172;
                v181 = v173;
                v182 = v174;
                goto LABEL_190;
              }
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
              {
                if ((v188 & 4) != 0)
                  v99 = (*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
                else
                  v99 = (uint64_t)v187;
                MEMORY[0x2348B1918](__n, v99);
                v183 = v175;
                v184 = v176;
                v185 = v177;
                v186 = v178;
                *(_OWORD *)__s1 = *(_OWORD *)__n;
                v180 = v172;
                v181 = v173;
                v182 = v174;
                if (v34)
                  goto LABEL_189;
LABEL_190:
                v147 = v183;
                v148 = v184;
                v149 = v185;
                v150 = v186;
                v143 = *(float64x2_t *)__s1;
                v144 = v180;
                v145 = v181;
                v146 = v182;
LABEL_268:
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v187);
                if ((v70 & 7) != 0)
                {
                  v124 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v125 = __ldxr(v124);
                  while (__stlxr(v125 - 2, v124));
                }
                if (!atomic_load(v13))
                {
                  v133 = (_OWORD *)operator new();
                  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                  v134 = v184;
                  v133[4] = v183;
                  v133[5] = v134;
                  v135 = v186;
                  v133[6] = v185;
                  v133[7] = v135;
                  v136 = v180;
                  *v133 = *(_OWORD *)__s1;
                  v133[1] = v136;
                  v137 = v182;
                  v133[2] = v181;
                  v133[3] = v137;
                  while (!__ldaxr(v13))
                  {
                    if (!__stlxr((unint64_t)v133, v13))
                      goto LABEL_272;
                  }
                  __clrex();
                  MEMORY[0x2348B4E1C](v133, 0x1000C40AE2C30F4);
                  atomic_load(v13);
                }
LABEL_272:
                Data = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
                if ((Data & 1) == 0)
                  Data = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
                v38 = 0;
                goto LABEL_275;
              }
LABEL_247:
              pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v143, 1.0);
              goto LABEL_268;
            }
            if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
              {
                if ((v188 & 4) != 0)
                  v97 = (float *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
                else
                  v97 = (float *)&v187;
                v98 = *v97;
              }
              else
              {
                if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
                  goto LABEL_203;
                if ((v188 & 4) != 0)
                  v100 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 168))(&v187);
                else
                  v100 = (unsigned __int16 *)&v187;
                v98 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *v100);
              }
              v96 = v98;
              goto LABEL_196;
            }
            if ((v188 & 4) != 0)
              v95 = (double *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
            else
              v95 = (double *)&v187;
            v96 = *v95;
LABEL_196:
            if (v34)
              v101 = -v96;
            else
              v101 = v96;
            switch(v85)
            {
              case 5:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                __n[1] = 0;
                __n[0] = 0;
                v172.f64[0] = 1.0;
                v172.f64[1] = v101;
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
                goto LABEL_267;
              case 4:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                *(_OWORD *)__n = xmmword_2302105E0;
                v172.f64[0] = 0.0;
                v172.f64[1] = v101;
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
                goto LABEL_267;
              case 3:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                __n[0] = 0x3FF0000000000000;
                __n[1] = 0;
                v172.f64[0] = 0.0;
                v172.f64[1] = v101;
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
LABEL_267:
                v118 = *v102;
                v119 = v102[1];
                v120 = v102[3];
                v145 = v102[2];
                v146 = v120;
                v143 = v118;
                v144 = v119;
                v121 = v102[4];
                v122 = v102[5];
                v123 = v102[7];
                v149 = v102[6];
                v150 = v123;
                v147 = v121;
                v148 = v122;
                goto LABEL_268;
            }
LABEL_203:
            memset(v170, 0, 24);
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v103 = (float32x2_t *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
              else
                v103 = (float32x2_t *)v187;
              v104 = v103[1].f32[0];
              v170[0] = vcvtq_f64_f32(*v103);
              v170[1].f64[0] = v104;
              goto LABEL_218;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v105 = (*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
              else
                v105 = (uint64_t)v187;
              v106 = *(float64x2_t *)v105;
              v170[1].f64[0] = *(float64_t *)(v105 + 16);
              v170[0] = v106;
              goto LABEL_218;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v107 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 168))(&v187);
              else
                v107 = (unsigned __int16 *)&v187;
              v108 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v107[1]);
              v109 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v107[2]);
              v170[0].f64[0] = *(float *)(MEMORY[0x24BEE8B20] + 4 * *v107);
              v170[0].f64[1] = v108;
              v170[1].f64[0] = v109;
LABEL_218:
              if (v85 == 2)
              {
                if (v34)
                {
                  v170[0] = vdivq_f64(v140, v170[0]);
                  v170[1].f64[0] = 1.0 / v170[1].f64[0];
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale();
              }
              else if (v85 == 1)
              {
                if (v34)
                {
                  v170[0] = vnegq_f64(v170[0]);
                  v170[1].f64[0] = -v170[1].f64[0];
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate();
              }
              else
              {
                v110 = v170[0].f64[0];
                if (v34)
                {
                  v110 = -v170[0].f64[0];
                  v170[0].f64[0] = -v170[0].f64[0];
                  *(float64x2_t *)((char *)v170 + 8) = vnegq_f64(*(float64x2_t *)((char *)v170 + 8));
                }
                v175.f64[0] = 0.0;
                v173 = 0u;
                v174 = 0u;
                *(_OWORD *)__n = 0u;
                v172 = 0u;
                __s1[0] = (void *)0x3FF0000000000000;
                __s1[1] = 0;
                v180.f64[0] = 0.0;
                v180.f64[1] = v110;
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)__n, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                v169 = 0.0;
                v167 = 0u;
                v168 = 0u;
                v165 = 0u;
                v166 = 0u;
                *(_OWORD *)__s1 = xmmword_2302105E0;
                v180.f64[0] = 0.0;
                v180.f64[1] = v170[0].f64[1];
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v165, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                v164 = 0.0;
                v162 = 0u;
                v163 = 0u;
                v160 = 0u;
                v161 = 0u;
                __s1[1] = 0;
                __s1[0] = 0;
                v180.f64[0] = 1.0;
                v180.f64[1] = v170[1].f64[0];
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v160, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v158, 1.0);
                switch(v85)
                {
                  case 6:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v162;
                      v156 = v163;
                      v157 = v164;
                      *(_OWORD *)v153 = v160;
                      v154 = v161;
                    }
                    else
                    {
                      v155 = v173;
                      v156 = v174;
                      v157 = v175.f64[0];
                      *(_OWORD *)v153 = *(_OWORD *)__n;
                      v154 = v172;
                    }
                    break;
                  case 7:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v167;
                      v156 = v168;
                      v157 = v169;
                      *(_OWORD *)v153 = v165;
                      v154 = v166;
                    }
                    else
                    {
                      v155 = v173;
                      v156 = v174;
                      v157 = v175.f64[0];
                      *(_OWORD *)v153 = *(_OWORD *)__n;
                      v154 = v172;
                    }
                    break;
                  case 8:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v162;
                      v156 = v163;
                      v157 = v164;
                      *(_OWORD *)v153 = v160;
                      v154 = v161;
                    }
                    else
                    {
                      v155 = v167;
                      v156 = v168;
                      v157 = v169;
                      *(_OWORD *)v153 = v165;
                      v154 = v166;
                    }
                    break;
                  case 9:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v173;
                      v156 = v174;
                      v157 = v175.f64[0];
                      *(_OWORD *)v153 = *(_OWORD *)__n;
                      v154 = v172;
                    }
                    else
                    {
                      v155 = v167;
                      v156 = v168;
                      v157 = v169;
                      *(_OWORD *)v153 = v165;
                      v154 = v166;
                    }
                    break;
                  case 10:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v167;
                      v156 = v168;
                      v157 = v169;
                      *(_OWORD *)v153 = v165;
                      v154 = v166;
                    }
                    else
                    {
                      v155 = v162;
                      v156 = v163;
                      v157 = v164;
                      *(_OWORD *)v153 = v160;
                      v154 = v161;
                    }
                    break;
                  case 11:
                    if ((v34 & 1) != 0)
                    {
                      v155 = v173;
                      v156 = v174;
                      v157 = v175.f64[0];
                      *(_OWORD *)v153 = *(_OWORD *)__n;
                      v154 = v172;
                    }
                    else
                    {
                      v155 = v162;
                      v156 = v163;
                      v157 = v164;
                      *(_OWORD *)v153 = v160;
                      v154 = v161;
                    }
                    break;
                  default:
                    __s1[0] = "V2/XFormUtils.mm";
                    __s1[1] = "GetOpTransform";
                    *(_QWORD *)&v180.f64[0] = 221;
                    *(_QWORD *)&v180.f64[1] = "GfMatrix4d (anonymous namespace)::GetOpTransform(TfToken, VtValue, BOOL)";
                    LOBYTE(v181.f64[0]) = 0;
                    pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
                    pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>();
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                    v13 = v19;
                    if (v152 < 0)
                      operator delete((void *)v151[1]);
                    if (SHIBYTE(v154.f64[0]) < 0)
                      operator delete(v153[0]);
                    goto LABEL_247;
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
                v181 = v155;
                v182 = v156;
                v183.f64[0] = v157;
                *(_OWORD *)__s1 = *(_OWORD *)v153;
                v180 = v154;
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
                v158[2] = v181;
                v158[3] = v182;
                v159 = v183.f64[0];
                v158[0] = *(_OWORD *)__s1;
                v158[1] = v180;
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                v102 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v158);
              }
              goto LABEL_267;
            }
            if (!v84)
              goto LABEL_247;
            *(_OWORD *)__s1 = 0u;
            v180 = 0u;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v111 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
              else
                v111 = v187;
              v112 = *v111;
              v113 = v111[1];
              goto LABEL_256;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v114 = (float32x2_t *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8) + 168))(&v187);
              else
                v114 = (float32x2_t *)v187;
              v112 = vcvtq_f64_f32(*v114);
              v113 = vcvtq_f64_f32(v114[1]);
LABEL_256:
              *(float64x2_t *)__s1 = v112;
              v180 = v113;
            }
            else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v187))
            {
              if ((v188 & 4) != 0)
                v129 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v188 & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 168))(&v187);
              else
                v129 = (unsigned __int16 *)&v187;
              v130 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v129[3]);
              v131 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v129[1]);
              v132 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v129[2]);
              *(double *)__s1 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *v129);
              __s1[1] = *(void **)&v131;
              v180.f64[0] = v132;
              v180.f64[1] = v130;
            }
            pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat();
            if (v34)
            {
              __n[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetInverse((pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
              __n[1] = v115;
              v172.f64[0] = v116;
              v172.f64[1] = v117;
            }
            v165 = 0uLL;
            v166.f64[0] = 0.0;
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d();
            goto LABEL_268;
          }
          v38 = 1;
          *a2 = 1;
LABEL_157:
          v13 = v19;
LABEL_275:
          if ((v151[0] & 7) != 0)
          {
            v127 = (unsigned int *)(v151[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v128 = __ldxr(v127);
            while (__stlxr(v128 - 2, v127));
          }
          v12 -= 8;
          if (v12 == a3[4])
            v38 = 1;
          if ((v38 & 1) != 0)
            return 1;
        }
        if ((*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v37 = (const void **)((*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else
        {
          v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          v37 = (const void **)v36;
        }
        if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          v40 = (const void **)((*v21 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v40 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
        v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, v40, (uint64_t)__s1);
        if ((*(_QWORD *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) != 0)
          Data = (*(_QWORD *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          Data = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
        v38 = HIBYTE(v180.f64[0]);
        if (v180.f64[0] >= 0.0)
          v42 = (void *)HIBYTE(v180.f64[0]);
        else
          v42 = __s1[1];
        v43 = (void *)*(unsigned __int8 *)(Data + 23);
        v44 = (char)v43;
        if ((char)v43 < 0)
          v43 = *(void **)(Data + 8);
        if (v42 == v43)
        {
          if (v44 >= 0)
            v45 = (unsigned __int8 *)Data;
          else
            v45 = *(unsigned __int8 **)Data;
          if ((HIBYTE(v180.f64[0]) & 0x80) != 0)
          {
            v47 = __s1[0];
            if (!memcmp(__s1[0], v45, (size_t)__s1[1]))
            {
              v86 = v47;
LABEL_154:
              operator delete(v86);
LABEL_155:
              v38 = 0;
LABEL_156:
              v12 -= 8;
              goto LABEL_157;
            }
          }
          else
          {
            if (!HIBYTE(v180.f64[0]))
              goto LABEL_156;
            v46 = 0;
            while (*((unsigned __int8 *)__s1 + v46) == v45[v46])
            {
              if (HIBYTE(v180.f64[0]) == ++v46)
                goto LABEL_155;
            }
          }
        }
        if ((*((_QWORD *)v48 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v49 = (const void **)((*((_QWORD *)v48 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else
        {
          v48 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
          v49 = (const void **)v48;
        }
        if ((*(_QWORD *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) != 0)
          v50 = (const void **)((*(_QWORD *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v50 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
        v51 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v49, v50, (uint64_t)__n);
        if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0)
          Data = (*v21 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          Data = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
        if (v172.f64[0] >= 0.0)
          v52 = HIBYTE(v172.f64[0]);
        else
          v52 = __n[1];
        v53 = *(unsigned __int8 *)(Data + 23);
        v54 = (char)v53;
        if ((v53 & 0x80u) != 0)
          v53 = *(_QWORD *)(Data + 8);
        if (v52 == v53)
        {
          if (v54 >= 0)
            v55 = (unsigned __int8 *)Data;
          else
            v55 = *(unsigned __int8 **)Data;
          if ((HIBYTE(v172.f64[0]) & 0x80) != 0)
          {
            v64 = (void *)__n[0];
            v63 = memcmp((const void *)__n[0], v55, __n[1]) == 0;
            goto LABEL_102;
          }
          if (!HIBYTE(v172.f64[0]))
          {
            if (SHIBYTE(v180.f64[0]) < 0)
            {
              v86 = __s1[0];
              goto LABEL_154;
            }
            goto LABEL_155;
          }
          v56 = HIBYTE(v172.f64[0]) - 1;
          v57 = __n;
          do
          {
            v59 = *(unsigned __int8 *)v57;
            v57 = (size_t *)((char *)v57 + 1);
            v58 = v59;
            v61 = *v55++;
            v60 = v61;
            v62 = v56-- != 0;
            v63 = v58 == v60;
          }
          while (v58 == v60 && v62);
          if ((HIBYTE(v172.f64[0]) & 0x80) == 0)
            goto LABEL_103;
        }
        else
        {
          v63 = 0;
          if ((HIBYTE(v172.f64[0]) & 0x80) == 0)
            goto LABEL_103;
        }
        v64 = (void *)__n[0];
LABEL_102:
        operator delete(v64);
LABEL_103:
        if (SHIBYTE(v180.f64[0]) < 0)
        {
          operator delete(__s1[0]);
          if (v63)
            goto LABEL_155;
        }
        else if (v63)
        {
          goto LABEL_155;
        }
        goto LABEL_107;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_230076988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;

  __cxa_guard_abort(&qword_255E54928);
  if ((v39 & 7) != 0)
  {
    v43 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v41 - 136));
  if (a20)
  {
    v45 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if ((a39 & 7) != 0)
  {
    v47 = (unsigned int *)(a39 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<`anonymous namespace'::`anonymous namespace'::_tokens_PrivateStaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<`anonymous namespace'::`anonymous namespace'::_tokens_PrivateStaticTokenType>>::operator->()
{
  unint64_t v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!v0)
  {
    v0 = operator new();
    MEMORY[0x2348B2758](v0, "transform", 0);
    v2 = (_QWORD *)(v0 + 8);
    MEMORY[0x2348B2758](v0 + 8, "!invert!", 0);
    v3 = (_QWORD *)(v0 + 16);
    MEMORY[0x2348B2758](v0 + 16, "xformOp:", 0);
    v4 = (_QWORD *)(v0 + 24);
    MEMORY[0x2348B2758](v0 + 24, "!invert!xformOp:", 0);
    v5 = *(void ***)v0;
    v36 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v36 = (void **)v6;
    }
    v8 = (unsigned int *)*v2;
    v37 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v37 = v9;
    }
    v11 = (unsigned int *)*v3;
    v38 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 = v12;
    }
    v14 = (unsigned int *)*v4;
    v39 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v39 = v15;
    }
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    v17 = operator new(0x20uLL);
    v18 = 0;
    *(_QWORD *)(v0 + 32) = v17;
    *(_QWORD *)(v0 + 40) = v17;
    *(_QWORD *)(v0 + 48) = v17 + 4;
    do
    {
      v19 = (unint64_t)(&v36)[v18];
      *v17 = v19;
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          *v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v18;
      ++v17;
    }
    while (v18 != 4);
    v22 = (void ***)&v40;
    *(_QWORD *)(v0 + 40) = v17;
    do
    {
      v24 = (uint64_t)*--v22;
      v23 = v24;
      if ((v24 & 7) != 0)
      {
        v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
    while (v22 != &v36);
    {
        return v0;
    }
    __clrex();
    v36 = (void **)(v0 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v36);
    if ((*v4 & 7) != 0)
    {
      v28 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if ((*v3 & 7) != 0)
    {
      v30 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((*v2 & 7) != 0)
    {
      v32 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v34 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    MEMORY[0x2348B4E1C](v0, 0x60C408C7DC519);
  }
  return v0;
}

{
  unint64_t v0;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  void ***v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  void **v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!v0)
  {
    v0 = operator new();
    MEMORY[0x2348B2758](v0, "!invert!xformOp:", 0);
    v2 = (_QWORD *)(v0 + 8);
    MEMORY[0x2348B2758](v0 + 8, "normal", 0);
    v3 = (_QWORD *)(v0 + 16);
    MEMORY[0x2348B2758](v0 + 16, "hdrColor", 0);
    v4 = (_QWORD *)(v0 + 24);
    MEMORY[0x2348B2758](v0 + 24, "color", 0);
    v5 = (_QWORD *)(v0 + 32);
    MEMORY[0x2348B2758](v0 + 32, "scalar", 0);
    v6 = (_QWORD *)(v0 + 40);
    MEMORY[0x2348B2758](v0 + 40, "raw", 0);
    v7 = (_QWORD *)(v0 + 48);
    MEMORY[0x2348B2758](v0 + 48, "none", 0);
    v8 = *(void ***)v0;
    v54 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v54 = (void **)v9;
    }
    v11 = (unsigned int *)*v2;
    v55 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v55 = v12;
    }
    v14 = (unsigned int *)*v3;
    v56 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v56 = v15;
    }
    v17 = (unsigned int *)*v4;
    v57 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v57 = v18;
    }
    v20 = (unsigned int *)*v5;
    v58 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        v58 = v21;
    }
    v23 = (unsigned int *)*v6;
    v59 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v59 = v24;
    }
    v26 = (unsigned int *)*v7;
    v60 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v60 = v27;
    }
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 72) = 0;
    v29 = operator new(0x38uLL);
    v30 = 0;
    *(_QWORD *)(v0 + 56) = v29;
    *(_QWORD *)(v0 + 64) = v29;
    *(_QWORD *)(v0 + 72) = v29 + 7;
    do
    {
      v31 = (unint64_t)(&v54)[v30];
      *v29 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 2, v32));
        if ((v33 & 1) == 0)
          *v29 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v30;
      ++v29;
    }
    while (v30 != 7);
    v34 = (void ***)&v61;
    *(_QWORD *)(v0 + 64) = v29;
    do
    {
      v36 = (uint64_t)*--v34;
      v35 = v36;
      if ((v36 & 7) != 0)
      {
        v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
    }
    while (v34 != &v54);
    {
        return v0;
    }
    __clrex();
    v54 = (void **)(v0 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v54);
    if ((*v7 & 7) != 0)
    {
      v40 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    if ((*v6 & 7) != 0)
    {
      v42 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    if ((*v5 & 7) != 0)
    {
      v44 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((*v4 & 7) != 0)
    {
      v46 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if ((*v3 & 7) != 0)
    {
      v48 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if ((*v2 & 7) != 0)
    {
      v50 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v52 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    MEMORY[0x2348B4E1C](v0, 0x60C400003D80CLL);
  }
  return v0;
}

void sub_230076DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      MEMORY[0x2348B4E1C](v16, 0x60C408C7DC519);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2348B4DA4](&v3);
}

void sub_230076F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfRotation::GetInverse(pxrInternal__aapl__pxrReserved__::GfRotation *this)
{
  double result;
  double v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;

  result = *(double *)this;
  v2 = *((double *)this + 1) * *((double *)this + 1) + result * result + *((double *)this + 2) * *((double *)this + 2);
  if (fabs(v2 + -1.0) >= 1.0e-10)
  {
    v3 = sqrt(v2);
    v4 = 1.0 / v3;
    v5 = v3 <= 1.0e-10;
    v6 = 1.0e10;
    if (!v5)
      v6 = v4;
    return result * v6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetNamespaceDelimiter(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t Data;
  unint64_t v2;
  const char *v3;

  Data = atomic_load(MEMORY[0x24BEE7F60]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType>>::_TryToCreateData();
  v2 = *(_QWORD *)(Data + 80) & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    v3 = (const char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0)
      v3 = *(const char **)v3;
  }
  else
  {
    v3 = "";
  }
  return *v3;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType>>::_TryToCreateData()
{
  unint64_t v0;
  unint64_t *v1;
  uint64_t v3;

  v0 = operator new();
  MEMORY[0x2348B2524]();
  v1 = (unint64_t *)MEMORY[0x24BEE7F60];
  while (!__ldaxr(v1))
  {
    if (!__stlxr(v0, v1))
      return v0;
  }
  __clrex();
  v3 = MEMORY[0x2348B2530](v0);
  MEMORY[0x2348B4E1C](v3, 0x60C40374522CDLL);
  return atomic_load(v1);
}

void sub_2300770B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40374522CDLL);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType>>::_TryToCreateData()
{
  unint64_t v0;
  unint64_t *v1;
  uint64_t v3;

  v0 = operator new();
  MEMORY[0x2348B25B4]();
  v1 = (unint64_t *)MEMORY[0x24BEE8388];
  while (!__ldaxr(v1))
  {
    if (!__stlxr(v0, v1))
      return v0;
  }
  __clrex();
  v3 = MEMORY[0x2348B25C0](v0);
  MEMORY[0x2348B4E1C](v3, 0x60C405FAED287);
  return atomic_load(v1);
}

void sub_230077158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType *realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType::CylinderMeshBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "Cylinder", 0) + 8);
  MEMORY[0x2348B2758](v2, "axis", 0);
  MEMORY[0x2348B2758](this + 2, "height", 0);
  MEMORY[0x2348B2758](this + 3, "radius", 0);
  MEMORY[0x2348B2758](this + 4, "material:binding", 0);
  v3 = *this;
  v29 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v29 = v4;
  }
  v6 = *v2;
  v30 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v30 = v7;
  }
  v9 = this[2];
  v31 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v31 = v10;
  }
  v12 = this[3];
  v32 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v32 = v13;
  }
  v15 = this[4];
  v33 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v33 = v16;
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  v18 = (unsigned int *)operator new(0x28uLL);
  v19 = 0;
  this[5] = v18;
  this[6] = v18;
  this[7] = v18 + 10;
  do
  {
    v20 = (&v29)[v19];
    *(_QWORD *)v18 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        *(_QWORD *)v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 5);
  v23 = (unsigned int **)&v34;
  this[6] = v18;
  do
  {
    v25 = (uint64_t)*--v23;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
  }
  while (v23 != &v29);
  return (realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType *)this;
}

void sub_2300773D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v22 = &a16;
  while (1)
  {
    v24 = *--v22;
    v23 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (v22 == (uint64_t *)&a11)
    {
      if ((*v20 & 7) != 0)
      {
        v27 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((*v19 & 7) != 0)
      {
        v29 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((*v18 & 7) != 0)
      {
        v31 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v17 & 7) != 0)
      {
        v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v16 & 7) != 0)
      {
        v35 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCylinderMeshBuilderDirtyStageDescriptor(uint64_t *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  unsigned int **v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  unsigned int **v10;
  uint64_t v11;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  unsigned int **v13;
  uint64_t v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  unsigned int **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36[3];
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42[3];
  void **v43;
  char v44;
  void **v45[11];

  v45[10] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = operator new();
  memset(v42, 0, sizeof(v42));
  v4 = (std::__shared_weak_count_vtbl *)operator new();
  Data = (uint64_t *)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
  if (!Data)
    Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
  memset(v36, 0, sizeof(v36));
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v45[0] = (void **)v6;
  v45[1] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 2));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v45[2] = (void **)v9;
  v45[3] = (void **)v11;
  v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v13 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 3));
  v14 = operator new();
  *(_QWORD *)v14 = &off_24FDE24C0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  v45[4] = (void **)v12;
  v45[5] = (void **)v14;
  v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v16 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 4));
  v17 = operator new();
  *(_QWORD *)v17 = &off_24FDE24C0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v15;
  v45[6] = (void **)v15;
  v45[7] = (void **)v17;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v43 = (void **)&v33;
  v44 = 0;
  v18 = operator new(0x40uLL);
  v19 = 0;
  v33 = v18;
  v34 = v18;
  v35 = v18 + 8;
  do
  {
    v20 = *(_OWORD *)&v45[2 * v19];
    *(_OWORD *)v18 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 4);
  v34 = v18;
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v4, Data, v36, &v33);
  v37 = v4;
  v23 = (std::__shared_weak_count *)operator new();
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2538;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = v4;
  v45[8] = (void **)&v4->~__shared_weak_count;
  v45[9] = (void **)&v23->__vftable;
  v37 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v43 = (void **)&v39;
  v44 = 0;
  v25 = operator new(0x10uLL);
  v39 = v25;
  v41 = v25 + 2;
  *v25 = v4;
  v25[1] = v23;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v40 = v25 + 2;
  realityio::DirtyStageDescriptor::DirtyStageDescriptor(v3, v42, &v39);
  v27 = (_QWORD *)operator new();
  *v27 = &off_24FDE25B0;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v3;
  *a1 = v3;
  a1[1] = (uint64_t)v27;
  v43 = (void **)&v39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v43 = (void **)&v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  for (i = 6; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45[i]);
  v45[0] = (void **)v36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
  v45[0] = (void **)v42;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
}

void sub_230077A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x2348B4E1C](v30, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v31 - 168) = &a29;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 168));
  MEMORY[0x2348B4E1C](v29, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::~ConeMeshBuilderTokens_StaticTokenType((realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType::CylinderMeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_230077DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

realityio::UsdPropertyDelta *realityio::UsdPropertyDelta::UsdPropertyDelta(realityio::UsdPropertyDelta *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _OWORD v7[2];
  int v8;

  *(_QWORD *)this = &off_24FDF1338;
  v3 = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *(_QWORD *)a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *((_QWORD *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  *((_QWORD *)this + 2) = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)this + 24, (uint64_t)v7);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v7);
  return this;
}

void sub_230077E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

_QWORD *realityio::UsdPropertyDelta::updateWithPropertyDelta(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  if ((result[1] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v2 = *(_QWORD **)(a2 + 40);
    if (v2)
    {
      v3 = (uint64_t)(result + 3);
      do
      {
        result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v3, v2 + 2, v2 + 2);
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
  }
  return result;
}

const void **realityio::UsdPropertyDelta::description@<X0>(realityio::UsdPropertyDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  unint64_t v4;
  const char *v5;
  const void *v7;

  *a2 = 0;
  v4 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      v5 = *(const char **)v5;
  }
  else
  {
    v5 = "";
  }
  realityio::UsdMetadataDelta::description((realityio::UsdPropertyDelta *)((char *)this + 16), (CFStringRef *)&v7);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<UsdPropertyDelta: %p { property name: %s, metadata: %@ }>"), this, v5, v7);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v7);
}

void sub_230077F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void **v4;
  va_list va;

  va_start(va, a4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v4);
  _Unwind_Resume(a1);
}

void realityio::UsdPropertyDelta::~UsdPropertyDelta(realityio::UsdPropertyDelta *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_24FDF1338;
  *((_QWORD *)this + 2) = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_24FDF1338;
  *((_QWORD *)this + 2) = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange *v4;
  uint64_t v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v7;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v8;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  realityio *v18;
  realityio *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t **v32;
  char v33;
  char v34;
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  const std::string *EmptyString;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::TfToken *v39;
  const std::string *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  char **v53;
  uint64_t **v54;
  char v55;
  uint64_t (*v56)(uint64_t *);
  uint64_t (*v57)(uint64_t *);
  _BYTE v58[32];
  __int128 v59;
  _DWORD v60[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[8];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  char v76[8];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  char v89;
  char v90;
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  char v94[8];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  void **v101[2];

  v99 = 0;
  v100 = 0;
  v98 = (uint64_t *)&v99;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v3);
  v58[16] = 0;
  *(int64x2_t *)v58 = vdupq_n_s64(1uLL);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdPrimRange *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v91, (uint64_t)v94, v58);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin(v4, (uint64_t)&v86);
  v5 = MEMORY[0x24BEE9D88];
  v57 = *(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D88] + 48);
  v56 = *(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D38] + 48);
  while (1)
  {
    *(_QWORD *)v58 = v92;
    *(_QWORD *)&v58[8] = v91;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_DWORD *)&v58[24] = 0;
    *(_WORD *)&v58[28] = 0;
    if (v86 == *(_OWORD *)v58)
    {
      v6 = 1;
      if (v87 == *(_QWORD *)&v58[16] && !v88 && !v89)
        v6 = v90 != 0;
    }
    else
    {
      v6 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58[16]);
    if (!v6)
      break;
    v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v86, (uint64_t)v82);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v7);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
      && (realityio::hasMaterialXSurface((realityio *)v82, v8) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v80 = v5 + 16;
      if (v81 && (*(_BYTE *)(v81 + 57) & 8) == 0 && (v57(&v80) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v80);
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v76) & 1) != 0)
        {
          Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          v10 = *((_QWORD *)Data + 27);
          if ((v10 & 7) != 0)
          {
            v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 2, v11));
            if ((v12 & 1) == 0)
              v10 &= 0xFFFFFFFFFFFFFFF8;
          }
          memset(v58, 0, 24);
          v69 = (void **)v58;
          LOBYTE(v70) = 0;
          v13 = operator new(8uLL);
          *(_QWORD *)v58 = v13;
          *(_QWORD *)&v58[8] = v13;
          *v13 = v10;
          *(_QWORD *)&v58[16] = v13 + 1;
          if ((v10 & 7) != 0)
          {
            v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 2, v14));
            if ((v15 & 1) == 0)
              *v13 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_QWORD *)&v58[8] = v13 + 1;
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
          v69 = (void **)v58;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v69);
          if ((v10 & 7) != 0)
          {
            v16 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          if (v75
            && (*(_BYTE *)(v75 + 57) & 8) == 0
            && ((*(uint64_t (**)(uint64_t *))(v74 + 32))(&v74) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v74);
            v19 = (realityio *)v73[0];
            v18 = (realityio *)v73[1];
            while (v19 != v18)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v19)
                && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
                && MEMORY[0x2348B37CC](v19))
              {
                realityio::findOriginalSourceAttribute(v19, (uint64_t)&v69);
                if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v69) & 1) != 0)
                {
                  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v65, &v70, &v71);
                  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v65) & 1) != 0)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                    v63 = MEMORY[0x24BEE9D38] + 16;
                    if (v64 && (*(_BYTE *)(v64 + 57) & 8) == 0 && (v56(&v63) & 1) != 0)
                    {
                      *(_QWORD *)&v61 = 0;
                      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v63);
                      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v58))
                        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
                      if ((v58[24] & 7) != 0)
                      {
                        v20 = (unsigned int *)(*(_QWORD *)&v58[24] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v21 = __ldxr(v20);
                        while (__stlxr(v21 - 2, v20));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58[16]);
                      if (*(_QWORD *)&v58[8])
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v58[8]);
                      MEMORY[0x2348B274C](v58, "UsdUVTexture");
                      v22 = v61;
                      v23 = (unsigned int *)(*(_QWORD *)v58 & 0xFFFFFFFFFFFFFFF8);
                      if ((v58[0] & 7) != 0)
                      {
                        do
                          v24 = __ldxr(v23);
                        while (__stlxr(v24 - 2, v23));
                        v25 = v61;
                      }
                      else
                      {
                        v25 = v61;
                      }
                      if ((v25 & 7) != 0)
                      {
                        v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v27 = __ldxr(v26);
                        while (__stlxr(v27 - 2, v26));
                      }
                      if ((unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8) == v23)
                      {
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v65, v58);
                        v54 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v98, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v58);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v58);
                        if (&v99 != v54)
                          goto LABEL_68;
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v65, v101);
                        *((_QWORD *)&v61 + 1) = 0;
                        v62 = 0;
                        *(_QWORD *)&v61 = (char *)&v61 + 8;
                        std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)v58, v101, &v61);
                        v32 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>(&v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)v58, (uint64_t)v58);
                        v52 = v33;
                        v54 = v32;
                        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy((uint64_t)&v58[8], *(_QWORD **)&v58[16]);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v58);
                        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy((uint64_t)&v61, *((_QWORD **)&v61 + 1));
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v101);
                        if ((v52 & 1) != 0)
                        {
LABEL_68:
                          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v82, v58);
                          v53 = (char **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(v54 + 5), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v58);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v58);
                          if (v54 + 6 != (uint64_t **)v53)
                            goto LABEL_70;
                          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v82, v60);
                          v61 = 0uLL;
                          v62 = 0;
                          *(_DWORD *)v58 = v60[0];
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                          *(_DWORD *)&v58[4] = v60[1];
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                          *(_OWORD *)&v58[8] = v61;
                          *(_QWORD *)&v58[24] = v62;
                          v62 = 0;
                          v61 = 0uLL;
                          v53 = (char **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>(v54 + 5, (pxrInternal__aapl__pxrReserved__::SdfPath *)v58, (uint64_t)v58);
                          v55 = v34;
                          v101[0] = (void **)&v58[8];
                          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v101);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v58);
                          v101[0] = (void **)&v61;
                          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v101);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v60);
                          if ((v55 & 1) != 0)
                          {
LABEL_70:
                            v59 = 0u;
                            memset(v58, 0, sizeof(v58));
                            BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69);
                            if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
                              EmptyString = (const std::string *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
                            else
                              EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
                            std::string::operator=((std::string *)&v58[24], EmptyString);
                            if ((v61 & 7) != 0)
                            {
                              v37 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v38 = __ldxr(v37);
                              while (__stlxr(v38 - 2, v37));
                            }
                            v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v19);
                            if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
                              v40 = (const std::string *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
                            else
                              v40 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
                            std::string::operator=((std::string *)v58, v40);
                            if ((v61 & 7) != 0)
                            {
                              v41 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v42 = __ldxr(v41);
                              while (__stlxr(v42 - 2, v41));
                            }
                            std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::push_back[abi:ne180100](v53 + 5, (__int128 *)v58);
                            if (SHIBYTE(v59) < 0)
                              operator delete(*(void **)&v58[24]);
                            if ((v58[23] & 0x80000000) != 0)
                              operator delete(*(void **)v58);
                          }
                        }
                      }
                    }
                    MEMORY[0x2348B1EC4](&v63);
                  }
                  if ((v68 & 7) != 0)
                  {
                    v28 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v29 = __ldxr(v28);
                    while (__stlxr(v29 - 2, v28));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
                  if (v66)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
                }
                if ((v72 & 7) != 0)
                {
                  v30 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v31 = __ldxr(v30);
                  while (__stlxr(v31 - 2, v30));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
                if (v70)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
              }
              v19 = (realityio *)((char *)v19 + 32);
            }
            *(_QWORD *)v58 = v73;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
          }
          MEMORY[0x2348B1EC4](&v74);
        }
        if ((v79 & 7) != 0)
        {
          v43 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
        if (v77)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
      }
      MEMORY[0x2348B20B0](&v80);
    }
    if ((v85 & 7) != 0)
    {
      v45 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stlxr(v46 - 2, v45));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
    if (v83)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v86);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
  v47 = v99;
  *a2 = v98;
  a2[1] = v47;
  v48 = a2 + 1;
  v49 = v100;
  a2[2] = v100;
  if (v49)
  {
    v47[2] = v48;
    v98 = (uint64_t *)&v99;
    v99 = 0;
    v100 = 0;
  }
  else
  {
    *a2 = v48;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
  if ((v97 & 7) != 0)
  {
    v50 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
  if (v95)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v98, v99);
}

void sub_2300789CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a67;
  uint64_t v67;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a60);
  MEMORY[0x2348B20B0](&a64);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a67);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)(v67 - 240));
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)(v67 - 208));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v67 - 152));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v67 - 120, *(_QWORD **)(v67 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v28 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v16 + 48;
    v19 = *a1;
    v20 = (unint64_t)a1[1];
    if ((char *)v20 == *a1)
    {
      v23 = vdupq_n_s64(v20);
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v20 - 48);
        *((_QWORD *)v16 - 4) = *(_QWORD *)(v20 - 32);
        *((_OWORD *)v16 - 3) = v21;
        *(_QWORD *)(v20 - 40) = 0;
        *(_QWORD *)(v20 - 32) = 0;
        *(_QWORD *)(v20 - 48) = 0;
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v16 - 1) = *(_QWORD *)(v20 - 8);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 48;
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        v20 -= 48;
      }
      while ((char *)v20 != v19);
      v23 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v10;
    v26 = v23;
    v24 = a1[2];
    a1[2] = &v15[48 * v14];
    v27 = v24;
    v25 = v23.i64[0];
    result = std::__split_buffer<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  *(_QWORD *)(a1 + 8) = *a3;
  v7 = a3 + 1;
  v8 = a3[1];
  *(_QWORD *)(a1 + 16) = v8;
  v9 = a1 + 16;
  v10 = a3[2];
  *(_QWORD *)(a1 + 24) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *a3 = v7;
    *v7 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v9;
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  void **v5;
  _DWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v15, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v13[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, (_DWORD *)(a3 + 4));
    v8 = (_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v6 + 5) = *(_QWORD *)(a3 + 8);
    *((_QWORD *)v6 + 6) = v9;
    v10 = (char *)(v6 + 12);
    v11 = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v6 + 7) = v11;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(a3 + 8) = v8;
      *v8 = 0;
      *(_QWORD *)(a3 + 24) = 0;
    }
    else
    {
      *((_QWORD *)v6 + 5) = v10;
    }
    v14 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v15, v7, (uint64_t *)v6);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

char *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  *(_QWORD *)a1 = off_24FDF1378;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>((char *)(a1 + 32), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(_BYTE *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_23007934C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char IsValid;
  char v16;
  char v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE v51[8];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a7 + 24) || !*(_QWORD *)(a8 + 24) || !*(_QWORD *)(a9 + 24))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v55);
  v16 = a3 ? IsValid : 1;
  if ((v16 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    v18 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v51);
    if ((v54 & 7) != 0)
    {
      v19 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v17 = v18 ^ 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
    if (v52)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
  }
  if ((v58 & 7) != 0)
  {
    v21 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (v56)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v56);
  if ((v17 & 1) != 0)
    return 0;
  v23 = a1;
  v24 = *(uint64_t **)(a1 + 16);
  v50 = v23;
  v25 = *(uint64_t **)(v23 + 8);
  if (v24 != v25)
  {
    while (1)
    {
      v27 = *v25;
      v26 = (std::__shared_weak_count *)v25[1];
      v55 = *v25;
      v56 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v63, a7);
      if (!v64)
        std::__throw_bad_function_call[abi:ne180100]();
      v30 = (*(uint64_t (**)(_BYTE *, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v64 + 48))(v64, a2, v27);
      v31 = v64;
      if (v64 == v63)
        break;
      if (v64)
      {
        v32 = 5;
LABEL_29:
        (*(void (**)(void))(*v31 + 8 * v32))();
      }
      if (v26)
      {
        v33 = (unint64_t *)&v26->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if ((v30 & 1) != 0)
        goto LABEL_39;
      v25 += 2;
      if (v25 == v24)
        return 0;
    }
    v31 = v63;
    v32 = 4;
    goto LABEL_29;
  }
LABEL_39:
  v37 = *(uint64_t **)(v50 + 32);
  v38 = *(uint64_t **)(v50 + 40);
  if (v37 != v38)
  {
    while (1)
    {
      v40 = *v37;
      v39 = (std::__shared_weak_count *)v37[1];
      v55 = *v37;
      v56 = v39;
      if (v39)
      {
        v41 = (unint64_t *)&v39->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v61, a8);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v59, a9);
      v35 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::UsdStage *, pxrInternal__aapl__pxrReserved__::UsdStage *, _BYTE *, _BYTE *))(*(_QWORD *)v40 + 24))(v40, a2, a3, this, v61, v59);
      v43 = v60;
      if (v60 == v59)
      {
        v43 = v59;
        v44 = 4;
      }
      else
      {
        if (!v60)
          goto LABEL_48;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_48:
      v45 = v62;
      if (v62 == v61)
      {
        v45 = v61;
        v46 = 4;
      }
      else
      {
        if (!v62)
          goto LABEL_53;
        v46 = 5;
      }
      (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_53:
      if (v39)
      {
        v47 = (unint64_t *)&v39->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v37 += 2;
      if (v37 == v38)
        v49 = 1;
      else
        v49 = v35;
      if ((v49 & 1) != 0)
        return v35;
    }
  }
  return 1;
}

void sub_2300796EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::_isEmpty(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    v4 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(unsigned __int8 *)(v4 + 8);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (!v8)
        return 0;
    }
    else if (!*(_BYTE *)(v4 + 8))
    {
      return 0;
    }
    v2 += 2;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 4);
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  if (v10 == v11)
    return 1;
  do
  {
    v12 = *v10;
    v13 = (std::__shared_weak_count *)v10[1];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v10 += 2;
    if (v10 == v11)
      v19 = 0;
    else
      v19 = v16;
  }
  while ((v19 & 1) != 0);
  return v16;
}

void sub_230079934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **realityio::PrimitiveDirtyPrimDescriptor::description@<X0>(realityio::PrimitiveDirtyPrimDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyMetadataDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  CFStringRef v15;
  CFTypeRef cf;
  void *value;
  CFTypeRef v19[2];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyMetadataDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    v19[0] = *(CFTypeRef *)v6;
    v19[1] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v8, (CFStringRef *)&value);
    CFArrayAppendValue(Mutable, value);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  v19[0] = 0;
  v15 = realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>((uint64_t *)this + 4);
  if (v19[0])
    CFRelease(v19[0]);
  v19[0] = v15;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<PrimitiveDirtyPrimDescriptor: %p { dirtyPrimMetadataContainAnyOf: (%lu) [ %@ ], dirtyPropertiesContainAnyOf: (%lu) [ %@ ] } >"), this, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, cf, (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4, v15);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v19);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_230079AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  const void *v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, const void *);
  v11 = va_arg(va1, _QWORD);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>(uint64_t *a1)
{
  const char *v2;
  __CFArray *Mutable;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  CFStringRef v12;
  void *value[3];

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v4 = *a1;
  v5 = a1[1];
  while (v4 != v5)
  {
    v6 = *(void **)v4;
    v7 = *(std::__shared_weak_count **)(v4 + 8);
    value[1] = *(void **)v4;
    value[2] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 16))(value);
    CFArrayAppendValue(Mutable, value[0]);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)value);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 += 16;
  }
  v12 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v2);
  CFRelease(Mutable);
  return v12;
}

void sub_230079C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_BYTE *realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(_BYTE *a1, uint64_t a2, _QWORD **a3, _QWORD **a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)a1, a3, a4);
  *v6 = &off_24FDF13C0;
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](v6 + 8, a2);
  a1[56] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_230079C90(_Unwind_Exception *a1)
{
  realityio::PrimitiveDirtyPrimDescriptor *v1;
  uint64_t v2;

  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v2, *((_QWORD **)v1 + 9));
  realityio::PrimitiveDirtyPrimDescriptor::~PrimitiveDirtyPrimDescriptor(v1);
  _Unwind_Resume(a1);
}

void realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(realityio::TypeNameDirtyPrimDescriptor *this)
{
  void **v2;

  *(_QWORD *)this = &off_24FDF13C0;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_BYTE *realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(_BYTE *a1, uint64_t *a2, _QWORD **a3, _QWORD **a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE v13[8];
  _QWORD *v14;
  uint64_t v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v15[0] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v15[0] = (uint64_t)v8;
  }
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v13, v15, 1);
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(a1, (uint64_t)v13, a3, a4);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v13, v14);
  if ((v15[0] & 7) != 0)
  {
    v10 = (unsigned int *)(v15[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  a1[56] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  return a1;
}

void sub_230079E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  realityio::TypeNameDirtyPrimDescriptor *v13;

  realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(v13);
  _Unwind_Resume(a1);
}

void realityio::PrimitiveDirtyPrimDescriptor::~PrimitiveDirtyPrimDescriptor(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C402FEF67C7);
}

char *realityio::TypeNameDirtyPrimDescriptor::getExplicitPrimTypes@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  BOOL v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  v3 = this + 72;
  if (v2 != this + 72)
  {
    this = 0;
    do
    {
      v5 = (uint64_t *)(v2 + 32);
      if ((unint64_t)this >= *(_QWORD *)(a2 + 16))
      {
        this = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)a2, v5);
      }
      else
      {
        v6 = *v5;
        *(_QWORD *)this = *v5;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 2, v7));
          if ((v8 & 1) == 0)
            *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
        }
        this += 8;
      }
      *(_QWORD *)(a2 + 8) = this;
      v9 = (char *)*((_QWORD *)v2 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v2 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
  return this;
}

void sub_230079FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::TypeNameDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, int a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char IsValid;
  char v17;
  char v18;
  char v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v43);
  if (a3)
    v17 = IsValid;
  else
    v17 = 1;
  if ((v17 & 1) != 0)
  {
    v18 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    v19 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v39);
    if ((v42 & 7) != 0)
    {
      v20 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v18 = v19 ^ 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    if (v40)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
  }
  if ((v46 & 7) != 0)
  {
    v22 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (v44)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
  if ((v18 & 1) != 0)
    return 0;
  if (*(_QWORD *)(a1 + 80))
  {
    v25 = *(_QWORD **)(a1 + 64);
    v26 = (_QWORD *)(a1 + 72);
    if (v25 != (_QWORD *)(a1 + 72))
    {
      while ((v25[4] & 0xFFFFFFFFFFFFFFF8) != (*a6 & 0xFFFFFFFFFFFFFFF8))
      {
        v27 = (_QWORD *)v25[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD *)v25[2];
            v29 = *v28 == (_QWORD)v25;
            v25 = v28;
          }
          while (!v29);
        }
        v25 = v28;
        if (v28 == v26)
          return 0;
      }
    }
    if (v26 == v25)
      return 0;
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v51, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v49, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v47, a9);
  v24 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, this, v30, v31, (uint64_t)v51, (uint64_t)v49, (uint64_t)v47);
  v32 = v48;
  if (v48 == v47)
  {
    v33 = 4;
    v32 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_34;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_34:
  v34 = v50;
  if (v50 == v49)
  {
    v35 = 4;
    v34 = v49;
    goto LABEL_38;
  }
  if (v50)
  {
    v35 = 5;
LABEL_38:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v36 = v52;
  if (v52 == v51)
  {
    v37 = 4;
    v36 = v51;
    goto LABEL_43;
  }
  if (v52)
  {
    v37 = 5;
LABEL_43:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  return v24;
}

void sub_23007A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  uint64_t v25;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v27 = a21;
  if (a21 == &a18)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  v29 = a25;
  if (a25 == &a22)
  {
    v30 = 4;
    v29 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_11:
  v31 = *(_QWORD **)(v25 - 96);
  if (v31 == (_QWORD *)(v25 - 120))
  {
    v32 = 4;
    v31 = (_QWORD *)(v25 - 120);
  }
  else
  {
    if (!v31)
      goto LABEL_16;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

BOOL realityio::TypeNameDirtyPrimDescriptor::_isEmpty(realityio::TypeNameDirtyPrimDescriptor *this)
{
  realityio::TypeNameDirtyPrimDescriptor *v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;
  realityio::TypeNameDirtyPrimDescriptor *v5;
  realityio::TypeNameDirtyPrimDescriptor *v6;
  BOOL v7;

  v1 = (realityio::TypeNameDirtyPrimDescriptor *)*((_QWORD *)this + 8);
  if (v1 == (realityio::TypeNameDirtyPrimDescriptor *)((char *)this + 72))
    return *((_BYTE *)this + 56) != 0;
  v2 = 1;
  while (1)
  {
    v3 = *((_QWORD *)v1 + 4);
    v4 = v3 != 0;
    if (!v3)
      break;
    v5 = (realityio::TypeNameDirtyPrimDescriptor *)*((_QWORD *)v1 + 1);
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = *(realityio::TypeNameDirtyPrimDescriptor **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (realityio::TypeNameDirtyPrimDescriptor *)*((_QWORD *)v1 + 2);
        v7 = *(_QWORD *)v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v2 &= v4;
    v1 = v6;
    if (v6 == (realityio::TypeNameDirtyPrimDescriptor *)((char *)this + 72))
    {
      if (v2)
        return *((_BYTE *)this + 56) != 0;
      return 0;
    }
  }
  return 0;
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::isEmpty(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  return *((unsigned __int8 *)this + 56);
}

const void **realityio::TypeNameDirtyPrimDescriptor::description@<X0>(realityio::TypeNameDirtyPrimDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v4;
  const char *v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  realityio::DirtyMetadataDescriptor *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CFStringRef v15;
  CFStringRef v16;
  CFTypeRef cf;
  void *__p[2];
  char v20;
  CFStringRef v21;
  const void *v22;

  v21 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ", ");
  v4 = realityio::joinAsCFStringRef((unint64_t)this + 64, (const void **)__p);
  if (v21)
    CFRelease(v21);
  v21 = v4;
  if (v20 < 0)
    operator delete(__p[0]);
  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  while (v7 != v8)
  {
    v9 = *(realityio::DirtyMetadataDescriptor **)v7;
    v10 = *(std::__shared_weak_count **)(v7 + 8);
    __p[0] = *(void **)v7;
    __p[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v9, (CFStringRef *)&v22);
    CFArrayAppendValue(Mutable, v22);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v22);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v7 += 16;
  }
  v15 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v5);
  CFRelease(Mutable);
  cf = v15;
  __p[0] = 0;
  v16 = realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>((uint64_t *)this + 4);
  if (__p[0])
    CFRelease(__p[0]);
  __p[0] = (void *)v16;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<TypeNameDirtyPrimDescriptor: %p { typeNameIsAnyOf: [ %lu ](%@), dirtyPrimMetadataContainAnyOf: (%lu) [ %@ ], dirtyPropertiesContainAnyOf: (%lu) [ %@ ] } >"), this, *((_QWORD *)this + 10), v21, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, cf, (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4, v16);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)__p);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v21);
}

void sub_23007A5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  const void **v23;
  uint64_t v24;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v23);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&__p);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a17);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v24 - 64));
  _Unwind_Resume(a1);
}

void realityio::PrimitiveDirtyPrimDescriptor::getExplicitPrimTypes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::TfToken,std::__tree_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_23007A740(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::TfToken,std::__tree_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

realityio::tokens::PhysicsBuilderTokens_StaticTokenType *realityio::tokens::PhysicsBuilderTokens_StaticTokenType::PhysicsBuilderTokens_StaticTokenType(realityio::tokens::PhysicsBuilderTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)MEMORY[0x2348B2758](this, "preliminary_isSceneGroundPlane", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_23007A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((*v9 & 7) != 0)
  {
    v15 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsMaterialsDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  realityio::AnyValueDirtyPropertyDescriptor *v10;
  unint64_t *v11;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v16;
  realityio::AnyValueDirtyPropertyDescriptor *v17;
  realityio::AnyValueDirtyPropertyDescriptor *v18;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  _QWORD *v20;
  uint64_t i;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37[3];
  _QWORD *v38[3];
  __int128 v39;
  _QWORD *v40[3];
  _QWORD *v41[3];
  __int128 v42;
  _QWORD *v43[3];
  uint64_t v44;
  uint64_t v45;
  void **v46;
  _OWORD v47[6];
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54940);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54940))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v41, 0, sizeof(v41));
    v9 = operator new();
    memset(v38, 0, sizeof(v38));
    v10 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v11 = (unint64_t *)MEMORY[0x24BEE83A0];
    Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v10, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 48));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v36, (uint64_t)v10);
    v47[0] = v36;
    v36 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v14 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(v11);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v14 + 40));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v35, (uint64_t)v13);
    v47[1] = v35;
    v35 = 0uLL;
    v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v16 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(v11);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v16 + 32));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v34, (uint64_t)v15);
    v47[2] = v34;
    v34 = 0uLL;
    v17 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v32, "physics:restitution");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v32);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v33, (uint64_t)v17);
    v47[3] = v33;
    v33 = 0uLL;
    v18 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v30, "physics:staticFriction");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v31, (uint64_t)v18);
    v47[4] = v31;
    v31 = 0uLL;
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v28, "physics:dynamicFriction");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v29, (uint64_t)v19);
    v47[5] = v29;
    v29 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v37, v47, 6uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v38, v37);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v39, v9);
    v48 = v39;
    v39 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v40, &v48, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v41, v40);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v42, v8);
    v49 = v42;
    v42 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v43, &v49, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v43);
    v20 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v44, v7);
    _MergedGlobals_23 = v44;
    *(_QWORD *)algn_255E54938 = v45;
    v44 = 0;
    v45 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v20);
    v46 = (void **)v43;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v46);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    v46 = (void **)v40;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v46);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    v46 = (void **)v37;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v46);
    for (i = 5; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v47[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    if ((v28 & 7) != 0)
    {
      v22 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    if ((v30 & 7) != 0)
    {
      v24 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    if ((v32 & 7) != 0)
    {
      v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    *(_QWORD *)&v47[0] = v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
    *(_QWORD *)&v47[0] = v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
    __cxa_guard_release(&qword_255E54940);
  }
  v4 = *(_QWORD *)algn_255E54938;
  *a1 = _MergedGlobals_23;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23007AE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  MEMORY[0x2348B4E1C](v42, 0x10E1C40C8742A8BLL);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  while (v41 != v43 - 224)
  {
    v41 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v41);
  }
  *(_QWORD *)(v43 - 224) = &a30;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 224));
  MEMORY[0x2348B4E1C](v40, 0x10A1C402FEF67C7);
  *(_QWORD *)(v43 - 224) = &a38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 224));
  MEMORY[0x2348B4E1C](v39, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v38, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54940);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsRigidBodyDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  realityio::AnyValueDirtyPropertyDescriptor *v10;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  _QWORD *v13;
  uint64_t i;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20[3];
  _QWORD *v21[3];
  __int128 v22;
  _QWORD *v23[3];
  _QWORD *v24[3];
  __int128 v25;
  _QWORD *v26[3];
  uint64_t v27;
  uint64_t v28;
  void **v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54958);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54958))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v24, 0, sizeof(v24));
    v9 = operator new();
    memset(v21, 0, sizeof(v21));
    v10 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v10, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v19, (uint64_t)v10);
    v30[0] = v19;
    v19 = 0uLL;
    v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v17, "physics:mass");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v18, (uint64_t)v12);
    v30[1] = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v20, v30, 2uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v21, v20);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v22, v9);
    v31 = v22;
    v22 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v23, &v31, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v24, v23);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v25, v8);
    v32 = v25;
    v25 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v26, &v32, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v26);
    v13 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v27, v7);
    qword_255E54948 = v27;
    unk_255E54950 = v28;
    v27 = 0;
    v28 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v13);
    v29 = (void **)v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
    v29 = (void **)v23;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22);
    v29 = (void **)v20;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    if ((v17 & 7) != 0)
    {
      v15 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v19);
    *(_QWORD *)&v30[0] = v21;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    *(_QWORD *)&v30[0] = v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    __cxa_guard_release(&qword_255E54958);
  }
  v4 = unk_255E54950;
  *a1 = qword_255E54948;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23007B630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x2348B4E1C](v28, 0x10E1C40C8742A8BLL);
  *(_QWORD *)(v30 - 160) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v27, 0x10A1C402FEF67C7);
  *(_QWORD *)(v30 - 160) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54958);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsColliderDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  realityio::AnyValueDirtyPropertyDescriptor *v10;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  _QWORD *v13;
  uint64_t i;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20[3];
  _QWORD *v21[3];
  __int128 v22;
  _QWORD *v23[3];
  _QWORD *v24[3];
  __int128 v25;
  _QWORD *v26[3];
  uint64_t v27;
  uint64_t v28;
  void **v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54970);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54970))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v24, 0, sizeof(v24));
    v9 = operator new();
    memset(v21, 0, sizeof(v21));
    v10 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v10, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v19, (uint64_t)v10);
    v30[0] = v19;
    v19 = 0uLL;
    v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v17, "physics:approximation");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v18, (uint64_t)v12);
    v30[1] = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v20, v30, 2uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v21, v20);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v22, v9);
    v31 = v22;
    v22 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v23, &v31, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v24, v23);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v25, v8);
    v32 = v25;
    v25 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v26, &v32, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v26);
    v13 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v27, v7);
    qword_255E54960 = v27;
    *(_QWORD *)algn_255E54968 = v28;
    v27 = 0;
    v28 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v13);
    v29 = (void **)v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
    v29 = (void **)v23;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22);
    v29 = (void **)v20;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    if ((v17 & 7) != 0)
    {
      v15 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v19);
    *(_QWORD *)&v30[0] = v21;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    *(_QWORD *)&v30[0] = v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    __cxa_guard_release(&qword_255E54970);
  }
  v4 = *(_QWORD *)algn_255E54968;
  *a1 = qword_255E54960;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23007BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x2348B4E1C](v28, 0x10E1C40C8742A8BLL);
  *(_QWORD *)(v30 - 160) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v27, 0x10A1C402FEF67C7);
  *(_QWORD *)(v30 - 160) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54970);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsSceneGroundPlaneDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  realityio::AnyValueDirtyPropertyDescriptor *v10;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  _QWORD *v13;
  uint64_t i;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20[3];
  _QWORD *v21[3];
  __int128 v22;
  _QWORD *v23[3];
  _QWORD *v24[3];
  __int128 v25;
  _QWORD *v26[3];
  uint64_t v27;
  uint64_t v28;
  void **v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54988);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54988))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v24, 0, sizeof(v24));
    v9 = operator new();
    memset(v21, 0, sizeof(v21));
    v10 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v10, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v19, (uint64_t)v10);
    v30[0] = v19;
    v19 = 0uLL;
    v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v17, "physics:approximation");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v18, (uint64_t)v12);
    v30[1] = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v20, v30, 2uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v21, v20);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v22, v9);
    v31 = v22;
    v22 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v23, &v31, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v24, v23);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v25, v8);
    v32 = v25;
    v25 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v26, &v32, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v26);
    v13 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v27, v7);
    qword_255E54978 = v27;
    unk_255E54980 = v28;
    v27 = 0;
    v28 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v13);
    v29 = (void **)v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
    v29 = (void **)v23;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22);
    v29 = (void **)v20;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v29);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    if ((v17 & 7) != 0)
    {
      v15 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v19);
    *(_QWORD *)&v30[0] = v21;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    *(_QWORD *)&v30[0] = v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    __cxa_guard_release(&qword_255E54988);
  }
  v4 = unk_255E54980;
  *a1 = qword_255E54978;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23007C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x2348B4E1C](v28, 0x10E1C40C8742A8BLL);
  *(_QWORD *)(v30 - 160) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v27, 0x10A1C402FEF67C7);
  *(_QWORD *)(v30 - 160) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2348B4E1C](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54988);
  _Unwind_Resume(a1);
}

uint64_t realityio::isSceneGroundPlane(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfToken *Data;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  int v6;
  _BYTE v7[16];
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)result)
  {
    v9 = 0;
    Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::PhysicsBuilderTokens);
    if (!Data)
      Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::PhysicsBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(this, Data, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
    if (*(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
      goto LABEL_8;
    v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::PhysicsBuilderTokens);
    if (!v5)
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::PhysicsBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(this, v5);
    v6 = *(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    if (v6)
    {
LABEL_8:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
      return 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
      return 0;
    }
  }
  return result;
}

void sub_23007C594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::getUsdPhysicsAttributeDoubleValue(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, double *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v17;
  uint64_t v18;
  _BYTE v19[4];
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v17) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a3);
    v17 = v22;
    v9 = v23;
    v23 = 0;
    v10 = v18;
    v18 = v9;
    if (v10)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v19, &v24);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v20);
    if ((v21 & 7) != 0)
    {
      v11 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v21 = v25;
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    if (v23)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v17))
  {
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v22))
    {
      if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>() & 1) != 0)
      {
        v13 = 1;
LABEL_20:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        goto LABEL_21;
      }
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)&v22))
    {
      v13 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
      if ((v13 & 1) != 0)
        *(double *)a4 = 0.0;
      goto LABEL_20;
    }
    v13 = 0;
    goto LABEL_20;
  }
  v13 = 0;
LABEL_21:
  if ((v21 & 7) != 0)
  {
    v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
  if (v18)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  return v13;
}

void sub_23007C7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *result;

  result = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::~AaplUsdPhysicsTokensType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>::New()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2348B2398]();
  return v0;
}

void sub_23007C8AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4074E012CELL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::~AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v28;

  v28 = (void **)((char *)this + 72);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v28);
  v2 = *((_QWORD *)this + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 3);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 2);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::PhysicsBuilderTokens_StaticTokenType *v2;
  realityio::tokens::PhysicsBuilderTokens_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>::New();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    MEMORY[0x2348B4E1C](v3, 0x60C405399E965);
  }
  return atomic_load(a1);
}

realityio::tokens::PhysicsBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::PhysicsBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::PhysicsBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::PhysicsBuilderTokens_StaticTokenType::PhysicsBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_23007CAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderPropertyDeltaGetTypeID()
{
  if (RIOBuilderPropertyDeltaGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderPropertyDeltaGetTypeID::onceToken, &__block_literal_global_13);
  return RIOBuilderPropertyDeltaGetTypeID::typeID;
}

uint64_t RIOBuilderPropertyDeltaCopyPropertyName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(a1 + 16));
}

__CFArray *RIOBuilderPropertyDeltaCopyDirtyMetadata(uint64_t a1)
{
  __CFArray *Mutable;
  _QWORD *i;
  const void *v4;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  for (i = *(_QWORD **)(a1 + 40); i; i = (_QWORD *)*i)
  {
    v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t _RIOBuilderPropertyDeltaCFFinalize(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)(a1 + 3));
  v3 = a1[2];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

BOOL _RIOBuilderPropertyDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderPropertyDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderPropertyDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderPropertyDelta %p>"), a1);
}

CFStringRef _RIOBuilderPropertyDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderPropertyDelta %p>"), a1);
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, std::string *a3)
{
  _BOOL8 result;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  realityio *v10;
  NSObject *v11;
  std::string::size_type __n;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  __n = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&__n, 1uLL);
  if (result)
  {
    if (__n > 0x7A120)
    {
      v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      *(_DWORD *)buf = 134217984;
      v14 = 500000;
      v7 = "String count exceeded maximum of %zu";
      v8 = v6;
      v9 = 12;
LABEL_8:
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);
      return 0;
    }
    std::string::resize(a3, __n, 0);
    v10 = (realityio *)std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
    {
      v11 = *(NSObject **)(realityio::logObjects(v10) + 40);
      result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      *(_WORD *)buf = 0;
      v7 = "Failed to read";
      v8 = v11;
      v9 = 2;
      goto LABEL_8;
    }
    return 1;
  }
  return result;
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v4 = realityio::replication::read(a1, a2, &__p);
  if (v4)
  {
    MEMORY[0x2348B2764](&v9, &__p);
    v5 = *a3;
    *a3 = v9;
    v9 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_23007CEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v4;
  void **v5;
  int v6;
  void *__p[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  v4 = realityio::replication::read(a1, a2, &v12);
  if (v4)
  {
    MEMORY[0x2348B1B64](__p, &v12);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v9;
    HIBYTE(v9) = 0;
    LOBYTE(__p[0]) = 0;
    v5 = (void **)(a3 + 24);
    if (*(char *)(a3 + 47) < 0)
    {
      operator delete(*v5);
      v6 = SHIBYTE(v9);
      *(_OWORD *)v5 = v10;
      *(_QWORD *)(a3 + 40) = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v6 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v5 = v10;
      *(_QWORD *)(a3 + 40) = v11;
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v4;
}

{
  _BOOL8 v4;
  int v6;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v4 = realityio::replication::read(a1, a2, &__p);
  if (v4)
  {
    MEMORY[0x2348B26F8](&v6, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

{
  _BOOL8 v5;
  uint64_t v6;
  std::string v8;
  std::string v9;
  void *__p;
  char v11;
  std::string v12;

  memset(&v8, 0, sizeof(v8));
  if (realityio::replication::read(a1, a2, &v8))
  {
    MEMORY[0x2348B1B64](&v9, &v8);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v12, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    else
      v12 = v9;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v12;
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (v11 < 0)
      operator delete(__p);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    if (realityio::replication::read(a1, v6, (uint64_t)&v12))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 24, &v12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 28, (_DWORD *)v12.__r_.__value_.__r.__words + 1);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v9, 0.0, 1.0);
      v5 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v9, 1uLL);
      if (v5)
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
    }
    else
    {
      v5 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v5;
}

void sub_23007CFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(realityio *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  unint64_t i;
  _QWORD *v7;
  int v8;
  std::string __p;
  unint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (result)
  {
    if (v10)
    {
      for (i = 0; i < v10; ++i)
      {
        memset(&__p, 0, sizeof(__p));
        if (realityio::replication::read(a1, v5, &__p))
        {
          v11[1] = 0;
          if ((realityio::replication::read(a1, a2, v11) & 1) != 0)
          {
            v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
            pxrInternal__aapl__pxrReserved__::VtValue::operator=(v7, v11);
            v8 = 0;
          }
          else
          {
            v8 = 1;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
        }
        else
        {
          v8 = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        result = v8 == 0;
        if (v8)
          break;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_23007D0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_23007D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23007D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::read(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v4;
  realityio *v5;
  uint64_t v6;
  NSObject *v7;
  void **v9;
  void *p_p;
  void *__p;
  char v12;
  void *v13[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  void *v18;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if ((realityio::replication::read(a1, a2, &v19) & 1) == 0)
    goto LABEL_17;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
  {
    if ((v20 & 4) != 0)
      (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 168))(&v19);
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue();
    goto LABEL_14;
  }
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
  {
    v5 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
    if ((_DWORD)v5)
    {
      if ((v20 & 4) != 0)
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 168))(&v19);
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue();
      goto LABEL_14;
    }
    v7 = *(id *)(realityio::logObjects(v5) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>();
      v9 = v13;
      if (v14 < 0)
        v9 = (void **)v13[0];
      if (v12 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315394;
      v16 = v9;
      v17 = 2080;
      v18 = p_p;
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Deserialized SdfUnregisteredValue contains invalid type '%s' = '%s'; expected string, VtDictionary or SdfUnregis"
        "teredValueListOp",
        buf,
        0x16u);
      if (v12 < 0)
        operator delete(__p);
      if (v14 < 0)
        operator delete(v13[0]);
    }

LABEL_17:
    v6 = 0;
    goto LABEL_18;
  }
  if ((v20 & 4) != 0)
    v4 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
  else
    v4 = v19;
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v13, v4);
LABEL_14:
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(a3, v13);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  v6 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
  return v6;
}

void sub_23007D588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  uint64_t v18;

  if (a17 < 0)
    operator delete(__p);

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 - 56));
  _Unwind_Resume(a1);
}

BOOL realityio::replication::read(_QWORD *a1)
{
  _BOOL4 v2;
  _BOOL8 result;
  _BOOL8 v4;
  NSObject *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = realityio::replication::details::readBuffer<unsigned char,0>(a1);
  result = 0;
  if (v2)
  {
    v4 = realityio::replication::details::readBuffer<unsigned short,0>(a1);
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 67109120;
      v7 = 0;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Deserialized VtValue has invalid value type '%u'", buf, 8u);
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v5;
  size_t v6;
  NSObject *v7;
  _QWORD *New;
  uint64_t v9;
  _OWORD v11[2];
  _QWORD *v12;
  size_t v13;
  uint8_t buf[4];
  _DWORD v15[7];

  *(_QWORD *)&v15[5] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = 0;
  memset(v11, 0, sizeof(v11));
  v5 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v13, 1uLL);
  if (!v5)
  {
LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  v6 = v13;
  if (v13 > 0x7A120)
  {
    v7 = *(NSObject **)(realityio::logObjects((realityio *)v5) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v15 = 500000;
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v13 != *(_QWORD *)&v11[0])
  {
    if (v13)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)v11, v13);
      bzero(New, v6);
      if (New != v12)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v11);
        v12 = New;
      }
      *(_QWORD *)&v11[0] = v6;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v11);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11);
  if (!realityio::replication::details::readBuffer<BOOL,0>(a1))
    goto LABEL_14;
  *(_QWORD *)&v15[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v9 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v11);
  return v9;
}

void sub_23007DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  size_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  size_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned char,0>(a1))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007E270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<int>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 buf;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  v11 = 0;
  *(_QWORD *)&buf = &v11;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>((unint64_t *)v8, v10, (_DWORD **)&buf);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<int,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_23007E3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 4 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 8 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 8 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 2 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(a1, (uint64_t)v11, v12))goto LABEL_14;
  *(_QWORD *)&v14[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<float>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int128 buf;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  v11 = 0;
  *(_QWORD *)&buf = &v11;
  pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>((unint64_t *)v8, v10, (_DWORD **)&buf);
  pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<int,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_23007EFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<double>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 buf;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v12 = 0;
  v6 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v6)
    goto LABEL_7;
  if (v12 > 0x7A120)
  {
    v7 = *(NSObject **)(realityio::logObjects((realityio *)v6) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  v13 = 0;
  *(_QWORD *)&buf = &v13;
  pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>((unint64_t *)v10, v12, (uint64_t **)&buf);
  pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<double,0>(a1, a2, v11, v12))
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v8 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007F14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v5;
  unint64_t v6;
  NSObject *v7;
  std::string *New;
  uint64_t v9;
  unint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  BOOL v15;
  uint64_t v16;
  _OWORD v18[2];
  std::string *v19;
  unint64_t v20;
  __int128 buf;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  memset(v18, 0, sizeof(v18));
  v5 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v20, 1uLL);
  if (v5)
  {
    v6 = v20;
    if (v20 > 0x7A120)
    {
      v7 = *(NSObject **)(realityio::logObjects((realityio *)v5) + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_18;
    }
    *(_DWORD *)((char *)&buf + 3) = 0;
    LODWORD(buf) = 0;
    if (*(_QWORD *)&v18[0] != v20)
    {
      if (v20)
      {
        New = (std::string *)pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)v18, v20);
        bzero(New, 24 * v6 - (24 * (int)v6 - 24) % 0x18u);
        if (New != v19)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v18);
          v19 = New;
        }
        *(_QWORD *)&v18[0] = v6;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(v18);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
    v10 = v20;
    if (!v20)
    {
LABEL_20:
      *((_QWORD *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v18);
      pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      v16 = 1;
      goto LABEL_19;
    }
    v11 = v19;
    if (realityio::replication::read(a1, v9, v19))
    {
      v13 = 0;
      v14 = v11 + 1;
      while (v10 - 1 != v13)
      {
        v15 = realityio::replication::read(a1, v12, v14++);
        ++v13;
        if (!v15)
        {
          if (v13 >= v10)
            goto LABEL_20;
          goto LABEL_18;
        }
      }
      goto LABEL_20;
    }
  }
LABEL_18:
  v16 = 0;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v18);
  return v16;
}

void sub_23007F4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t *New;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  _OWORD v18[2];
  uint64_t *v19;
  unint64_t v20;
  uint8_t buf[4];
  _DWORD v22[7];

  *(_QWORD *)&v22[5] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  memset(v18, 0, sizeof(v18));
  v5 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v20, 1uLL);
  if (v5)
  {
    v6 = v20;
    if (v20 > 0x7A120)
    {
      v7 = *(NSObject **)(realityio::logObjects((realityio *)v5) + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v22 = 500000;
        _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
      goto LABEL_18;
    }
    if (v20 != *(_QWORD *)&v18[0])
    {
      if (v20)
      {
        New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)v18, v20);
        bzero(New, 8 * v6);
        if (New != v19)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v18);
          v19 = New;
        }
        *(_QWORD *)&v18[0] = v6;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(v18);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
    v10 = v20;
    if (!v20)
    {
LABEL_20:
      *(_QWORD *)&v22[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v18);
      pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
      v16 = 1;
      goto LABEL_19;
    }
    v11 = v19;
    if (realityio::replication::read(a1, v9, v19))
    {
      v13 = 0;
      v14 = v11 + 1;
      while (v10 - 1 != v13)
      {
        v15 = realityio::replication::read(a1, v12, v14++);
        ++v13;
        if (!v15)
        {
          if (v13 >= v10)
            goto LABEL_20;
          goto LABEL_18;
        }
      }
      goto LABEL_20;
    }
  }
LABEL_18:
  v16 = 0;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v18);
  return v16;
}

void sub_23007F784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v6;
  unint64_t v7;
  NSObject *v8;
  _QWORD *New;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v17[2];
  _QWORD *v18;
  unint64_t v19;
  uint8_t buf[24];
  void *__p;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  memset(v17, 0, sizeof(v17));
  v6 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v19, 1uLL);
  if (v6)
  {
    v7 = v19;
    if (v19 > 0x7A120)
    {
      v8 = *(NSObject **)(realityio::logObjects((realityio *)v6) + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = 500000;
        _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
      goto LABEL_22;
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)buf);
    if (*(_QWORD *)&v17[0] != v7)
    {
      if (v7)
      {
        New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)v17, v7);
        std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)New, (uint64_t)&New[6 * v7], (__int128 *)buf);
        if (New != v18)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(v17);
          v18 = New;
        }
        *(_QWORD *)&v17[0] = v7;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(v17);
      }
    }
    if (v22 < 0)
      operator delete(__p);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v17);
    v10 = v19;
    if (!v19)
    {
LABEL_24:
      *(_QWORD *)&buf[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v17);
      pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
      v15 = 1;
      goto LABEL_23;
    }
    v11 = (uint64_t)v18;
    if (realityio::replication::read(a1, a2, (uint64_t)v18))
    {
      v12 = 0;
      v13 = v11 + 48;
      while (v10 - 1 != v12)
      {
        v14 = realityio::replication::read(a1, a2, v13);
        v13 += 48;
        ++v12;
        if (!v14)
        {
          if (v12 >= v10)
            goto LABEL_24;
          goto LABEL_22;
        }
      }
      goto LABEL_24;
    }
  }
LABEL_22:
  v15 = 0;
LABEL_23:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(v17);
  return v15;
}

void sub_23007FAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)v10, v12);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23007FD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint8_t buf[4];
  _DWORD v13[7];

  *(_QWORD *)&v13[5] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v13 = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_7;
  }
  v11 = buf;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)v8, v10, (_OWORD **)&v11);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)&v13[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_23007FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)v10, v12);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230080180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint64_t buf[3];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134217984;
      *(uint64_t *)((char *)buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_14;
  }
  memset(buf, 0, 16);
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 16 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v11, v12))goto LABEL_14;
  buf[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230080430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 8 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_2300806C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 4 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230080950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 8 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230080BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  buf = 0uLL;
  v13 = 0;
  p_buf = &buf;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>((unint64_t *)v8, v10, &p_buf);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_230080D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  DWORD2(buf) = 0;
  p_buf = &buf;
  *(_QWORD *)&buf = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)v8, v10, (uint64_t **)&p_buf);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_230080EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  int v11;
  __int16 v12;
  __int128 buf;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_7;
  }
  v12 = 0;
  v11 = 0;
  *(_QWORD *)&buf = &v11;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)v8, v10, (int **)&buf);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_230081080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  __int128 buf;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_14;
  }
  DWORD2(buf) = 0;
  *(_QWORD *)&buf = 0;
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 12 * v5 - (12 * (_DWORD)v5 - 12 - 12 * (((12 * (_DWORD)v5 - 12) & 0xFFFFFFFC) / 0xC)));
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *((_QWORD *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_2300813A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[16];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  *(_OWORD *)buf = 0u;
  v14 = 0u;
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 32 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23008167C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint64_t buf[3];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134217984;
      *(uint64_t *)((char *)buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_14;
  }
  memset(buf, 0, 16);
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 16 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v11, v12))goto LABEL_14;
  buf[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_23008192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[4];
  _DWORD v14[7];

  *(_QWORD *)&v14[5] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v14 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (v12 != *(_QWORD *)&v10[0])
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 8 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&v14[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230081BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint64_t buf[3];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134217984;
      *(uint64_t *)((char *)buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_14;
  }
  memset(buf, 0, 16);
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 16 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v11, v12))goto LABEL_14;
  buf[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230081E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[16];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  *(_OWORD *)buf = 0u;
  v14 = 0u;
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 32 * v5);
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v11, v12))
    goto LABEL_14;
  *(_QWORD *)&buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_230082140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *New;
  uint64_t v8;
  _OWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v5 = v12;
  if (v12 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_14;
  }
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)buf = 0u;
  v14 = 0u;
  if (*(_QWORD *)&v10[0] != v12)
  {
    if (v12)
    {
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)v10, v12);
      bzero(New, 72 * v5 - (72 * (_DWORD)v5 - 72 - 72 * (((72 * (_DWORD)v5 - 72) & 0xFFFFFFF8) / 0x48)));
      if (New != v11)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
        v11 = New;
      }
      *(_QWORD *)&v10[0] = v5;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(a1, (uint64_t)v11, v12))goto LABEL_14;
  *(_QWORD *)&buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v8 = 1;
LABEL_15:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v10);
  return v8;
}

void sub_2300824C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  NSObject *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v10 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (!v4)
    goto LABEL_7;
  if (v10 > 0x7A120)
  {
    v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    goto LABEL_7;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)buf = 0u;
  v13 = 0u;
  v11 = buf;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>((unint64_t *)v8, v10, (__int128 **)&v11);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v8);
  if (!realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(a1, v9, v10))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)&buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)buf, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  v6 = 1;
LABEL_8:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v8);
  return v6;
}

void sub_23008265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<BOOL>(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v4;
  _BYTE v6[8];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = realityio::replication::details::readBuffer<BOOL,0>(a1);
  if (v4)
  {
    v7 = &unk_24FDE59C3;
    v6[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v4;
}

BOOL realityio::replication::readContents<unsigned char>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<unsigned char,0>(a1);
  if (v3)
  {
    v6 = &unk_24FDE9CCB;
    v5[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v5);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  }
  return v3;
}

BOOL realityio::replication::readContents<int>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v7 = &unk_24FDE9B5B;
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<unsigned int>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v7 = &unk_24FDE9D83;
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<long long>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = &unk_24FDE9C13;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<unsigned long long>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = &unk_24FDE9E3B;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::pxr_half::half>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  __int16 v5;
  __int16 v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(a1, (uint64_t)&v5, 1);
  if (v3)
  {
    v7 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
       + 3;
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<float>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  int v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v7 = &unk_24FDE5F5B;
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<double>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v4;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4 = realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)&v6, 1uLL);
  if (v4)
  {
    v7[1] = &unk_24FDE5B2B;
    v7[0] = v6;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  return v4;
}

BOOL realityio::replication::readContents<std::string>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v4;
  std::string __p;
  std::string *v7[3];

  v7[2] = *(std::string **)MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  v4 = realityio::replication::read(a1, a2, &__p);
  if (v4)
  {
    v7[1] = (std::string *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy(v7, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_230082CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::TfToken>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = realityio::replication::read(a1, a2, &v12);
  if (!v4)
  {
    v5 = v12;
    if ((v12 & 7) == 0)
      return v4;
    goto LABEL_10;
  }
  v5 = v12;
  v13[0] = v12;
  v13[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
         + 1;
  v6 = v12 & 7;
  if ((v12 & 7) != 0)
  {
    v7 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v13[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  if (v6)
  {
LABEL_10:
    v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return v4;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v6;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  std::string *v12[3];

  v12[2] = *(std::string **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v8);
  v6 = realityio::replication::read(a1, a2, (uint64_t)v8);
  if (v6)
  {
    v12[1] = (std::string *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy(v12, (__int128 *)v8);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return v6;
}

void sub_230082E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuatd>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v9, 1uLL);
  if (v3)
  {
    v10[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
    v4 = operator new();
    v5 = v9[1];
    *(_OWORD *)v4 = v9[0];
    *(_OWORD *)(v4 + 16) = v5;
    v6 = (unsigned int *)(v4 + 32);
    atomic_store(0, (unsigned int *)(v4 + 32));
    v10[0] = v4;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuatf>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v9[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
    v4 = operator new();
    *(_OWORD *)v4 = v8;
    v5 = (unsigned int *)(v4 + 16);
    atomic_store(0, (unsigned int *)(v4 + 16));
    v9[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuath>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
          + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
          + 2;
    v4 = operator new();
    *(_OWORD *)v4 = v8;
    v5 = (unsigned int *)(v4 + 16);
    atomic_store(0, (unsigned int *)(v4 + 16));
    v9[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2f>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  int v5;
  int v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v7 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
       + 3;
    v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2i>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v10[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
           + 2;
    v4 = operator new();
    *(_OWORD *)v4 = v8;
    *(_QWORD *)(v4 + 16) = v9;
    v5 = (unsigned int *)(v4 + 24);
    atomic_store(0, (unsigned int *)(v4 + 24));
    v10[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3f>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  int v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v10[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
           + 2;
    v4 = operator new();
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = v9;
    v5 = (unsigned int *)(v4 + 12);
    atomic_store(0, (unsigned int *)(v4 + 12));
    v10[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
       + 3;
    v7 = v5;
    v8 = v6;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3i>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  int v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v10[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
           + 2;
    v4 = operator new();
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = v9;
    v5 = (unsigned int *)(v4 + 12);
    atomic_store(0, (unsigned int *)(v4 + 12));
    v10[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v9, 1uLL);
  if (v3)
  {
    v10[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
           + 2;
    v4 = operator new();
    v5 = v9[1];
    *(_OWORD *)v4 = v9[0];
    *(_OWORD *)(v4 + 16) = v5;
    v6 = (unsigned int *)(v4 + 32);
    atomic_store(0, (unsigned int *)(v4 + 32));
    v10[0] = v4;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4f>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
          + 2;
    v4 = operator new();
    *(_OWORD *)v4 = v8;
    v5 = (unsigned int *)(v4 + 16);
    atomic_store(0, (unsigned int *)(v4 + 16));
    v9[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4i>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v8, 1uLL);
  if (v3)
  {
    v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
          + 2;
    v4 = operator new();
    *(_OWORD *)v4 = v8;
    v5 = (unsigned int *)(v4 + 16);
    atomic_store(0, (unsigned int *)(v4 + 16));
    v9[0] = v4;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  _OWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v9, 1uLL);
  if (v3)
  {
    v10[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
           + 2;
    v4 = operator new();
    v5 = v9[1];
    *(_OWORD *)v4 = v9[0];
    *(_OWORD *)(v4 + 16) = v5;
    v6 = (unsigned int *)(v4 + 32);
    atomic_store(0, (unsigned int *)(v4 + 32));
    v10[0] = v4;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;
  _OWORD v10[4];
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(a1, (uint64_t)v10, 1uLL);
  if (v3)
  {
    v12[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
           + 2;
    v4 = operator new();
    v5 = v10[3];
    *(_OWORD *)(v4 + 32) = v10[2];
    *(_OWORD *)(v4 + 48) = v5;
    *(_QWORD *)(v4 + 64) = v11;
    v6 = v10[1];
    *(_OWORD *)v4 = v10[0];
    *(_OWORD *)(v4 + 16) = v6;
    v7 = (unsigned int *)(v4 + 72);
    atomic_store(0, (unsigned int *)(v4 + 72));
    v12[0] = v4;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int v10;
  _OWORD v12[8];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(a1, (uint64_t)v12, 1uLL);
  if (v3)
  {
    v13[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
           + 2;
    v4 = operator new();
    v5 = v12[5];
    *(_OWORD *)(v4 + 64) = v12[4];
    *(_OWORD *)(v4 + 80) = v5;
    v6 = v12[7];
    *(_OWORD *)(v4 + 96) = v12[6];
    *(_OWORD *)(v4 + 112) = v6;
    v7 = v12[1];
    *(_OWORD *)v4 = v12[0];
    *(_OWORD *)(v4 + 16) = v7;
    v8 = v12[3];
    *(_OWORD *)(v4 + 32) = v12[2];
    *(_OWORD *)(v4 + 48) = v8;
    v9 = (unsigned int *)(v4 + 128);
    atomic_store(0, (unsigned int *)(v4 + 128));
    v13[0] = v4;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v13);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtDictionary>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4 = realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, a2);
  if (v4)
  {
    v7[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy(v7, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v6, 0);
  return v4;
}

void sub_230083CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  void **v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  v24 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v26 = 0uLL;
    v27 = 0;
    if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v26) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems();
      v22 = 0uLL;
      v23 = 0;
      if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v22) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems();
        v20 = 0uLL;
        v21 = 0;
        if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v20) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems();
          v18 = 0uLL;
          v19 = 0;
          if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v18) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems();
            v16 = 0uLL;
            v17 = 0;
            if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v16) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v25 = (void **)&v16;
            std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
          }
          else
          {
            v6 = 1;
          }
          *(_QWORD *)&v16 = &v18;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
        }
        else
        {
          v6 = 1;
        }
        *(_QWORD *)&v18 = &v20;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      }
      else
      {
        v6 = 1;
      }
      *(_QWORD *)&v20 = &v22;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      *(_QWORD *)&v22 = &v26;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      if (!v6)
      {
        *((_QWORD *)&v26 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy((uint64_t *)&v26, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      *(_QWORD *)&v22 = &v26;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    }
  }
  v7 = 0;
LABEL_10:
  *(_QWORD *)&v26 = &v15;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(_QWORD *)&v26 = &v14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(_QWORD *)&v26 = &v13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(_QWORD *)&v26 = &v12;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(_QWORD *)&v26 = &v11;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  *(_QWORD *)&v26 = &v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  return v7;
}

void sub_230083FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16[3];
  void **v17[3];
  void **v18[3];
  void **v19[3];
  char v20;
  void ***v21;
  void **v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  v20 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if ((realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)&v22) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems();
      memset(v19, 0, sizeof(v19));
      if ((realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)v19) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems();
        memset(v18, 0, sizeof(v18));
        if ((realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)v18) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems();
          memset(v17, 0, sizeof(v17));
          if ((realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)v17) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems();
            memset(v16, 0, sizeof(v16));
            if ((realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)v16) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v21 = v16;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          }
          else
          {
            v6 = 1;
          }
          v16[0] = (void **)v17;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        else
        {
          v6 = 1;
        }
        v17[0] = (void **)v18;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
      }
      else
      {
        v6 = 1;
      }
      v18[0] = (void **)v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
      v19[0] = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
      if (!v6)
      {
        v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>::_PlaceCopy((uint64_t *)&v22, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      v19[0] = (void **)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
  v7 = 0;
LABEL_10:
  v22 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v7;
}

void sub_23008431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16[3];
  void **v17[3];
  void **v18[3];
  void **v19[3];
  char v20;
  void ***v21;
  void **v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
  v20 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)&v22) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems();
      memset(v19, 0, sizeof(v19));
      if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)v19) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems();
        memset(v18, 0, sizeof(v18));
        if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)v18) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems();
          memset(v17, 0, sizeof(v17));
          if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)v17) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems();
            memset(v16, 0, sizeof(v16));
            if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)v16) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v21 = v16;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          }
          else
          {
            v6 = 1;
          }
          v16[0] = (void **)v17;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        else
        {
          v6 = 1;
        }
        v17[0] = (void **)v18;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v17);
      }
      else
      {
        v6 = 1;
      }
      v18[0] = (void **)v19;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v18);
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v19);
      if (!v6)
      {
        v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy((uint64_t *)&v22, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
  v7 = 0;
LABEL_10:
  v22 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v7;
}

void sub_230084688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16[3];
  void **v17[3];
  void **v18[3];
  void **v19[3];
  char v20;
  void ***v21;
  void **v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
  v20 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if (realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, a2, (uint64_t *)&v22))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems();
      memset(v19, 0, sizeof(v19));
      if (realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, a2, (uint64_t *)v19))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems();
        memset(v18, 0, sizeof(v18));
        if (realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, a2, (uint64_t *)v18))
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems();
          memset(v17, 0, sizeof(v17));
          if (realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, a2, (uint64_t *)v17))
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems();
            memset(v16, 0, sizeof(v16));
            if (realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, a2, (uint64_t *)v16))
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v21 = v16;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          }
          else
          {
            v6 = 1;
          }
          v16[0] = (void **)v17;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        else
        {
          v6 = 1;
        }
        v17[0] = (void **)v18;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](v17);
      }
      else
      {
        v6 = 1;
      }
      v18[0] = (void **)v19;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](v18);
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](v19);
      if (!v6)
      {
        v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>::_PlaceCopy((uint64_t *)&v22, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
  v7 = 0;
LABEL_10:
  v22 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v7;
}

void sub_2300849F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v21;
  std::vector<unsigned int> v22;
  std::vector<unsigned int> v23;
  char v24;
  std::vector<unsigned int> v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
  v24 = 0;
  if (!realityio::replication::details::readBuffer<unsigned char,0>(a1))
    goto LABEL_24;
  memset(&v25, 0, sizeof(v25));
  if (realityio::replication::details::readVector<std::vector<int>>(a1, &v25))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems();
    memset(&v23, 0, sizeof(v23));
    if (realityio::replication::details::readVector<std::vector<int>>(a1, &v23))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems();
      memset(&v22, 0, sizeof(v22));
      if (realityio::replication::details::readVector<std::vector<int>>(a1, &v22))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems();
        memset(&v21, 0, sizeof(v21));
        if (realityio::replication::details::readVector<std::vector<int>>(a1, &v21))
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems();
          memset(&__p, 0, sizeof(__p));
          if (realityio::replication::details::readVector<std::vector<int>>(a1, &__p))
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems();
            v4 = 0;
          }
          else
          {
            v4 = 1;
          }
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          v4 = 1;
        }
        if (v21.__begin_)
        {
          v21.__end_ = v21.__begin_;
          operator delete(v21.__begin_);
        }
      }
      else
      {
        v4 = 1;
      }
      if (v22.__begin_)
      {
        v22.__end_ = v22.__begin_;
        operator delete(v22.__begin_);
      }
    }
    else
    {
      v4 = 1;
    }
    if (v23.__begin_)
    {
      v23.__end_ = v23.__begin_;
      operator delete(v23.__begin_);
    }
  }
  else
  {
    v4 = 1;
  }
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  if (!v4)
  {
    v25.__end_ = (std::vector<unsigned int>::pointer)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>::_PlaceCopy((uint64_t *)&v25, (uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
    v5 = 1;
  }
  else
  {
LABEL_24:
    v5 = 0;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_230084D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(_QWORD *)(v29 - 112) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(_QWORD *)(v29 - 88) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(_QWORD *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  char v32;
  _UNKNOWN **v33;
  _UNKNOWN **v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
  v32 = 0;
  if (!realityio::replication::details::readBuffer<unsigned char,0>(a1))
    goto LABEL_24;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (realityio::replication::details::readVector<std::vector<long long>>(a1, (uint64_t *)&v33))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems();
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (realityio::replication::details::readVector<std::vector<long long>>(a1, (uint64_t *)&v29))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems();
      v26 = 0;
      v27 = 0;
      v28 = 0;
      if (realityio::replication::details::readVector<std::vector<long long>>(a1, (uint64_t *)&v26))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems();
        v23 = 0;
        v24 = 0;
        v25 = 0;
        if (realityio::replication::details::readVector<std::vector<long long>>(a1, (uint64_t *)&v23))
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems();
          __p = 0;
          v21 = 0;
          v22 = 0;
          if (realityio::replication::details::readVector<std::vector<long long>>(a1, (uint64_t *)&__p))
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems();
            v4 = 0;
          }
          else
          {
            v4 = 1;
          }
          if (__p)
          {
            v21 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v4 = 1;
        }
        if (v23)
        {
          v24 = v23;
          operator delete(v23);
        }
      }
      else
      {
        v4 = 1;
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
    }
    else
    {
      v4 = 1;
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
  }
  else
  {
    v4 = 1;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (!v4)
  {
    v34 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>::_PlaceCopy((uint64_t *)&v33, (uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
    v5 = 1;
  }
  else
  {
LABEL_24:
    v5 = 0;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_23008507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(_QWORD *)(v29 - 112) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(_QWORD *)(v29 - 88) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(_QWORD *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v21;
  std::vector<unsigned int> v22;
  std::vector<unsigned int> v23;
  char v24;
  std::vector<unsigned int> v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
  v24 = 0;
  if (!realityio::replication::details::readBuffer<unsigned char,0>(a1))
    goto LABEL_24;
  memset(&v25, 0, sizeof(v25));
  if (realityio::replication::details::readVector<std::vector<int>>(a1, &v25))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems();
    memset(&v23, 0, sizeof(v23));
    if (realityio::replication::details::readVector<std::vector<int>>(a1, &v23))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems();
      memset(&v22, 0, sizeof(v22));
      if (realityio::replication::details::readVector<std::vector<int>>(a1, &v22))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems();
        memset(&v21, 0, sizeof(v21));
        if (realityio::replication::details::readVector<std::vector<int>>(a1, &v21))
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems();
          memset(&__p, 0, sizeof(__p));
          if (realityio::replication::details::readVector<std::vector<int>>(a1, &__p))
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems();
            v4 = 0;
          }
          else
          {
            v4 = 1;
          }
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
        }
        else
        {
          v4 = 1;
        }
        if (v21.__begin_)
        {
          v21.__end_ = v21.__begin_;
          operator delete(v21.__begin_);
        }
      }
      else
      {
        v4 = 1;
      }
      if (v22.__begin_)
      {
        v22.__end_ = v22.__begin_;
        operator delete(v22.__begin_);
      }
    }
    else
    {
      v4 = 1;
    }
    if (v23.__begin_)
    {
      v23.__end_ = v23.__begin_;
      operator delete(v23.__begin_);
    }
  }
  else
  {
    v4 = 1;
  }
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
  if (!v4)
  {
    v25.__end_ = (std::vector<unsigned int>::pointer)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>::_PlaceCopy((uint64_t *)&v25, (uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
    v5 = 1;
  }
  else
  {
LABEL_24:
    v5 = 0;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_2300853C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(_QWORD *)(v29 - 112) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(_QWORD *)(v29 - 88) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(_QWORD *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  char v32;
  _UNKNOWN **v33;
  _UNKNOWN **v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
  v32 = 0;
  if (!realityio::replication::details::readBuffer<unsigned char,0>(a1))
    goto LABEL_24;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (realityio::replication::details::readVector<std::vector<unsigned long long>>(a1, (uint64_t *)&v33))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems();
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if (realityio::replication::details::readVector<std::vector<unsigned long long>>(a1, (uint64_t *)&v29))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems();
      v26 = 0;
      v27 = 0;
      v28 = 0;
      if (realityio::replication::details::readVector<std::vector<unsigned long long>>(a1, (uint64_t *)&v26))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems();
        v23 = 0;
        v24 = 0;
        v25 = 0;
        if (realityio::replication::details::readVector<std::vector<unsigned long long>>(a1, (uint64_t *)&v23))
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems();
          __p = 0;
          v21 = 0;
          v22 = 0;
          if (realityio::replication::details::readVector<std::vector<unsigned long long>>(a1, (uint64_t *)&__p))
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems();
            v4 = 0;
          }
          else
          {
            v4 = 1;
          }
          if (__p)
          {
            v21 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v4 = 1;
        }
        if (v23)
        {
          v24 = v23;
          operator delete(v23);
        }
      }
      else
      {
        v4 = 1;
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
    }
    else
    {
      v4 = 1;
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
  }
  else
  {
    v4 = 1;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (!v4)
  {
    v34 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>::_PlaceCopy((uint64_t *)&v33, (uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
    v5 = 1;
  }
  else
  {
LABEL_24:
    v5 = 0;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_230085700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(_QWORD *)(v29 - 112) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(_QWORD *)(v29 - 88) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(_QWORD *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4;
  _DWORD *v6[3];
  void **v7[3];

  v7[2] = *(void ***)MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  v4 = realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, (uint64_t *)v6);
  if ((v4 & 1) != 0)
  {
    v7[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy((uint64_t *)v7, v6);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  v7[0] = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v7);
  return v4;
}

void sub_230085844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  void **v8[3];

  v8[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v6 = 0uLL;
  v7 = 0;
  v4 = realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v6);
  if ((v4 & 1) != 0)
  {
    v8[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy((uint64_t *)v8, (uint64_t **)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  }
  v8[0] = (void **)&v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v8);
  return v4;
}

void sub_23008590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  realityio *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio *)std::istream::read();
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
       + 3;
    *(_DWORD *)buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfPermission>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  realityio *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio *)std::istream::read();
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>(void)::ti
       + 3;
    *(_DWORD *)buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfVariability>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  realityio *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio *)std::istream::read();
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>(void)::ti
       + 3;
    *(_DWORD *)buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<std::map<std::string,std::string>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v11;
  _QWORD *v12[2];
  std::string __str;
  unint64_t v14;
  std::string *p_p;
  std::string __p;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v12[1] = 0;
  v11 = (uint64_t *)v12;
  v14 = 0;
  if (!realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v14, 1uLL))
  {
LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  if (v14)
  {
    v6 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      if (realityio::replication::read(a1, v5, &__p))
      {
        memset(&__str, 0, sizeof(__str));
        if (realityio::replication::read(a1, v5, &__str))
        {
          p_p = &__p;
          v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v11, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
          std::string::operator=((std::string *)(v7 + 7), &__str);
          v8 = 0;
        }
        else
        {
          v8 = 1;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        v8 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v8)
        goto LABEL_16;
    }
    while (v14 > ++v6);
  }
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<std::string,std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy((uint64_t *)&__p, (const void ***)&v11);
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  v9 = 1;
LABEL_17:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
  return v9;
}

void sub_230085DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfPayload>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v6;
  _BYTE v8[16];
  uint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::string *v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v8, 0.0, 1.0);
  MEMORY[0x2348B19E4](__p, &v13, &v9, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  v6 = realityio::replication::read(a1, a2, (uint64_t)__p);
  if (v6)
  {
    v14 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy(&v13, (__int128 *)__p);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_230085F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::SdfPayload::~SdfPayload((void **)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<std::vector<double>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _BOOL8 v6;
  unint64_t v7;
  NSObject *v8;
  _BOOL8 v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint8_t buf[4];
  _BYTE v21[12];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v6 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v19, 1uLL);
  if (!v6)
    return 0;
  v7 = v19;
  if (v19 > 0x7A120)
  {
    v8 = *(NSObject **)(realityio::logObjects((realityio *)v6) + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v21 = 500000;
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    return 0;
  }
  if (v19)
  {
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v19);
    v13 = v12;
    bzero(v11, 8 * v7);
    v16 = v11;
    v17 = &v11[8 * v7];
    v18 = &v11[8 * v13];
    v14 = v19;
    v15 = v11;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v9 = realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)v15, v14);
  if (v9)
  {
    *(_QWORD *)&v21[4] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<double>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy((uint64_t *)buf, (uint64_t)&v16);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  if (v15)
    operator delete(v15);
  return v9;
}

void sub_230086110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _BOOL8 v4;
  unint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint8_t buf[4];
  _BYTE v22[12];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v20, 1uLL);
  if (!v4)
    return 0;
  v5 = v20;
  if (v20 > 0x7A120)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v22 = 500000;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    return 0;
  }
  if (v20)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v20);
    v10 = 0;
    v12 = &v9[16 * v11];
    v13 = 16 * v5;
    v14 = &v9[16 * v5];
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v9[v10], 0.0, 1.0);
      v10 += 16;
    }
    while (v13 != v10);
    v17 = v9;
    v18 = v14;
    v19 = v12;
    v15 = v9;
    v16 = v20;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v7 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v15, v16);
  if (v7)
  {
    *(_QWORD *)&v22[4] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy((uint64_t *)buf, (uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  if (v15)
    operator delete(v15);
  return v7;
}

void sub_2300862D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::replication::readContents<std::vector<std::string>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4;
  __int128 *v6[3];
  void **v7[3];

  v7[2] = *(void ***)MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  v4 = realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, (uint64_t *)v6);
  if ((v4 & 1) != 0)
  {
    v7[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<std::string>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy((uint64_t *)v7, v6);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  v7[0] = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v7);
  return v4;
}

void sub_2300863AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  realityio *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio *)std::istream::read();
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(void)::ti
       + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  unsigned int *v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v9);
  v6 = realityio::replication::read(a1, a2, v9);
  if ((v6 & 1) != 0)
  {
    v8[1] = (unsigned int *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy(v8, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  return v6;
}

void sub_230086574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16[3];
  void **v17[3];
  void **v18[3];
  void **v19[3];
  char v20;
  void ***v21;
  void **v22;
  std::type_info **v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
  v20 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, a2, &v22) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems();
      memset(v19, 0, sizeof(v19));
      if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, a2, v19) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems();
        memset(v18, 0, sizeof(v18));
        if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, a2, v18) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems();
          memset(v17, 0, sizeof(v17));
          if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, a2, v17) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems();
            memset(v16, 0, sizeof(v16));
            if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, a2, v16) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v21 = v16;
            std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          }
          else
          {
            v6 = 1;
          }
          v16[0] = (void **)v17;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        else
        {
          v6 = 1;
        }
        v17[0] = (void **)v18;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v17);
      }
      else
      {
        v6 = 1;
      }
      v18[0] = (void **)v19;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v18);
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v19);
      if (!v6)
      {
        v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_PlaceCopy((uint64_t *)&v22, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
  v7 = 0;
LABEL_10:
  v22 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v11;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v7;
}

void sub_230086860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16[3];
  void **v17[3];
  void **v18[3];
  void **v19[3];
  char v20;
  void ***v21;
  void **v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
  v20 = 0;
  if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, a2, (uint64_t *)&v22) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems();
      memset(v19, 0, sizeof(v19));
      if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, a2, (uint64_t *)v19) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems();
        memset(v18, 0, sizeof(v18));
        if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, a2, (uint64_t *)v18) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems();
          memset(v17, 0, sizeof(v17));
          if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, a2, (uint64_t *)v17) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems();
            memset(v16, 0, sizeof(v16));
            if ((realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, a2, (uint64_t *)v16) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems();
              v6 = 0;
            }
            else
            {
              v6 = 1;
            }
            v21 = v16;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          }
          else
          {
            v6 = 1;
          }
          v16[0] = (void **)v17;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        else
        {
          v6 = 1;
        }
        v17[0] = (void **)v18;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](v17);
      }
      else
      {
        v6 = 1;
      }
      v18[0] = (void **)v19;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](v18);
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](v19);
      if (!v6)
      {
        v23 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_PlaceCopy((uint64_t *)&v22, (uint64_t)v9);
        pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
        v7 = 1;
        goto LABEL_10;
      }
    }
    else
    {
      v19[0] = (void **)&v22;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](v19);
    }
  }
  v7 = 0;
LABEL_10:
  v22 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v11;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  v22 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v7;
}

void sub_230086BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(_QWORD *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(_QWORD *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(_QWORD *)(v30 - 120) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(_QWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  realityio *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[8];
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio *)std::istream::read();
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(void)::ti
       + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4;
  _BYTE v6[16];
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v4 = realityio::replication::read(a1, a2, v7);
  if ((v4 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_230086DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<unsigned long long,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (a3 >> 61)
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (a3 >> 60)
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<unsigned char,0>(_QWORD *a1)
{
  realityio *v2;
  int v3;
  NSObject *v4;
  uint8_t v6[16];

  v2 = (realityio *)std::istream::read();
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_22FF26000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

BOOL realityio::replication::details::readBuffer<unsigned short,0>(_QWORD *a1)
{
  realityio *v2;
  int v3;
  NSObject *v4;
  uint8_t v6[16];

  v2 = (realityio *)std::istream::read();
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_22FF26000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Swap(pxrInternal__aapl__pxrReserved__::VtValue *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 1))
  {
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)&v12);
    v4 = *((_QWORD *)this + 1);
    v5 = ~*((_DWORD *)this + 2);
    v13 = v4;
    if ((v5 & 3) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(this, &v12);
    else
      v12 = *(_QWORD *)this;
    *((_QWORD *)this + 1) = 0;
    if (v15)
      (*(void (**)(_BYTE *))(v15 + 32))(v14);
    v6 = (uint64_t *)((char *)a2 + 8);
    if (!*((_QWORD *)a2 + 1))
    {
      v8 = *((_QWORD *)this + 1);
      if (v8 && (*((_QWORD *)this + 1) & 3) != 3)
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(this);
      *((_QWORD *)this + 1) = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v6 = (uint64_t *)((char *)a2 + 8);
    if (!*((_QWORD *)a2 + 1))
      return this;
    v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)this);
  v7 = *v6;
  *((_QWORD *)this + 1) = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, this);
  else
    *(_QWORD *)this = *(_QWORD *)a2;
  *v6 = 0;
  if (v15)
    (*(void (**)(_BYTE *))(v15 + 32))(v14);
LABEL_19:
  if (v13)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)a2);
    v9 = v13;
    v10 = ~(_BYTE)v13;
    *v6 = v13;
    if ((v10 & 3) != 0)
      (*(void (**)(uint64_t *, pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    else
      *(_QWORD *)a2 = v12;
    v13 = 0;
    if (v15)
      (*(void (**)(_BYTE *))(v15 + 32))(v14);
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    *v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  return this;
}

void sub_2300872D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<BOOL,0>(_QWORD *a1)
{
  realityio *v2;
  int v3;
  NSObject *v4;
  uint8_t v6[16];

  v2 = (realityio *)std::istream::read();
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_22FF26000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

BOOL realityio::replication::details::readBuffer<int,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (a3 >> 62)
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(realityio *a1, uint64_t a2, uint64_t a3)
{
  realityio *v4;
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  uint8_t buf[2];

  if (a3 < 0)
  {
    v5 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v7 = "Read size overflowed";
    v8 = buf;
    goto LABEL_7;
  }
  v4 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v5 = *(NSObject **)(realityio::logObjects(v4) + 40);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v7 = "Failed to read";
    v8 = (uint8_t *)&v9;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    return 0;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<double,0>(realityio *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  uint8_t *v7;
  realityio *v9;
  __int16 v10;
  __int16 v11;

  if (a4 >> 61)
  {
    v4 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = 0;
    v6 = "Read size overflowed";
    v7 = (uint8_t *)&v11;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  v9 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v4 = *(NSObject **)(realityio::logObjects(v9) + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v6 = "Failed to read";
    v7 = (uint8_t *)&v10;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (a3 >> 59)
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (!is_mul_ok(a3, 0x18uLL))
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (!is_mul_ok(a3, 0xCuLL))
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (!is_mul_ok(a3, 6uLL))
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (!is_mul_ok(a3, 0x48uLL))
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  realityio *v8;
  __int16 v9;
  __int16 v10;

  if (a3 >> 57)
  {
    v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v5 = "Read size overflowed";
    v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  v8 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v5 = "Failed to read";
    v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  _QWORD buf[6];

  buf[5] = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v38, 1uLL);
  if (!(_DWORD)result)
    return result;
  v7 = v38;
  if (v38 > 0x7A120)
  {
    v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)buf, 0xCu);
      return 0;
    }
    return result;
  }
  v9 = *(uint64_t **)a3;
  v10 = (uint64_t *)*((_QWORD *)a3 + 1);
  v11 = ((uint64_t)v10 - *(_QWORD *)a3) >> 3;
  if (v38 <= v11)
  {
    if (v38 >= v11)
      goto LABEL_25;
    v24 = &v9[v38];
    while (v10 != v24)
    {
      v26 = *--v10;
      v25 = v26;
      if ((v26 & 7) != 0)
      {
        v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
    }
  }
  else
  {
    v12 = v38 - v11;
    v13 = *((_QWORD *)a3 + 2);
    if (v38 - v11 > (v13 - (uint64_t)v10) >> 3)
    {
      v14 = v13 - (_QWORD)v9;
      if (v14 >> 2 > v38)
        v7 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v7;
      buf[4] = a3 + 1;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 1), v15);
      v18 = *(uint64_t **)a3;
      v17 = (uint64_t *)*((_QWORD *)a3 + 1);
      v19 = &v16[8 * v11];
      v21 = &v16[8 * v20];
      bzero(v19, 8 * v12);
      v22 = &v19[8 * v12];
      while (v17 != v18)
      {
        v23 = *--v17;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
        *v17 = 0;
      }
      v29 = *a3;
      *(_QWORD *)a3 = v19;
      *((_QWORD *)a3 + 1) = v22;
      *(_OWORD *)&buf[1] = v29;
      v30 = *((_QWORD *)a3 + 2);
      *((_QWORD *)a3 + 2) = v21;
      buf[3] = v30;
      buf[0] = v29;
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)buf);
      goto LABEL_25;
    }
    bzero(*((void **)a3 + 1), 8 * v12);
    v24 = &v10[v12];
  }
  *((_QWORD *)a3 + 1) = v24;
LABEL_25:
  v31 = v38;
  if (!v38)
    return 1;
  v32 = *(uint64_t **)a3;
  result = realityio::replication::read(a1, v6, v32);
  if ((_DWORD)result)
  {
    v34 = v32 + 1;
    v35 = 1;
    do
    {
      v36 = v35;
      if (v31 == v35)
        break;
      v37 = realityio::replication::read(a1, v33, v34);
      v35 = v36 + 1;
      ++v34;
    }
    while (v37);
    return v36 >= v31;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(unsigned __int8 **a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *a1;
  v2 = **a1;
  v3 = (uint64_t *)*((_QWORD *)*a1 + 1);
  v4 = *((_QWORD *)*a1 + 2) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = *v3++;
      v2 = (v6 & 0xFFFFFFFFFFFFFFF8)
         + (((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + ((v6 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v6 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v5;
    }
    while (v5);
  }
  v7 = (uint64_t *)v1[4];
  v8 = v1[5] - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 3;
    do
    {
      v10 = *v7++;
      v2 = (v10 & 0xFFFFFFFFFFFFFFF8)
         + (((v10 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v10 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v10 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v9;
    }
    while (v9);
  }
  v11 = (uint64_t *)v1[7];
  v12 = v1[8] - (_QWORD)v11;
  if (v12)
  {
    v13 = v12 >> 3;
    do
    {
      v14 = *v11++;
      v2 = (v14 & 0xFFFFFFFFFFFFFFF8)
         + (((v14 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v14 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v14 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v13;
    }
    while (v13);
  }
  v15 = (uint64_t *)v1[10];
  v16 = v1[11] - (_QWORD)v15;
  if (v16)
  {
    v17 = v16 >> 3;
    do
    {
      v18 = *v15++;
      v2 = (v18 & 0xFFFFFFFFFFFFFFF8)
         + (((v18 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v18 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v18 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v17;
    }
    while (v17);
  }
  v19 = (uint64_t *)v1[13];
  v20 = v1[14] - (_QWORD)v19;
  if (v20)
  {
    v21 = v20 >> 3;
    do
    {
      v22 = *v19++;
      v2 = (v22 & 0xFFFFFFFFFFFFFFF8)
         + (((v22 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v22 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v22 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v21;
    }
    while (v21);
  }
  v23 = (uint64_t *)v1[16];
  v24 = v1[17] - (_QWORD)v23;
  if (v24)
  {
    v25 = v24 >> 3;
    do
    {
      v26 = *v23++;
      v2 = (v26 & 0xFFFFFFFFFFFFFFF8)
         + (((v26 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v26 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v26 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v25;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v1 = atomic_load((unsigned int *)*result + 38);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (void **)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_230087F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2300881A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<std::string>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  std::__split_buffer<std::string> buf;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v29, 1uLL);
  if ((_DWORD)result)
  {
    v7 = v29;
    if (v29 <= 0x7A120)
    {
      v9 = *a3;
      v10 = a3[1];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 3);
      v12 = v29 - v11;
      if (v29 <= v11)
      {
        if (v29 < v11)
        {
          v20 = v9 + 24 * v29;
          while (v10 != v20)
          {
            if (*(char *)(v10 - 1) < 0)
              operator delete(*(void **)(v10 - 24));
            v10 -= 24;
          }
          a3[1] = v20;
        }
      }
      else
      {
        v13 = a3[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 3) >= v12)
        {
          v21 = 24 * ((24 * v12 - 24) / 0x18) + 24;
          bzero((void *)a3[1], v21);
          a3[1] = v10 + v21;
        }
        else
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 3);
          if (2 * v14 > v29)
            v7 = 2 * v14;
          if (v14 >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v7;
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 2);
          v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a3 + 2), v15);
          v17 = v16 + v11;
          buf.__first_ = v16;
          buf.__begin_ = v17;
          buf.__end_cap_.__value_ = &v16[v18];
          v19 = 24 * ((24 * v12 - 24) / 0x18) + 24;
          bzero(v17, v19);
          buf.__end_ = (std::string *)((char *)v17 + v19);
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &buf);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
      }
      v22 = v29;
      if (v29)
      {
        v23 = (std::string *)*a3;
        result = realityio::replication::read(a1, v6, v23);
        if ((_DWORD)result)
        {
          v25 = v23 + 1;
          v26 = 1;
          do
          {
            v27 = v26;
            if (v22 == v26)
              break;
            v28 = realityio::replication::read(a1, v24, v25);
            v26 = v27 + 1;
            ++v25;
          }
          while (v28);
          return v27 >= v22;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        LODWORD(buf.__first_) = 134217984;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)500000;
        _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void sub_2300884C8(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a11);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Hash(unsigned __int8 **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = (uint64_t)*a1;
  v2 = **a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 16) - *(_QWORD *)(v1 + 8)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 40) - *(_QWORD *)(v1 + 32)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 64) - *(_QWORD *)(v1 + 56)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 88) - *(_QWORD *)(v1 + 80)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 112) - *(_QWORD *)(v1 + 104)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 136) - *(_QWORD *)(v1 + 128)) >> 3));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v1 = atomic_load((unsigned int *)*result + 38);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (void **)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_2300886B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<std::string>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 56), *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), *(__int128 **)(a2 + 104), *(__int128 **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 128), *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  return a1;
}

void sub_23008899C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_230088A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v15, 1uLL);
  if ((_DWORD)result)
  {
    if (v15 <= 0x7A120)
    {
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize(a3, v15);
      v8 = v15;
      if (v15)
      {
        v9 = *a3;
        result = realityio::replication::read(a1, v7, v9);
        if ((_DWORD)result)
        {
          v11 = v9 + 8;
          v12 = 1;
          do
          {
            v13 = v12;
            if (v8 == v12)
              break;
            v14 = realityio::replication::read(a1, v10, v11);
            v12 = v13 + 1;
            v11 += 8;
          }
          while (v14);
          return v13 >= v8;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 134217984;
        v17 = 500000;
        _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

BOOL realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  std::string __p;
  char *v40;
  uint64_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v6 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v34, 1uLL);
  if (!v6)
    return 0;
  v8 = v34;
  if (v34 > 0x7A120)
  {
    v9 = *(NSObject **)(realityio::logObjects((realityio *)v6) + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 500000;
      _os_log_error_impl(&dword_22FF26000, v9, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&__p, 0xCu);
    }
    return 0;
  }
  v12 = *a3;
  v13 = a3[1];
  v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - *a3) >> 3);
  v15 = v34 - v14;
  if (v34 <= v14)
  {
    if (v34 < v14)
    {
      v26 = v12 + 56 * v34;
      while (v13 != v26)
      {
        v13 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v13);
      }
      a3[1] = v26;
    }
  }
  else
  {
    v16 = a3[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v16 - v13) >> 3) >= v15)
    {
      v27 = v13 + 56 * v15;
      v28 = 56 * v34 - 8 * ((v13 - *a3) >> 3);
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(v13);
        v13 += 56;
        v28 -= 56;
      }
      while (v28);
      a3[1] = v27;
    }
    else
    {
      v17 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v12) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v34)
        v18 = v34;
      if (v17 >= 0x249249249249249)
        v19 = 0x492492492492492;
      else
        v19 = v18;
      v41 = a3 + 2;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)(a3 + 2), v19);
      v21 = (std::string::size_type)&v20[56 * v14];
      __p.__r_.__value_.__l.__size_ = v21;
      __p.__r_.__value_.__r.__words[2] = v21;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v40 = &v20[56 * v22];
      v23 = 56 * v8;
      v24 = (std::string::size_type)&v20[56 * v8];
      v25 = v23 - 56 * v14;
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(v21);
        v21 += 56;
        v25 -= 56;
      }
      while (v25);
      __p.__r_.__value_.__r.__words[2] = v24;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(a3, &__p);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
    }
  }
  v29 = v34;
  if (v34)
  {
    v30 = 0;
    v10 = 0;
    v31 = *a3 + 48;
    do
    {
      memset(&__p, 0, sizeof(__p));
      if (realityio::replication::read(a1, v7, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(v31 - 48);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        if (realityio::replication::read(a1, v32, (uint64_t)&v37)
          && (pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v31 - 24, &v37), pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v31 - 20, &v38), pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v36, 0.0, 1.0), realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v36, 1uLL)))
        {
          *(_OWORD *)(v31 - 16) = v36;
          v35 = 0;
          v33 = realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, a2);
          if (v33)
            pxrInternal__aapl__pxrReserved__::VtDictionary::operator=();
          std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v35, 0);
        }
        else
        {
          v33 = 0;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
      }
      else
      {
        v33 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v33)
        break;
      ++v30;
      v31 += 56;
      v10 = v29 <= v30;
    }
    while (v29 != v30);
  }
  else
  {
    return 1;
  }
  return v10;
}

void sub_230088FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer(&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[16];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v3, 0.0, 1.0);
  v2 = 0;
  MEMORY[0x2348B1B88](a1, __p, &v4, v3, &v2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v2, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_23008917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 32), (_DWORD *)(v9 - 32));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 28), (_DWORD *)(v9 - 28));
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      v11 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v7 - 8) = v11;
      v7 = *((_QWORD *)&v17 + 1) - 56;
      *((_QWORD *)&v17 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(a2 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer(void **a1)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Hash(unsigned __int8 **a1)
{
  _QWORD *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v28;
  char v29;

  v1 = *a1;
  v2 = **a1;
  v29 = 1;
  v28 = v2;
  v3 = (const char *)v1[1];
  v4 = v1[2] - (_QWORD)v3;
  if (v4)
  {
    v5 = 0x6DB6DB6DB6DB6DB7 * (v4 >> 3);
    do
    {
      --v5;
      v6 = v3 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v3);
      v3 = v6;
    }
    while (v5);
  }
  v7 = (const char *)v1[4];
  v8 = v1[5] - (_QWORD)v7;
  if (v8)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    do
    {
      --v9;
      v10 = v7 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v7);
      v7 = v10;
    }
    while (v9);
  }
  v11 = (const char *)v1[7];
  v12 = v1[8] - (_QWORD)v11;
  if (v12)
  {
    v13 = 0x6DB6DB6DB6DB6DB7 * (v12 >> 3);
    do
    {
      --v13;
      v14 = v11 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v11);
      v11 = v14;
    }
    while (v13);
  }
  v15 = (const char *)v1[10];
  v16 = v1[11] - (_QWORD)v15;
  if (v16)
  {
    v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 3);
    do
    {
      --v17;
      v18 = v15 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v15);
      v15 = v18;
    }
    while (v17);
  }
  v19 = (const char *)v1[13];
  v20 = v1[14] - (_QWORD)v19;
  if (v20)
  {
    v21 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 3);
    do
    {
      --v21;
      v22 = v19 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v19);
      v19 = v22;
    }
    while (v21);
  }
  v23 = (const char *)v1[16];
  v24 = v1[17] - (_QWORD)v23;
  if (v24)
  {
    v25 = 0x6DB6DB6DB6DB6DB7 * (v24 >> 3);
    do
    {
      --v25;
      v26 = v23 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v23);
      v23 = v26;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v1 = atomic_load((unsigned int *)*result + 38);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (void **)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_230089750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>(uint64_t a1, const char *a2)
{
  const char *v2;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Hash;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v2 = a2;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__ *)(a2 + 48);
  v12 = 0;
  v13 = 0;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, a2);
  v7 = *((unsigned int *)v2 + 6);
  v6 = *((unsigned int *)v2 + 7);
  if (v13)
    v7 += (unint64_t)(v12 + v7 + (v12 + v7) * (v12 + v7)) >> 1;
  else
    v13 = 1;
  v12 = v6 + ((unint64_t)(v7 + v6 + (v7 + v6) * (v7 + v6)) >> 1);
  Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(v4);
  if (v13)
    Hash += (unint64_t)(v12 + Hash + (v12 + Hash) * (v12 + Hash)) >> 1;
  else
    v13 = 1;
  v12 = Hash;
  result = pxrInternal__aapl__pxrReserved__::hash_value(v5, v9);
  if (v13)
    result += (v12 + result + (v12 + result) * (v12 + result)) >> 1;
  v11 = bswap64(0x9E3779B97F4A7C55 * result);
  if (*(_BYTE *)(a1 + 8))
    v11 += (*(_QWORD *)a1 + v11 + (*(_QWORD *)a1 + v11) * (*(_QWORD *)a1 + v11)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 32), *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 56), *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 104), *(__int128 **)(a2 + 104), *(__int128 **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 128), *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  return a1;
}

void sub_230089B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *words;
  std::string *v7;
  uint64_t v8;
  std::string *v9;

  if (a4)
  {
    words = result->__r_.__value_.__r.__words;
    if (a4 >= 0x492492492492493)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)&result->__r_.__value_.__r.__words[2], a4);
    v7 = result;
    *words = result;
    words[1] = result;
    words[2] = (char *)result + 56 * v8;
    v9 = result;
    if (a2 != a3)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(result, a2);
        a2 = (__int128 *)((char *)a2 + 56);
        result = (std::string *)((char *)v9 + 56);
        v9 = (std::string *)((char *)v9 + 56);
      }
      while (a2 != a3);
      v7 = result;
    }
    words[1] = v7;
  }
  return result;
}

void sub_230089CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  MEMORY[0x2348B1C60](&this[2], a2 + 3);
  return this;
}

void sub_230089D70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,pxrInternal__aapl__pxrReserved__::SdfReference*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_230089E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

BOOL realityio::replication::details::readVector<std::vector<int>>(realityio *a1, std::vector<unsigned int> *a2)
{
  _BOOL8 result;
  NSObject *v5;
  std::vector<unsigned int>::size_type __sz;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  __sz = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&__sz, 1uLL);
  if (result)
  {
    if (__sz <= 0x7A120)
    {
      std::vector<int>::resize(a2, __sz);
      return realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)a2->__begin_, __sz);
    }
    else
    {
      v5 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 134217984;
        v8 = 500000;
        _os_log_error_impl(&dword_22FF26000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Destroy(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Hash(const char ***a1)
{
  const char **v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = *(unsigned __int8 *)*a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)result + 152));
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    result = *v2;
    *v2 = v3;
    if (result)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void sub_23008A198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<int>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>::_PlaceCopy(a2, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  return a1;
}

void sub_23008A440(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23008A518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008A59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readVector<std::vector<long long>>(realityio *a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v23, 1uLL);
  if (result)
  {
    v5 = v23;
    if (v23 > 0x7A120)
    {
      v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 134217984;
        v25 = 500000;
        _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
      return result;
    }
    v7 = *a2;
    v8 = (char *)a2[1];
    v9 = (uint64_t)&v8[-*a2] >> 3;
    if (v23 <= v9)
    {
      if (v23 >= v9)
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      v22 = v7 + 8 * v23;
    }
    else
    {
      v10 = v23 - v9;
      v11 = (char *)a2[2];
      if (v23 - v9 > (v11 - v8) >> 3)
      {
        v12 = (uint64_t)&v11[-v7];
        if (v12 >> 2 > v23)
          v5 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v5;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v13);
        v15 = (char *)*a2;
        v16 = (char *)a2[1];
        v17 = &v14[8 * v9];
        v19 = &v14[8 * v18];
        bzero(v17, 8 * v10);
        v20 = &v17[8 * v10];
        while (v16 != v15)
        {
          v21 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        *a2 = (uint64_t)v17;
        a2[1] = (uint64_t)v20;
        a2[2] = (uint64_t)v19;
        if (v15)
          operator delete(v15);
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      bzero((void *)a2[1], 8 * v10);
      v22 = (unint64_t)&v8[8 * v10];
    }
    a2[1] = v22;
    return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Destroy(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Hash(const char ***a1)
{
  const char **v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = *(unsigned __int8 *)*a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)result + 152));
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    result = *v2;
    *v2 = v3;
    if (result)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void sub_23008A914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<long long>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIxEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>::_PlaceCopy(a2, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23008AB04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23008ABF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008AC7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Destroy(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Hash(const char ***a1)
{
  const char **v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = *(unsigned __int8 *)*a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)result + 152));
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    result = *v2;
    *v2 = v3;
    if (result)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void sub_23008AE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>::_PlaceCopy(a2, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  return a1;
}

void sub_23008B02C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008B110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readVector<std::vector<unsigned long long>>(realityio *a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v23, 1uLL);
  if (result)
  {
    v5 = v23;
    if (v23 > 0x7A120)
    {
      v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 134217984;
        v25 = 500000;
        _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
      return result;
    }
    v7 = *a2;
    v8 = (char *)a2[1];
    v9 = (uint64_t)&v8[-*a2] >> 3;
    if (v23 <= v9)
    {
      if (v23 >= v9)
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      v22 = v7 + 8 * v23;
    }
    else
    {
      v10 = v23 - v9;
      v11 = (char *)a2[2];
      if (v23 - v9 > (v11 - v8) >> 3)
      {
        v12 = (uint64_t)&v11[-v7];
        if (v12 >> 2 > v23)
          v5 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v5;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v13);
        v15 = (char *)*a2;
        v16 = (char *)a2[1];
        v17 = &v14[8 * v9];
        v19 = &v14[8 * v18];
        bzero(v17, 8 * v10);
        v20 = &v17[8 * v10];
        while (v16 != v15)
        {
          v21 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        *a2 = (uint64_t)v17;
        a2[1] = (uint64_t)v20;
        a2[2] = (uint64_t)v19;
        if (v15)
          operator delete(v15);
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      bzero((void *)a2[1], 8 * v10);
      v22 = (unint64_t)&v8[8 * v10];
    }
    a2[1] = v22;
    return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Destroy(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Hash(const char ***a1)
{
  const char **v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *a1;
  v2 = *(unsigned __int8 *)*a1;
  v5 = 1;
  v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = atomic_load((unsigned int *)(*(_QWORD *)result + 152));
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    result = *v2;
    *v2 = v3;
    if (result)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void sub_23008B488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIyEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>::_PlaceCopy(a2, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23008B678(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23008B76C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008B7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(uint64_t *a1)
{
  char v2;

  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7TfTokenENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue@<X0>(uint64_t ***a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t **v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C4055CCDE27);
    }
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3)
  {
    v4 = 0;
    v5 = v3 >> 3;
    v6 = 1;
    do
    {
      v7 = *v2++;
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 1) == 0)
        v8 += (v8 + v4 + (v8 + v4) * (v8 + v4)) >> 1;
      v6 = 0;
      v4 = v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    v8 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v2 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    v8 = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetMutableObj(uint64_t ***a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t **v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = *a1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)v3, *v4, v4[1], v4[1] - *v4);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = (void **)*a1;
    *a1 = (uint64_t **)v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(&v8);
  }
  return *a1;
}

void sub_23008BB2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)v4, *a2, a2[1], a2[1] - *a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008BBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetPyObj()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtStreamOut<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_23008BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetPyObj()
{
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_StreamOut(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_23008BE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfPermissionE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetPyObj()
{
  return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_StreamOut(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_23008C050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14SdfVariabilityE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Hash(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v16;
  char v17;

  v1 = *a1;
  v16 = 0;
  v17 = 0;
  v4 = (_QWORD *)*v1;
  v2 = v1 + 1;
  v3 = v4;
  if (v4 == v2)
  {
    v14 = 0;
  }
  else
  {
    do
    {
      v5 = (_QWORD *)v3[1];
      v6 = v3;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      if (*((char *)v3 + 55) >= 0)
        v9 = (const char *)(v3 + 4);
      else
        v9 = (const char *)v3[4];
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, v9);
      v12 = (const char *)v3[7];
      v11 = (const char *)(v3 + 7);
      v10 = v12;
      if (v11[23] >= 0)
        v13 = v11;
      else
        v13 = v10;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, v13);
      v3 = v7;
    }
    while (v7 != v2);
    v14 = 0x9E3779B97F4A7C55 * v16;
  }
  return bswap64(v14);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Equal(_QWORD **a1, _QWORD ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(*a1, *(_QWORD **)a2, *(_QWORD *)(a2 + 16));
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  const void ****v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const void ***v6;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = (const void ****)result;
    v3 = operator new();
    std::map<std::string,std::string>::map[abi:ne180100](v3, *v2);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = (const void ***)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>::~intrusive_ptr((uint64_t *)&v6);
  }
  return result;
}

void sub_23008C2F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002302109F2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedAsVtValue@<X0>(const void ****a1@<X0>, uint64_t *a2@<X8>)
{
  const void ***v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<std::string,std::string>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(_QWORD **)(v2 + 8));
      MEMORY[0x2348B4E1C](v2, 0x1020C401C4E69EBLL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t result;

  if (a1[2] != a3)
    return 0;
  v3 = a1 + 1;
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    while (1)
    {
      v6 = *((unsigned __int8 *)v4 + 55);
      if ((v6 & 0x80u) == 0)
        v7 = *((unsigned __int8 *)v4 + 55);
      else
        v7 = v4[5];
      v8 = *((unsigned __int8 *)a2 + 55);
      v9 = (char)v8;
      if ((v8 & 0x80u) != 0)
        v8 = a2[5];
      if (v7 != v8)
        return 0;
      v10 = (const void **)(v4 + 4);
      if (v9 >= 0)
        v11 = (unsigned __int8 *)(a2 + 4);
      else
        v11 = (unsigned __int8 *)a2[4];
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*v10, v11, v4[5]))
          return 0;
      }
      else if (*((_BYTE *)v4 + 55))
      {
        while (*(unsigned __int8 *)v10 == *v11)
        {
          v10 = (const void **)((char *)v10 + 1);
          ++v11;
          if (!--v6)
            goto LABEL_18;
        }
        return 0;
      }
LABEL_18:
      v12 = *((unsigned __int8 *)v4 + 79);
      if ((v12 & 0x80u) == 0)
        v13 = *((unsigned __int8 *)v4 + 79);
      else
        v13 = v4[8];
      v14 = *((unsigned __int8 *)a2 + 79);
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = a2[8];
      if (v13 != v14)
        return 0;
      v16 = (const void **)(v4 + 7);
      if (v15 >= 0)
        v17 = (unsigned __int8 *)(a2 + 7);
      else
        v17 = (unsigned __int8 *)a2[7];
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*v16, v17, v4[8]))
          return 0;
      }
      else if (*((_BYTE *)v4 + 79))
      {
        while (*(unsigned __int8 *)v16 == *v17)
        {
          v16 = (const void **)((char *)v16 + 1);
          ++v17;
          if (!--v12)
            goto LABEL_33;
        }
        return 0;
      }
LABEL_33:
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v20 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v20);
      }
      v21 = (_QWORD *)a2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)a2[2];
          v20 = *v22 == (_QWORD)a2;
          a2 = v22;
        }
        while (!v20);
      }
      result = 1;
      a2 = v22;
      v4 = v19;
      if (v19 == v3)
        return result;
    }
  }
  return 1;
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23008C69C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23008C798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy(uint64_t *a1, const void ***a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = std::map<std::string,std::string>::map[abi:ne180100](v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008C818(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPayload::~SdfPayload(void **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Hash(const char **a1)
{
  const char *v1;
  unsigned int *v2;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v3;
  uint64_t v5;
  char v6;

  v1 = *a1;
  v2 = (unsigned int *)(*a1 + 24);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(*a1 + 32);
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==();
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  __int128 **v2;
  std::string *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v6;

  v1 = atomic_load((unsigned int *)(*result + 48));
  if (v1 != 1)
  {
    v2 = (__int128 **)result;
    v3 = (std::string *)operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>::_Counted(v3, *v2);
    v4 = (unsigned int *)&v3[2];
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = (__int128 *)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>::~intrusive_ptr((uint64_t *)&v6);
  }
  return result;
}

void sub_23008C9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C4009C0B816);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10SdfPayloadE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedAsVtValue@<X0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy((std::string **)a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2 + 24);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2348B4E1C](v2, 0x1012C4009C0B816);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, unsigned int *a3, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a4)
{
  uint64_t result;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>((uint64_t)a1, a3);
  result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(a4);
  if (*((_BYTE *)a1 + 8))
    result += (unint64_t)(*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *((_BYTE *)a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>::_Counted(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  atomic_store(0, (unsigned int *)&this[2]);
  return this;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy(std::string **a1, __int128 *a2)
{
  std::string *v4;
  std::string *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (std::string *)operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)&v4[2];
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008CC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C4009C0B816);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Hash(double ***a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  double v8;

  v1 = **a1;
  v2 = (char *)(*a1)[1] - (char *)v1;
  if (v2)
  {
    v3 = 0.0;
    v4 = v2 >> 3;
    v5 = 1;
    do
    {
      v6 = *v1++;
      v7 = v6;
      if (v6 == 0.0)
        v7 = 0.0;
      v8 = v7;
      if ((v5 & 1) == 0)
        *(_QWORD *)&v8 = *(_QWORD *)&v7
                       + ((*(_QWORD *)&v3
                         + *(_QWORD *)&v7
                         + (*(_QWORD *)&v3 + *(_QWORD *)&v7) * (*(_QWORD *)&v3 + *(_QWORD *)&v7)) >> 1);
      v5 = 0;
      v3 = v8;
      --v4;
    }
    while (v4);
  }
  else
  {
    v8 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Equal(uint64_t **a1, double ***a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = *(double **)a2;
  if (v2 - v3 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = *v2;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v3, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>::~intrusive_ptr(&v7);
  }
  return result;
}

void sub_23008CEA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000230210A96 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<double>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v6;
        operator delete(v6);
      }
      MEMORY[0x2348B4E1C](v2, 0x1080C40AA79BA9DLL);
    }
  }
  return a1;
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23008D07C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008D110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Hash(pxrInternal__aapl__pxrReserved__::SdfLayerOffset ***a1)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t Hash;

  v1 = **a1;
  v2 = (*a1)[1] - v1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 4;
    v5 = 1;
    do
    {
      Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(v1);
      if ((v5 & 1) == 0)
        Hash += (unint64_t)(Hash + v3 + (Hash + v3) * (Hash + v3)) >> 1;
      v5 = 0;
      v1 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v1 + 16);
      v3 = Hash;
      --v4;
    }
    while (v4);
  }
  else
  {
    Hash = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * Hash);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Equal(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = **a1;
  v3 = (*a1)[1];
  v4 = **a2;
  if (v3 - v2 != (*a2)[1] - v4)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==();
    if (!(_DWORD)result)
      break;
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_EqualPtr(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = **a1;
  v3 = (*a1)[1];
  v4 = *a2;
  if (v3 - v2 != a2[1] - *a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==();
    if (!(_DWORD)result)
      break;
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    v4 = *v2;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfLayerOffset*,pxrInternal__aapl__pxrReserved__::SdfLayerOffset*>((_QWORD *)v3, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::~intrusive_ptr(&v7);
  }
  return result;
}

void sub_23008D384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__14SdfLayerOffsetENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v6;
        operator delete(v6);
      }
      MEMORY[0x2348B4E1C](v2, 0x1020C4055CCDE27);
    }
  }
  return a1;
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfLayerOffset*,pxrInternal__aapl__pxrReserved__::SdfLayerOffset*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23008D558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfLayerOffset*,pxrInternal__aapl__pxrReserved__::SdfLayerOffset*>((_QWORD *)v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008D5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Hash(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v3 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v3, *(uint64_t **)v1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 3));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Equal(unsigned __int8 ***a1, unsigned __int8 ***a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  char v6;

  v2 = **a1;
  v3 = (*a1)[1];
  v4 = **a2;
  if (v3 - v2 != (*a2)[1] - v4)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_EqualPtr(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  char v6;

  v2 = **a1;
  v3 = (*a1)[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - v2 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  __int128 ***v2;
  uint64_t v3;
  __int128 **v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 **v7;

  v1 = atomic_load((unsigned int *)*result + 6);
  if (v1 != 1)
  {
    v2 = (__int128 ***)result;
    v3 = operator new();
    v4 = *v2;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v3, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *v2;
    *v2 = (__int128 **)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>::~intrusive_ptr((void ***)&v7);
  }
  return result;
}

void sub_23008D85C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000230210B13 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedAsVtValue@<X0>(__int128 ***a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 **v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<std::string>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C4055CCDE27);
    }
  }
  return a1;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy(uint64_t *a1, __int128 **a2)
{
  uint64_t v4;
  std::string *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008DA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_CanHash()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_Hash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_Equal()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_EqualPtr()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedTypeid()
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(void)::ti
                      + 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::VtValue **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Move(pxrInternal__aapl__pxrReserved__::VtValue **a1, pxrInternal__aapl__pxrReserved__::VtValue **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Hash(pxrInternal__aapl__pxrReserved__::VtValue **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(*a1));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Equal()
{
  JUMPOUT(0x2348B3E08);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_EqualPtr()
{
  JUMPOUT(0x2348B3E08);
}

pxrInternal__aapl__pxrReserved__::VtValue **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_MakeMutable(pxrInternal__aapl__pxrReserved__::VtValue **result)
{
  unsigned int v1;
  const pxrInternal__aapl__pxrReserved__::VtValue **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;

  v1 = atomic_load((unsigned int *)*result + 4);
  if (v1 != 1)
  {
    v2 = result;
    v3 = (unsigned int *)operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3, *v2);
    v4 = v3 + 4;
    atomic_store(0, v3 + 4);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = (const pxrInternal__aapl__pxrReserved__::VtValue *)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_23008DC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1060C40F2FE4B89);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__20SdfUnregisteredValueE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedAsVtValue@<X0>(const pxrInternal__aapl__pxrReserved__::VtValue **a1@<X0>, uint64_t a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy((unsigned int **)a2, v2);
}

pxrInternal__aapl__pxrReserved__::VtValue **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::~intrusive_ptr(pxrInternal__aapl__pxrReserved__::VtValue **a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)((char *)v2 + 16);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v2);
      MEMORY[0x2348B4E1C]();
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy(unsigned int **a1, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unsigned int *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (unsigned int *)operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4, a2);
  v6 = v4 + 4;
  atomic_store(0, v4 + 4);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008DE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1060C40F2FE4B89);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(realityio *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  pxrInternal__aapl__pxrReserved__::VtValue *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int64x2_t v24;
  pxrInternal__aapl__pxrReserved__::VtValue *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  _BYTE buf[24];
  char *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v34, 1uLL);
  if (!(_DWORD)result)
    return result;
  v7 = v34;
  if (v34 > 0x7A120)
  {
    v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 500000;
      _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      return 0;
    }
    return result;
  }
  v9 = (_QWORD *)*a3;
  v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)a3[1];
  v11 = ((uint64_t)v10 - *a3) >> 4;
  if (v34 <= v11)
  {
    if (v34 >= v11)
      goto LABEL_26;
    v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v9[2 * v34];
    while (v10 != v25)
    {
      v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 - 16);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v10);
    }
  }
  else
  {
    v12 = a3[2];
    if (v34 - v11 > (v12 - (uint64_t)v10) >> 4)
    {
      v13 = v12 - (_QWORD)v9;
      v14 = v13 >> 3;
      if (v13 >> 3 <= v34)
        v14 = v34;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v37 = a3 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v15);
      v17 = (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)&v16[16 * v11];
      *(_QWORD *)&buf[8] = v17;
      *(_QWORD *)&buf[16] = v17;
      *(_QWORD *)buf = v16;
      v36 = &v16[16 * v18];
      v19 = &v16[16 * v7];
      v20 = 16 * v7 - 16 * v11;
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v17);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)((char *)v17 + 16);
        v20 -= 16;
      }
      while (v20);
      v22 = (_QWORD *)*a3;
      v21 = (_QWORD *)a3[1];
      v23 = *(_QWORD **)&buf[8];
      if (v21 == (_QWORD *)*a3)
      {
        v24 = vdupq_n_s64((unint64_t)v21);
      }
      else
      {
        do
        {
          v21 -= 2;
          v23 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v23 - 2, v21);
        }
        while (v21 != v22);
        v24 = *(int64x2_t *)a3;
      }
      *a3 = v23;
      a3[1] = v19;
      *(int64x2_t *)&buf[8] = v24;
      v27 = (char *)a3[2];
      a3[2] = v36;
      v36 = v27;
      *(_QWORD *)buf = v24.i64[0];
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)buf);
      goto LABEL_26;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16 * (v34 - v11));
    v26 = 16 * v34 - 16 * v11;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v10);
      v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      v26 -= 16;
    }
    while (v26);
  }
  a3[1] = v25;
LABEL_26:
  v28 = v34;
  if (!v34)
    return 1;
  v29 = (_QWORD *)*a3;
  result = realityio::replication::read((uint64_t)a1, a2, v29);
  if ((_DWORD)result)
  {
    v30 = v29 + 2;
    v31 = 1;
    do
    {
      v32 = v31;
      if (v28 == v31)
        break;
      v33 = realityio::replication::read((uint64_t)a1, a2, v30);
      v31 = v32 + 1;
      v30 += 2;
    }
    while ((v33 & 1) != 0);
    return v28 <= v32;
  }
  return result;
}

void sub_23008E140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Hash(unsigned __int8 **a1)
{
  _QWORD *v1;
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  uint64_t Hash;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::VtValue *v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::VtValue *v28;
  uint64_t v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::VtValue *v31;
  uint64_t v32;

  v1 = *a1;
  v2 = **a1;
  v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((_QWORD *)*a1 + 1);
  v4 = v1[2] - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 4;
    do
    {
      --v5;
      v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v3 + 16);
      Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v3);
      v2 = Hash + ((Hash + v2 + (Hash + v2) * (Hash + v2)) >> 1);
      v3 = v6;
    }
    while (v5);
  }
  v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[4];
  v9 = v1[5] - (_QWORD)v8;
  if (v9)
  {
    v10 = v9 >> 4;
    do
    {
      --v10;
      v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
      v12 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v8);
      v2 = v12 + ((v12 + v2 + (v12 + v2) * (v12 + v2)) >> 1);
      v8 = v11;
    }
    while (v10);
  }
  v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[7];
  v14 = v1[8] - (_QWORD)v13;
  if (v14)
  {
    v15 = v14 >> 4;
    do
    {
      --v15;
      v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
      v17 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v13);
      v2 = v17 + ((v17 + v2 + (v17 + v2) * (v17 + v2)) >> 1);
      v13 = v16;
    }
    while (v15);
  }
  v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[10];
  v19 = v1[11] - (_QWORD)v18;
  if (v19)
  {
    v20 = v19 >> 4;
    do
    {
      --v20;
      v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v18 + 16);
      v22 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v18);
      v2 = v22 + ((v22 + v2 + (v22 + v2) * (v22 + v2)) >> 1);
      v18 = v21;
    }
    while (v20);
  }
  v23 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[13];
  v24 = v1[14] - (_QWORD)v23;
  if (v24)
  {
    v25 = v24 >> 4;
    do
    {
      --v25;
      v26 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v23 + 16);
      v27 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v23);
      v2 = v27 + ((v27 + v2 + (v27 + v2) * (v27 + v2)) >> 1);
      v23 = v26;
    }
    while (v25);
  }
  v28 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[16];
  v29 = v1[17] - (_QWORD)v28;
  if (v29)
  {
    v30 = v29 >> 4;
    do
    {
      --v30;
      v31 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v28 + 16);
      v32 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v28);
      v2 = v32 + ((v32 + v2 + (v32 + v2) * (v32 + v2)) >> 1);
      v28 = v31;
    }
    while (v30);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v1 = atomic_load((unsigned int *)*result + 38);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (void **)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_23008E3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
  return a1;
}

void sub_23008E66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v7[v9 / 8], (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + v9));
        v9 += 16;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23008E774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008E814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::~SdfListOp(void **a1)
{
  void **v3;

  v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  _BYTE buf[24];
  char *v43;
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v41, 1uLL);
  if ((_DWORD)result)
  {
    v7 = v41;
    if (v41 <= 0x7A120)
    {
      v9 = *a3;
      v10 = a3[1];
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 4);
      v12 = v41 - v11;
      if (v41 <= v11)
      {
        if (v41 < v11)
        {
          v31 = v9 + 48 * v41;
          while (v10 != v31)
          {
            v10 -= 48;
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](v10);
          }
          a3[1] = v31;
        }
      }
      else
      {
        v13 = a3[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 4) >= v12)
        {
          v32 = v10 + 48 * v12;
          v33 = 48 * v41 - 16 * ((v10 - *a3) >> 4);
          do
          {
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(v10);
            v10 += 48;
            v33 -= 48;
          }
          while (v33);
          a3[1] = v32;
        }
        else
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 4);
          v15 = 2 * v14;
          if (2 * v14 <= v41)
            v15 = v41;
          if (v14 >= 0x2AAAAAAAAAAAAAALL)
            v16 = 0x555555555555555;
          else
            v16 = v15;
          v44 = a3 + 2;
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(v16);
          v18 = (uint64_t)&v17[48 * v11];
          *(_QWORD *)&buf[8] = v18;
          *(_QWORD *)&buf[16] = v18;
          *(_QWORD *)buf = v17;
          v43 = &v17[48 * v19];
          v20 = 3 * v7;
          v21 = &v17[48 * v7];
          v22 = 16 * v20 - 48 * v11;
          do
          {
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(v18);
            v18 += 48;
            v22 -= 48;
          }
          while (v22);
          v24 = *a3;
          v23 = a3[1];
          v25 = *(_QWORD *)&buf[8];
          if (v23 == *a3)
          {
            v30 = vdupq_n_s64(v23);
          }
          else
          {
            v26 = 0;
            do
            {
              v27 = v25 + v26;
              v28 = v23 + v26;
              v29 = *(_OWORD *)(v23 + v26 - 48);
              *(_QWORD *)(v27 - 32) = *(_QWORD *)(v23 + v26 - 32);
              *(_OWORD *)(v27 - 48) = v29;
              *(_QWORD *)(v28 - 40) = 0;
              *(_QWORD *)(v28 - 32) = 0;
              *(_QWORD *)(v28 - 48) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + v26 - 24), (_DWORD *)(v23 + v26 - 24));
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + v26 - 20), (_DWORD *)(v23 + v26 - 20));
              *(_OWORD *)(v27 - 16) = *(_OWORD *)(v23 + v26 - 16);
              v26 -= 48;
            }
            while (v23 + v26 != v24);
            v30 = *(int64x2_t *)a3;
            v25 += v26;
          }
          *a3 = v25;
          a3[1] = (uint64_t)v21;
          *(int64x2_t *)&buf[8] = v30;
          v34 = (char *)a3[2];
          a3[2] = (uint64_t)v43;
          v43 = v34;
          *(_QWORD *)buf = v30.i64[0];
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPayload>::~__split_buffer((uint64_t)buf);
        }
      }
      v35 = v41;
      if (v41)
      {
        v36 = *a3;
        result = realityio::replication::read(a1, a2, v36);
        if ((_DWORD)result)
        {
          v37 = v36 + 48;
          v38 = 1;
          do
          {
            v39 = v38;
            if (v35 == v38)
              break;
            v40 = realityio::replication::read(a1, a2, v37);
            v38 = v39 + 1;
            v37 += 48;
          }
          while (v40);
          return v39 >= v35;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = 500000;
        _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void sub_23008EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(uint64_t a1)
{
  _BYTE v2[16];
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v2, 0.0, 1.0);
  MEMORY[0x2348B19E4](a1, __p, &v3, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_23008EC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a11);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPayload>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 152);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Move(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Hash(unsigned __int8 **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v1 = *a1;
  v2 = **a1;
  v29 = 1;
  v28 = v2;
  v3 = v1[1];
  v4 = v1[2] - v3;
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 4);
    do
    {
      --v5;
      v6 = v3 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v3);
      v3 = v6;
    }
    while (v5);
  }
  v7 = v1[4];
  v8 = v1[5] - v7;
  if (v8)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    do
    {
      --v9;
      v10 = v7 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v7);
      v7 = v10;
    }
    while (v9);
  }
  v11 = v1[7];
  v12 = v1[8] - v11;
  if (v12)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 4);
    do
    {
      --v13;
      v14 = v11 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v11);
      v11 = v14;
    }
    while (v13);
  }
  v15 = v1[10];
  v16 = v1[11] - v15;
  if (v16)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
    do
    {
      --v17;
      v18 = v15 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v15);
      v15 = v18;
    }
    while (v17);
  }
  v19 = v1[13];
  v20 = v1[14] - v19;
  if (v20)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
    do
    {
      --v21;
      v22 = v19 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v19);
      v19 = v22;
    }
    while (v21);
  }
  v23 = v1[16];
  v24 = v1[17] - v23;
  if (v24)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
    do
    {
      --v25;
      v26 = v23 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v23);
      v23 = v26;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Equal()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_EqualPtr()
{
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

void ***pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_MakeMutable(void ***result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v1 = atomic_load((unsigned int *)*result + 38);
  if (v1 != 1)
  {
    v2 = (uint64_t *)result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(v3, *v2);
    v4 = (unsigned int *)(v3 + 152);
    atomic_store(0, (unsigned int *)(v3 + 152));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (void **)*v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_23008F068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_PlaceCopy(a2, v2);
}

void ***boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::~intrusive_ptr(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 19);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2 + 16;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 13;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 10;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 7;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 4;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v2 + 1;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x2348B4E1C](v2, 0x1020C40D6643E80);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v5 = 0;
  v6 = 0;
  result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (const char *)a2, (unsigned int *)(a2 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32));
  v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((_QWORD *)(a1 + 128), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4));
  return a1;
}

void sub_23008F3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[6 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v7[v9 / 8];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7[v9 / 8 + 3], (_DWORD *)(a2 + v9 + 24));
        result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v7[v9 / 8 + 3] + 1, (_DWORD *)(a2 + v9 + 28));
        *(_OWORD *)&v7[v9 / 8 + 4] = *(_OWORD *)(a2 + v9 + 32);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23008F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(v4, a2);
  v6 = (unsigned int *)(v4 + 152);
  atomic_store(0, (unsigned int *)(v4 + 152));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_23008F5DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_CopyInit(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Move(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Hash(double *a1)
{
  unint64_t v1;

  v1 = 0x9E3779B97F4A7C55 * *(_QWORD *)a1;
  if (*a1 == 0.0)
    v1 = 0;
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Equal(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_EqualPtr(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedTypeid()
{
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedAsVtValue@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(void)::ti
        + 1;
  return result;
}

uint64_t RIOPxrUsdNoticeObjectsChangedAddNoticeCallback(void *a1)
{
  id v1;
  _QWORD *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfNotice *v7;
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t Instance;
  uint64_t v20;
  __int128 v22;
  _QWORD *v23;
  unint64_t v24;
  char v25[8];
  _QWORD v26[3];
  unint64_t *v27;
  __int128 v28;
  char **v29;
  char *v30[2];
  unint64_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = (_QWORD *)operator new();
  v26[0] = &off_24FDF24E8;
  v26[1] = MEMORY[0x2348B5260](v1);
  v27 = v26;
  v2[1] = 0;
  *v2 = &off_24FDF2578;
  v3 = v2 + 2;
  v2[5] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v29, v30[0]);
  v4 = v27;
  if (!v27)
    goto LABEL_4;
  if (v27 != v26)
  {
    v4 = (unint64_t *)(*(uint64_t (**)(void))(*v27 + 16))();
LABEL_4:
    v31 = v4;
    goto LABEL_6;
  }
  v31 = (unint64_t *)&v29;
  (*(void (**)(_QWORD *, char ***))(v26[0] + 24))(v26, &v29);
  v4 = v31;
LABEL_6:
  v5 = (unint64_t *)v2[5];
  if (v4 == (unint64_t *)&v29)
  {
    if (v5 == v3)
    {
      ((void (*)(char ***, __int128 *))v29[3])(&v29, &v28);
      (*(void (**)(unint64_t *))(*v31 + 32))(v31);
      v31 = 0;
      (*(void (**)(_QWORD, char ***))(*(_QWORD *)v2[5] + 24))(v2[5], &v29);
      (*(void (**)(_QWORD))(*(_QWORD *)v2[5] + 32))(v2[5]);
      v2[5] = 0;
      v31 = (unint64_t *)&v29;
      (*(void (**)(__int128 *, _QWORD *))(v28 + 24))(&v28, v2 + 2);
      (*(void (**)(__int128 *))(v28 + 32))(&v28);
      v2[5] = v3;
      v5 = v31;
    }
    else
    {
      ((void (*)(char ***, _QWORD *))v29[3])(&v29, v2 + 2);
      (*(void (**)(unint64_t *))(*v31 + 32))(v31);
      v5 = (unint64_t *)v2[5];
      v31 = v5;
      v2[5] = v3;
    }
  }
  else
  {
    if (v5 == v3)
    {
      v5 = (unint64_t *)&v29;
      (*(void (**)(_QWORD *, char ***))(*v3 + 24))(v2 + 2, &v29);
      (*(void (**)(_QWORD))(*(_QWORD *)v2[5] + 32))(v2[5]);
      v2[5] = v31;
      v31 = (unint64_t *)&v29;
      v6 = 4;
LABEL_17:
      (*(void (**)(unint64_t *))(*v5 + 8 * v6))(v5);
      goto LABEL_18;
    }
    v31 = (unint64_t *)v2[5];
    v2[5] = v4;
  }
  if (v5 == (unint64_t *)&v29)
  {
    v6 = 4;
    v5 = (unint64_t *)&v29;
    goto LABEL_17;
  }
  if (v5)
  {
    v6 = 5;
    goto LABEL_17;
  }
LABEL_18:
  v23 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register(v2 + 1, (unint64_t *)&v29);
  v24 = (unint64_t)v29;
  *(_QWORD *)&v28 = realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::didReceiveNotice;
  *((_QWORD *)&v28 + 1) = 0;
  v7 = (pxrInternal__aapl__pxrReserved__::TfNotice *)operator new();
  v29 = (char **)(MEMORY[0x24BEE9D08] + 16);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v25);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::_Deliverer((uint64_t)v7, &v23, &v28, (uint64_t)&v29);
  ((void (*)(char ***))*v29)(&v29);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v7, v8);
  v9 = (unsigned int *)v2[11];
  *((_OWORD *)v2 + 5) = v22;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  v13 = v24;
  if (v24)
  {
    v14 = (unsigned int *)(v24 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v17 = v27;
  if (v27 == v26)
  {
    v18 = 4;
    v17 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_33;
    v18 = 5;
  }
  (*(void (**)(unint64_t *))(*v17 + 8 * v18))(v17);
LABEL_33:
  if (RIOCancellableGetTypeID::onceToken != -1)
    dispatch_once(&RIOCancellableGetTypeID::onceToken, &__block_literal_global_20);
  Instance = _CFRuntimeCreateInstance();
  v20 = Instance;
  if (Instance)
    *(_QWORD *)(Instance + 16) = v2;

  return v20;
}

void sub_23008FB74(_Unwind_Exception *a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  _QWORD *v24;
  unsigned int **v25;
  _QWORD *v26;
  _QWORD **v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v29 = (unsigned int *)v24[11];
  if (v29)
  {
    v30 = v29 + 2;
    do
    {
      v31 = __ldxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
  }
  v33 = *v27;
  if (*v27 == v24 + 6)
  {
    v34 = 4;
    v33 = v24 + 6;
  }
  else
  {
    if (!v33)
      goto LABEL_11;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_11:
  v35 = (_QWORD *)v24[5];
  if (v35 == v26)
  {
    v36 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_16;
    v36 = 5;
    v26 = (_QWORD *)v24[5];
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v36))(v26);
LABEL_16:
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(v25, a2);
  v37 = a18;
  if (a18 == &a15)
  {
    v38 = 4;
    v37 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_21;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_21:
  MEMORY[0x2348B4E1C](v24, 0x10E1C400AF9B268);

  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1)
{
  __CFArray *Mutable;
  _QWORD *ChangedInfoOnlyPaths;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    ChangedInfoOnlyPaths = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(a1);
    v4 = ChangedInfoOnlyPaths + 1;
    v5 = (_QWORD *)*ChangedInfoOnlyPaths;
    if ((_QWORD *)*ChangedInfoOnlyPaths != ChangedInfoOnlyPaths + 1)
    {
      do
      {
        v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)v5 + 8);
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  return Mutable;
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1)
{
  __CFArray *Mutable;
  _QWORD *ResyncedPaths;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    ResyncedPaths = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a1);
    v4 = ResyncedPaths + 1;
    v5 = (_QWORD *)*ResyncedPaths;
    if ((_QWORD *)*ResyncedPaths != ResyncedPaths + 1)
    {
      do
      {
        v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)v5 + 8);
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  return Mutable;
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  __CFArray *Mutable;
  uint64_t *i;
  const void *v6;
  uint64_t String;
  int v8;
  _QWORD *ResyncedPaths;
  uint64_t v10;
  int v11;
  const void *v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD v16[3];
  void **v17;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1
    && a2
    && (pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16)) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    for (i = (uint64_t *)v16[0]; i != (uint64_t *)v16[1]; ++i)
    {
      v6 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
    }
    v17 = (void **)v16;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
  else
  {
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v8 = *(char *)(String + 23);
    if (v8 < 0)
    {
      if (*(_QWORD *)(String + 8) != 1)
        return Mutable;
      String = *(_QWORD *)String;
    }
    else if (v8 != 1)
    {
      return Mutable;
    }
    if (*(_BYTE *)String == 47)
    {
      ResyncedPaths = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a1);
      if (ResyncedPaths)
      {
        if (ResyncedPaths[2] == 1)
        {
          v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*ResyncedPaths + 32));
          v11 = *(char *)(v10 + 23);
          if (v11 < 0)
          {
            if (*(_QWORD *)(v10 + 8) != 1)
              return Mutable;
            v10 = *(_QWORD *)v10;
          }
          else if (v11 != 1)
          {
            return Mutable;
          }
          if (*(_BYTE *)v10 == 47)
          {
            MEMORY[0x2348B274C](v16, "defaultPrim");
            v13 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(v16);
            if ((v16[0] & 7) != 0)
            {
              v14 = (unsigned int *)(v16[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v15 = __ldxr(v14);
              while (__stlxr(v15 - 2, v14));
            }
            CFArrayAppendValue(Mutable, v13);
            CFRelease(v13);
          }
        }
      }
    }
  }
  return Mutable;
}

void sub_230090008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a9 & 7) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdNoticeObjectsChangedHasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  else
    return 0;
}

_QWORD *RIOPxrUsdNoticeObjectsChangedCopyStagePointer(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (result)
  {
    v1 = result;
    if (RIOPxrTfWeakPtrGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrTfWeakPtrGetTypeID::onceToken, &__block_literal_global_31);
    result = (_QWORD *)_CFRuntimeCreateInstance();
    if (result)
    {
      v3 = v1[1];
      v2 = v1[2];
      result[2] = &off_24FDF2670;
      result[3] = v3;
      result[4] = v2;
      if (v2)
      {
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
    }
  }
  return result;
}

_QWORD *RIOPxrUsdNoticeObjectsChangedStagePointer(_QWORD *result)
{
  if (result)
    return RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(result + 1);
  return result;
}

_QWORD *RIOPxrUsdNoticeObjectsChangedCopyStageRef(_QWORD *result)
{
  if (result)
    return RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(result + 1);
  return result;
}

_QWORD *RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(uint64_t *a1)
{
  _QWORD *Instance;
  uint64_t v3;

  if (RIOPxrUsdStageGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    if (!a1[1]
      || !*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1)
                   + 14)
      || (v3 = *a1) == 0
      || (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero() & 1) == 0)
    {
      v3 = 0;
    }
    Instance[3] = 0;
    Instance[4] = 0;
    Instance[2] = v3;
  }
  return Instance;
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDF24E8;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDF24E8;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::target_type()
{
}

uint64_t realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::didReceiveNotice(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 80));
  if ((_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(unsigned int **this, const void *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *this;
  if (*this)
  {
    *((_BYTE *)v2 + 14) = 0;
    if (*((_BYTE *)v2 + 13))
      pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2((pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier *)v2, a2);
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
}

void realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(uint64_t a1)
{
  realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::cancel(uint64_t a1)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 80));
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::_Deliverer(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)a1 = &off_24FDF25F8;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_2300904B4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)v1 + 6);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_Deliverer(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = &off_24FDF25F8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v2 = *(unsigned int **)(a1 + 48);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = &off_24FDF25F8;
  (**(void (***)(uint64_t))(a1 + 56))(a1 + 56);
  v2 = *(unsigned int **)(a1 + 48);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void (*v17)(_QWORD *, uint64_t);
  uint64_t v18;
  _QWORD *v19;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v12 = v8 - 1;
  v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  v14 = *v12;
  v15 = !*(_BYTE *)(v13 + 14) || v14 == 0;
  if (v15
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>::operator->(v12);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  v17 = (void (*)(_QWORD *, uint64_t))a1[11];
  v18 = a1[12];
  v19 = (_QWORD *)(v14 + (v18 >> 1));
  if ((v18 & 1) != 0)
    v17 = *(void (**)(_QWORD *, uint64_t))(*v19 + v17);
  v17(v19, a2);
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _QWORD v14[4];
  char v15;
  int v16;

  v2 = MEMORY[0x24BEE9CD0];
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEE9CD0], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    v14[2] = 563;
    v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal"
             "__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,"
             " void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>::*)(c"
             "onst pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &), pxrInternal__aapl__pxrReserved__::UsdN"
             "otice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfNotice::_Deli"
             "verer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved_"
             "_::UsdNotice::ObjectsChanged, void *>>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (realityio::No"
             "ticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>::*)(const pxrInternal__aa"
             "pl__pxrReserved__::UsdNotice::ObjectsChanged &), pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>]";
    v15 = 0;
    v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    v5 = std::string::insert(&v10, 0, "notice type ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, " undefined in the TfType system");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_230090804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v6;
  char IsInvalid;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)result)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v6);
    result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0)
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v6) == a3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL())
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::_Deliverer(v2, (_QWORD *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_230090960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C40FFBCCEBFLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid(pxrInternal__aapl__pxrReserved__::TfNotice::Key *this)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::*)(void)const(this);
  return v3 & 1 | (unint64_t)v2
      && *(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->((uint64_t *)this)
                  + 32) != 0;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::*)(void)const(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::_FetchPointer;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::_FetchPointer(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

uint64_t realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(uint64_t a1)
{
  const void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24FDF2578;
  if (pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 80)))
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  v3 = *(unsigned int **)(a1 + 88);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = *(_QWORD **)(a1 + 72);
  if (v7 == (_QWORD *)(a1 + 48))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v9 = *(_QWORD **)(a1 + 40);
  if (v9 == (_QWORD *)(a1 + 16))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 16);
    goto LABEL_17;
  }
  if (v9)
  {
    v10 = 5;
LABEL_17:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((unsigned int **)(a1 + 8), v2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolderBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::Clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24FDF2670;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::IsInvalid(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  return v2
      && *(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v1)
                  + 14) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetUniqueIdentifier(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetWeakBase(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 8))
       + 16;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::operator BOOL(uint64_t a1)
{
  uint64_t (*v1)(uint64_t *);
  char v2;

  v1 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((_QWORD *)(a1 + 8));
  return (v2 & 1 | (unint64_t)v1) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_IsConst()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetPythonObject()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetTypeInfo(uint64_t a1)
{
  _QWORD **v2;
  uint64_t (*v3)(uint64_t *);
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  const char *v11;
  void *__p;
  char v13;
  _QWORD v14[4];
  char v15;
  int v16;

  v2 = (_QWORD **)(a1 + 8);
  v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((_QWORD *)(a1 + 8));
  if (!(v4 & 1 | (unint64_t)v3))
  {
    v14[0] = "tf/weakPtrFacade.h";
    v14[1] = "TfTypeid";
    v14[2] = 233;
    v14[3] = "const std::type_info &pxrInternal__aapl__pxrReserved__::TfTypeid(const Derived &)";
    v15 = 0;
    v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9TfWeakPtrINS_8UsdStageEEE" & 0x7FFFFFFFFFFFFFFFLL), v4);
    v11 = v13 >= 0 ? (const char *)&__p : (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v14, "Called TfTypeid on invalid %s", v11);
    if (v13 < 0)
      operator delete(__p);
  }
  v6 = *(_QWORD *)(a1 + 16);
  v5 = (uint64_t *)(a1 + 16);
  if (!v6
    || ((v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v5),
         v8 = *v2,
         *(_BYTE *)(v7 + 14))
      ? (v9 = v8 == 0)
      : (v9 = 1),
        v9))
  {
    __cxa_bad_typeid();
  }
  return *(_QWORD *)(*v8 - 8);
}

void sub_230090E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetType(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfType *v2;
  uint64_t v3;
  const std::type_info *v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16);
  if (!v3)
    return pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(v2);
  v2 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (!*((_BYTE *)v2 + 14) || v5 == 0)
    return pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(v2);
  else
    return pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*v5 - 8), v4);
}

char *pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_GetMostDerivedPtr(uint64_t a1)
{
  _QWORD **v2;
  uint64_t (*v3)(uint64_t *);
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;

  v2 = (_QWORD **)(a1 + 8);
  v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((_QWORD *)(a1 + 8));
  if (v4 & 1 | (unint64_t)v3
    && (v6 = *(_QWORD *)(a1 + 16), v5 = (uint64_t *)(a1 + 16), v6)
    && ((v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v5),
         v8 = *v2,
         *(_BYTE *)(v7 + 14))
      ? (v9 = v8 == 0)
      : (v9 = 1),
        !v9))
  {
    return (char *)v8 + *(_QWORD *)(*v8 - 16);
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_IsPolymorphic()
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolderBase *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_24FDF2670;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolderBase::~_PointerHolderBase(this);
}

uint64_t RIOPxrUsdObjectGetTypeID()
{
  if (RIOPxrUsdObjectGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdObjectGetTypeID::onceToken, &__block_literal_global_14);
  return RIOPxrUsdObjectGetTypeID::typeID;
}

uint64_t RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(uint64_t a1, int *a2)
{
  uint64_t Instance;
  uint64_t v5;

  if (RIOPxrUsdObjectGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdObjectGetTypeID::onceToken, &__block_literal_global_14);
  Instance = _CFRuntimeCreateInstance();
  v5 = Instance;
  if (Instance)
    realityio::RIOPxrUsdObjectData::RIOPxrUsdObjectData(Instance + 16, a1, *a2);
  return v5;
}

uint64_t RIOPxrUsdObjectCopyName(uint64_t a1)
{
  uint64_t *Name;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (a1)
  {
    Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24));
    return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(Name);
  }
  else
  {
    v5 = 0;
    result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v5);
    if ((v5 & 7) != 0)
    {
      v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectCopyPath(uint64_t a1)
{
  uint64_t v1;
  int v3;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24), &v3);
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_23009118C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectIsValid(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24));
  return result;
}

uint64_t UsdObjectCustomDataDictionarySetValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unint64_t *v6;
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = 0;
  v6 = (unint64_t *)MEMORY[0x24BEE7E98];
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 72));
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  v9 = atomic_load(v6);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v9 + 72));
  v11 = v10;
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
  return v11;
}

void sub_230091298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectHasMetadataValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdObject *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
      result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24));
      if ((_DWORD)result)
      {
        if (a3)
        {
          v8 = *(unsigned int **)(a3 + 16);
          v13 = v8;
          if ((v8 & 7) != 0)
          {
            v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 2, v9));
            if ((v10 & 1) == 0)
              v13 = v9;
          }
        }
        else
        {
          v13 = 0;
        }
        result = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
        if ((v13 & 7) != 0)
        {
          v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectClearMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  realityio::UsdLayerMutexTracker *v6;
  std::recursive_mutex *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;

  v3 = 0;
  if (a1 && a2)
  {
    v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      if (a3)
      {
        v8 = *(unsigned int **)(a3 + 16);
        v14 = v8;
        if ((v8 & 7) != 0)
        {
          v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 2, v9));
          if ((v10 & 1) == 0)
            v14 = v9;
        }
      }
      else
      {
        v14 = 0;
      }
      v3 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14);
      if ((v14 & 7) != 0)
      {
        v11 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_230091468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(realityio::UsdLayerMutexTracker *a1)
{
  void *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t *EditTarget;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v22);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    v5 = EditTarget[1];
    v20 = *EditTarget;
    v21 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = v23;
    if (v23)
    {
      v9 = (unsigned int *)(v23 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v20);
  v14 = v13;
  v15 = v21;
  if (v21)
  {
    v16 = (unsigned int *)(v21 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  return v14;
}

void sub_230091580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdObjectMetadataSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  realityio::UsdLayerMutexTracker *v8;
  std::recursive_mutex *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v16;

  v4 = 0;
  if (a1 && a2 && a4)
  {
    v8 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v9 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v8);
      std::recursive_mutex::lock(v9);
      if (a3)
      {
        v10 = *(unsigned int **)(a3 + 16);
        v16 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v16 = v11;
        }
      }
      else
      {
        v16 = 0;
      }
      v4 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a4 + 16));
      if ((v16 & 7) != 0)
      {
        v13 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      std::recursive_mutex::unlock(v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2300916CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectMetadataCopyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;

  result = 0;
  if (a1 && a2)
  {
    v7 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      if (a3)
      {
        v8 = *(unsigned int **)(a3 + 16);
        v13 = v8;
        if ((v8 & 7) != 0)
        {
          v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 2, v9));
          if ((v10 & 1) == 0)
            v13 = v9;
        }
      }
      else
      {
        v13 = 0;
      }
      result = UsdObjectMetadataCopyValue(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
      if ((v13 & 7) != 0)
      {
        v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t UsdObjectMetadataCopyValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v5))v3 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  else
    v3 = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return v3;
}

void sub_230091860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectSetAllowedTokens(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  realityio::UsdLayerMutexTracker *v4;
  std::recursive_mutex *v5;
  unint64_t Data;
  const void *v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v4);
      std::recursive_mutex::lock(v5);
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      v12 = 0;
      v7 = (const void *)RIOPxrVtValueCreateWithTokenArray(a2);
      v8 = (char *)CFAutorelease(v7);
      v2 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 16));
      if ((v12 & 7) != 0)
      {
        v9 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_23009194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdObjectCopyAllowedTokens(__CFArray *result)
{
  const pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unint64_t Data;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  if (result)
  {
    v1 = (__CFArray *)((char *)result + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((__CFArray *)((char *)result + 24)))
    {
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      v6 = 0;
      v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
      if ((v6 & 7) != 0)
      {
        v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      return RIOPxrVtValueCopyTokenArray(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectClearColorSpace(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  unint64_t Data;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;

  if (!a1)
    return 0;
  v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v1);
  std::recursive_mutex::lock(v2);
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  v8 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_230091AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectSetColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  std::recursive_mutex *v5;
  unint64_t Data;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[3];

  v2 = 0;
  v14[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>((realityio::UsdLayerMutexTracker *)(a1 + 24));
    std::recursive_mutex::lock(v5);
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v7 = *(_QWORD *)(a2 + 16);
    v14[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
           + 1;
    v13 = 0;
    v14[0] = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v14[0] = v8;
    }
    v2 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
    if ((v13 & 7) != 0)
    {
      v10 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    std::recursive_mutex::unlock(v5);
  }
  return v2;
}

void sub_230091C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCopyColorSpace(uint64_t result)
{
  const pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unint64_t Data;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  if (result)
  {
    v1 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24);
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v6 = 0;
    v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
    if ((v6 & 7) != 0)
    {
      v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    return RIOPxrVtValueCopyToken(v3);
  }
  return result;
}

uint64_t RIOPxrUsdObjectSetInheritPaths(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  realityio::UsdLayerMutexTracker *v4;
  std::recursive_mutex *v5;
  unint64_t Data;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v4);
      std::recursive_mutex::lock(v5);
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      v11 = 0;
      v7 = RIOPxrVtValueCreateWithPathListOp(a2);
      v2 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 192), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 16));
      if ((v11 & 7) != 0)
      {
        v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_230091E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdObjectCopyInheritPaths(__CFArray *result)
{
  const pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unint64_t Data;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  if (result)
  {
    v1 = (__CFArray *)((char *)result + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((__CFArray *)((char *)result + 24)))
    {
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      v6 = 0;
      v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 192), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
      if ((v6 & 7) != 0)
      {
        v4 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      return RIOPxrVtValueCopyPathListOp(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectCustomDataDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  realityio::UsdLayerMutexTracker *v8;
  std::recursive_mutex *v9;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    v8 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v9 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v8);
      std::recursive_mutex::lock(v9);
      v4 = UsdObjectCustomDataDictionarySetValue(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a4 + 16));
      std::recursive_mutex::unlock(v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_230091F90(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryClearValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  realityio::UsdLayerMutexTracker *v5;
  std::recursive_mutex *v6;
  unint64_t *v7;
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    v5 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v6 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v5);
      std::recursive_mutex::lock(v6);
      v13 = 0;
      v7 = (unint64_t *)MEMORY[0x24BEE7E98];
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 72));
      if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath();
      v10 = atomic_load(v7);
      if (!v10)
        v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v10 + 72));
      v3 = v11;
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_2300920C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryCopyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::UsdObject *v5;

  if (a1
    && a2
    && a3
    && (v5 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24),
        pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))))
  {
    return UsdObjectCustomDataDictionaryCopyValue(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
  }
  else
  {
    return 0;
  }
}

uint64_t UsdObjectCustomDataDictionaryCopyValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 72));
  if (!(_DWORD)v6)
    goto LABEL_8;
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  ValueAtPath = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (ValueAtPath)
    v8 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(ValueAtPath);
  else
LABEL_8:
    v8 = 0;
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v10, 0);
  return v8;
}

void sub_230092208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectUiInfoDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  realityio::UsdLayerMutexTracker *v6;
  std::recursive_mutex *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      MEMORY[0x2348B274C](&v11, "ui");
      v3 = UsdObjectCustomDataDictionarySetValue(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
      if ((v11 & 7) != 0)
      {
        v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_2300922E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectUiInfoDictionaryCopyValue(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::UsdObject *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  result = 0;
  if (a1 && a2)
  {
    v5 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      MEMORY[0x2348B274C](&v8, "ui");
      result = UsdObjectCustomDataDictionaryCopyValue(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      if ((v8 & 7) != 0)
      {
        v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  realityio::UsdLayerMutexTracker *v6;
  std::recursive_mutex *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      MEMORY[0x2348B274C](&v11, "accessibility_info");
      v3 = UsdObjectCustomDataDictionarySetValue(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
      if ((v11 & 7) != 0)
      {
        v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_230092488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionaryCopyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  realityio::UsdLayerMutexTracker *v4;
  std::recursive_mutex *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v4);
      std::recursive_mutex::lock(v5);
      MEMORY[0x2348B274C](&v9, "accessibility_info");
      v2 = UsdObjectCustomDataDictionaryCopyValue(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      if ((v9 & 7) != 0)
      {
        v6 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_230092574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFDictionary *RIOPxrVtValueCopyDictionary(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary **v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v4;
  __CFDictionary *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Instance;
  const void *v11;
  const void *v12;
  uint64_t v14;
  uint64_t v15;

  v2 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16)))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((v3 & 4) != 0)
    v4 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
  else
    v4 = *v2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v4);
  v15 = v6;
  while (1)
  {
    v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v4);
    v9 = v14;
    if (v15 == v8 && (!v8 || v14 == v7))
      break;
    if (RIOPxrTfTokenGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
    Instance = _CFRuntimeCreateInstance();
    v11 = (const void *)Instance;
    if (Instance)
      MEMORY[0x2348B2764](Instance + 16, v9 + 32);
    v12 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v14 + 56));
    CFDictionaryAddValue(Mutable, v11, v12);
    CFRelease(v11);
    CFRelease(v12);
    pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v14);
  }
  return Mutable;
}

__CFDictionary *RIOPxrUsdObjectCopyMetadata(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFDictionary *Mutable;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD **v10;
  _QWORD *v11[2];

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(v1);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = v10;
  if (v10 != v11)
  {
    do
    {
      v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3 + 4);
      v5 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      CFDictionaryAddValue(Mutable, v4, v5);
      CFRelease(v4);
      CFRelease(v5);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v3[2];
          v8 = *v7 == v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v11);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v10, v11[0]);
  return Mutable;
}

void sub_23009282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

__CFDictionary *RIOPxrUsdObjectCopyAuthoredMetadata(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFDictionary *Mutable;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD **v10;
  _QWORD *v11[2];

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(v1);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = v10;
  if (v10 != v11)
  {
    do
    {
      v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3 + 4);
      v5 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      CFDictionaryAddValue(Mutable, v4, v5);
      CFRelease(v4);
      CFRelease(v5);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v3[2];
          v8 = *v7 == v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v11);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v10, v11[0]);
  return Mutable;
}

void sub_230092954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdObjectCopyRegisteredMetadataKeys(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v2;
  __CFArray *Mutable;
  int v4;
  uint64_t *i;
  uint64_t *v7;
  const void *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *PrimDefinition;
  uint64_t Instance;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void **v21;

  if (a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v4 = *(_DWORD *)(a1 + 16) % 100;
      if (v4 == 22 || v4 == 12 || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v2) & 1) != 0)
      {
        v19 = 0uLL;
        v20 = 0;
        if (!atomic_load((unint64_t *)off_24FDDF040))
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields();
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v19);
        v19 = v17;
        v20 = v18;
        v18 = 0;
        v17 = 0uLL;
        *(_QWORD *)&v15 = &v17;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      }
      else
      {
        v19 = 0uLL;
        v20 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v2) & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2) & 1) == 0)
        {
          goto LABEL_21;
        }
        PrimDefinition = (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimDefinition(*(unint64_t ***)(a1 + 32), v9);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::UsdPrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v17, PrimDefinition);
        Instance = atomic_load((unint64_t *)off_24FDDF030);
        if (!Instance)
          Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
        if (&v17 == *(__int128 **)(Instance + 112))
        {
          if (!atomic_load((unint64_t *)off_24FDDF040))
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields();
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v17);
        }
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v19);
        v19 = v15;
        v14 = v16;
        v16 = 0;
        v15 = 0uLL;
        v20 = v14;
        v21 = (void **)&v15;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v21);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition((unsigned int **)&v17);
      }
      v7 = (uint64_t *)*((_QWORD *)&v19 + 1);
      for (i = (uint64_t *)v19; i != v7; ++i)
      {
        v8 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
      }
LABEL_21:
      *(_QWORD *)&v17 = &v19;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
      return Mutable;
    }
  }
  return 0;
}

void sub_230092B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition(&a13);
  a13 = (unsigned int *)(v13 - 64);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimDefinition(unint64_t **this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unint64_t *v3;
  unint64_t v4;

  if (!this || (*((_BYTE *)this + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)this, a2);
  v3 = this[3];
  v4 = atomic_load(v3 + 7);
  if (v4)
    return v4;
  else
    return pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v3);
}

uint64_t _RIOPxrUsdObjectCFFinalize(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;

  v2 = a1[6];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  result = a1[4];
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

BOOL _RIOPxrUsdObjectCFEqual(_DWORD *a1, _DWORD *a2)
{
  return a1[6] == a2[6]
      && *((_QWORD *)a1 + 4) == *((_QWORD *)a2 + 4)
      && *((_QWORD *)a1 + 5) == *((_QWORD *)a2 + 5)
      && (*((_QWORD *)a1 + 6) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF8);
}

unint64_t _RIOPxrUsdObjectCFHash(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = bswap64(0x9E3779B97F4A7C55 * a1[4]);
  v2 = *((unsigned int *)a1 + 10);
  v3 = *((unsigned int *)a1 + 11);
  v4 = v1
     + v2
     + ((v1 + *((unsigned int *)a1 + 6) + (v1 + *((unsigned int *)a1 + 6)) * (v1 + *((unsigned int *)a1 + 6))) >> 1);
  v5 = v3 + v2 + ((v4 + v4 * v4) >> 1);
  v6 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + v3 + ((v5 + v5 * v5) >> 1);
  return bswap64(0x9E3779B97F4A7C55 * (v6 + ((v7 + v7 * v7) >> 1)));
}

CFStringRef _RIOPxrUsdObjectCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdObject %p>"), a1);
}

CFStringRef _RIOPxrUsdObjectCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdObject %p>"), a1);
}

pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::UsdPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a2)
{
  unint64_t v2;
  _DWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v30;
  _QWORD v31[2];
  char v32;

  v2 = (unint64_t)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, (_DWORD *)a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)(v2 + 12));
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 12) = *(_DWORD *)(v2 + 48);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)this + 16, *(_QWORD *)(v2 + 24));
  v30 = v2;
  v6 = *(uint64_t **)(v2 + 32);
  if (v6)
  {
    v7 = (_QWORD *)((char *)this + 32);
    do
    {
      v8 = v6[2] & 0xFFFFFFFFFFFFFFF8;
      v9 = bswap64(0x9E3779B97F4A7C55 * v8);
      v10 = *((_QWORD *)this + 3);
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v2 = v9;
          if (v9 >= v10)
            v2 = v9 % v10;
        }
        else
        {
          v2 = v9 & (v10 - 1);
        }
        v12 = *(_QWORD **)(*v5 + 8 * v2);
        if (v12)
        {
          for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
          {
            v14 = i[1];
            if (v14 == v9)
            {
              if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8)
                goto LABEL_46;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v10)
                  v14 %= v10;
              }
              else
              {
                v14 &= v10 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = operator new(0x28uLL);
      v16 = v15;
      v31[0] = v15;
      v31[1] = (char *)this + 32;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v9;
      v17 = v6[2];
      *((_QWORD *)v15 + 2) = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          *((_QWORD *)v15 + 2) &= 0xFFFFFFFFFFFFFFF8;
      }
      *((_QWORD *)v15 + 3) = v6[3];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15 + 8, (_DWORD *)v6 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v16 + 9, (_DWORD *)v6 + 9);
      v32 = 1;
      v20 = (float)(unint64_t)(*((_QWORD *)this + 5) + 1);
      v21 = *((float *)this + 12);
      if (!v10 || (float)(v21 * (float)v10) < v20)
      {
        v22 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v22 = 1;
        v23 = v22 | (2 * v10);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)this + 16, v25);
        v10 = *((_QWORD *)this + 3);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v2 = v9 % v10;
          else
            v2 = v9;
        }
        else
        {
          v2 = (v10 - 1) & v9;
        }
      }
      v26 = *v5;
      v27 = *(_QWORD **)(*v5 + 8 * v2);
      if (v27)
      {
        *(_QWORD *)v16 = *v27;
      }
      else
      {
        *(_QWORD *)v16 = *v7;
        *v7 = v16;
        *(_QWORD *)(v26 + 8 * v2) = v7;
        if (!*(_QWORD *)v16)
          goto LABEL_45;
        v28 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v28 >= v10)
            v28 %= v10;
        }
        else
        {
          v28 &= v10 - 1;
        }
        v27 = (_QWORD *)(*v5 + 8 * v28);
      }
      *v27 = v16;
LABEL_45:
      v31[0] = 0;
      ++*((_QWORD *)this + 5);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
LABEL_46:
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)this + 7, *(uint64_t **)(v30 + 56), *(uint64_t **)(v30 + 64), (uint64_t)(*(_QWORD *)(v30 + 64) - *(_QWORD *)(v30 + 56)) >> 3);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)this + 10, *(uint64_t **)(v30 + 80), *(uint64_t **)(v30 + 88), (uint64_t)(*(_QWORD *)(v30 + 88) - *(_QWORD *)(v30 + 80)) >> 3);
  *((_QWORD *)this + 13) = *(_QWORD *)(v30 + 104);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)this + 13);
  return this;
}

void sub_2300930DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath::~_LayerAndPath(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath::~_LayerAndPath(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(v1 + 2);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(_QWORD *a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  if ((*a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition(unsigned int **this)
{
  void **v2;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(this + 13);
  v2 = (void **)(this + 10);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(this + 7);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table((uint64_t)(this + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 1));
}

uint64_t realityio::RIOPxrUsdObjectData::RIOPxrUsdObjectData(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x2348B4750);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x2348B2A94);
}

__CFArray *RIOPxrUsdPropertyCopyPropertyStack(uint64_t a1)
{
  __CFArray *Mutable;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  pxrInternal__aapl__pxrReserved__::SdfSpec *i;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t RealPath;
  __int128 v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v13;
  uint64_t Instance;
  const void *v15;
  uint64_t v17;
  _BYTE v18[16];
  void *__p[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23[8];
  std::string v24;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v25;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v26;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack();
    v3 = v25;
    for (i = v26; v3 != i; v3 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v3 + 8))
    {
      v5 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5);
      v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)__p);
      RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
      if (*(char *)(RealPath + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)RealPath, *(_QWORD *)(RealPath + 8));
      }
      else
      {
        v8 = *(_OWORD *)RealPath;
        v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(RealPath + 16);
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
      }
      v9 = __p[1];
      if (__p[1])
      {
        v10 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v11 = __ldxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
      }
      v13 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(v13);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v18, 0.0, 1.0);
      v17 = 0;
      MEMORY[0x2348B1B88](__p, &v24, v23, v18, &v17);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v17, 0);
      if (RIOPxrSdfReferenceGetTypeID::onceToken != -1)
        dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
      Instance = _CFRuntimeCreateInstance();
      v15 = (const void *)Instance;
      if (Instance)
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference((std::string *)(Instance + 16), (__int128 *)__p);
      CFArrayAppendValue(Mutable, v15);
      CFRelease(v15);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v22, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20 < 0)
        operator delete(__p[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    __p[0] = &v25;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  return Mutable;
}

void sub_230093674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a20);
  if (a26 < 0)
    operator delete(__p);
  a13 = &a28;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  const char *v2;
  const char *p_p;
  void *__p;
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15SdfPropertySpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", p_p);
    if (v6 < 0)
      operator delete(__p);
    return 0;
  }
  return v1;
}

void sub_2300937C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdPropertyCopyBaseName(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;

  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24));
    result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
    if ((v3 & 7) != 0)
    {
      v1 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
  }
  return result;
}

uint64_t RIOPxrUsdPropertyCopyNamespace(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;

  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24));
    result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
    if ((v3 & 7) != 0)
    {
      v1 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
  }
  return result;
}

__CFArray *RIOPxrUsdPropertyCopySplitName(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t i;
  const char *v4;
  CFStringRef v5;
  _QWORD v7[3];
  void **v8;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName((pxrInternal__aapl__pxrReserved__::UsdProperty *)(a1 + 24));
    for (i = v7[0]; i != v7[1]; i += 24)
    {
      v4 = (const char *)i;
      if (*(char *)(i + 23) < 0)
        v4 = *(const char **)i;
      v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
    }
    v8 = (void **)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  return Mutable;
}

void sub_230093990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPropertyIsAuthored(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24));
  return result;
}

uint64_t RIOPxrUsdPropertyIsAuthoredAt(uint64_t result, uint64_t a2)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthoredAt((pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24), (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a2 + 16));
  return result;
}

void realityio::generateSkeletonDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t Data;
  realityio::AnyValueDirtyPropertyDescriptor *v11;
  unint64_t *v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  realityio::AnyValueDirtyPropertyDescriptor *v14;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v15;
  realityio::AnyValueDirtyPropertyDescriptor *v16;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v17;
  realityio::AnyValueDirtyPropertyDescriptor *v18;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;
  uint64_t i;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25[3];
  _QWORD *v26[3];
  __int128 v27;
  _QWORD *v28[3];
  _QWORD *v29[3];
  __int128 v30;
  _QWORD *v31[3];
  uint64_t v32;
  uint64_t v33;
  void **v34;
  _OWORD v35[4];
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E549A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E549A8))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v29, 0, sizeof(v29));
    v9 = (_BYTE *)operator new();
    Data = atomic_load(&_MergedGlobals_24);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletonBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletonBuilderTokens_StaticTokenType>>::_TryToCreateData();
    memset(v26, 0, sizeof(v26));
    v11 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v12 = (unint64_t *)MEMORY[0x24BEE8040];
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
    if (!v13)
      v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v11, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v13 + 112));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v24, (uint64_t)v11);
    v35[0] = v24;
    v24 = 0uLL;
    v14 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v14, v15);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v23, (uint64_t)v14);
    v35[1] = v23;
    v23 = 0uLL;
    v16 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v17 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v17)
      v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v16, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v17 + 48));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v22, (uint64_t)v16);
    v35[2] = v22;
    v22 = 0uLL;
    v18 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v19)
      v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v18, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v19 + 136));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v21, (uint64_t)v18);
    v35[3] = v21;
    v21 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v25, v35, 4uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, (uint64_t *)(Data + 8), v26, v25);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v27, (uint64_t)v9);
    v36 = v27;
    v27 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v28, &v36, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v29, v28);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v30, v8);
    v37 = v30;
    v30 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v31, &v37, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v31);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v32, v7);
    qword_255E54998 = v32;
    unk_255E549A0 = v33;
    v32 = 0;
    v33 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    v34 = (void **)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    v34 = (void **)v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
    v34 = (void **)v25;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v34);
    for (i = 3; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v24);
    *(_QWORD *)&v35[0] = v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
    *(_QWORD *)&v35[0] = v29;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
    __cxa_guard_release(&qword_255E549A8);
  }
  v4 = unk_255E549A0;
  *a1 = qword_255E54998;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_230093E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x2348B4E1C](v29, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v31 - 192) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 192));
  MEMORY[0x2348B4E1C](v28, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v30, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E549A8);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletonBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletonBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v0 = (realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)operator new();
  MEMORY[0x2348B2758](v0, "constant", 0);
  MEMORY[0x2348B2758]((char *)v0 + 8, "Skeleton", 0);
  v1 = *(unsigned int **)v0;
  v21 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v21 = v2;
  }
  v4 = (unsigned int *)*((_QWORD *)v0 + 1);
  v22 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v22 = v5;
  }
  *((_QWORD *)v0 + 2) = 0;
  *((_QWORD *)v0 + 3) = 0;
  *((_QWORD *)v0 + 4) = 0;
  v7 = operator new(0x10uLL);
  v8 = 0;
  v9 = 0;
  *((_QWORD *)v0 + 2) = v7;
  *((_QWORD *)v0 + 3) = v7;
  *((_QWORD *)v0 + 4) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = (&v21)[v9];
    *v7 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *v7 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  v14 = (unsigned int **)&v23;
  *((_QWORD *)v0 + 3) = v7;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v21);
  while (!__ldaxr(&_MergedGlobals_24))
  {
    if (!__stlxr((unint64_t)v0, &_MergedGlobals_24))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&_MergedGlobals_24);
}

void sub_2300942D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      MEMORY[0x2348B4E1C](v14, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateTransformAnimationDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *Data;
  __int128 *EmptyString;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  unint64_t v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  unsigned int **v16;
  realityio::AnyValueDirtyPropertyDescriptor *v17;
  unsigned int **v18;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  unsigned int **v20;
  uint64_t i;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27[3];
  _QWORD *v28[3];
  __int128 v29;
  _QWORD *v30[3];
  _QWORD *v31[3];
  __int128 v32;
  _QWORD *v33[3];
  uint64_t v34;
  uint64_t v35;
  void **v36;
  _OWORD v37[5];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E549C8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E549C8))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v31, 0, sizeof(v31));
    v9 = operator new();
    memset(v28, 0, sizeof(v28));
    v10 = (_BYTE *)operator new();
    Data = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&_MergedGlobals_25);
    if (!Data)
      Data = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (__int128 *)((*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
    realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(v10, EmptyString);
    std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(&v26, (uint64_t)v10);
    v37[0] = v26;
    v26 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v14 = atomic_load(&_MergedGlobals_25);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v25, (uint64_t)v13);
    v37[1] = v25;
    v25 = 0uLL;
    v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v16 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)v16);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v24, (uint64_t)v15);
    v37[2] = v24;
    v24 = 0uLL;
    v17 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v18 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 2));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v23, (uint64_t)v17);
    v37[3] = v23;
    v23 = 0uLL;
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 1));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v22, (uint64_t)v19);
    v37[4] = v22;
    v22 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v27, v37, 5uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v28, v27);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v29, v9);
    v38 = v29;
    v29 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v30, &v38, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v31, v30);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v32, v8);
    v39 = v32;
    v32 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v33, &v39, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v33);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v34, v7);
    qword_255E549B8 = v34;
    unk_255E549C0 = v35;
    v34 = 0;
    v35 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    v36 = (void **)v33;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    v36 = (void **)v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    v36 = (void **)v27;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v36);
    for (i = 4; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v24);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
    *(_QWORD *)&v37[0] = v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    *(_QWORD *)&v37[0] = v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    __cxa_guard_release(&qword_255E549C8);
  }
  v4 = unk_255E549C0;
  *a1 = qword_255E549B8;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23009480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  MEMORY[0x2348B4E1C](v32, 0x10E1C40C8742A8BLL);
  v36 = v34 - 144;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  do
  {
    v36 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v36);
  }
  while (v36 != v34 - 208);
  *(_QWORD *)(v34 - 208) = &a22;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 208));
  MEMORY[0x2348B4E1C](v31, 0x10A1C402FEF67C7);
  *(_QWORD *)(v34 - 208) = &a30;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 208));
  MEMORY[0x2348B4E1C](v30, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v33, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E549C8);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v0 = (realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)operator new();
  MEMORY[0x2348B2758](v0, "xformOp", 0);
  MEMORY[0x2348B2758]((char *)v0 + 8, "xformOpOrder", 0);
  v1 = *(unsigned int **)v0;
  v21 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v21 = v2;
  }
  v4 = (unsigned int *)*((_QWORD *)v0 + 1);
  v22 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v22 = v5;
  }
  *((_QWORD *)v0 + 2) = 0;
  *((_QWORD *)v0 + 3) = 0;
  *((_QWORD *)v0 + 4) = 0;
  v7 = operator new(0x10uLL);
  v8 = 0;
  v9 = 0;
  *((_QWORD *)v0 + 2) = v7;
  *((_QWORD *)v0 + 3) = v7;
  *((_QWORD *)v0 + 4) = v7 + 2;
  do
  {
    v10 = v8;
    v11 = (&v21)[v9];
    *v7 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *v7 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v7;
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  v14 = (unsigned int **)&v23;
  *((_QWORD *)v0 + 3) = v7;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v21);
  while (!__ldaxr(&_MergedGlobals_25))
  {
    if (!__stlxr((unint64_t)v0, &_MergedGlobals_25))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&_MergedGlobals_25);
}

void sub_230094D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      MEMORY[0x2348B4E1C](v14, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t RIOBuilderOutputsDescriptorGetTypeID()
{
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  return RIOBuilderOutputsDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderOutputsDescriptorCreateWithOutputDescriptors(const __CFArray *a1)
{
  char *v2;
  CFIndex Count;
  CFIndex i;
  _QWORD *ValueAtIndex;
  std::string::size_type v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t Instance;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  char *v30;
  std::__shared_weak_count *v31;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v31 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 24) = 0u;
  v30 = v2 + 24;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v6 = ValueAtIndex[2];
      v7 = (std::__shared_weak_count *)ValueAtIndex[3];
      v28 = v6;
      v29 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = (uint64_t)v30;
        v27 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      else
      {
        v10 = (uint64_t)v30;
        v27 = 0;
      }
      v26 = v6;
      realityio::OutputsDescriptor::addOutputDescriptor(v10, &v26);
      v12 = v27;
      if (v27)
      {
        v13 = (unint64_t *)&v27->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v29;
      if (v29)
      {
        v16 = (unint64_t *)&v29->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  Instance = _CFRuntimeCreateInstance();
  v19 = Instance;
  v20 = v31;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = v30;
    *(_QWORD *)(Instance + 24) = v20;
    if (!v20)
      return v19;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  else if (!v31)
  {
    return v19;
  }
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v19;
}

void sub_230095038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderOutputsDescriptorCopyOutputDescriptors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  const void *v8;
  unint64_t *v9;
  unint64_t v10;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v7 = (_QWORD *)(v3 + 56);
      while (1)
      {
        v7 = (_QWORD *)*v7;
        if (!v7)
          break;
        v8 = (const void *)RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(v7 + 3);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
      }
    }
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_230095140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

__CFDictionary *RIOBuilderOutputsDescriptorCopyOutputDescriptorsByName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Mutable;
  __CFDictionary *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t EmptyString;
  const char *v10;
  CFStringRef v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = Mutable;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (v4)
    {
      v8 = (_QWORD *)(v4 + 56);
      while (1)
      {
        v8 = (_QWORD *)*v8;
        if (!v8)
          break;
        if ((v8[2] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (v8[2] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
        if (*(char *)(EmptyString + 23) >= 0)
          v10 = (const char *)EmptyString;
        else
          v10 = *(const char **)EmptyString;
        v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
        v12 = (const void *)RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(v8 + 3);
        CFDictionaryAddValue(v3, v11, v12);
        CFRelease(v11);
        CFRelease(v12);
      }
    }
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_23009530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderOutputsDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderOutputsDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputsDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputsDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputsDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderOutputsDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputsDescriptor %p>"), a1);
}

realityio::StageTimeCodeBuilder *realityio::StageTimeCodeBuilder::StageTimeCodeBuilder(realityio::StageTimeCodeBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t i;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39[2];
  void *__p[2];
  char v41;
  void *v42[2];
  char v43;
  void **v44[3];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53[3];
  __int128 v54;
  _QWORD *v55[3];
  uint64_t v56;
  uint64_t v57;
  void ***v58;
  _OWORD v59[4];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v42, "StageTimeCodeBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageTimeCodeBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E549E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E549E0))
  {
    v11 = operator new();
    v12 = operator new();
    v13 = operator new();
    MEMORY[0x2348B274C](&v51, "startTimeCode");
    v14 = v51;
    *(_QWORD *)v13 = v51;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      v14 = *(_QWORD *)v13;
      if ((v16 & 1) == 0)
      {
        v14 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v14;
      }
    }
    *(_BYTE *)(v13 + 8) = v14 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v52, v13);
    v59[0] = v52;
    v52 = 0uLL;
    v17 = operator new();
    MEMORY[0x2348B274C](&v49, "endTimeCode");
    v18 = v49;
    *(_QWORD *)v17 = v49;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      v18 = *(_QWORD *)v17;
      if ((v20 & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v17 = v18;
      }
    }
    *(_BYTE *)(v17 + 8) = v18 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v50, v17);
    v59[1] = v50;
    v50 = 0uLL;
    v21 = operator new();
    MEMORY[0x2348B274C](&v47, "timeCodesPerSecond");
    v22 = v47;
    *(_QWORD *)v21 = v47;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      v22 = *(_QWORD *)v21;
      if ((v24 & 1) == 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v21 = v22;
      }
    }
    *(_BYTE *)(v21 + 8) = v22 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v48, v21);
    v59[2] = v48;
    v48 = 0uLL;
    v25 = operator new();
    MEMORY[0x2348B274C](&v45, "framesPerSecond");
    v26 = v45;
    *(_QWORD *)v25 = v45;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      v26 = *(_QWORD *)v25;
      if ((v28 & 1) == 0)
      {
        v26 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v25 = v26;
      }
    }
    *(_BYTE *)(v25 + 8) = v26 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v46, v25);
    v59[3] = v46;
    v46 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v53, v59, 4uLL);
    memset(v44, 0, sizeof(v44));
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v12, v53, v44);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v54, v12);
    v60 = v54;
    v54 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v55, &v60, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v11, v55);
    v29 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v56, v11);
    _MergedGlobals_26 = v56;
    *(_QWORD *)algn_255E549D8 = v57;
    v56 = 0;
    v57 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v29);
    v58 = (void ***)v55;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v60);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v54);
    v58 = v44;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v44[0] = (void **)v53;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v44);
    for (i = 3; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v59[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    if ((v45 & 7) != 0)
    {
      v31 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    if ((v47 & 7) != 0)
    {
      v33 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    if ((v49 & 7) != 0)
    {
      v35 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
    if ((v51 & 7) != 0)
    {
      v37 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    __cxa_guard_release(&qword_255E549E0);
  }
  v5 = *(std::__shared_weak_count **)algn_255E549D8;
  v39[0] = _MergedGlobals_26;
  v39[1] = *(_QWORD *)algn_255E549D8;
  if (*(_QWORD *)algn_255E549D8)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E549D8 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v42, (uint64_t)__p, v39);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v41 < 0)
    operator delete(__p[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  *(_QWORD *)this = &off_24FDF2800;
  return this;
}

void sub_230095928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v46 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  *(_QWORD *)(v46 - 184) = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 184));
  a23 = &a42;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  for (i = 48; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v46 - 176 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if ((a26 & 7) != 0)
  {
    v49 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if ((a30 & 7) != 0)
  {
    v51 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if ((a34 & 7) != 0)
  {
    v53 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if ((a38 & 7) != 0)
  {
    v55 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  MEMORY[0x2348B4E1C](v45, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E549E0);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void realityio::StageTimeCodeBuilder::~StageTimeCodeBuilder(realityio::StageTimeCodeBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t RIOBuilderInputsDescriptorGetTypeID()
{
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  return RIOBuilderInputsDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderInputsDescriptorCreateWithInputDescriptors(const __CFArray *a1)
{
  char *v2;
  CFIndex Count;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t Instance;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  char *v30;
  std::__shared_weak_count *v31;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v31 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 24) = 0u;
  v30 = v2 + 24;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v6 = ValueAtIndex[2];
      v7 = (std::__shared_weak_count *)ValueAtIndex[3];
      v28 = v6;
      v29 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = (uint64_t)v30;
        v27 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      else
      {
        v10 = (uint64_t)v30;
        v27 = 0;
      }
      v26 = v6;
      realityio::InputsDescriptor::addInputDescriptor(v10, &v26);
      v12 = v27;
      if (v27)
      {
        v13 = (unint64_t *)&v27->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v29;
      if (v29)
      {
        v16 = (unint64_t *)&v29->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  Instance = _CFRuntimeCreateInstance();
  v19 = Instance;
  v20 = v31;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = v30;
    *(_QWORD *)(Instance + 24) = v20;
    if (!v20)
      return v19;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  else if (!v31)
  {
    return v19;
  }
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v19;
}

void sub_230095F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderInputsDescriptorCopyInputDescriptors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[3];
  std::__shared_weak_count *v20;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v19[2] = v3;
    v20 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v7 = *(_QWORD **)(v3 + 16);
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)v7[3];
          v9 = (_QWORD *)v7[4];
          while (v8 != v9)
          {
            v10 = (std::__shared_weak_count *)v8[1];
            v19[0] = *v8;
            v19[1] = v10;
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 1, v11));
            }
            v13 = (const void *)RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v19);
            CFArrayAppendValue(Mutable, v13);
            CFRelease(v13);
            if (v10)
            {
              v14 = (unint64_t *)&v10->__shared_owners_;
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 += 2;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
        v4 = v20;
      }
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_2300960BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

__CFDictionary *RIOBuilderInputsDescriptorCopyInputDescriptorsByName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Mutable;
  __CFDictionary *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  const CFArrayCallBacks *v9;
  uint64_t EmptyString;
  const char *v11;
  CFStringRef v12;
  __CFArray *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v25[3];
  std::__shared_weak_count *v26;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v3 = Mutable;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    v25[2] = v4;
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (v4)
    {
      v8 = (_QWORD *)(v4 + 16);
      v9 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
      while (1)
      {
        v8 = (_QWORD *)*v8;
        if (!v8)
          break;
        if ((v8[2] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (v8[2] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
        if (*(char *)(EmptyString + 23) >= 0)
          v11 = (const char *)EmptyString;
        else
          v11 = *(const char **)EmptyString;
        v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
        v13 = CFArrayCreateMutable(0, 0, v9);
        v14 = (_QWORD *)v8[3];
        v15 = (_QWORD *)v8[4];
        while (v14 != v15)
        {
          v16 = (std::__shared_weak_count *)v14[1];
          v25[0] = *v14;
          v25[1] = v16;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = (const void *)RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v25);
          CFArrayAppendValue(v13, v19);
          CFRelease(v19);
          if (v16)
          {
            v20 = (unint64_t *)&v16->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v14 += 2;
        }
        CFDictionaryAddValue(v3, v12, v13);
        CFRelease(v12);
        CFRelease(v13);
      }
      v5 = v26;
    }
    if (v5)
    {
      v22 = (unint64_t *)&v5->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_23009633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderInputsDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderInputsDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputsDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputsDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputsDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderInputsDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputsDescriptor %p>"), a1);
}

uint64_t RIOPxrUsdPrimFlagsPredicateGetTypeID()
{
  if (qword_255E549F0 != -1)
    dispatch_once(&qword_255E549F0, &__block_literal_global_17);
  return _MergedGlobals_27;
}

double RIOPxrUsdPrimFlagsPredicateCreate()
{
  double result;
  uint64_t v1;
  __n128 v2;
  char v3;

  v2 = 0uLL;
  v3 = 0;
  v1 = 0;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

__n128 RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(__n128 *a1, uint64_t *a2)
{
  uint64_t Instance;
  __n128 result;
  uint64_t v6;
  unint64_t v7;

  if (qword_255E549F0 != -1)
    dispatch_once(&qword_255E549F0, &__block_literal_global_17);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = *a2;
    result = *a1;
    v7 = a1[1].n128_u64[0];
    *(__n128 *)(Instance + 16) = *a1;
    *(_QWORD *)(Instance + 32) = v7;
    *(_QWORD *)(Instance + 40) = v6;
  }
  return result;
}

double RIOPxrUsdPrimFlagsConjunctionPredicateCreate()
{
  double result;
  uint64_t v1;
  __n128 v2;
  char v3;

  v2 = 0uLL;
  v3 = 0;
  v1 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDisjunctionPredicateCreate()
{
  double result;
  uint64_t v1;
  __n128 v2;
  char v3;

  v2 = 0uLL;
  v3 = 1;
  v1 = 2;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsPredicateCreateWithTerm(unint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  __n128 v6;
  char v7;

  v2 = RIOPxrUsdTermToUsdTerm(a1, a2);
  v7 = 0;
  if (HIDWORD(v2))
    v3 = 0;
  else
    v3 = 1 << v2;
  v6.n128_u64[0] = 1 << v2;
  v6.n128_u64[1] = v3;
  v5 = 0;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v6, &v5).n128_u64[0];
  return result;
}

unint64_t RIOPxrUsdTermToUsdTerm(unint64_t a1, char a2)
{
  unint64_t v2;

  v2 = a1;
  if (a1 < 9)
    v2 = a1;
  return v2 | ((unint64_t)(a2 & 1) << 32);
}

double RIOPxrUsdPrimFlagsPredicateCreateTautology()
{
  double result;
  uint64_t v1;
  __n128 v2;
  char v3;

  v2 = 0uLL;
  v3 = 0;
  v1 = 0;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsPredicateCreateContradiction()
{
  double result;
  uint64_t v1;
  __n128 v2;
  char v3;

  v2 = 0uLL;
  v3 = 1;
  v1 = 0;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

_QWORD *RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  if (a2)
    v6 = 0;
  else
    v6 = 0x2000;
  if (a2)
    v7 = 0x2000;
  else
    v7 = 0;
  if (qword_255E549F0 != -1)
    dispatch_once(&qword_255E549F0, &__block_literal_global_17);
  result = (_QWORD *)_CFRuntimeCreateInstance();
  if (result)
  {
    v9 = *(_QWORD *)(a1 + 40);
    result[2] = v4 & 0xFFFFFFFFFFFFDFFFLL | v6;
    result[3] = v3 & 0xFFFFFFFFFFFFDFFFLL | v7;
    result[4] = v5;
    result[5] = v9;
  }
  return result;
}

uint64_t RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
    return 0;
  else
    return (*(unsigned __int8 *)(a1 + 25) >> 5) & 1;
}

uint64_t RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim()
{
  return pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()();
}

double RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4;
  __n128 *v5;
  double result;
  __n128 v7;
  unint64_t v8;
  __int128 v9;
  char v10;

  v4 = RIOPxrUsdTermToUsdTerm(a2, a3);
  v9 = *(_OWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 32);
  v5 = (__n128 *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v9, v4);
  v7 = *v5;
  v8 = v5[1].n128_u64[0];
  *(_QWORD *)&v9 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v7, (uint64_t *)&v9).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4;
  __n128 *v5;
  double result;
  __n128 v7;
  unint64_t v8;
  __int128 v9;
  char v10;

  v4 = RIOPxrUsdTermToUsdTerm(a2, a3);
  v9 = *(_OWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 32);
  v5 = (__n128 *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v9, v4);
  v7 = *v5;
  v8 = v5[1].n128_u64[0];
  *(_QWORD *)&v9 = 2;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v7, (uint64_t *)&v9).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsConjunctionPredicateNegation()
{
  double result;
  uint64_t v1;
  __n128 v2;

  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!();
  v1 = 2;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation()
{
  double result;
  uint64_t v1;
  __n128 v2;

  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!();
  v1 = 2;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDisjunctionPredicateNegation()
{
  double result;
  uint64_t v1;
  __n128 v2;

  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!();
  v1 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation()
{
  double result;
  uint64_t v1;
  __n128 v2;

  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!();
  v1 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDefaultPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  __n128 *UsdPrimDefaultPredicate;
  double result;
  uint64_t v3;

  UsdPrimDefaultPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  v3 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimDefaultPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDefaultPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  __n128 *UsdPrimDefaultPredicate;
  double result;
  uint64_t v3;

  UsdPrimDefaultPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  v3 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimDefaultPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  __n128 *UsdPrimAllPrimsPredicate;
  double result;
  uint64_t v3;

  UsdPrimAllPrimsPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(a1);
  v3 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimAllPrimsPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  __n128 *UsdPrimAllPrimsPredicate;
  double result;
  uint64_t v3;

  UsdPrimAllPrimsPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(a1);
  v3 = 1;
  *(_QWORD *)&result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimAllPrimsPredicate, &v3).n128_u64[0];
  return result;
}

BOOL _RIOPxrUsdPrimFlagsPredicateCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdPrimFlagsPredicateCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdPrimFlagsPredicateCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdPrimFlagsPredicate %p>"), a1);
}

CFStringRef _RIOPxrUsdPrimFlagsPredicateCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdPrimFlagsPredicate %p>"), a1);
}

uint64_t realityio::SpatialAudioFileAssetBuilder::kOutputName(realityio::SpatialAudioFileAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "audio_file_asset");
    realityio::SpatialAudioFileAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SpatialAudioFileAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_230096AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SpatialAudioFileAssetBuilder *realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(realityio::SpatialAudioFileAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "SpatialAudioFileAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpatialAudioFileAssetBuilderIdentifier);
  realityio::generateSpatialAudioDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF29F0;
  v21 = v20;
  v18[0] = &off_24FDF2A70;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF2978;
  *((_QWORD *)this + 35) = 0;
  return this;
}

void sub_230096CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::SpatialAudioFileAssetBuilder::run(realityio::SpatialAudioFileAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  uint64_t v7;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v9;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v16;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v23;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v24;
  void *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t result;
  unsigned int *v37;
  unsigned int *v38;
  std::string v39;
  void *__p;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  realityio::Inputs *v48;
  void *v49;
  unsigned int *v50;
  char v51;
  void **v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  v43 = 0;
  v7 = realityio::Inputs::assetManager(a2);
  v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v48 + 5) + 16) + 16);
  v43 = v7;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v6);
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v49);
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 24), (uint64_t)&v49, (pxrInternal__aapl__pxrReserved__::UsdObject *)v44, &v39);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v49);
  v9 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  v10 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v44, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v9 + 104), (uint64_t)&v49);
  if ((_BYTE)v49)
  {
    v38 = v50;
    if ((v50 & 7) == 0)
      goto LABEL_21;
    v11 = (unsigned int *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
  }
  else
  {
    v13 = (unsigned int *)*((_QWORD *)v10 + 11);
    v38 = v13;
    if ((v13 & 7) == 0)
      goto LABEL_21;
    v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
  }
  if ((v12 & 1) == 0)
    v38 = v11;
LABEL_21:
  if ((_BYTE)v49)
  {
    if ((v50 & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
  else if (v53 < 0)
  {
    operator delete(v52);
  }
  v16 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  v17 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v44, v16, (uint64_t)&v49);
  if ((_BYTE)v49)
  {
    v37 = v50;
    if ((v50 & 7) == 0)
      goto LABEL_42;
    v18 = (unsigned int *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
  }
  else
  {
    v20 = (unsigned int *)*((_QWORD *)v17 + 15);
    v37 = v20;
    if ((v20 & 7) == 0)
      goto LABEL_42;
    v18 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
  }
  if ((v19 & 1) == 0)
    v37 = v18;
LABEL_42:
  if ((_BYTE)v49)
  {
    if ((v50 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else if (v53 < 0)
  {
    operator delete(v52);
  }
  v23 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)v44, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v23 + 128), (uint64_t)&v49);
  if (!(_BYTE)v49 && v53 < 0)
    operator delete(v52);
  v24 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v24)
    v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)v44, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v24 + 8), (uint64_t)&v49);
  if (!(_BYTE)v49 && v53 < 0)
    operator delete(v52);
  v49 = 0;
  v25 = (void *)*((_QWORD *)this + 35);
  if (v25)
  {
    *((_QWORD *)this + 35) = 0;
    v49 = v25;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v49);
  v26 = *((_QWORD *)v48 + 6);
  v27 = (void **)operator new(0x48uLL);
  *v27 = &off_24FDF2AF0;
  v27[1] = &v42;
  v27[2] = &v39;
  v27[3] = this;
  v27[4] = &v43;
  v27[5] = v44;
  v27[6] = &v48;
  v27[7] = &v37;
  v27[8] = &v38;
  v52 = v27;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 16))(v26, &v49);
  v28 = v52;
  if (v52 == &v49)
  {
    v29 = 4;
    v28 = &v49;
  }
  else
  {
    if (!v52)
      goto LABEL_66;
    v29 = 5;
  }
  (*((void (**)(void))*v28 + v29))();
LABEL_66:
  if ((v37 & 7) != 0)
  {
    v30 = (unsigned int *)((unint64_t)v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((v38 & 7) != 0)
  {
    v32 = (unsigned int *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  if (v41 < 0)
    operator delete(__p);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if ((v47 & 7) != 0)
  {
    v34 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
  result = v45;
  if (v45)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
  return result;
}

void sub_2300971EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((a3 & 7) != 0)
  {
    v6 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>@<X0>(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdObject *a3@<X2>, std::string *a4@<X8>)
{
  std::string *v6;
  const std::string::value_type **v7;
  _BYTE v9[8];
  __int128 v10;
  std::string::size_type v11;
  const std::string::value_type *v12[2];
  char v13;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a3, a1, (uint64_t)v9);
  if (!v9[0])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    v6 = a4 + 1;
    if (*(char *)(a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
      return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
    }
    v7 = (const std::string::value_type **)(a2 + 24);
    goto LABEL_13;
  }
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v10;
    a4->__r_.__value_.__r.__words[2] = v11;
  }
  v6 = a4 + 1;
  if ((v13 & 0x80000000) == 0)
  {
    v7 = v12;
LABEL_13:
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v6->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[2];
    return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
  }
  std::string::__init_copy_ctor_external(v6, v12[0], (std::string::size_type)v12[1]);
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_2300973CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::SpatialAudioFileAssetBuilder::clear(realityio::SpatialAudioFileAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  uint64_t v4;
  realityio::SpatialAudioFileAssetBuilder *v5;
  std::__shared_weak_count *v6;
  std::mutex *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  realityio::SpatialAudioFileAssetBuilder *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void **v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v22;
  _QWORD v23[3];
  std::string __p;

  v23[0] = 0;
  v4 = *((_QWORD *)this + 35);
  if (v4)
  {
    *((_QWORD *)this + 35) = 0;
    v23[0] = v4;
  }
  v5 = (realityio::SpatialAudioFileAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(v23);
  v7 = (std::mutex *)*((_QWORD *)this + 2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (const void **)realityio::SpatialAudioFileAssetBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<REAsset *>(v7, v10, (uint64_t)v23);
  v12 = LOBYTE(v23[0]);
  if (!LOBYTE(v23[0]))
  {
    v11 = (realityio::SpatialAudioFileAssetBuilder *)&v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v7 = (std::mutex *)v22.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (!LOBYTE(v23[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = __p;
      v7 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v6)
    goto LABEL_16;
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v12)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v12)
    {
LABEL_17:
      v16 = *((_QWORD *)this + 2);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v23[0] = v16;
      v23[1] = v15;
      if (v15)
      {
        v17 = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (const void **)realityio::SpatialAudioFileAssetBuilder::kOutputName(v11);
      std::mutex::lock((std::mutex *)(v16 + 64));
      if (v16 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v16 + 40, v19))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v16 + 40), v19);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v16, (unsigned __int8 *)v19);
      std::mutex::unlock((std::mutex *)(v16 + 64));
      if (v15)
      {
        v20 = (unint64_t *)&v15->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    }
  }
  if (v2 < 0)
    operator delete(v7);
}

void sub_2300975E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a17 && a25 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::SpatialAudioFileAssetBuilder::~SpatialAudioFileAssetBuilder(realityio::SpatialAudioFileAssetBuilder *this)
{
  realityio::SpatialAudioFileAssetBuilder::~SpatialAudioFileAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::SpatialAudioFileAssetBuilder *v2;
  uint64_t v3;
  realityio::SpatialAudioFileAssetBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDF2978;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 35);
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::SpatialAudioFileAssetBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::SpatialAudioFileAssetBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::SpatialAudioFileAssetBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::SpatialAudioFileAssetBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::SpatialAudioFileAssetBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::SpatialAudioFileAssetBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF29F0;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF29F0;
}

char *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF2A70;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2A70;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  std::string::size_type *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::SpatialAudioFileAssetBuilder::kOutputName((realityio::SpatialAudioFileAssetBuilder *)v2);
  Data = (std::string::size_type *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = (std::string::size_type *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, Data, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300979DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230097D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230097ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  __int128 *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  std::string::size_type v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(&v26, v6);
        *(_BYTE *)a3 = 1;
        *(std::string *)(a3 + 8) = v26;
        *(_OWORD *)(a3 + 32) = v27;
        *(_QWORD *)(a3 + 48) = v28;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = (__int128 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v13);
          realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(&v26, v14);
          *(_BYTE *)a3 = 1;
          *(std::string *)(a3 + 8) = v26;
          *(_OWORD *)(a3 + 32) = v27;
          *(_QWORD *)(a3 + 48) = v28;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          v25 = v27;
          *(_QWORD *)(a3 + 24) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v27 + 7);
          LOBYTE(v25) = HIBYTE(v27);
          v27 = 0uLL;
          v26.__r_.__value_.__r.__words[2] = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
      v23 = v27;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v27 + 7);
      LOBYTE(v23) = HIBYTE(v27);
      v27 = 0uLL;
      v26.__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v32) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v30, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v29, *a2);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v29;
      else
        v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        size = v29.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v32 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
      v21 = v27;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v27 + 7);
      LOBYTE(v21) = HIBYTE(v27);
      v27 = 0uLL;
      v26.__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v30.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  v9 = v27;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v27 + 7);
  LOBYTE(v9) = HIBYTE(v27);
  v27 = 0uLL;
  v26.__r_.__value_.__r.__words[2] = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
}

void sub_23009832C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v26 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v26 - 56));
  _Unwind_Resume(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::string *realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2300984B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)a1)
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
    {
      v2 = (void **)(a1 + 8);
LABEL_8:
      operator delete(*v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    v2 = (void **)(a1 + 24);
    goto LABEL_8;
  }
  return a1;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDF2AF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF2AF0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  pxrInternal__aapl__pxrReserved__ *AudioService;
  pxrInternal__aapl__pxrReserved__ *Extension;
  uint64_t v5;
  __int128 v6;
  CFIndex v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t *v13;
  realityio *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  std::string *p_str;
  char *PrimPath;
  uint64_t String;
  std::string::size_type v21;
  std::string::size_type v22;
  unsigned int *v23;
  unsigned int v24;
  int *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::string::size_type v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  realityio::SpatialAudioFileAssetBuilder *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  __int128 *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string::size_type v73;
  std::string __str;
  CFTypeRef cf;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *__p;
  char v79;
  std::string v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 24);
  REEngineGetServiceLocator();
  AudioService = (pxrInternal__aapl__pxrReserved__ *)REServiceLocatorGetAudioService();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(AudioService);
  Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
  v5 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
  else
    v80 = *(std::string *)(v5 + 24);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (v76)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v76 + 24))(&v80);
    v6 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
    cf = 0;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
    cf = CFDataCreate(0, (const UInt8 *)v6, v7);
    v8 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v8 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
    else
      __str = *(std::string *)(v8 + 24);
    v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_23;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_23;
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    v11 = size - 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + v11) != 93)
        goto LABEL_23;
      v9 = __str.__r_.__value_.__l.__size_;
    }
    else if (__str.__r_.__value_.__s.__data_[v11] != 93)
    {
      goto LABEL_23;
    }
    std::string::basic_string(&v80, &__str, 0, v9 - 1, (std::allocator<char> *)v87);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v80;
LABEL_23:
    v12 = REAudioFileAssetCreateWithMappedDataNullable();
    v13 = v2 + 35;
    if (v2[35])
      RERelease();
    *v13 = v12;
    v14 = (realityio *)cf;
    if (cf)
    {
      CFRelease(cf);
      v12 = *v13;
    }
    cf = 0;
    if (!v12)
    {
      v17 = *(id *)(realityio::logObjects(v14) + 24);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40));
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
        if (*(char *)(String + 23) >= 0)
          v21 = String;
        else
          v21 = *(_QWORD *)String;
        LODWORD(v80.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
        WORD2(v80.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 6) = v21;
        _os_log_impl(&dword_22FF26000, v17, OS_LOG_TYPE_DEFAULT, "Could not find or parse audio file '%s' on prim '%s'", (uint8_t *)&v80, 0x16u);
      }

      (*(void (**)(uint64_t *, _QWORD))(*v2 + 72))(v2, **(_QWORD **)(a1 + 48));
      goto LABEL_106;
    }
    REAssetSetMetadataString();
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 48) + 40) + 16) + 40);
    if (v15)
      realityio::LiveSceneManager::queueForDeferredAssetLoad(v15, v2 + 35);
    v73 = *v13;
    if (v73)
    {
      RERetain();
      v16 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 40);
      v80.__r_.__value_.__r.__words[0] = v73;
      if (v73)
        RERetain();
    }
    else
    {
      v16 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 40);
      v80.__r_.__value_.__r.__words[0] = 0;
    }
    v80.__r_.__value_.__l.__size_ = (std::string::size_type)AudioService;
    v22 = **(_QWORD **)(a1 + 56);
    v80.__r_.__value_.__r.__words[2] = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      if ((v24 & 1) == 0)
        v80.__r_.__value_.__r.__words[2] &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = *(int **)(a1 + 40);
    v81 = *v25;
    v26 = *((_QWORD *)v25 + 1);
    v82 = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 48);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, v25 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v84, v25 + 5);
    v29 = *((_QWORD *)v25 + 3);
    v85 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        v85 &= 0xFFFFFFFFFFFFFFF8;
    }
    v32 = **(_QWORD **)(a1 + 64);
    v86 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        v86 &= 0xFFFFFFFFFFFFFFF8;
    }
    v88 = 0;
    v35 = (char *)operator new(0x48uLL);
    v36 = v35;
    *(_QWORD *)v35 = &off_24FDF2B60;
    v37 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)(v35 + 8) = v37;
    v38 = v80.__r_.__value_.__r.__words[2];
    *((_QWORD *)v35 + 3) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        *((_QWORD *)v35 + 3) = v39;
    }
    *((_DWORD *)v35 + 8) = v81;
    v41 = v82;
    *((_QWORD *)v35 + 5) = v82;
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 48);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v35 + 12, &v83);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v36 + 13, &v84);
    v44 = v85;
    *((_QWORD *)v36 + 7) = v85;
    if ((v44 & 7) != 0)
    {
      v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 2, v45));
      if ((v46 & 1) == 0)
        *((_QWORD *)v36 + 7) &= 0xFFFFFFFFFFFFFFF8;
    }
    v47 = v86;
    *((_QWORD *)v36 + 8) = v86;
    if ((v47 & 7) != 0)
    {
      v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 2, v48));
      if ((v49 & 1) == 0)
        *((_QWORD *)v36 + 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    v88 = v36;
    realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v16, (uint64_t)v87);
    v50 = v88;
    if (v88 == v87)
    {
      v51 = 4;
      v50 = v87;
    }
    else
    {
      if (!v88)
      {
LABEL_84:
        if ((v86 & 7) != 0)
        {
          v52 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
          do
            v53 = __ldxr(v52);
          while (__stlxr(v53 - 2, v52));
        }
        if ((v85 & 7) != 0)
        {
          v54 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
        if (v82)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v82);
        if ((v80.__r_.__value_.__s.__data_[16] & 7) != 0)
        {
          v56 = (unsigned int *)(v80.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v80);
        v72 = *v13;
        if (v72)
          RERetain();
        realityio::Builder::addAsset(v2, &v72, 0);
        v58 = (realityio::SpatialAudioFileAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v72);
        v60 = v2[2];
        v59 = (std::__shared_weak_count *)v2[3];
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v62 = __ldxr(p_shared_owners);
          while (__stxr(v62 + 1, p_shared_owners));
        }
        v63 = (__int128 *)realityio::SpatialAudioFileAssetBuilder::kOutputName(v58);
        v71 = *v13;
        realityio::Outputs::storeValue<REAsset *>(v60, v63, &v71);
        if (v59)
        {
          v64 = (unint64_t *)&v59->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v73);
LABEL_106:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        if (*((_QWORD *)&v6 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
          }
        }
        goto LABEL_113;
      }
      v51 = 5;
    }
    (*(void (**)(void))(*v50 + 8 * v51))();
    goto LABEL_84;
  }
LABEL_113:
  v68 = v77;
  if (v77)
  {
    v69 = (unint64_t *)&v77->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v79 < 0)
    operator delete(__p);
}

void sub_230098D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;

  if (a21 < 0)
    operator delete(__p);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a23);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v43 = a25;
  if (a25)
  {
    v44 = (unint64_t *)&a25->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::storeValue<REAsset *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF2BE0;
  v7[3] = &off_24FDF2C30;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300990A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *a1 = &off_24FDF2B60;
  v2 = a1[8];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[7];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  v8 = a1[5];
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  v9 = a1[3];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 1);
  return a1;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *a1 = &off_24FDF2B60;
  v2 = a1[8];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[7];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  v8 = a1[5];
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  v9 = a1[3];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x48uLL);
  *v2 = &off_24FDF2B60;
  std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_230099280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2B60;
  return std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

_QWORD *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(_QWORD *a1)
{
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v3;
  NSObject *v4;
  unint64_t v5;
  const char *v6;
  char *PrimPath;
  uint64_t String;
  uint64_t v9;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v10;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v11;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v12;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v13;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v14;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v15;
  _BOOL4 v16;
  NSObject *v17;
  _BOOL4 v18;
  unint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  REAudioFileAssetCompleteLoadWithService();
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 15) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_11;
  v3 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v3)
    v3 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_11:
    REAudioFileAssetSetInputMode();
  }
  else
  {
    v4 = *(id *)(realityio::logObjects(v3) + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[3] & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0)
          v6 = *(const char **)v6;
      }
      else
      {
        v6 = "";
      }
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      if (*(char *)(String + 23) >= 0)
        v9 = String;
      else
        v9 = *(_QWORD *)String;
      v27 = 136315394;
      v28 = v6;
      v29 = 2080;
      v30 = v9;
      _os_log_impl(&dword_22FF26000, v4, OS_LOG_TYPE_DEFAULT, "invalid audio auralMode '%s' on prim path '%s'", (uint8_t *)&v27, 0x16u);
    }

  }
  v10 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 11) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_40;
  v11 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v11)
    v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 12) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_40;
  v12 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_40;
  v13 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_40;
  v14 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_40:
    REAudioFileAssetSetLoopCount();
  }
  else
  {
    v15 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    v16 = (a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8);
    v17 = *(id *)(realityio::logObjects(v15) + 24);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v18)
      {
        v21 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
        v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
        if (*(char *)(v22 + 23) >= 0)
          v23 = v22;
        else
          v23 = *(_QWORD *)v22;
        v27 = 136315138;
        v28 = (const char *)v23;
        _os_log_impl(&dword_22FF26000, v17, OS_LOG_TYPE_DEFAULT, "deprecated audio playbackMode 'loop' found on prim path '%s'", (uint8_t *)&v27, 0xCu);
      }

      REAudioFileAssetSetLoopCount();
    }
    else
    {
      if (v18)
      {
        v19 = a1[8] & 0xFFFFFFFFFFFFFFF8;
        if (v19)
        {
          v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0)
            v20 = *(const char **)v20;
        }
        else
        {
          v20 = "";
        }
        v24 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
        v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v24);
        if (*(char *)(v25 + 23) >= 0)
          v26 = v25;
        else
          v26 = *(_QWORD *)v25;
        v27 = 136315394;
        v28 = v20;
        v29 = 2080;
        v30 = v26;
        _os_log_impl(&dword_22FF26000, v17, OS_LOG_TYPE_DEFAULT, "invalid audio playbackMode '%s' on prim path '%s'", (uint8_t *)&v27, 0x16u);
      }

    }
  }
}

void sub_2300996EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v4)
    RERetain();
  *(_QWORD *)(a1 + 8) = a2[1];
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 40), (_DWORD *)a2 + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), (_DWORD *)a2 + 11);
  v11 = a2[6];
  *(_QWORD *)(a1 + 48) = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = a2[7];
  *(_QWORD *)(a1 + 56) = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

_QWORD *std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = a1[7];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[6];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  v8 = a1[4];
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  v9 = a1[2];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REAsset *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF2BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REAsset *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF2BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<REAsset *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t realityio::Inputs::prim(realityio::Inputs *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;

  v1 = (realityio::Inputs *)((char *)this + 32);
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)this + 8));
  return pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v2, v1);
}

void realityio::Inputs::createStandardTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string::size_type *a5@<X8>)
{
  std::string v10;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v10 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    __p = *(std::string *)(a3 + 24);
  realityio::TextureBuilder::createStandardTextureAsset(a1, a2, (uint64_t)&v10, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_230099A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::Inputs::createCubeMapTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string::size_type *a4@<X8>)
{
  std::string v8;
  std::string __p;
  void *v10[2];
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  __int16 v20;
  void *v21;
  char v22;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v10);
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  v16 = 0;
  v17 = realityio::TextureSwizzleChannels::kDefault;
  v18 = 2;
  v19 = 0;
  v20 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  v18 = 5;
  v16 = 4;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v8 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    __p = *(std::string *)(a3 + 24);
  realityio::Inputs::createStandardTextureAsset(a1, a2, (uint64_t)&v8, (uint64_t)v10, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_230099C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a14 < 0)
    operator delete(__p);
  realityio::TextureImportOperationSettings::~TextureImportOperationSettings(&a19);
  _Unwind_Resume(a1);
}

void realityio::TextureImportOperationSettings::~TextureImportOperationSettings(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t realityio::Inputs::assetManager(realityio::Inputs *this)
{
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 16) && REEngineGetServiceLocator())
    JUMPOUT(0x2348B1264);
  return 0;
}

realityio::IBLCubeMapAssetBuilder *realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(realityio::IBLCubeMapAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  __int128 v27;
  _QWORD *v28[3];
  _QWORD *v29[3];
  __int128 v30;
  _QWORD *v31[3];
  _QWORD *v32[3];
  __int128 v33;
  _QWORD *v34[3];
  uint64_t v35;
  uint64_t v36;
  void **v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v25, "IBLCubeMapAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kIBLCubeMapAssetBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54A08);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54A08))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v32, 0, sizeof(v32));
    v17 = (_BYTE *)operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    memset(v29, 0, sizeof(v29));
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v20 + 144));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v27, (uint64_t)v19);
    v42 = v27;
    v27 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v28, &v42, 1uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t *)Data + 6, v29, v28);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v30, (uint64_t)v17);
    v43 = v30;
    v30 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v31, &v43, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v32, v31);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v33, v16);
    v44 = v33;
    v33 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v34, &v44, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v34);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v35, v15);
    _MergedGlobals_28 = v35;
    unk_255E54A00 = v36;
    v35 = 0;
    v36 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    v37 = (void **)v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    v37 = (void **)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    v37 = (void **)v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
    v28[0] = v29;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    v31[0] = v32;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
    __cxa_guard_release(&qword_255E54A08);
  }
  v21 = _MergedGlobals_28;
  v22 = (std::__shared_weak_count *)unk_255E54A00;
  if (unk_255E54A00)
  {
    v5 = (unint64_t *)(unk_255E54A00 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v41 = v40;
  v38[0] = &off_24FDF2D68;
  v39 = v38;
  v40[0] = &off_24FDF2CE8;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v25, (uint64_t)__p, &v21, (uint64_t)v40, (uint64_t)v38);
  v7 = v39;
  if (v39 == v38)
  {
    v8 = 4;
    v7 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v41;
  if (v41 == v40)
  {
    v10 = 4;
    v9 = v40;
    goto LABEL_14;
  }
  if (v41)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v24 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  *(_QWORD *)this = &off_24FDF2C70;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::IBLCubeMapAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23009A16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  MEMORY[0x2348B4E1C](v40, 0x10A1C40F82F910ELL);
  a33 = &a36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  MEMORY[0x2348B4E1C](v39, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v41, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54A08);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLCubeMapAssetBuilder::kOutputName(realityio::IBLCubeMapAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "iblCubeMapAsset");
    realityio::IBLCubeMapAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::IBLCubeMapAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23009A478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLCubeMapAssetBuilder::run(realityio::IBLCubeMapAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v6;
  void *v7;
  uint64_t ServiceLocator;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t result;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string __p;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  realityio::Inputs *v39;
  void *v40[2];
  char v41;
  void **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v35, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 144));
  v6 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v40);
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v6 + 144), (uint64_t)v40, (pxrInternal__aapl__pxrReserved__::UsdObject *)v35, &v29);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v28 = __p;
  v40[0] = 0;
  v7 = (void *)*((_QWORD *)this + 35);
  if (v7)
  {
    *((_QWORD *)this + 35) = 0;
    v40[0] = v7;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v40);
  ServiceLocator = REEngineGetServiceLocator();
  v27 = MEMORY[0x2348B1264]();
  v9 = (void **)MEMORY[0x2348B1288](ServiceLocator);
  v26 = v9;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v28.__r_.__value_.__l.__size_)
      goto LABEL_23;
  }
  else if (!*((_BYTE *)&v28.__r_.__value_.__s + 23))
  {
    goto LABEL_23;
  }
  v10 = *((_QWORD *)v39 + 6);
  v11 = (void **)operator new(0x48uLL);
  *v11 = &off_24FDF2DE8;
  v11[1] = &v39;
  v11[2] = &v31;
  v11[3] = &v29;
  v11[4] = &v28;
  v11[5] = &v27;
  v11[6] = &v26;
  v11[7] = this;
  v11[8] = v35;
  v42 = v11;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 16))(v10, v40);
  v9 = v42;
  if (v42 == v40)
  {
    v12 = 4;
    v9 = v40;
  }
  else
  {
    if (!v42)
      goto LABEL_23;
    v12 = 5;
  }
  v9 = (void **)(*((uint64_t (**)(void))*v9 + v12))();
LABEL_23:
  v14 = (void *)*((_QWORD *)this + 2);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v40[0] = v14;
  v40[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (__int128 *)realityio::IBLCubeMapAssetBuilder::kOutputName((realityio::IBLCubeMapAssetBuilder *)v9);
  v25 = *((_QWORD *)this + 35);
  realityio::Outputs::storeValue<REAsset *>((uint64_t)v14, v17, &v25);
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((v34 & 7) != 0)
  {
    v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  if (v32)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
  if ((v38 & 7) != 0)
  {
    v22 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  result = v36;
  if (v36)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  return result;
}

void sub_23009A7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v26 - 128));
  _Unwind_Resume(a1);
}

void sub_23009A8AC()
{
  JUMPOUT(0x23009A890);
}

void sub_23009A8B4()
{
  JUMPOUT(0x23009A888);
}

void realityio::IBLCubeMapAssetBuilder::clear(realityio::IBLCubeMapAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  uint64_t v4;
  realityio::IBLCubeMapAssetBuilder *v5;
  std::__shared_weak_count *v6;
  std::mutex *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  realityio::IBLCubeMapAssetBuilder *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void **v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v22;
  _QWORD v23[3];
  std::string __p;

  v23[0] = 0;
  v4 = *((_QWORD *)this + 35);
  if (v4)
  {
    *((_QWORD *)this + 35) = 0;
    v23[0] = v4;
  }
  v5 = (realityio::IBLCubeMapAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(v23);
  v7 = (std::mutex *)*((_QWORD *)this + 2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (const void **)realityio::IBLCubeMapAssetBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<REAsset *>(v7, v10, (uint64_t)v23);
  v12 = LOBYTE(v23[0]);
  if (!LOBYTE(v23[0]))
  {
    v11 = (realityio::IBLCubeMapAssetBuilder *)&v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v7 = (std::mutex *)v22.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (!LOBYTE(v23[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = __p;
      v7 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v6)
    goto LABEL_16;
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v12)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (v12)
    {
LABEL_17:
      v16 = *((_QWORD *)this + 2);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v23[0] = v16;
      v23[1] = v15;
      if (v15)
      {
        v17 = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (const void **)realityio::IBLCubeMapAssetBuilder::kOutputName(v11);
      std::mutex::lock((std::mutex *)(v16 + 64));
      if (v16 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v16 + 40, v19))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v16 + 40), v19);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v16, (unsigned __int8 *)v19);
      std::mutex::unlock((std::mutex *)(v16 + 64));
      if (v15)
      {
        v20 = (unint64_t *)&v15->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    }
  }
  if (v2 < 0)
    operator delete(v7);
}

void sub_23009AAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a17 && a25 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::IBLCubeMapAssetBuilder::~IBLCubeMapAssetBuilder(void **this)
{
  realityio::IBLCubeMapAssetBuilder::~IBLCubeMapAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::IBLCubeMapAssetBuilder *v2;
  uint64_t v3;
  realityio::IBLCubeMapAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDF2C70;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::IBLCubeMapAssetBuilder *)this[34];
  if (v2 == (realityio::IBLCubeMapAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::IBLCubeMapAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::IBLCubeMapAssetBuilder *)this[30];
  if (v4 == (realityio::IBLCubeMapAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::IBLCubeMapAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF2CE8;
  return result;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2CE8;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23009ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF2D68;
  return result;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2D68;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::IBLCubeMapAssetBuilder::kOutputName((realityio::IBLCubeMapAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 10, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23009B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDF2DE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF2DE8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::string::size_type v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  std::string v11;
  std::string __p;
  uint64_t v13;

  v1 = *(uint64_t **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = *(__int128 **)(a1 + 24);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v11.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 3), *((_QWORD *)v4 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)v4 + 24);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 5);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  realityio::Inputs::createCubeMapTextureAsset(v3, v2, (uint64_t)&v11, (std::string::size_type *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v7 = v13;
  if (v13)
  {
    REAssetSetMetadataString();
    v8 = REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable();
    if (v1[35])
      RERelease();
    v1[35] = v8;
    v10 = v8;
    if (v8)
      RERetain();
    realityio::Builder::addAsset(v1, &v10, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v10);
    realityio::Builder::addAsset(v1, v7, 0);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v13);
}

void sub_23009B380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::tokens::ActionTokens_StaticTokenType::~ActionTokens_StaticTokenType(realityio::tokens::ActionTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  void **v145;

  v145 = (void **)((char *)this + 384);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v145);
  v2 = *((_QWORD *)this + 47);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 46);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 45);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 44);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 43);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 42);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 41);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 40);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 39);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 38);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 37);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 36);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 35);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 34);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 33);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 32);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 31);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 30);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 29);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 28);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 27);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 26);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 25);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 24);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 23);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 22);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 21);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 20);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 19);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 18);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 17);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 16);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 15);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 14);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 13);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 12);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 11);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 10);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 9);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 8);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *((_QWORD *)this + 7);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *((_QWORD *)this + 6);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *((_QWORD *)this + 5);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *((_QWORD *)this + 4);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *((_QWORD *)this + 3);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *((_QWORD *)this + 2);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *((_QWORD *)this + 1);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v143 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v144 = __ldxr(v143);
    while (__stlxr(v144 - 2, v143));
  }
}

realityio::tokens::ActionTokens_StaticTokenType *realityio::tokens::ActionTokens_StaticTokenType::ActionTokens_StaticTokenType(realityio::tokens::ActionTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  v157 = (uint64_t *)(MEMORY[0x2348B2758](this, "/makeAmbientLightComponentRule", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 312, "/makeSkeletalPoseDefinitionAssetRule", 0);
  MEMORY[0x2348B2758]((char *)this + 320, "/makeSphereAssetDescriptorRule", 0);
  MEMORY[0x2348B2758]((char *)this + 328, "/makeSphereMeshDescriptorRule", 0);
  MEMORY[0x2348B2758]((char *)this + 336, "/makeSpotLightComponentRule", 0);
  MEMORY[0x2348B2758]((char *)this + 344, "/makeStatic3DTextComponentRule", 0);
  MEMORY[0x2348B2758]((char *)this + 352, "/makeStatic3DTextMeshDescriptorRule", 0);
  MEMORY[0x2348B2758]((char *)this + 360, "/makeTextureAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 368, "/makeTransformAnimTimelineAssetRule", 0);
  MEMORY[0x2348B2758]((char *)this + 376, "/makeTransformComponentRule", 0);
  v2 = *(_QWORD *)this;
  v158 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v157;
  v159 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v160 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v161 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v162 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v163 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v164 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v165 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v166 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v167 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v168 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v169 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v170 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v171 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v172 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v173 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v174 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v175 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v176 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v177 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v178 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v179 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v180 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v181 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v182 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v182 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v183 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v183 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v184 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v184 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v185 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v185 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v186 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v186 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v187 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v187 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v188 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v188 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v189 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v189 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v190 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v190 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v191 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v191 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v192 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v192 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v193 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v193 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v194 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v194 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v195 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v195 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v196 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v196 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v197 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v197 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v198 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v198 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v199 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v199 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v200 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v200 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v201 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v201 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v202 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v202 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v203 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v203 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v204 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v204 &= 0xFFFFFFFFFFFFFFF8;
  }
  v143 = *((_QWORD *)this + 47);
  v205 = v143;
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 2, v144));
    if ((v145 & 1) == 0)
      v205 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  v146 = operator new(0x180uLL);
  v147 = 0;
  *((_QWORD *)this + 48) = v146;
  *((_QWORD *)this + 49) = v146;
  *((_QWORD *)this + 50) = v146 + 48;
  do
  {
    v148 = *(&v158 + v147);
    *v146 = v148;
    if ((v148 & 7) != 0)
    {
      v149 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 2, v149));
      if ((v150 & 1) == 0)
        *v146 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v147;
    ++v146;
  }
  while (v147 != 48);
  v151 = &v206;
  *((_QWORD *)this + 49) = v146;
  do
  {
    v153 = *--v151;
    v152 = v153;
    if ((v153 & 7) != 0)
    {
      v154 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
      do
        v155 = __ldxr(v154);
      while (__stlxr(v155 - 2, v154));
    }
  }
  while (v151 != &v158);
  return this;
}

void sub_23009CA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,void **a49,uint64_t a50,char a51)
{
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a49);
  v61 = (char *)&STACK[0x2D0];
  while (1)
  {
    v63 = *((_QWORD *)v61 - 1);
    v61 -= 8;
    v62 = v63;
    if ((v63 & 7) != 0)
    {
      v64 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    if (v61 == &a51)
    {
      if ((*v53 & 7) != 0)
      {
        v66 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v52 & 7) != 0)
      {
        v68 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v60 & 7) != 0)
      {
        v70 = (unsigned int *)(*v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v59 & 7) != 0)
      {
        v72 = (unsigned int *)(*v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v58 & 7) != 0)
      {
        v74 = (unsigned int *)(*v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v57 & 7) != 0)
      {
        v76 = (unsigned int *)(*v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*v56 & 7) != 0)
      {
        v78 = (unsigned int *)(*v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v55 & 7) != 0)
      {
        v80 = (unsigned int *)(*v55 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v54 & 7) != 0)
      {
        v82 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a11 & 7) != 0)
      {
        v84 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a12 & 7) != 0)
      {
        v86 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a13 & 7) != 0)
      {
        v88 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a14 & 7) != 0)
      {
        v90 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a15 & 7) != 0)
      {
        v92 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a16 & 7) != 0)
      {
        v94 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a17 & 7) != 0)
      {
        v96 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a18 & 7) != 0)
      {
        v98 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a19 & 7) != 0)
      {
        v100 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a20 & 7) != 0)
      {
        v102 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a21 & 7) != 0)
      {
        v104 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a22 & 7) != 0)
      {
        v106 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a23 & 7) != 0)
      {
        v108 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a24 & 7) != 0)
      {
        v110 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a25 & 7) != 0)
      {
        v112 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a26 & 7) != 0)
      {
        v114 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a27 & 7) != 0)
      {
        v116 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a28 & 7) != 0)
      {
        v118 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a29 & 7) != 0)
      {
        v120 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a30 & 7) != 0)
      {
        v122 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a31 & 7) != 0)
      {
        v124 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a32 & 7) != 0)
      {
        v126 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a33 & 7) != 0)
      {
        v128 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a34 & 7) != 0)
      {
        v130 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a35 & 7) != 0)
      {
        v132 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a36 & 7) != 0)
      {
        v134 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a37 & 7) != 0)
      {
        v136 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a38 & 7) != 0)
      {
        v138 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a39 & 7) != 0)
      {
        v140 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*a40 & 7) != 0)
      {
        v142 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      if ((*a41 & 7) != 0)
      {
        v144 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      if ((*a42 & 7) != 0)
      {
        v146 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v147 = __ldxr(v146);
        while (__stlxr(v147 - 2, v146));
      }
      if ((*a43 & 7) != 0)
      {
        v148 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v149 = __ldxr(v148);
        while (__stlxr(v149 - 2, v148));
      }
      if ((*a44 & 7) != 0)
      {
        v150 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v151 = __ldxr(v150);
        while (__stlxr(v151 - 2, v150));
      }
      if ((*a45 & 7) != 0)
      {
        v152 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      if ((*a46 & 7) != 0)
      {
        v154 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v155 = __ldxr(v154);
        while (__stlxr(v155 - 2, v154));
      }
      if ((*a47 & 7) != 0)
      {
        v156 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v157 = __ldxr(v156);
        while (__stlxr(v157 - 2, v156));
      }
      if ((*a48 & 7) != 0)
      {
        v158 = (unsigned int *)(*a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v159 = __ldxr(v158);
        while (__stlxr(v159 - 2, v158));
      }
      if ((*v51 & 7) != 0)
      {
        v160 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stlxr(v161 - 2, v160));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23009D160()
{
  JUMPOUT(0x23009CBE0);
}

void sub_23009D168()
{
  JUMPOUT(0x23009CC04);
}

void sub_23009D170()
{
  JUMPOUT(0x23009CC28);
}

void sub_23009D178()
{
  JUMPOUT(0x23009CC4CLL);
}

void sub_23009D180()
{
  JUMPOUT(0x23009CC70);
}

void sub_23009D188()
{
  JUMPOUT(0x23009CC94);
}

void sub_23009D190()
{
  JUMPOUT(0x23009CCB8);
}

void sub_23009D198()
{
  JUMPOUT(0x23009CCDCLL);
}

void sub_23009D1A0()
{
  JUMPOUT(0x23009CD00);
}

void sub_23009D1A8()
{
  JUMPOUT(0x23009CD24);
}

void sub_23009D1B0()
{
  JUMPOUT(0x23009CD48);
}

void sub_23009D1B8()
{
  JUMPOUT(0x23009CD6CLL);
}

void sub_23009D1C0()
{
  JUMPOUT(0x23009CD90);
}

void sub_23009D1C8()
{
  JUMPOUT(0x23009CDB4);
}

void sub_23009D1D0()
{
  JUMPOUT(0x23009CDD8);
}

void sub_23009D1D8()
{
  JUMPOUT(0x23009CDFCLL);
}

void sub_23009D1E0()
{
  JUMPOUT(0x23009CE20);
}

void sub_23009D1E8()
{
  JUMPOUT(0x23009CE44);
}

void sub_23009D1F0()
{
  JUMPOUT(0x23009CE68);
}

void sub_23009D1F8()
{
  JUMPOUT(0x23009CE8CLL);
}

void sub_23009D200()
{
  JUMPOUT(0x23009CEB0);
}

void sub_23009D208()
{
  JUMPOUT(0x23009CED4);
}

void sub_23009D210()
{
  JUMPOUT(0x23009CEF8);
}

void sub_23009D218()
{
  JUMPOUT(0x23009CF1CLL);
}

void sub_23009D220()
{
  JUMPOUT(0x23009CF40);
}

void sub_23009D228()
{
  JUMPOUT(0x23009CF64);
}

void sub_23009D230()
{
  JUMPOUT(0x23009CF88);
}

void sub_23009D238()
{
  JUMPOUT(0x23009CFACLL);
}

void sub_23009D240()
{
  JUMPOUT(0x23009CFD0);
}

void sub_23009D248()
{
  JUMPOUT(0x23009CFF4);
}

void sub_23009D250()
{
  JUMPOUT(0x23009D018);
}

void sub_23009D258()
{
  JUMPOUT(0x23009D03CLL);
}

void sub_23009D260()
{
  JUMPOUT(0x23009D060);
}

void sub_23009D268()
{
  JUMPOUT(0x23009D084);
}

void sub_23009D270()
{
  JUMPOUT(0x23009D0A8);
}

void sub_23009D278()
{
  JUMPOUT(0x23009D0CCLL);
}

void sub_23009D280()
{
  JUMPOUT(0x23009D0F0);
}

void sub_23009D288()
{
  JUMPOUT(0x23009D114);
}

void sub_23009D290()
{
  JUMPOUT(0x23009D138);
}

realityio::tokens::SamplingTokens_StaticTokenType *realityio::tokens::SamplingTokens_StaticTokenType::SamplingTokens_StaticTokenType(realityio::tokens::SamplingTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)MEMORY[0x2348B2758](this, "/__timeSamples", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_23009D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((*v9 & 7) != 0)
  {
    v15 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

realityio::tokens::StageTokens_StaticTokenType *realityio::tokens::StageTokens_StaticTokenType::StageTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "/__stage.layerData", 0) + 8);
  MEMORY[0x2348B2758](v2, "/__root", 0);
  v3 = *this;
  v22 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v22 = v4;
  }
  v6 = *v2;
  v23 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v23 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  v11 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v12 = v10;
    v13 = (&v22)[v11];
    *(_QWORD *)v9 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 += 2;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  v16 = (unsigned int **)&v24;
  this[3] = v9;
  do
  {
    v18 = (uint64_t)*--v16;
    v17 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  while (v16 != &v22);
  return (realityio::tokens::StageTokens_StaticTokenType *)this;
}

void sub_23009D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::tokens::RealityKitTokens_StaticTokenType::~RealityKitTokens_StaticTokenType(realityio::tokens::RealityKitTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void **v43;

  v43 = (void **)((char *)this + 112);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v43);
  v2 = *((_QWORD *)this + 13);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 12);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 11);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 10);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 9);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 8);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 7);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 6);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 5);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 4);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 3);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 2);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v41 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
}

realityio::tokens::RealityKitTokens_StaticTokenType *realityio::tokens::RealityKitTokens_StaticTokenType::RealityKitTokens_StaticTokenType(realityio::tokens::RealityKitTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v55 = (uint64_t *)(MEMORY[0x2348B2758](this, "Component", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 40, "height", 0);
  MEMORY[0x2348B2758]((char *)this + 48, "horizontalAlignment", 0);
  MEMORY[0x2348B2758]((char *)this + 56, "realitykit:innerDegrees", 0);
  MEMORY[0x2348B2758]((char *)this + 64, "pointSize", 0);
  MEMORY[0x2348B2758]((char *)this + 72, "shadow:bias", 0);
  MEMORY[0x2348B2758]((char *)this + 80, "Struct", 0);
  MEMORY[0x2348B2758]((char *)this + 88, "verticalAlignment", 0);
  MEMORY[0x2348B2758]((char *)this + 96, "width", 0);
  MEMORY[0x2348B2758]((char *)this + 104, "wrapMode", 0);
  v2 = *(_QWORD *)this;
  v56 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v55;
  v57 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v58 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v59 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v60 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v61 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v62 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v63 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v64 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v65 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v66 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v67 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v68 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v69 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v44 = operator new(0x70uLL);
  v45 = 0;
  *((_QWORD *)this + 14) = v44;
  *((_QWORD *)this + 15) = v44;
  *((_QWORD *)this + 16) = v44 + 14;
  do
  {
    v46 = *(&v56 + v45);
    *v44 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
      if ((v48 & 1) == 0)
        *v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v45;
    ++v44;
  }
  while (v45 != 14);
  v49 = &v70;
  *((_QWORD *)this + 15) = v44;
  do
  {
    v51 = *--v49;
    v50 = v51;
    if ((v51 & 7) != 0)
    {
      v52 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
  }
  while (v49 != &v56);
  return this;
}

void sub_23009DD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, void **a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a15);
  v41 = (char *)&a31;
  while (1)
  {
    v43 = *((_QWORD *)v41 - 1);
    v41 -= 8;
    v42 = v43;
    if ((v43 & 7) != 0)
    {
      v44 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if (v41 == &a17)
    {
      if ((*v35 & 7) != 0)
      {
        v46 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v34 & 7) != 0)
      {
        v48 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((*v33 & 7) != 0)
      {
        v50 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v32 & 7) != 0)
      {
        v52 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v40 & 7) != 0)
      {
        v54 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v39 & 7) != 0)
      {
        v56 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v38 & 7) != 0)
      {
        v58 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v37 & 7) != 0)
      {
        v60 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v36 & 7) != 0)
      {
        v62 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*a11 & 7) != 0)
      {
        v64 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*a12 & 7) != 0)
      {
        v66 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a13 & 7) != 0)
      {
        v68 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a14 & 7) != 0)
      {
        v70 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v31 & 7) != 0)
      {
        v72 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23009DF7C()
{
  JUMPOUT(0x23009DEC4);
}

void sub_23009DF84()
{
  JUMPOUT(0x23009DEE8);
}

void sub_23009DF8C()
{
  JUMPOUT(0x23009DF0CLL);
}

void sub_23009DF94()
{
  JUMPOUT(0x23009DF30);
}

void sub_23009DF9C()
{
  JUMPOUT(0x23009DF54);
}

void realityio::tokens::EcsTokens_StaticTokenType::~EcsTokens_StaticTokenType(realityio::tokens::EcsTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  void **v163;

  v163 = (void **)((char *)this + 432);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v163);
  v2 = *((_QWORD *)this + 53);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 52);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 51);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 50);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 49);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 48);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 47);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 46);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 45);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 44);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 43);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 42);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 41);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 40);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 39);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 38);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 37);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 36);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 35);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 34);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 33);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 32);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 31);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 30);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 29);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 28);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 27);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 26);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 25);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 24);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 23);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 22);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 21);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 20);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 19);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 18);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 17);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 16);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 15);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 14);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *((_QWORD *)this + 13);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *((_QWORD *)this + 12);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *((_QWORD *)this + 11);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *((_QWORD *)this + 10);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *((_QWORD *)this + 9);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *((_QWORD *)this + 8);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *((_QWORD *)this + 7);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *((_QWORD *)this + 6);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *((_QWORD *)this + 5);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *((_QWORD *)this + 4);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *((_QWORD *)this + 3);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *((_QWORD *)this + 2);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *((_QWORD *)this + 1);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v161 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v162 = __ldxr(v161);
    while (__stlxr(v162 - 2, v161));
  }
}

realityio::tokens::EcsTokens_StaticTokenType *realityio::tokens::EcsTokens_StaticTokenType::EcsTokens_StaticTokenType(realityio::tokens::EcsTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  v175 = (uint64_t *)(MEMORY[0x2348B2758](this, "__ambientLightComponent", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 360, "__skelAnimTimelineAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 368, "__skelPoseComponent", 0);
  MEMORY[0x2348B2758]((char *)this + 376, "__skelPoseDefinitionAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 384, "__spotLightComponent", 0);
  MEMORY[0x2348B2758]((char *)this + 392, "__static3DTextComponent", 0);
  MEMORY[0x2348B2758]((char *)this + 400, "__transformComponent", 0);
  MEMORY[0x2348B2758]((char *)this + 408, "usdPrimitiveAxis", 0);
  MEMORY[0x2348B2758]((char *)this + 416, "__vertexDisplayColor", 0);
  MEMORY[0x2348B2758]((char *)this + 424, "__xformAnimTimelineAsset", 0);
  v2 = *(_QWORD *)this;
  v176 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v175;
  v177 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v178 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v179 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v180 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v181 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v182 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v182 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v183 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v183 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v184 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v184 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v185 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v185 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v186 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v186 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v187 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v187 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v188 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v188 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v189 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v189 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v190 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v190 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v191 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v191 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v192 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v192 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v193 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v193 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v194 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v194 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v195 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v195 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v196 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v196 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v197 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v197 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v198 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v198 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v199 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v199 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v200 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v200 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v201 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v201 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v202 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v202 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v203 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v203 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v204 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v204 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v205 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v205 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v206 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v206 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v207 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v207 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v208 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v208 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v209 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v209 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v210 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v210 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v211 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v211 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v212 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v212 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v213 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v213 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v214 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v214 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v215 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v215 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v216 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v216 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v217 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v217 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v218 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v218 &= 0xFFFFFFFFFFFFFFF8;
  }
  v131 = *((_QWORD *)this + 43);
  v219 = v131;
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 2, v132));
    if ((v133 & 1) == 0)
      v219 &= 0xFFFFFFFFFFFFFFF8;
  }
  v134 = *((_QWORD *)this + 44);
  v220 = v134;
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 2, v135));
    if ((v136 & 1) == 0)
      v220 &= 0xFFFFFFFFFFFFFFF8;
  }
  v137 = *((_QWORD *)this + 45);
  v221 = v137;
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 2, v138));
    if ((v139 & 1) == 0)
      v221 &= 0xFFFFFFFFFFFFFFF8;
  }
  v140 = *((_QWORD *)this + 46);
  v222 = v140;
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 2, v141));
    if ((v142 & 1) == 0)
      v222 &= 0xFFFFFFFFFFFFFFF8;
  }
  v143 = *((_QWORD *)this + 47);
  v223 = v143;
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 2, v144));
    if ((v145 & 1) == 0)
      v223 &= 0xFFFFFFFFFFFFFFF8;
  }
  v146 = *((_QWORD *)this + 48);
  v224 = v146;
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 2, v147));
    if ((v148 & 1) == 0)
      v224 &= 0xFFFFFFFFFFFFFFF8;
  }
  v149 = *((_QWORD *)this + 49);
  v225 = v149;
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 2, v150));
    if ((v151 & 1) == 0)
      v225 &= 0xFFFFFFFFFFFFFFF8;
  }
  v152 = *((_QWORD *)this + 50);
  v226 = v152;
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 2, v153));
    if ((v154 & 1) == 0)
      v226 &= 0xFFFFFFFFFFFFFFF8;
  }
  v155 = *((_QWORD *)this + 51);
  v227 = v155;
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 2, v156));
    if ((v157 & 1) == 0)
      v227 &= 0xFFFFFFFFFFFFFFF8;
  }
  v158 = *((_QWORD *)this + 52);
  v228 = v158;
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 2, v159));
    if ((v160 & 1) == 0)
      v228 &= 0xFFFFFFFFFFFFFFF8;
  }
  v161 = *((_QWORD *)this + 53);
  v229 = v161;
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 2, v162));
    if ((v163 & 1) == 0)
      v229 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  v164 = operator new(0x1B0uLL);
  v165 = 0;
  *((_QWORD *)this + 54) = v164;
  *((_QWORD *)this + 55) = v164;
  *((_QWORD *)this + 56) = v164 + 54;
  do
  {
    v166 = *(&v176 + v165);
    *v164 = v166;
    if ((v166 & 7) != 0)
    {
      v167 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
      do
        v168 = __ldxr(v167);
      while (__stxr(v168 + 2, v167));
      if ((v168 & 1) == 0)
        *v164 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v165;
    ++v164;
  }
  while (v165 != 54);
  v169 = &v230;
  *((_QWORD *)this + 55) = v164;
  do
  {
    v171 = *--v169;
    v170 = v171;
    if ((v171 & 7) != 0)
    {
      v172 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
      do
        v173 = __ldxr(v172);
      while (__stlxr(v173 - 2, v172));
    }
  }
  while (v169 != &v176);
  return this;
}

void sub_23009F868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,_QWORD *a44,_QWORD *a45,_QWORD *a46,_QWORD *a47,_QWORD *a48,_QWORD *a49,_QWORD *a50,_QWORD *a51,_QWORD *a52,_QWORD *a53,_QWORD *a54,void **a55,uint64_t a56,char a57)
{
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a55);
  v67 = (char *)&STACK[0x330];
  while (1)
  {
    v69 = *((_QWORD *)v67 - 1);
    v67 -= 8;
    v68 = v69;
    if ((v69 & 7) != 0)
    {
      v70 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
    if (v67 == &a57)
    {
      if ((*v65 & 7) != 0)
      {
        v72 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v64 & 7) != 0)
      {
        v74 = (unsigned int *)(*v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v63 & 7) != 0)
      {
        v76 = (unsigned int *)(*v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*v62 & 7) != 0)
      {
        v78 = (unsigned int *)(*v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v61 & 7) != 0)
      {
        v80 = (unsigned int *)(*v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v60 & 7) != 0)
      {
        v82 = (unsigned int *)(*v60 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v59 & 7) != 0)
      {
        v84 = (unsigned int *)(*v59 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v58 & 7) != 0)
      {
        v86 = (unsigned int *)(*v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v66 & 7) != 0)
      {
        v88 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a11 & 7) != 0)
      {
        v90 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a12 & 7) != 0)
      {
        v92 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a13 & 7) != 0)
      {
        v94 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a14 & 7) != 0)
      {
        v96 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a15 & 7) != 0)
      {
        v98 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a16 & 7) != 0)
      {
        v100 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a17 & 7) != 0)
      {
        v102 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a18 & 7) != 0)
      {
        v104 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a19 & 7) != 0)
      {
        v106 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a20 & 7) != 0)
      {
        v108 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a21 & 7) != 0)
      {
        v110 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a22 & 7) != 0)
      {
        v112 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a23 & 7) != 0)
      {
        v114 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a24 & 7) != 0)
      {
        v116 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a25 & 7) != 0)
      {
        v118 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a26 & 7) != 0)
      {
        v120 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a27 & 7) != 0)
      {
        v122 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a28 & 7) != 0)
      {
        v124 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a29 & 7) != 0)
      {
        v126 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a30 & 7) != 0)
      {
        v128 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a31 & 7) != 0)
      {
        v130 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a32 & 7) != 0)
      {
        v132 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a33 & 7) != 0)
      {
        v134 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a34 & 7) != 0)
      {
        v136 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a35 & 7) != 0)
      {
        v138 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a36 & 7) != 0)
      {
        v140 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*a37 & 7) != 0)
      {
        v142 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      if ((*a38 & 7) != 0)
      {
        v144 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      if ((*a39 & 7) != 0)
      {
        v146 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v147 = __ldxr(v146);
        while (__stlxr(v147 - 2, v146));
      }
      if ((*a40 & 7) != 0)
      {
        v148 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v149 = __ldxr(v148);
        while (__stlxr(v149 - 2, v148));
      }
      if ((*a41 & 7) != 0)
      {
        v150 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v151 = __ldxr(v150);
        while (__stlxr(v151 - 2, v150));
      }
      if ((*a42 & 7) != 0)
      {
        v152 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      if ((*a43 & 7) != 0)
      {
        v154 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v155 = __ldxr(v154);
        while (__stlxr(v155 - 2, v154));
      }
      if ((*a44 & 7) != 0)
      {
        v156 = (unsigned int *)(*a44 & 0xFFFFFFFFFFFFFFF8);
        do
          v157 = __ldxr(v156);
        while (__stlxr(v157 - 2, v156));
      }
      if ((*a45 & 7) != 0)
      {
        v158 = (unsigned int *)(*a45 & 0xFFFFFFFFFFFFFFF8);
        do
          v159 = __ldxr(v158);
        while (__stlxr(v159 - 2, v158));
      }
      if ((*a46 & 7) != 0)
      {
        v160 = (unsigned int *)(*a46 & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stlxr(v161 - 2, v160));
      }
      if ((*a47 & 7) != 0)
      {
        v162 = (unsigned int *)(*a47 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      if ((*a48 & 7) != 0)
      {
        v164 = (unsigned int *)(*a48 & 0xFFFFFFFFFFFFFFF8);
        do
          v165 = __ldxr(v164);
        while (__stlxr(v165 - 2, v164));
      }
      if ((*a49 & 7) != 0)
      {
        v166 = (unsigned int *)(*a49 & 0xFFFFFFFFFFFFFFF8);
        do
          v167 = __ldxr(v166);
        while (__stlxr(v167 - 2, v166));
      }
      if ((*a50 & 7) != 0)
      {
        v168 = (unsigned int *)(*a50 & 0xFFFFFFFFFFFFFFF8);
        do
          v169 = __ldxr(v168);
        while (__stlxr(v169 - 2, v168));
      }
      if ((*a51 & 7) != 0)
      {
        v170 = (unsigned int *)(*a51 & 0xFFFFFFFFFFFFFFF8);
        do
          v171 = __ldxr(v170);
        while (__stlxr(v171 - 2, v170));
      }
      if ((*a52 & 7) != 0)
      {
        v172 = (unsigned int *)(*a52 & 0xFFFFFFFFFFFFFFF8);
        do
          v173 = __ldxr(v172);
        while (__stlxr(v173 - 2, v172));
      }
      if ((*a53 & 7) != 0)
      {
        v174 = (unsigned int *)(*a53 & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stlxr(v175 - 2, v174));
      }
      if ((*a54 & 7) != 0)
      {
        v176 = (unsigned int *)(*a54 & 0xFFFFFFFFFFFFFFF8);
        do
          v177 = __ldxr(v176);
        while (__stlxr(v177 - 2, v176));
      }
      if ((*v57 & 7) != 0)
      {
        v178 = (unsigned int *)(*v57 & 0xFFFFFFFFFFFFFFF8);
        do
          v179 = __ldxr(v178);
        while (__stlxr(v179 - 2, v178));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2300A005C()
{
  JUMPOUT(0x23009FA04);
}

void sub_2300A0064()
{
  JUMPOUT(0x23009FA28);
}

void sub_2300A006C()
{
  JUMPOUT(0x23009FA4CLL);
}

void sub_2300A0074()
{
  JUMPOUT(0x23009FA70);
}

void sub_2300A007C()
{
  JUMPOUT(0x23009FA94);
}

void sub_2300A0084()
{
  JUMPOUT(0x23009FAB8);
}

void sub_2300A008C()
{
  JUMPOUT(0x23009FADCLL);
}

void sub_2300A0094()
{
  JUMPOUT(0x23009FB00);
}

void sub_2300A009C()
{
  JUMPOUT(0x23009FB24);
}

void sub_2300A00A4()
{
  JUMPOUT(0x23009FB48);
}

void sub_2300A00AC()
{
  JUMPOUT(0x23009FB6CLL);
}

void sub_2300A00B4()
{
  JUMPOUT(0x23009FB90);
}

void sub_2300A00BC()
{
  JUMPOUT(0x23009FBB4);
}

void sub_2300A00C4()
{
  JUMPOUT(0x23009FBD8);
}

void sub_2300A00CC()
{
  JUMPOUT(0x23009FBFCLL);
}

void sub_2300A00D4()
{
  JUMPOUT(0x23009FC20);
}

void sub_2300A00DC()
{
  JUMPOUT(0x23009FC44);
}

void sub_2300A00E4()
{
  JUMPOUT(0x23009FC68);
}

void sub_2300A00EC()
{
  JUMPOUT(0x23009FC8CLL);
}

void sub_2300A00F4()
{
  JUMPOUT(0x23009FCB0);
}

void sub_2300A00FC()
{
  JUMPOUT(0x23009FCD4);
}

void sub_2300A0104()
{
  JUMPOUT(0x23009FCF8);
}

void sub_2300A010C()
{
  JUMPOUT(0x23009FD1CLL);
}

void sub_2300A0114()
{
  JUMPOUT(0x23009FD40);
}

void sub_2300A011C()
{
  JUMPOUT(0x23009FD64);
}

void sub_2300A0124()
{
  JUMPOUT(0x23009FD88);
}

void sub_2300A012C()
{
  JUMPOUT(0x23009FDACLL);
}

void sub_2300A0134()
{
  JUMPOUT(0x23009FDD0);
}

void sub_2300A013C()
{
  JUMPOUT(0x23009FDF4);
}

void sub_2300A0144()
{
  JUMPOUT(0x23009FE18);
}

void sub_2300A014C()
{
  JUMPOUT(0x23009FE3CLL);
}

void sub_2300A0154()
{
  JUMPOUT(0x23009FE60);
}

void sub_2300A015C()
{
  JUMPOUT(0x23009FE84);
}

void sub_2300A0164()
{
  JUMPOUT(0x23009FEA8);
}

void sub_2300A016C()
{
  JUMPOUT(0x23009FECCLL);
}

void sub_2300A0174()
{
  JUMPOUT(0x23009FEF0);
}

void sub_2300A017C()
{
  JUMPOUT(0x23009FF14);
}

void sub_2300A0184()
{
  JUMPOUT(0x23009FF38);
}

void sub_2300A018C()
{
  JUMPOUT(0x23009FF5CLL);
}

void sub_2300A0194()
{
  JUMPOUT(0x23009FF80);
}

void sub_2300A019C()
{
  JUMPOUT(0x23009FFA4);
}

void sub_2300A01A4()
{
  JUMPOUT(0x23009FFC8);
}

void sub_2300A01AC()
{
  JUMPOUT(0x23009FFECLL);
}

void sub_2300A01B4()
{
  JUMPOUT(0x2300A0010);
}

void sub_2300A01BC()
{
  JUMPOUT(0x2300A0034);
}

realityio::Builder *realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(realityio::Builder *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)a5[1];
  v17 = *a5;
  v18 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v22 = v21;
  v19[0] = &off_24FDF2F48;
  v20 = v19;
  v21[0] = &off_24FDF2EC8;
  realityio::DynamicBuilder::DynamicBuilder(a1, a2, a3, a4, &v17, (uint64_t)v21, (uint64_t)v19);
  v9 = v20;
  if (v20 == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_9;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_9:
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
    goto LABEL_13;
  }
  if (v22)
  {
    v12 = 5;
LABEL_13:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = off_24FDF2E68;
  return a1;
}

void sub_2300A0310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  v23 = a19;
  if (a19 == &a16)
  {
    v24 = 4;
    v23 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF2EC8;
  return result;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2EC8;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::EntityBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::EntityBuilder::kPrimPathOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 20, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300A0608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF2F48;
  return result;
}

void std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF2F48;
}

char *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1,std::allocator<realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,std::string const&,std::string const&,std::shared_ptr<realityio::DirtyStageSubscription const>)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t realityio::TextureBuilder::kOutputName(realityio::TextureBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "texture_asset");
    realityio::TextureBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::TextureBuilder::kOutputName(void)::kOutputName;
}

void sub_2300A08F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextureBuilder *realityio::TextureBuilder::TextureBuilder(realityio::TextureBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TextureBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextureBuilderIdentifier);
  realityio::generateTextureDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF3280;
  v21 = v20;
  v18[0] = &off_24FDF3300;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF2FC8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 36) = 0;
  return this;
}

void sub_2300A0AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

std::string *maybeSelectCachedImportOperationIfSemanticUnspecified(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;

  v6 = (_QWORD *)(a4 + 8);
  v7 = *(_QWORD **)(a4 + 8);
  if (!v7)
    goto LABEL_8;
  v8 = (_QWORD *)(a4 + 8);
  do
  {
    v9 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
    v10 = v7 + 1;
    if (!v9)
    {
      v10 = v7;
      v8 = v7;
    }
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v8 == v6 || pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
LABEL_8:
    v8 = v6;
  v11 = *(_DWORD *)(a2 + 72);
  v13 = v11 != 6 && v11 != 0 || v6 == v8;
  if (v13 || v8[12] != 1)
    return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
  v14 = v8[10];
  v15 = *(unsigned __int8 *)(v14 + 103);
  if ((v15 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v14 + 103);
  else
    v16 = *(_QWORD *)(v14 + 88);
  v17 = *(unsigned __int8 *)(a2 + 71);
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 56);
  if (v16 != v17)
    return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
  v19 = (const void **)(v14 + 80);
  if (v18 >= 0)
    v20 = (unsigned __int8 *)(a2 + 48);
  else
    v20 = *(unsigned __int8 **)(a2 + 48);
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *(_QWORD *)(v14 + 88)))
      return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
    goto LABEL_32;
  }
  if (!*(_BYTE *)(v14 + 103))
  {
LABEL_32:
    if (*(unsigned __int8 *)(v14 + 121) == *(unsigned __int8 *)(a2 + 89)
      && *(unsigned __int8 *)(v14 + 108) == *(unsigned __int8 *)(a2 + 76)
      && *(unsigned __int8 *)(v14 + 109) == *(unsigned __int8 *)(a2 + 77)
      && *(unsigned __int8 *)(v14 + 110) == *(unsigned __int8 *)(a2 + 78)
      && *(unsigned __int8 *)(v14 + 111) == *(unsigned __int8 *)(a2 + 79)
      && *(unsigned __int8 *)(v14 + 112) == *(unsigned __int8 *)(a2 + 80)
      && *(_DWORD *)(v14 + 116) == *(_DWORD *)(a2 + 84)
      && *(unsigned __int8 *)(v14 + 120) == *(unsigned __int8 *)(a2 + 88))
    {
      a2 = v14 + 32;
    }
    return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
  }
  while (*(unsigned __int8 *)v19 == *v20)
  {
    v19 = (const void **)((char *)v19 + 1);
    ++v20;
    if (!--v15)
      goto LABEL_32;
  }
  return realityio::TextureImportOperationSettings::TextureImportOperationSettings(a1, (const realityio::TextureImportOperationSettings *)a2);
}

uint64_t realityio::TextureBuilder::TextureDataT::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 != v5)
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a2 + 8) = v4;
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__move_assign(a1 + 16, (_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;

  return a1;
}

void `anonymous namespace'::UsdUVTextureProcess::process(_anonymous_namespace_::UsdUVTextureProcess *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v2;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  unsigned int *v4;
  unsigned int v5;
  realityio *v6;
  int v7;
  NSObject *v8;
  uint64_t Text;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::UsdObject *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned __int8 v14;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  void **v16;
  void **v17;
  realityio::internal::TexturePrimToMaterialPrimMap *v18;
  pxrInternal__aapl__pxrReserved__::UsdObject *v19;
  unsigned __int8 **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned __int8 **v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  void **v27;
  void **v28;
  int v29;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v36;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __str;
  std::string v43;
  std::string v44[2];
  _OWORD __p[3];
  __int128 v46;
  uint64_t v47;
  __int128 buf;
  _BYTE v49[7];
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)*((_QWORD *)this + 18);
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(v2, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)Data + 40));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, &v38, (uint64_t)&buf);
  if (v52 < 0)
    operator delete((void *)v51);
  if (v50 < 0)
    operator delete((void *)buf);
  if ((v41 & 7) != 0)
  {
    v4 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (v39)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  v6 = (realityio *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&__str, (unsigned __int8 *)&buf);
  v7 = (int)v6;
  if (v52 < 0)
    operator delete((void *)v51);
  if (v50 < 0)
    operator delete((void *)buf);
  if (v7)
  {
    v8 = *(id *)(realityio::logObjects(v6) + 24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 18), v44);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
    }

  }
  else
  {
    v31 = (void **)((char *)this + 8);
    std::string::operator=((std::string *)((char *)this + 8), &__str);
    v32 = (void **)((char *)this + 32);
    std::string::operator=((std::string *)((char *)this + 32), &v43);
    v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)this + 19);
    v11 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)(*((_QWORD *)this + 18) + 8), (_DWORD *)(*((_QWORD *)this + 18) + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v11, v44);
    realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture((realityio::internal::TexturePrimToMaterialPrimMap *)&v36, v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
    if ((v51 & 7) != 0)
    {
      v12 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v49);
    if (*((_QWORD *)&buf + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    v14 = atomic_load((unsigned __int8 *)&_MergedGlobals_29);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_29))
    {
      qword_255E54A20 = 0;
      unk_255E54A28 = 0;
      qword_255E54A30 = 0;
      __cxa_guard_release(&_MergedGlobals_29);
    }
    if (v37 == v36)
    {
      v27 = (void **)((char *)this + 104);
      if ((_BYTE)buf)
      {
        maybeSelectCachedImportOperationIfSemanticUnspecified(v44, (uint64_t)&buf + 8, (uint64_t)&__str, *((_QWORD *)this + 16));
        if (*((char *)this + 31) < 0)
          operator delete(*v31);
        *(_OWORD *)v31 = *(_OWORD *)&v44[0].__r_.__value_.__l.__data_;
        *((_QWORD *)this + 3) = *((_QWORD *)&v44[0].__r_.__value_.__l + 2);
        *((_BYTE *)&v44[0].__r_.__value_.__s + 23) = 0;
        v44[0].__r_.__value_.__s.__data_[0] = 0;
        if (*((char *)this + 55) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)&v44[1].__r_.__value_.__l.__data_;
        *((_QWORD *)this + 6) = *((_QWORD *)&v44[1].__r_.__value_.__l + 2);
        *((_BYTE *)&v44[1].__r_.__value_.__s + 23) = 0;
        v44[1].__r_.__value_.__s.__data_[0] = 0;
        v28 = (void **)((char *)this + 56);
        if (*((char *)this + 79) < 0)
          operator delete(*v28);
        *(_OWORD *)v28 = __p[0];
        *((_QWORD *)this + 9) = *(_QWORD *)&__p[1];
        BYTE7(__p[1]) = 0;
        LOBYTE(__p[0]) = 0;
        *((_OWORD *)this + 5) = *(_OWORD *)((char *)&__p[1] + 8);
        *((_WORD *)this + 48) = WORD4(__p[2]);
        if (*((char *)this + 127) < 0)
        {
          operator delete(*v27);
          v29 = SBYTE7(__p[1]);
          *(_OWORD *)v27 = v46;
          *((_QWORD *)this + 15) = v47;
          HIBYTE(v47) = 0;
          LOBYTE(v46) = 0;
          if (v29 < 0)
            operator delete(*(void **)&__p[0]);
        }
        else
        {
          *(_OWORD *)v27 = v46;
          *((_QWORD *)this + 15) = v47;
          HIBYTE(v47) = 0;
          LOBYTE(v46) = 0;
        }
        if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44[0].__r_.__value_.__l.__data_);
        (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(_QWORD *)this + 24))(this);
      }
      realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&buf);
    }
    else
    {
      (**(void (***)(_anonymous_namespace_::UsdUVTextureProcess *))this)(this);
      v15 = v36;
      v30 = v37;
      if (v36 != v37)
      {
        v16 = (void **)((char *)this + 104);
        v17 = (void **)((char *)this + 56);
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(*((pxrInternal__aapl__pxrReserved__::UsdStage **)this + 17), v15);
          v18 = (realityio::internal::TexturePrimToMaterialPrimMap *)*((_QWORD *)this + 19);
          v19 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)(*((_QWORD *)this + 18) + 8), (_DWORD *)(*((_QWORD *)this + 18) + 16));
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v19, v44);
          v20 = (unsigned __int8 **)realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44, v15);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
          if ((v51 & 7) != 0)
          {
            v21 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
            do
              v22 = __ldxr(v21);
            while (__stlxr(v22 - 2, v21));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v49);
          if (*((_QWORD *)&buf + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
          if (v20)
            v23 = v20;
          else
            v23 = (unsigned __int8 **)&qword_255E54A20;
          *((_QWORD *)this + 20) = v23;
          if ((_BYTE)buf)
          {
            maybeSelectCachedImportOperationIfSemanticUnspecified(v44, (uint64_t)&buf + 8, (uint64_t)&__str, *((_QWORD *)this + 16));
          }
          else
          {
            v47 = 0;
            v46 = 0u;
            memset(__p, 0, sizeof(__p));
            memset(v44, 0, sizeof(v44));
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v44);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            DWORD2(__p[1]) = 0;
            HIDWORD(__p[1]) = realityio::TextureSwizzleChannels::kDefault;
            LOBYTE(__p[2]) = 2;
            DWORD1(__p[2]) = 0;
            WORD4(__p[2]) = 512;
            std::string::basic_string[abi:ne180100]<0>(&v46, "");
          }
          if (*((char *)this + 31) < 0)
            operator delete(*v31);
          *(_OWORD *)v31 = *(_OWORD *)&v44[0].__r_.__value_.__l.__data_;
          *((_QWORD *)this + 3) = *((_QWORD *)&v44[0].__r_.__value_.__l + 2);
          *((_BYTE *)&v44[0].__r_.__value_.__s + 23) = 0;
          v44[0].__r_.__value_.__s.__data_[0] = 0;
          if (*((char *)this + 55) < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)&v44[1].__r_.__value_.__l.__data_;
          *((_QWORD *)this + 6) = *((_QWORD *)&v44[1].__r_.__value_.__l + 2);
          *((_BYTE *)&v44[1].__r_.__value_.__s + 23) = 0;
          v44[1].__r_.__value_.__s.__data_[0] = 0;
          if (*((char *)this + 79) < 0)
            operator delete(*v17);
          *(_OWORD *)v17 = __p[0];
          *((_QWORD *)this + 9) = *(_QWORD *)&__p[1];
          BYTE7(__p[1]) = 0;
          LOBYTE(__p[0]) = 0;
          *((_OWORD *)this + 5) = *(_OWORD *)((char *)&__p[1] + 8);
          *((_WORD *)this + 48) = WORD4(__p[2]);
          if (*((char *)this + 127) < 0)
          {
            operator delete(*v16);
            v24 = SBYTE7(__p[1]);
            *(_OWORD *)v16 = v46;
            *((_QWORD *)this + 15) = v47;
            HIBYTE(v47) = 0;
            LOBYTE(v46) = 0;
            if (v24 < 0)
              operator delete(*(void **)&__p[0]);
          }
          else
          {
            *(_OWORD *)v16 = v46;
            *((_QWORD *)this + 15) = v47;
            HIBYTE(v47) = 0;
            LOBYTE(v46) = 0;
          }
          if (SHIBYTE(v44[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44[1].__r_.__value_.__l.__data_);
          if (SHIBYTE(v44[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44[0].__r_.__value_.__l.__data_);
          (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(_QWORD *)this + 8))(this);
          realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&buf);
          if ((v35 & 7) != 0)
          {
            v25 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
          if (v33)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
          v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 8);
        }
        while (v15 != v30);
      }
      (*(void (**)(_anonymous_namespace_::UsdUVTextureProcess *))(*(_QWORD *)this + 16))(this);
    }
    *(_QWORD *)&buf = &v36;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2300A1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result(v54 - 240);
  *(_QWORD *)(v54 - 240) = &a24;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 240));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a31);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::UsdUVTextureOutput::~UsdUVTextureOutput(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  *(_QWORD *)this = off_24FDF30A8;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void realityio::TextureBuilder::setOutput(uint64_t *a1, _anonymous_namespace_ *a2, _QWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  void *v11;
  uint64_t *v12;
  realityio::TextureBuilder *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::string __p;
  uint64_t v23[3];
  uint64_t v24;

  if (a3[2])
  {
    v6 = (__int128 *)(a3 + 1);
    v7 = (__int128 *)*a3;
    if ((_QWORD *)*a3 != a3 + 1)
    {
      do
      {
        std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&__p, v7 + 2);
        v24 = v23[0];
        if (v23[0])
          RERetain();
        realityio::Builder::addAsset(a1, &v24, 0);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v24);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v23);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v8 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(__int128 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (__int128 *)*((_QWORD *)v7 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v7;
            v7 = v9;
          }
          while (!v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a2, &v21);
    realityio::TextureBuilder::TextureDataT::TextureDataT((uint64_t)&__p, &v21, a3, v11);
    v12 = a1 + 35;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)(a1 + 35), (uint64_t)&__p);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&__p.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v13 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    v15 = a1[2];
    v14 = (std::__shared_weak_count *)a1[3];
    __p.__r_.__value_.__r.__words[0] = v15;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (__int128 *)realityio::TextureBuilder::kOutputName(v13);
    v21 = v12;
    realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(v15, v18, &v21);
    if (v14)
    {
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

  }
}

void sub_2300A18C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::~pair(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

id `anonymous namespace'::samplerForTextureAttribute(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  void *v3;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v5;
  id v6;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v23;
  uint64_t v24;
  id v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  REMaterialCreateDefaultSamplerDescriptor();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  v5 = v48;
  if ((v48 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v7 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v7)
      v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v7 + 48));
    v43 = v38;
    v44 = v39;
    if (v39)
    {
      v8 = (unint64_t *)(v39 + 48);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v45, &v40);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v46, &v41);
    v47 = v42;
    if ((v42 & 7) != 0)
    {
      v10 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v42 & 7) != 0)
    {
      v12 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if (v39)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
    v14 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v14 + 56));
    v38 = v33;
    v39 = v34;
    if (v34)
    {
      v15 = (unint64_t *)(v34 + 48);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v40, &v35);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v41, &v36);
    v42 = v37;
    if ((v37 & 7) != 0)
    {
      v17 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v37 & 7) != 0)
    {
      v19 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    if (v34)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43))
    {
      objc_msgSend(v3, "setSAddressMode:", v22);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38))
    {
      objc_msgSend(v3, "setTAddressMode:", v24);
    }
    v25 = v3;
    if ((v42 & 7) != 0)
    {
      v26 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if (v39)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
    if ((v47 & 7) != 0)
    {
      v28 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
    if (v44)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
    v5 = v48;
  }
  else
  {
    v6 = v3;
  }
  if ((v5 & 7) != 0)
  {
    v30 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }

  return v3;
}

void sub_2300A1CC0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *(_QWORD *)(v2 - 72);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }

  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF3380;
  v7[3] = &off_24FDF33D0;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300A1E1C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getShaderID(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5))
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  result = v6;
  if (v6)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  return result;
}

void sub_2300A1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  if ((*v9 & 7) != 0)
  {
    v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

_DWORD *realityio::TextureBuilder::findSourceInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int ConnectedSource;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::TfToken *ShaderID;
  unint64_t EmptyString;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  char IsValid;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  _DWORD *result;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  _BYTE v84[4];
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  _QWORD v93[4];
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0
    || !MEMORY[0x2348B37CC](a1))
  {
    goto LABEL_144;
  }
  LODWORD(v100) = 1;
  v101 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v103 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v4 = MEMORY[0x24BEE9DC0];
  v93[3] = 0;
  v93[0] = MEMORY[0x24BEE9DC0] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
  v92 = 0;
  v91 = 0;
  v74 = (_DWORD *)(a1 + 20);
  v75 = (_DWORD *)(a1 + 16);
  v72 = (_DWORD *)(a2 + 16);
  v73 = (_DWORD *)(a2 + 20);
  v70 = v4 + 16;
  v71 = MEMORY[0x24BEE9D38] + 16;
  while (1)
  {
    ConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    v6 = ConnectedSource;
    if (!ConnectedSource)
      break;
    switch(v91)
    {
      case 1:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v93, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v92);
        *(_DWORD *)a1 = v100;
        v7 = v101;
        v101 = 0;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v7;
        if (v8)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v75, &v102);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v74);
        if (&v100 == (uint64_t *)a1)
        {
          v12 = v103;
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 24);
          if ((v9 & 7) != 0)
          {
            v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stlxr(v11 - 2, v10));
          }
          v12 = 0;
          *(_QWORD *)(a1 + 24) = v103;
          v103 = 0;
        }
        if ((v12 & 7) != 0)
        {
          v23 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
        if (v101)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1) & 1) == 0)
        {
          *(_DWORD *)a2 = *(_DWORD *)a1;
          *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v72, v75);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v73, v74);
          *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
          goto LABEL_139;
        }
        break;
      case 2:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v93, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v92);
        v76 = v86;
        v77 = v87;
        if (v87)
        {
          v13 = (unint64_t *)(v87 + 48);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v78, &v88);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v79, &v89);
        v80 = v90;
        if ((v90 & 7) != 0)
        {
          v15 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            v80 &= 0xFFFFFFFFFFFFFFF8;
        }
        v81 = 3;
        v82 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v85 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) == 0)
          goto LABEL_112;
        if (MEMORY[0x2348B3904](&v76))
        {
          LODWORD(v96) = 1;
          v97 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v99 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v103 = 0;
          v100 = v70;
          if ((v99 & 7) != 0)
          {
            v17 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
          if (v97)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
          v95 = 0;
          v94 = 0;
          while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
          {
            switch(v94)
            {
              case 2:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v100, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95);
                v76 = v96;
                v19 = v97;
                v97 = 0;
                v20 = v77;
                v77 = v19;
                if (v20)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v78, &v98);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v79);
                if ((v80 & 7) != 0)
                {
                  v21 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v22 = __ldxr(v21);
                  while (__stlxr(v22 - 2, v21));
                }
                v80 = v99;
                v99 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
                if (v97)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
                break;
              case 0:
                goto LABEL_108;
              case 1:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v100, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95);
                v81 = v96;
                v48 = v97;
                v97 = 0;
                v49 = v82;
                v82 = v48;
                if (v49)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v83, &v98);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v84);
                if ((v85 & 7) != 0)
                {
                  v50 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v51 = __ldxr(v50);
                  while (__stlxr(v51 - 2, v50));
                }
                v85 = v99;
                v99 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
                if (v97)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
LABEL_108:
                if ((v95 & 7) != 0)
                {
                  v52 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v53 = __ldxr(v52);
                  while (__stlxr(v53 - 2, v52));
                }
                MEMORY[0x2348B2350](&v100);
                goto LABEL_112;
            }
          }
          if ((v95 & 7) != 0)
          {
            v25 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
          MEMORY[0x2348B2350](&v100);
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v100, &v77, &v78);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v96 = v71;
        if ((v103 & 7) != 0)
        {
          v27 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
        if (v101)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
        if ((v95 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (v95 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderID);
        v31 = *(unsigned __int8 *)(EmptyString + 23);
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = *(_QWORD *)(EmptyString + 8);
        if (v31 < 0xB)
          goto LABEL_71;
        if (v32 < 0)
          EmptyString = *(_QWORD *)EmptyString;
        EmptyString = strncmp((const char *)EmptyString, "ND_constant", 0xBuLL);
        if ((_DWORD)EmptyString)
        {
LABEL_71:
          if ((v95 & 0xFFFFFFFFFFFFFFF8) != 0)
            v33 = (v95 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v33 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          v34 = *(unsigned __int8 *)(v33 + 23);
          v35 = (char)v34;
          if ((v34 & 0x80u) != 0)
            v34 = *(_QWORD *)(v33 + 8);
          if (v34 < 6)
            goto LABEL_97;
          if (v35 < 0)
            v33 = *(_QWORD *)v33;
          if (strncmp((const char *)v33, "ND_dot", 6uLL))
            goto LABEL_97;
          Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v96, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)Data + 168));
          v81 = v100;
          v37 = v101;
          v101 = 0;
          v38 = v82;
          v82 = v37;
          if (v38)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v83, &v102);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v84);
          if ((v85 & 7) != 0)
          {
            v39 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            do
              v40 = __ldxr(v39);
            while (__stlxr(v40 - 2, v39));
          }
        }
        else
        {
          v41 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v41)
            v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v96, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v41 + 160));
          v81 = v100;
          v42 = v101;
          v101 = 0;
          v43 = v82;
          v82 = v42;
          if (v43)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v83, &v102);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v84);
          if ((v85 & 7) != 0)
          {
            v44 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
        }
        v85 = v103;
        v103 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
        if (v101)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
LABEL_97:
        if ((v95 & 7) != 0)
        {
          v46 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        MEMORY[0x2348B1EC4](&v96);
LABEL_112:
        *(_DWORD *)a1 = v81;
        v54 = v82;
        v82 = 0;
        v55 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v54;
        if (v55)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v75, &v83);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v74);
        if (&v81 == (int *)a1)
        {
          v59 = v85;
        }
        else
        {
          v56 = *(_QWORD *)(a1 + 24);
          if ((v56 & 7) != 0)
          {
            v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
            do
              v58 = __ldxr(v57);
            while (__stlxr(v58 - 2, v57));
          }
          v59 = 0;
          *(_QWORD *)(a1 + 24) = v85;
          v85 = 0;
        }
        if ((v59 & 7) != 0)
        {
          v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
          do
            v61 = __ldxr(v60);
          while (__stlxr(v61 - 2, v60));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
        if (v82)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v82);
        if ((v80 & 7) != 0)
        {
          v62 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
          do
            v63 = __ldxr(v62);
          while (__stlxr(v63 - 2, v62));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
        if (v77)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
        IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
        if ((IsValid & 1) == 0)
        {
          *(_DWORD *)a2 = *(_DWORD *)a1;
          *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v72, v75);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v73, v74);
          *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
        }
        if ((v90 & 7) != 0)
        {
          v65 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
        if (v87)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v87);
        if ((IsValid & 1) == 0)
          goto LABEL_140;
        break;
      case 0:
        *(_DWORD *)a2 = 3;
        *(_QWORD *)(a2 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(_QWORD *)(a2 + 24) = 0;
LABEL_139:
        v6 = 1;
        goto LABEL_140;
    }
  }
LABEL_140:
  if ((v92 & 7) != 0)
  {
    v67 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  result = (_DWORD *)MEMORY[0x2348B2350](v93);
  if ((v6 & 1) == 0)
  {
LABEL_144:
    *(_DWORD *)a2 = *(_DWORD *)a1;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_2300A295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;

  v36 = *(_QWORD *)(v34 - 160);
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  MEMORY[0x2348B1EC4](v34 - 152);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a20);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a28);
  if ((a33 & 7) != 0)
  {
    v39 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  MEMORY[0x2348B2350](&a34);
  _Unwind_Resume(a1);
}

void MtlxImageShaderProcess::process(MtlxImageShaderProcess *this)
{
  realityio *Inputs;
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  _OWORD *v10;
  uint64_t IsValid;
  size_t v13;
  const char *v14;
  NSObject *v15;
  uint64_t Text;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::TfToken *ColorSpace;
  const std::string *EmptyString;
  unsigned int *v27;
  unsigned int v28;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v30;
  int v31;
  void ***v32;
  NSObject *v33;
  uint64_t v34;
  int TextureSemanticFromInfoID;
  std::string __dst;
  __int128 __p;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int16 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  unsigned __int8 *v53[3];
  uint64_t v54;
  uint64_t v55;
  _BYTE buf[24];
  std::string v57;
  std::string v58;
  __int128 v59;
  __int16 v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  Inputs = (realityio *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(*((pxrInternal__aapl__pxrReserved__::UsdShadeShader **)this
                                                                                    + 17));
  if (v54 != v55)
  {
    v4 = v54;
    v5 = v55;
    v6 = (void **)((char *)this + 8);
    v7 = (void **)((char *)this + 104);
    v8 = (void **)((char *)this + 32);
    v9 = (void **)((char *)this + 56);
    v10 = (_OWORD *)((char *)this + 80);
    while (1)
    {
      *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v4);
      if (!atomic_load(&realityio::tokens::TextureBuilderTokens))
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
        goto LABEL_64;
      IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v4);
      if (!(_DWORD)IsValid
        || (IsValid = pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(), (IsValid & 1) == 0))
      {
        v15 = *(id *)(realityio::logObjects((realityio *)IsValid) + 24);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 17), &__dst);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = Text;
          _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__dst);
        }

        goto LABEL_64;
      }
      memset(v53, 0, sizeof(v53));
      if (buf[0])
      {
        if ((unint64_t)SHIBYTE(v60) > 2)
        {
          v13 = 6;
          v14 = "NotSet";
        }
        else
        {
          v13 = qword_230212180[SHIBYTE(v60)];
          v14 = off_24FDF33F0[SHIBYTE(v60)];
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
        memcpy(&__dst, v14, v13);
        __dst.__r_.__value_.__s.__data_[v13] = 0;
        std::string::operator=((std::string *)((char *)this + 8), (const std::string *)&buf[8]);
        std::string::operator=((std::string *)((char *)this + 32), &v57);
        std::string::operator=((std::string *)((char *)this + 56), &v58);
        *v10 = v59;
        *((_WORD *)this + 48) = v60;
        std::string::operator=((std::string *)((char *)this + 104), &v61);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v46 = *(_DWORD *)v4;
      v17 = *(_QWORD *)(v4 + 8);
      v47 = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 48);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)(v4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(v4 + 20));
      v20 = *(_QWORD *)(v4 + 24);
      v50 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 2, v21));
        if ((v22 & 1) == 0)
          v50 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__dst);
      realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&v51, &v46, (uint64_t)&__dst);
      if (SHIBYTE(v38) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v50 & 7) != 0)
      {
        v23 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
      if (v47)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
      std::string::operator=((std::string *)((char *)this + 8), &v51);
      std::string::operator=((std::string *)((char *)this + 32), &v52);
      ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v4);
      if ((__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
      std::string::operator=((std::string *)((char *)this + 56), EmptyString);
      if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v27 = (unsigned int *)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      *(_DWORD *)v10 = TextureSemanticFromInfoID;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData((pxrInternal__aapl__pxrReserved__::UsdObject *)v4);
      std::string::basic_string[abi:ne180100]<0>(&__dst, "downsampleFactor");
      ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      v30 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v30)
        goto LABEL_44;
LABEL_45:
      maybeSelectCachedImportOperationIfSemanticUnspecified(&__dst, (uint64_t)this + 8, (uint64_t)&v51, *((_QWORD *)this + 16));
      if (*((char *)this + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((_QWORD *)this + 3) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (*((char *)this + 55) < 0)
        operator delete(*v8);
      *(_OWORD *)v8 = __p;
      *((_QWORD *)this + 6) = v38;
      HIBYTE(v38) = 0;
      LOBYTE(__p) = 0;
      if (*((char *)this + 79) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = v39;
      *((_QWORD *)this + 9) = v40;
      HIBYTE(v40) = 0;
      LOBYTE(v39) = 0;
      *v10 = v41;
      *((_WORD *)this + 48) = v42;
      if (*((char *)this + 127) < 0)
      {
        operator delete(*v7);
        v31 = SHIBYTE(v40);
        *(_OWORD *)v7 = v43;
        *((_QWORD *)this + 15) = v44;
        HIBYTE(v44) = 0;
        LOBYTE(v43) = 0;
        if (v31 < 0)
          operator delete((void *)v39);
      }
      else
      {
        *(_OWORD *)v7 = v43;
        *((_QWORD *)this + 15) = v44;
        HIBYTE(v44) = 0;
        LOBYTE(v43) = 0;
      }
      if (SHIBYTE(v38) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      (**(void (***)(MtlxImageShaderProcess *, uint64_t))this)(this, v4);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v45, 0);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v32 = (void ***)realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)buf);
      *(_QWORD *)buf = v53;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v32);
LABEL_64:
      v4 += 32;
      if (v4 == v5)
        goto LABEL_69;
    }
    if (!ValueAtPath)
      goto LABEL_45;
LABEL_44:
    *((_DWORD *)this + 23) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v30);
    goto LABEL_45;
  }
  v33 = *(id *)(realityio::logObjects(Inputs) + 24);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(*((pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)this + 17), &__dst);
    v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v34;
    _os_log_impl(&dword_22FF26000, v33, OS_LOG_TYPE_DEFAULT, "Shader input \"file\" is not set on \"%s\"", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__dst);
  }

LABEL_69:
  *(_QWORD *)buf = &v54;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_2300A311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::getTextureSemanticFromInfoID(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t EmptyString;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v5;
  const char *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v12;
  unint64_t v13;
  const char *v14;
  int v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v21;
  uint64_t v22;
  const char *v23;
  int v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v29;
  uint64_t v30;
  const char *v31;
  int v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v37;
  unint64_t v38;
  const char *v39;
  int v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v45;
  uint64_t v46;
  const char *v47;
  int v48;
  size_t v49;
  size_t v50;
  uint64_t v51;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((*((_QWORD *)Data + 22) & 0xFFFFFFFFFFFFFFF8) != 0)
    v5 = (*((_QWORD *)Data + 22) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v5 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
  if (*(char *)(v5 + 23) >= 0)
    v6 = (const char *)v5;
  else
    v6 = *(const char **)v5;
  v7 = *(char *)(EmptyString + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(EmptyString + 23);
  else
    v8 = *(_QWORD *)(EmptyString + 8);
  v9 = strlen(v6);
  if (v8 >= v9)
  {
    v10 = *(_QWORD *)EmptyString;
    if (v7 >= 0)
      v10 = EmptyString;
    v9 = strcmp((const char *)(v10 + v8 - v9), v6);
    if (!(_DWORD)v9)
      return 3;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v11 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  v12 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  v13 = (*((_QWORD *)v12 + 23) & 0xFFFFFFFFFFFFFFF8) != 0
      ? (*((_QWORD *)v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 16
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  v14 = *(char *)(v13 + 23) >= 0 ? (const char *)v13 : *(const char **)v13;
  v15 = *(char *)(v11 + 23);
  v16 = v15 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(_QWORD *)(v11 + 8);
  v17 = strlen(v14);
  if (v16 >= v17)
  {
    v18 = *(_QWORD *)v11;
    if (v15 >= 0)
      v18 = v11;
    v17 = strcmp((const char *)(v18 + v16 - v17), v14);
    if (!(_DWORD)v17)
      return 3;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v19 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v17);
  v21 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v21)
    v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((*((_QWORD *)v21 + 24) & 0xFFFFFFFFFFFFFFF8) != 0)
    v22 = (*((_QWORD *)v21 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  if (*(char *)(v22 + 23) >= 0)
    v23 = (const char *)v22;
  else
    v23 = *(const char **)v22;
  v24 = *(char *)(v19 + 23);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v19 + 23);
  else
    v25 = *(_QWORD *)(v19 + 8);
  v26 = strlen(v23);
  if (v25 >= v26)
  {
    v27 = *(_QWORD *)v19;
    if (v24 >= 0)
      v27 = v19;
    v26 = strcmp((const char *)(v27 + v25 - v26), v23);
    if (!(_DWORD)v26)
      return 2;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v28 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v28 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v26);
  v29 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v29)
    v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((*((_QWORD *)v29 + 25) & 0xFFFFFFFFFFFFFFF8) != 0)
    v30 = (*((_QWORD *)v29 + 25) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
  if (*(char *)(v30 + 23) >= 0)
    v31 = (const char *)v30;
  else
    v31 = *(const char **)v30;
  v32 = *(char *)(v28 + 23);
  if (v32 >= 0)
    v33 = *(unsigned __int8 *)(v28 + 23);
  else
    v33 = *(_QWORD *)(v28 + 8);
  v34 = strlen(v31);
  if (v33 >= v34)
  {
    v35 = *(_QWORD *)v28;
    if (v32 >= 0)
      v35 = v28;
    v34 = strcmp((const char *)(v35 + v33 - v34), v31);
    if (!(_DWORD)v34)
      return 1;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v36 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
  v37 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v37)
    v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  v38 = (*((_QWORD *)v37 + 26) & 0xFFFFFFFFFFFFFFF8) != 0
      ? (*((_QWORD *)v37 + 26) & 0xFFFFFFFFFFFFFFF8) + 16
      : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
  v39 = *(char *)(v38 + 23) >= 0 ? (const char *)v38 : *(const char **)v38;
  v40 = *(char *)(v36 + 23);
  v41 = v40 >= 0 ? *(unsigned __int8 *)(v36 + 23) : *(_QWORD *)(v36 + 8);
  v42 = strlen(v39);
  if (v41 >= v42)
  {
    v43 = *(_QWORD *)v36;
    if (v40 >= 0)
      v43 = v36;
    v42 = strcmp((const char *)(v43 + v41 - v42), v39);
    if (!(_DWORD)v42)
      return 1;
  }
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    v44 = (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v42);
  v45 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v45)
    v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((*((_QWORD *)v45 + 27) & 0xFFFFFFFFFFFFFFF8) != 0)
    v46 = (*((_QWORD *)v45 + 27) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v46 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
  if (*(char *)(v46 + 23) >= 0)
    v47 = (const char *)v46;
  else
    v47 = *(const char **)v46;
  v48 = *(char *)(v44 + 23);
  if (v48 >= 0)
    v49 = *(unsigned __int8 *)(v44 + 23);
  else
    v49 = *(_QWORD *)(v44 + 8);
  v50 = strlen(v47);
  if (v49 < v50)
    return 0;
  v51 = *(_QWORD *)v44;
  if (v48 >= 0)
    v51 = v44;
  return strcmp((const char *)(v51 + v49 - v50), v47) == 0;
}

void `anonymous namespace'::makeImportSettingsForUsdPreviewSurface(uint64_t a1, const std::string *a2, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3, unsigned __int8 **a4)
{
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v9;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v10;
  unsigned int *v11;
  unsigned int v12;
  std::string::size_type v13;
  char v14;
  std::string::size_type v15;
  char v16;
  std::string::size_type v17;
  char v18;
  __int128 v19;
  std::string::size_type v20;
  char v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34[2];
  char v35;
  void *__p;
  char v37;
  _BYTE v38[8];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  __int128 v43;
  __int16 v44;
  std::string v45;
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[8];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  __int128 v57;
  __int16 v58;
  std::string v59;
  _QWORD v60[2];
  _QWORD v61[2];
  _BYTE v62[15];
  char v63;
  void *v64;
  char v65;
  std::string v66;
  std::string v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v54);
  std::string::basic_string[abi:ne180100]<0>(&v56, "");
  LODWORD(v57) = 0;
  DWORD1(v57) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v57) = 2;
  HIDWORD(v57) = 0;
  v58 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v59, "");
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a3, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)Data + 40));
  v9 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a3, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v9 + 24));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v34);
  if (v37 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v38[0])
  {
    std::string::operator=(&v54, (const std::string *)&v39);
    std::string::operator=(&v55, (const std::string *)((char *)&v40 + 8));
    std::string::operator=(&v56, &v42);
    v57 = v43;
    v58 = v44;
    std::string::operator=(&v59, &v45);
    v10 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v10)
      v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a3, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v10 + 40));
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v62);
    realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&v66, &v30, (uint64_t)v62);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v54 = v66;
    *((_BYTE *)&v66.__r_.__value_.__s + 23) = 0;
    v66.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      v55 = v67;
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = 0;
      v67.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
    else
    {
      v55 = v67;
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = 0;
      v67.__r_.__value_.__s.__data_[0] = 0;
    }
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(*(void **)v62);
    if ((v33 & 7) != 0)
    {
      v11 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
    if (v31)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
    v66.__r_.__value_.__r.__words[0] = v54.__r_.__value_.__l.__size_;
    v13 = v54.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    memset(&v54, 0, sizeof(v54));
    *(_QWORD *)v62 = v55.__r_.__value_.__l.__size_;
    v15 = v55.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v62[7] = *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    memset(&v55, 0, sizeof(v55));
    v17 = v56.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 7);
    v61[0] = v56.__r_.__value_.__l.__size_;
    v18 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    memset(&v56, 0, sizeof(v56));
    v19 = v57;
    *(_WORD *)(a1 + 96) = v58;
    *(_OWORD *)(a1 + 80) = v19;
    v20 = v59.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 7);
    v60[0] = v59.__r_.__value_.__l.__size_;
    v21 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    memset(&v59, 0, sizeof(v59));
    *(_BYTE *)a1 = 1;
    v22 = v66.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 23) = *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 7);
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v22;
    *(_BYTE *)(a1 + 31) = v14;
    v23 = *(_QWORD *)v62;
    *(_QWORD *)(a1 + 47) = *(_QWORD *)&v62[7];
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v23;
    *(_BYTE *)(a1 + 55) = v16;
    v24 = v61[0];
    *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)v61 + 7);
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 64) = v24;
    *(_BYTE *)(a1 + 79) = v18;
    v25 = v60[0];
    *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v60 + 7);
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(a1 + 112) = v25;
    *(_BYTE *)(a1 + 127) = v21;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v39;
    *(_OWORD *)(a1 + 24) = v40;
    *(_QWORD *)(a1 + 40) = v41;
    v40 = 0uLL;
    v41 = 0;
  }
  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)v38);
  if ((v49 & 7) != 0)
  {
    v26 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
  if (v47)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
  if ((v53 & 7) != 0)
  {
    v28 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  if (v51)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

void sub_2300A3B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(std::string *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  std::string::size_type v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  std::string *v22;
  const std::string::value_type **v23;
  int v25;
  __int128 v26;
  std::string::size_type v27;
  const std::string::value_type *v28[2];
  char v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v30 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v31 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, a2 + 5);
  v9 = *((_QWORD *)a2 + 3);
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::TextureBuilder::findSourceInput((uint64_t)&v30, (uint64_t)&v25);
  *a2 = v25;
  v12 = v26;
  *(_QWORD *)&v26 = 0;
  v13 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 4), (int *)&v26 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 5));
  if (&v25 == a2)
  {
    v17 = v27;
  }
  else
  {
    v14 = *((_QWORD *)a2 + 3);
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    v17 = 0;
    *((_QWORD *)a2 + 3) = v27;
    v27 = 0;
  }
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26 + 8);
  if ((_QWORD)v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  if ((v34 & 7) != 0)
  {
    v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  if (v31)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, (uint64_t)&v25);
  if (!(_BYTE)v25)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
    v22 = a1 + 1;
    if (*(char *)(a3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
      return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v25);
    }
    v23 = (const std::string::value_type **)(a3 + 24);
    goto LABEL_39;
  }
  if (SHIBYTE(v27) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v26;
    a1->__r_.__value_.__r.__words[2] = v27;
  }
  v22 = a1 + 1;
  if ((v29 & 0x80000000) == 0)
  {
    v23 = v28;
LABEL_39:
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)v23;
    v22->__r_.__value_.__r.__words[2] = (std::string::size_type)v23[2];
    return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v25);
  }
  std::string::__init_copy_ctor_external(v22, v28[0], (std::string::size_type)v28[1]);
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v25);
}

void sub_2300A3E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void MtlxImageShaderOutput::~MtlxImageShaderOutput(MtlxImageShaderOutput *this)
{
  *(_QWORD *)this = &off_24FDF3040;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t MtlxImageShaderOutput::instance(MtlxImageShaderOutput *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  std::string::size_type v4;
  uint64_t String;
  __int128 v6;
  std::string __p;
  std::string::size_type size;
  std::string v10;
  std::string v11[2];

  v4 = *((_QWORD *)this + 19);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF3118;
  __p.__r_.__value_.__l.__size_ = v4;
  if (v11[0].__r_.__value_.__s.__data_[0])
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &__p);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v6 = *(_OWORD *)String;
      v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v6;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    else
      __p = v10;
    size = v11[0].__r_.__value_.__l.__size_;
    if (v11[0].__r_.__value_.__l.__size_)
      RERetain();
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)this + 20, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v11);
}

void sub_2300A4074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0)
    operator delete(__p);
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void realityio::TextureBuilder::run(realityio::TextureBuilder *this, realityio::Inputs *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  realityio *isMtlxImageShader;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  realityio::TextureBuilder *v11;
  realityio::TextureBuilder ***v12;
  NSObject *v13;
  char *PrimPath;
  uint64_t Text;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t v28[16];
  uint8_t buf[16];
  __int128 v30;
  void *v31[2];
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  realityio::Inputs *v39;
  realityio::TextureBuilder **v40;
  realityio::TextureBuilder *v41;
  realityio::Inputs *v42;
  _QWORD *v43;
  _QWORD v44[4];

  v44[3] = *MEMORY[0x24BDAC8D0];
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v28, 2038, (uint64_t)this);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, (realityio::Inputs *)((char *)a2 + 32));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v23[0] = MEMORY[0x24BEE9D38] + 16;
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v13 = *(id *)(realityio::logObjects(Data) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v24);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = Text;
      _os_log_impl(&dword_22FF26000, v13, OS_LOG_TYPE_INFO, "TextureBuilder starts processing (Prim \"%s\")", buf, 0xCu);
    }

    v30 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)buf = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v31[0] = 0;
    v31[1] = 0;
    v30 = (unint64_t)&v30 + 8;
    *(_QWORD *)&buf[8] = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)buf);
    v16 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
    v17 = *(_QWORD *)a2;
    v38 = v23;
    v39 = (realityio::Inputs *)(v17 + 112);
    v37 = (_QWORD *)v16;
    *(_QWORD *)buf = off_24FDF30A8;
    v41 = this;
    v42 = a2;
    v44[0] = 0;
    v44[1] = 0;
    v43 = v44;
    v12 = (realityio::TextureBuilder ***)&v43;
    *(_QWORD *)buf = off_24FDF30A8;
    v11 = (realityio::TextureBuilder *)v44[0];
  }
  else
  {
    isMtlxImageShader = (realityio *)realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)v24, v5);
    if (!(_DWORD)isMtlxImageShader)
      goto LABEL_19;
    v8 = *(id *)(realityio::logObjects(isMtlxImageShader) + 24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v24);
      v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_INFO, "TextureBuilder starts processing (Prim \"%s\")", buf, 0xCu);
    }

    v30 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)buf = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v31[0] = 0;
    v31[1] = 0;
    v30 = (unint64_t)&v30 + 8;
    *(_QWORD *)&buf[8] = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)buf);
    v37 = v23;
    *(_QWORD *)buf = &off_24FDF3040;
    v38 = &v22;
    v39 = a2;
    v41 = 0;
    v42 = 0;
    v40 = &v41;
    MtlxImageShaderProcess::process((MtlxImageShaderProcess *)buf);
    realityio::TextureBuilder::setOutput((uint64_t *)this, (_anonymous_namespace_ *)v23, &v40);
    *(_QWORD *)buf = &off_24FDF3040;
    v11 = v41;
    v12 = &v40;
  }
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)v12, v11);
  if (v36 < 0)
    operator delete(__p);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(*(void **)&buf[8]);
LABEL_19:
  if ((v22 & 7) != 0)
  {
    v18 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  MEMORY[0x2348B1EC4](v23);
  if ((v27 & 7) != 0)
  {
    v20 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v28);
}

void sub_2300A44D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)va3);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  MEMORY[0x2348B1EC4]((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)va2);
  _Unwind_Resume(a1);
}

void sub_2300A4594()
{
  JUMPOUT(0x2300A458CLL);
}

uint64_t realityio::TextureBuilder::isMtlxImageShader(realityio::TextureBuilder *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v2;
  _QWORD *v3;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::TfToken *ShaderID;
  uint64_t EmptyString;
  unint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v13;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v15;
  uint64_t v17;
  char v18;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v19;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v20;
  uint64_t v21;
  _QWORD v22[3];
  void **TypeName;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  v3 = *(_QWORD **)(v2 + 24);
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v22[0] = MEMORY[0x24BEE9D38] + 16;
  if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (v21 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderID);
  v8 = *(unsigned __int8 *)(EmptyString + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(EmptyString + 8);
  if (v8 < 3)
    goto LABEL_17;
  if (v9 < 0)
    EmptyString = *(_QWORD *)EmptyString;
  if (strncmp((const char *)EmptyString, "ND_", 3uLL))
    goto LABEL_17;
  v13 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 19) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_17;
  v14 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 18) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_17:
    v5 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v22);
    v15 = v19;
    if (v19 == v20)
    {
      v5 = 0;
    }
    else
    {
      do
      {
        TypeName = (void **)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v15);
        if (!atomic_load(&realityio::tokens::TextureBuilderTokens))
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
        v17 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
        v5 = v17;
        v15 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v15 + 32);
        if (v15 == v20)
          v18 = 1;
        else
          v18 = v17;
      }
      while ((v18 & 1) == 0);
    }
    TypeName = (void **)&v19;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&TypeName);
  }
  if ((v21 & 7) != 0)
  {
    v10 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B1EC4](v22);
  return v5;
}

void sub_2300A47A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a5);
  if ((a5 & 7) != 0)
  {
    v6 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  MEMORY[0x2348B1EC4](va);
  _Unwind_Resume(a1);
}

void realityio::TextureBuilder::clear(realityio::TextureBuilder *this, realityio::Inputs *a2)
{
  int v2;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  std::mutex *v9;
  uint64_t v10;
  char *v11;
  realityio::TextureBuilder *v12;
  std::string *v13;
  __int128 v14;
  std::string::size_type v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::mutex *v30;
  std::__shared_weak_count *v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v30 = v5;
  v31 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::TextureBuilder::kOutputName(this);
  v9 = v5 + 1;
  std::mutex::lock(v5 + 1);
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v5->__m_.__opaque[32], v8);
  v11 = &v5->__m_.__opaque[40];
  if (&v5->__m_.__opaque[40] == (char *)v10)
  {
    std::operator+<char>();
    v13 = std::string::append(&v32, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v34 = v13->__r_.__value_.__r.__words[2];
    v33 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v27, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v33);
    v26 = v27;
    v15 = *((_QWORD *)&v28 + 1);
    v8 = (const void **)v28;
    v2 = SBYTE7(v29);
    *(_QWORD *)&v29 = 0;
    v28 = 0uLL;
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    std::mutex::unlock(v9);
    v27 = v26;
    if (v2 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v28, (const std::string::value_type *)v8, v15);
      v16 = (const void **)v28;
      LOBYTE(v2) = BYTE7(v29);
      operator delete(v8);
      v8 = v16;
    }
  }
  else
  {
    std::mutex::unlock(v5 + 1);
  }
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v11 == (char *)v10)
  {
    if ((v2 & 0x80) != 0)
      operator delete(v8);
  }
  else
  {
    v20 = *((_QWORD *)this + 2);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v27 = v20;
    *((_QWORD *)&v27 + 1) = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (const void **)realityio::TextureBuilder::kOutputName(v12);
    std::mutex::lock((std::mutex *)(v20 + 64));
    if (v20 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v20 + 40, v23))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v20 + 40), v23);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v20, (unsigned __int8 *)v23);
    std::mutex::unlock((std::mutex *)(v20 + 64));
    if (v19)
    {
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v29 = 0uLL;
    v28 = (unint64_t)&v28 + 8;
    *((_QWORD *)&v27 + 1) = 0;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)this + 280, (uint64_t)&v27);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&v27);
  }
}

void sub_2300A4A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  operator delete(v25);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *realityio::TextureBuilder::gatherTextureInfo(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v14;
  uint64_t IsA;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  pxrInternal__aapl__pxrReserved__ *v17;
  unint64_t *UsdPrimAllPrimsPredicate;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::UsdStage *v28;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  __int128 *v38;
  _QWORD *result;
  uint64_t v40;
  char v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  int v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD v66[4];
  char v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData **v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  _QWORD v76[2];
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85[4];
  std::string __p;
  unsigned int *v87;
  _QWORD v88[3];
  unsigned int *v89;
  _QWORD v90[3];
  _QWORD v91[3];
  _QWORD *v92;
  _BYTE v93[24];
  _BYTE *v94;
  uint64_t v95;
  char **v96;
  char *v97[2];
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v91, a5);
  v9 = (uint64_t)v92;
  if (!v92)
    goto LABEL_4;
  if (v92 != v91)
  {
    v9 = (*(uint64_t (**)(_QWORD *))(*v92 + 16))(v92);
LABEL_4:
    v94 = (_BYTE *)v9;
    goto LABEL_6;
  }
  v94 = v93;
  (*(void (**)(_QWORD *, _BYTE *))(v91[0] + 24))(v91, v93);
LABEL_6:
  v97[0] = 0;
  v97[1] = 0;
  v95 = a2;
  v96 = v97;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v10 = v92;
  if (v92 == v91)
  {
    v11 = 4;
    v10 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v89 = (unsigned int *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v89);
  realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v89, v90);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v89);
  v87 = (unsigned int *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v87);
  realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)a4, (uint64_t *)&v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v90, v88);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v87);
  v85[0] = (uint64_t)v93;
  v85[1] = (uint64_t)a1;
  v85[2] = (uint64_t)v90;
  v85[3] = (uint64_t)v88;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  if (a3)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v12);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v81, (uint64_t)v76);
    v71 = v82;
    v72 = &v81;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v74 = 0;
    v75 = 0;
    v13 = MEMORY[0x24BEE9DC8] + 16;
    while ((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v76[1] != v72
         || v76[0] != v71
         || v77 != v73
         || v78 != v74
         || v79 != v75
         || v80 != HIBYTE(v75))
    {
      v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v76, (uint64_t)v67);
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v14);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((IsA & 1) != 0
        || (pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)IsA),
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
            pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v66[3] = 0;
        v66[0] = v13;
        Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v66, Data, 0);
        if (v64 && (*(_BYTE *)(v64 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v63 + 32))(&v63))
        {
          v17 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v49, &v64, &v65);
          UsdPrimAllPrimsPredicate = (unint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v17);
          v19 = *UsdPrimAllPrimsPredicate;
          v20 = UsdPrimAllPrimsPredicate[1];
          v21 = UsdPrimAllPrimsPredicate[2];
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v19 & 0x2000) != 0 || (v20 & 0x2000) == 0))
          {
            v19 |= 0x2000uLL;
            v20 &= ~0x2000uLL;
          }
          v45 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19;
          v46 = v20;
          *(_QWORD *)&v47 = v21;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v49, (uint64_t *)&v45, (uint64_t)&v53);
          if ((BYTE8(v51) & 7) != 0)
          {
            v22 = (unsigned int *)(*((_QWORD *)&v51 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stlxr(v23 - 2, v22));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
          if (v50)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
          v49 = v53;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, &v54);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v50 + 1, &v55);
          v51 = v56;
          v52 = v57;
          v45 = v58;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v46, &v59);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v46 + 1, &v60);
          v47 = v61;
          v48 = v62;
          while (v49 != v45
               || v50 != v46
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v51, (uint64_t)&v47))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v49, (uint64_t)v41);
            realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(v85, (pxrInternal__aapl__pxrReserved__::UsdObject *)v41);
            if ((v44 & 7) != 0)
            {
              v24 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
            if (v42)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
            pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v49);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
        }
        MEMORY[0x2348B20B0](&v63);
        MEMORY[0x2348B24C4](v66);
      }
      if ((v70 & 7) != 0)
      {
        v26 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
      if (v68)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v68);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v76);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v73);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v38 = &v83;
  }
  else
  {
    v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v28);
    v30 = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
    v32 = *(_QWORD *)v30;
    v31 = *(_QWORD *)(v30 + 8);
    v33 = *(_QWORD *)(v30 + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v32 & 0x2000) != 0 || (v31 & 0x2000) == 0))
    {
      v32 |= 0x2000uLL;
      v31 &= ~0x2000uLL;
    }
    v49 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v32;
    v50 = v31;
    *(_QWORD *)&v51 = v33;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v81, (uint64_t *)&v49, (uint64_t)&v53);
    if ((BYTE8(v83) & 7) != 0)
    {
      v34 = (unsigned int *)(*((_QWORD *)&v83 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
    if (v82)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v82);
    v81 = v53;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v82, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v82 + 1, &v55);
    v83 = v56;
    v84 = v57;
    v49 = v58;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, &v59);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v50 + 1, &v60);
    v51 = v61;
    v52 = v62;
    while (v81 != v49
         || v82 != v50
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v83, (uint64_t)&v51))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v81, (uint64_t)&v45);
      realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(v85, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v45);
      if ((BYTE8(v47) & 7) != 0)
      {
        v36 = (unsigned int *)(*((_QWORD *)&v47 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      if (v46)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v81);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v38 = (__int128 *)&v54;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v38);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)v88, (_QWORD *)v88[1]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)v90, (_QWORD *)v90[1]);
  if (SHIBYTE(v100) < 0)
    operator delete(v98);
  std::__tree<std::string>::destroy((uint64_t)&v96, v97[0]);
  result = v94;
  if (v94 == v93)
  {
    v40 = 4;
    result = v93;
  }
  else
  {
    if (!v94)
      return result;
    v40 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v40))();
}

void sub_2300A539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&STACK[0x260], (_QWORD *)STACK[0x268]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v13 - 240, *(_QWORD **)(v13 - 232));
  if (*(char *)(v13 - 97) < 0)
    operator delete(*(void **)(v13 - 120));
  std::__tree<std::string>::destroy(a13, *(char **)(v13 - 136));
  v15 = *(_QWORD **)(v13 - 160);
  if (v15 == (_QWORD *)(v13 - 184))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 184);
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  _Unwind_Resume(a1);
}

void realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics(const std::string *a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _QWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  std::string::size_type *UsdPrimAllPrimsPredicate;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v12;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v13;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v16;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v17;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::TfToken *ColorSpace;
  const std::string *EmptyString;
  unsigned int *v29;
  unsigned int v30;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v32;
  uint64_t **v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v38;
  unsigned __int8 **v39;
  unsigned int *v40;
  unsigned int v41;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v42;
  unsigned int *v43;
  unsigned int v44;
  char v45;
  uint64_t **v46;
  char v47;
  char v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  char v53;
  int TextureSemanticFromInfoID;
  uint64_t v55;
  uint64_t **v57;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  _QWORD **v66;
  _QWORD *v67;
  uint64_t v68;
  std::string v69;
  void *v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  std::string v74;
  std::string __p;
  std::string v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  void *v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string __str;
  std::string v89;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v90;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v91;
  uint64_t v92;
  _QWORD v93[3];
  char v94[8];
  uint64_t v95;
  int v96;
  uint64_t v97;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v106;
  int v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v111;
  int v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  _QWORD v116[4];

  a4[1] = 0;
  a4[2] = 0;
  v57 = (uint64_t **)(a4 + 1);
  *a4 = a4 + 1;
  memset(v116, 0, 24);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v4);
  UsdPrimAllPrimsPredicate = (std::string::size_type *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
  v8 = *UsdPrimAllPrimsPredicate;
  v7 = UsdPrimAllPrimsPredicate[1];
  v9 = UsdPrimAllPrimsPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v8 & 0x2000) != 0 || (v7 & 0x2000) == 0))
  {
    v8 |= 0x2000uLL;
    v7 &= ~0x2000uLL;
  }
  v69.__r_.__value_.__r.__words[0] = v8;
  v69.__r_.__value_.__l.__size_ = v7;
  v69.__r_.__value_.__r.__words[2] = v9;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v74, (uint64_t *)&v69, (uint64_t)&v106);
  if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v10 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74.__r_.__value_.__r.__words[2]);
  if (v74.__r_.__value_.__l.__size_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74.__r_.__value_.__l.__size_);
  v102 = v106;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v103, &v107);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v103 + 1, &v108);
  v104 = v109;
  v105 = v110;
  v98 = v111;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v99, &v112);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v99 + 1, &v113);
  v100 = v114;
  v101 = v115;
  v55 = MEMORY[0x24BEE9D38] + 16;
  while (v102 != v98
       || v103 != v99
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v104, (uint64_t)&v100))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v102, (uint64_t)v94);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v12);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
      goto LABEL_129;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v93[0] = v55;
    Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    if ((v92 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
    {
      if (realityio::TextureBuilder::isMtlxImageShader((realityio::TextureBuilder *)v94, v13))
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v93);
        if (TextureSemanticFromInfoID)
        {
          v16 = v90;
          v17 = v91;
          while (1)
          {
            if (v16 == v17)
              goto LABEL_124;
            v74.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v16);
            if (!atomic_load(&realityio::tokens::TextureBuilderTokens))
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
            if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0
              && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v16)
              && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
            {
              break;
            }
LABEL_77:
            v16 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v16 + 32);
          }
          v61 = *(_DWORD *)v16;
          v19 = *((_QWORD *)v16 + 1);
          v62 = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 48);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, (_DWORD *)v16 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, (_DWORD *)v16 + 5);
          v22 = *((_QWORD *)v16 + 3);
          v65 = v22;
          if ((v22 & 7) != 0)
          {
            v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 2, v23));
            if ((v24 & 1) == 0)
              v65 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v74);
          realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, &v61, (uint64_t)&v74);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          if ((v65 & 7) != 0)
          {
            v25 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v26 = __ldxr(v25);
            while (__stlxr(v26 - 2, v25));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
          if (v62)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v74);
          std::string::basic_string[abi:ne180100]<0>(&v76, "");
          v77 = 0;
          v78 = realityio::TextureSwizzleChannels::kDefault;
          LOBYTE(v79) = 2;
          v80 = 0;
          v81 = 512;
          std::string::basic_string[abi:ne180100]<0>(&v82, "");
          std::string::operator=(&v74, &__str);
          std::string::operator=(&__p, &v89);
          ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(v16);
          if ((v69.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (const std::string *)((v69.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
          std::string::operator=(&v76, EmptyString);
          if ((v69.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v29 = (unsigned int *)(v69.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          v77 = TextureSemanticFromInfoID;
          pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(v16);
          std::string::basic_string[abi:ne180100]<0>(&v69, "downsampleFactor");
          ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
          v32 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v69.__r_.__value_.__l.__data_);
            if (!v32)
            {
LABEL_55:
              if (v77 && v77 != 6)
              {
                v33 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)a4);
                if (v57 != v33)
                  goto LABEL_63;
                v67 = 0;
                v68 = 0;
                v66 = &v67;
                std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(&v69, (__int128 *)&__str, (std::string::size_type *)&v66);
                v34 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>((uint64_t)a4, (uint64_t)&v69, (uint64_t)&v69);
                v53 = v35;
                v33 = (uint64_t **)v34;
                std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v72, v73);
                if (v71 < 0)
                  operator delete(v70);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v66, v67);
                if ((v53 & 1) != 0)
                {
LABEL_63:
                  if (v33 != v57)
                    std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(v33 + 10, (uint64_t)&v74, (const realityio::TextureImportOperationSettings *)&v74);
                }
              }
              std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v60, 0);
              if (v83 < 0)
                operator delete(v82);
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v76.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v89.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_77;
            }
          }
          else if (!ValueAtPath)
          {
            goto LABEL_55;
          }
          v80 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v32);
          goto LABEL_55;
        }
LABEL_124:
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      }
      goto LABEL_125;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v94, &v74);
    realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture((realityio::internal::TexturePrimToMaterialPrimMap *)&v90, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v74);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
    if (v91 != v90)
    {
      v36 = 0;
      if ((unint64_t)((v91 - v90) >> 3) <= 1)
        v37 = 1;
      else
        v37 = (v91 - v90) >> 3;
      do
      {
        v38 = v90;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v74, &v95, &v96);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v74, &v69);
        v39 = (unsigned __int8 **)realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v38 + 8 * v36));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
        if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v40 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74.__r_.__value_.__r.__words[2]);
        if (v74.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74.__r_.__value_.__l.__size_);
        if (!v39)
          v39 = (unsigned __int8 **)v116;
        v42 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v42)
          v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v93, (realityio::tokens::TextureBuilderTokens_StaticTokenType *)((char *)v42 + 40));
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v74);
        realityio::TextureBuilder::getUniformInputValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(&__str, &v84, (uint64_t)&v74);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if ((v87 & 7) != 0)
        {
          v43 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v86);
        if (v85)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v85);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v74);
        v45 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&__str, (unsigned __int8 *)&v74);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v74.__r_.__value_.__l.__data_);
          if ((v45 & 1) == 0)
          {
LABEL_106:
            if (v74.__r_.__value_.__s.__data_[0] && v79 && v79 != 6)
            {
              v46 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)a4);
              if (v57 != v46)
                goto LABEL_115;
              v67 = 0;
              v68 = 0;
              v66 = &v67;
              std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(&v69, (__int128 *)&__str, (std::string::size_type *)&v66);
              v46 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>((uint64_t)a4, (uint64_t)&v69, (uint64_t)&v69);
              v48 = v47;
              std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v72, v73);
              if (v71 < 0)
                operator delete(v70);
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v69.__r_.__value_.__l.__data_);
              std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v66, v67);
              if ((v48 & 1) != 0)
              {
LABEL_115:
                if (v46 != v57)
                  std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(v46 + 10, (uint64_t)&v74.__r_.__value_.__l.__size_, (const realityio::TextureImportOperationSettings *)&v74.__r_.__value_.__r.__words[1]);
              }
            }
            realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&v74);
          }
        }
        else if ((v45 & 1) == 0)
        {
          goto LABEL_106;
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v36;
      }
      while (v36 != v37);
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
LABEL_125:
    if ((v92 & 7) != 0)
    {
      v49 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    MEMORY[0x2348B1EC4](v93);
LABEL_129:
    if ((v97 & 7) != 0)
    {
      v51 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stlxr(v52 - 2, v51));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
    if (v95)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v102);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
}

void sub_2300A60C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a56);
  a56 = (void *)(v56 - 112);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a33, *(_QWORD **)(a33 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::gatherTextureInfo(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&,REServiceLocator *,BOOL,std::string const&,std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>)::$_0::operator()(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  uint64_t result;
  uint64_t v5;
  const std::string *String;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v7;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t (**v15)(_anonymous_namespace_::UsdUVTextureProcess *__hidden);
  void *v16[2];
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v15);
  String = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
  std::string::operator=((std::string *)(v5 + 64), String);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v29[0] = MEMORY[0x24BEE9D38] + 16;
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((v28 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v10 = *a1;
    v11 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a1[1]);
    v12 = a1[2];
    v25 = v29;
    v26 = v12;
    v24 = (_QWORD *)v11;
    v15 = off_24FDF3188;
    v27 = v10;
    goto LABEL_8;
  }
  if (realityio::TextureBuilder::isMtlxImageShader(a2, v7))
  {
    v9 = *a1;
    v15 = (uint64_t (**)(_anonymous_namespace_::UsdUVTextureProcess *__hidden))&off_24FDF31D0;
    v24 = v29;
    v25 = &v28;
    v26 = v9;
    MtlxImageShaderProcess::process((MtlxImageShaderProcess *)&v15);
LABEL_8:
    if (v23 < 0)
      operator delete(__p);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  return MEMORY[0x2348B1EC4](v29);
}

void sub_2300A654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  UsdInfoGatherer::~UsdInfoGatherer(&a9);
  v11 = *(_QWORD *)(v9 - 80);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  MEMORY[0x2348B1EC4](v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::createStandaloneTextureAssetData@<X0>(const void **a1@<X1>, realityio::TextureImportOperationSettings *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator;
  const void **v7;
  uint64_t AssetData;
  NSObject *v9;
  const std::error_category *v10;
  uint64_t v11;
  uint64_t v12;
  const std::error_category *v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::string v19;
  uint8_t buf[16];
  uint64_t v21;
  __int128 v22;
  const void *v23;
  _BYTE v24[8];

  ServiceLocator = REEngineGetServiceLocator();
  v23 = *a1;
  if (v23)
    CFRetain(v23);
  realityio::createRETextureImportOperation(ServiceLocator, (uint64_t)a2, 0, (uint64_t)v24);
  v7 = realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v23);
  if (v24[0])
  {
    realityio::TextureImportOperationSettings::makeTextureResourceKey(a2, &v19);
    RETextureImportOperationSetAssetResourceName();
    v18 = 0;
    AssetData = RETextureImportOperationCreateAssetData();
    if (AssetData)
    {
      if (*((_BYTE *)a2 + 80) == 5)
      {
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = AssetData;
        __p[0] = 0;
        realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(__p);
        realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(buf);
      }
    }
    else
    {
      v12 = v18;
      std::string::basic_string[abi:ne180100]<0>(__p, "Error running import operation");
      v13 = std::system_category();
      realityio::DetailedError::makeFromCFError(v12, (uint64_t)__p, (uint64_t)v13, buf);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v14 = v22;
      *(_QWORD *)(a3 + 24) = v21;
      *(_QWORD *)(a3 + 32) = v14;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v22 + 7);
      LOBYTE(v14) = HIBYTE(v22);
      v22 = 0uLL;
      v21 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v14;
      if (v17 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    v9 = *(NSObject **)(realityio::logObjects((realityio *)v7) + 24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v9, OS_LOG_TYPE_DEFAULT, "Could not create textureImportOperation", buf, 2u);
    }
    v10 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v19, "Could not create textureImportOperation");
    realityio::DetailedError::DetailedError(buf, 0, (uint64_t)v10, (__int128 *)&v19);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v11 = v22;
    *(_QWORD *)(a3 + 24) = v21;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v22 + 7);
    LOBYTE(v11) = HIBYTE(v22);
    v22 = 0uLL;
    v21 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)v24);
}

void sub_2300A67D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result(v22 - 80);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::createCubeMapTextureAssetData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const std::error_category *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  MEMORY[0x2348B1288](a2);
  v3 = RECreateCubeTextureDataFromLatLong();
  RERelease();
  if (v3)
  {
    *(_QWORD *)&v11 = 0;
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v3;
    __p[0] = 0;
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(__p);
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(&v11);
  }
  else
  {
    v4 = v14;
    std::string::basic_string[abi:ne180100]<0>(__p, "Error creating cube map from imported texture");
    v5 = std::system_category();
    realityio::DetailedError::makeFromCFError(v4, (uint64_t)__p, (uint64_t)v5, &v11);
    *(_OWORD *)(a1 + 8) = v11;
    v6 = v12;
    v15[0] = v13;
    *(_QWORD *)((char *)v15 + 7) = *(_QWORD *)((char *)&v13 + 7);
    v7 = HIBYTE(v13);
    v13 = 0uLL;
    v12 = 0;
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v15 + 7);
    v8 = v15[0];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 47) = v7;
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_2300A6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::TextureBuilder::createStandardTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string::size_type *a5@<X8>)
{
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int *v12;
  unsigned int v13;
  realityio *v14;
  std::string::size_type size;
  NSObject *v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  __int16 v24;
  std::string v25;
  _QWORD ***v26;
  _QWORD **v27;
  _QWORD *v28[2];
  std::string v29;
  std::string __p;
  std::string v31;
  std::string v32;
  std::string v33;
  __int128 v34;
  __int16 v35;
  std::string v36;
  uint8_t buf[4];
  _BYTE v38[12];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v28[0] = 0;
  v28[1] = 0;
  v27 = v28;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v18 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v19 = *(std::string *)(a3 + 24);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v20);
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  LODWORD(v23) = 0;
  DWORD1(v23) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v23) = 2;
  HIDWORD(v23) = 0;
  v24 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  v26 = &v27;
  v11 = atomic_load((unsigned __int8 *)&qword_255E54A18);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255E54A18))
  {
    qword_255E54A38 = 0;
    unk_255E54A40 = 0;
    qword_255E54A48 = 0;
    __cxa_guard_release(&qword_255E54A18);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v29 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    __p = v19;
  *(_DWORD *)buf = 3;
  *(_QWORD *)&v38[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v40 = 0;
  if ((v40 & 7) != 0)
  {
    v12 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  if (*(_QWORD *)&v38[4])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v38[4]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v31.__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(&v20, (const std::string *)&v31.__r_.__value_.__r.__words[1]);
    std::string::operator=(&v21, &v32);
    std::string::operator=(&v22, &v33);
    v23 = v34;
    v24 = v35;
    std::string::operator=(&v25, &v36);
  }
  realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result((uint64_t)&v31);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  BYTE8(v23) = *(_BYTE *)(a4 + 80);
  LODWORD(v23) = *(_DWORD *)(a4 + 72);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF3118;
  v29.__r_.__value_.__l.__size_ = a1;
  if (v31.__r_.__value_.__s.__data_[0])
  {
    size = v31.__r_.__value_.__l.__size_;
    *a5 = v31.__r_.__value_.__l.__size_;
    if (size)
      RERetain();
  }
  else
  {
    v16 = *(id *)(realityio::logObjects(v14) + 24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v29, (const std::error_code *)&v31.__r_.__value_.__r.__words[1]);
      v17 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v29
          : (std::string *)v29.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v38 = v17;
      _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_DEFAULT, "Could not create standard asset: %s", buf, 0xCu);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }

    *a5 = 0;
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&v31);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_2300A6DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::TextureBuilder::createStandaloneTextureAsset(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string::size_type *a4@<X8>)
{
  realityio *v8;
  std::string::size_type size;
  NSObject *v10;
  std::string *v11;
  std::string v12;
  std::string __p[2];
  std::string v14;
  std::string v15;
  std::string v16;
  int v17;
  void *v18;
  char v19;
  _QWORD **v20;
  _QWORD *v21[2];
  uint8_t buf[4];
  std::string *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::operator=(&v14, a2);
  std::string::operator=(&v15, a2 + 1);
  std::string::operator=(&v16, (const std::string *)a3);
  v17 = *(_DWORD *)(a3 + 24);
  if (__p[0].__r_.__value_.__s.__data_[0])
  {
    size = __p[0].__r_.__value_.__l.__size_;
    *a4 = __p[0].__r_.__value_.__l.__size_;
    if (size)
      RERetain();
  }
  else
  {
    v10 = *(id *)(realityio::logObjects(v8) + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v12, (const std::error_code *)&__p[0].__r_.__value_.__r.__words[1]);
      v11 = (v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v12
          : (std::string *)v12.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v23 = v11;
      _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_DEFAULT, "Could not create standard asset: %s", buf, 0xCu);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }

    *a4 = 0;
  }
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)__p);
  if (v19 < 0)
    operator delete(v18);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v20, v21[0]);
}

void sub_2300A710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::createTextureAsset(std::string *a1, uint64_t a2, realityio::TextureImportOperationSettings *this)
{
  uint64_t v6;
  std::string::size_type v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__ *Extension;
  void *v11;
  char *v12;
  CFDataRef v13;
  void *v14;
  const std::error_category *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const UInt8 *v30;
  CFIndex v31;
  CFDataRef v32;
  __int128 *v33;
  uint64_t ServiceLocator;
  uint64_t AssetData;
  const std::error_category *v36;
  char v37;
  const std::error_category *v38;
  char v39;
  uint64_t v40;
  const std::error_category *v41;
  char v42;
  __int128 *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t TextureAssetFromDataWithParameters;
  std::string::size_type v54;
  char v55[8];
  __int128 v56;
  std::string v57;
  uint64_t v58;
  uint64_t v59;
  std::string v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  void *v64[2];
  _BYTE v65[24];
  CFDataRef v66;
  __int128 v67;
  std::string v68;
  char v69;
  CFDataRef v70;
  __int128 v71;
  __int128 v72;
  std::string v73;
  __int128 v74;
  char v75;
  __int128 *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v60);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v67, a2);
  if (v68.__r_.__value_.__s.__data_[7] >= 0)
    v6 = v68.__r_.__value_.__s.__data_[7];
  else
    v6 = *((_QWORD *)&v67 + 1);
  if (v69 < 0)
  {
    operator delete((void *)v68.__r_.__value_.__l.__size_);
    if ((v68.__r_.__value_.__s.__data_[7] & 0x80) == 0)
      goto LABEL_6;
  }
  else if ((v68.__r_.__value_.__s.__data_[7] & 0x80) == 0)
  {
    goto LABEL_6;
  }
  operator delete((void *)v67);
LABEL_6:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a2 + 8))(&v59, a2, &v60);
  v58 = 0;
  v7 = v59;
  if (v59)
  {
    RERetain();
    a1->__r_.__value_.__s.__data_[0] = 1;
    a1->__r_.__value_.__l.__size_ = v7;
    *(_QWORD *)&v67 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v67);
    goto LABEL_109;
  }
  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v73);
  v72 = 0uLL;
  v71 = 0uLL;
  v70 = 0;
  v9 = *((unsigned __int8 *)this + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
    Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
    v11 = (void *)v65[7];
    if (v65[7] < 0)
      v11 = v64[1];
    if (v11)
    {
      pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
      if (*((char *)this + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v67, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
      }
      else
      {
        v67 = *(_OWORD *)((char *)this + 24);
        v68.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 5);
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
      v16 = v74;
      v74 = 0uLL;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      v72 = v16;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v68.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v67);
      if ((_QWORD)v72)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v72 + 24))(&v67);
        v23 = v67;
        v67 = 0uLL;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        v71 = v23;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = (const UInt8 *)v71;
        if ((_QWORD)v71)
        {
          v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v72 + 16))(v72);
          v32 = CFDataCreateWithBytesNoCopy(0, v30, v31, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
          if (v70)
            CFRelease(v70);
          v70 = v32;
          if ((v65[7] & 0x80000000) != 0)
          {
            v14 = v64[0];
            goto LABEL_55;
          }
          goto LABEL_56;
        }
        v15 = std::system_category();
        std::string::basic_string[abi:ne180100]<0>(&v74, "Could not get asset buffer");
      }
      else
      {
        v15 = std::system_category();
        std::string::basic_string[abi:ne180100]<0>(&v74, "Could not retrieve asset path");
      }
    }
    else
    {
      v15 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(&v74, "Missing extension.");
    }
    realityio::DetailedError::DetailedError(&v67, 0, (uint64_t)v15, &v74);
    v56 = v67;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 7);
    v39 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    memset(&v68, 0, sizeof(v68));
    v55[0] = 0;
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = v39;
    if (v75 < 0)
      operator delete((void *)v74);
    goto LABEL_69;
  }
  if (*((char *)this + 23) >= 0)
    v12 = (char *)this;
  else
    v12 = *(char **)this;
  std::string::basic_string[abi:ne180100]<0>(&v67, v12);
  (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)a2 + 48))(v64, a2, &v67);
  v13 = v70;
  if (v70 != v64[0])
  {
    v70 = (CFDataRef)v64[0];
    v64[0] = v13;
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)v64);
  if (v68.__r_.__value_.__s.__data_[7] < 0)
  {
    v14 = (void *)v67;
LABEL_55:
    operator delete(v14);
  }
LABEL_56:
  if (!v70)
  {
    v36 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(v64, "Could not retrieve texture data");
    realityio::DetailedError::DetailedError(&v67, 0, (uint64_t)v36, (__int128 *)v64);
    v56 = v67;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v68.__r_.__value_.__r.__words[1] + 7);
    v37 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    memset(&v68, 0, sizeof(v68));
    v55[0] = 0;
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = v37;
LABEL_69:
    if ((v65[7] & 0x80000000) != 0)
      operator delete(v64[0]);
    goto LABEL_80;
  }
  v33 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v33 = &off_24FDF3200;
  *((_QWORD *)v33 + 1) = &v71;
  *((_QWORD *)v33 + 2) = &v72;
  *((_QWORD *)v33 + 3) = &v70;
  v76 = v33;
  (**(void (***)(uint64_t))a2)(a2);
  ServiceLocator = REEngineGetServiceLocator();
  v66 = v70;
  if (v70)
    CFRetain(v70);
  realityio::createRETextureImportOperation(ServiceLocator, (uint64_t)this, (uint64_t)&v74, (uint64_t)&v67);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v66);
  if (!(_BYTE)v67)
  {
    v38 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(v62, "Could not instantiate import operation");
    realityio::DetailedError::DetailedError(v64, 0, (uint64_t)v38, (__int128 *)v62);
    goto LABEL_72;
  }
  RETextureImportOperationSetAssetResourceName();
  v61 = 0;
  AssetData = RETextureImportOperationCreateAssetData();
  if (!AssetData)
  {
    v40 = v61;
    std::string::basic_string[abi:ne180100]<0>(v62, "Error running import operation");
    v41 = std::system_category();
    realityio::DetailedError::makeFromCFError(v40, (uint64_t)v62, (uint64_t)v41, v64);
LABEL_72:
    v56 = *(_OWORD *)v64;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)v65;
    *(std::string::size_type *)((char *)&v57.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v65[15];
    v42 = v65[23];
    memset(v65, 0, sizeof(v65));
    v55[0] = 0;
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = v42;
    if (v63 < 0)
      operator delete(v62[0]);
    goto LABEL_75;
  }
  if (*((_BYTE *)this + 80) == 5)
  {
  }
  else
  {
    v64[0] = 0;
    v55[0] = 1;
    *(_QWORD *)&v56 = AssetData;
    v62[0] = 0;
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(v62);
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(v64);
  }
LABEL_75:
  realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&v67);
  v43 = v76;
  if (v76 == &v74)
  {
    v44 = 4;
    v43 = &v74;
    goto LABEL_79;
  }
  if (v76)
  {
    v44 = 5;
LABEL_79:
    (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
  }
LABEL_80:
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v70);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (!v55[0])
  {
    v67 = v56;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v68, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v68 = v57;
    a1->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a1->__r_.__value_.__r.__words[1] = v67;
    a1[1] = v68;
    goto LABEL_108;
  }
  (**(void (***)(uint64_t))a2)(a2);
  v51 = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](v51);
  if (v6)
  {
    v52 = REMemoryAssetParametersCreate();
    if (v58)
      RERelease();
    v58 = v52;
    REMemoryAssetParametersSetAsyncRegistration();
    REMemoryAssetParametersSetAssetName();
    TextureAssetFromDataWithParameters = REAssetManagerCreateTextureAssetFromDataWithParameters();
    if (!v59)
      goto LABEL_102;
    goto LABEL_101;
  }
  TextureAssetFromDataWithParameters = REAssetManagerCreateTextureAssetFromDataAsync();
  if (v59)
LABEL_101:
    RERelease();
LABEL_102:
  v59 = TextureAssetFromDataWithParameters;
  if (TextureAssetFromDataWithParameters)
  {
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)a2 + 24))(a2, &v60, &v59);
    (*(void (**)(uint64_t, char *, realityio::TextureImportOperationSettings *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 24, this);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 40))(a2, &v59);
    REAssetSetMetadataString();
    v54 = v59;
  }
  else
  {
    v54 = 0;
  }
  v59 = 0;
  a1->__r_.__value_.__s.__data_[0] = 1;
  a1->__r_.__value_.__l.__size_ = v54;
  *(_QWORD *)&v67 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v67);
LABEL_108:
  realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result((uint64_t)v55);
LABEL_109:
  realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&v58);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v59);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
}

void sub_2300A7A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;

  if (a30 < 0)
    operator delete(__p);
  realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&a40);
  v47 = *(_QWORD **)(v45 - 88);
  if (v47 == (_QWORD *)(v45 - 112))
  {
    v48 = 4;
    v47 = (_QWORD *)(v45 - 112);
  }
  else
  {
    if (!v47)
      goto LABEL_8;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_8:
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)(v45 - 184));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v45 - 176);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v45 - 160);
  if (*(char *)(v45 - 113) < 0)
    operator delete(*(void **)(v45 - 136));
  realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&a16);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a17);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

unint64_t *realityio::internal::TexturePrimToMaterialPrimMap::materialPathsUsingTexture(realityio::internal::TexturePrimToMaterialPrimMap *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unint64_t *result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  _DWORD *v10;
  unint64_t *v11;
  unint64_t *v12;
  BOOL v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2, a3);
  v6 = result;
  if ((unint64_t *)((char *)a2 + 8) != result)
  {
    result = (unint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve((uint64_t *)this, result[7]);
    v7 = (unint64_t *)v6[5];
    v8 = v6 + 6;
    if (v7 != v6 + 6)
    {
      v9 = (unint64_t *)*((_QWORD *)this + 1);
      do
      {
        v10 = v7 + 4;
        if ((unint64_t)v9 >= *((_QWORD *)this + 2))
        {
          result = (unint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)this, v10);
          v9 = result;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, v10);
          result = (unint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9++ + 1, (_DWORD *)v7 + 9);
        }
        *((_QWORD *)this + 1) = v9;
        v11 = (unint64_t *)v7[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (unint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (unint64_t *)v7[2];
            v13 = *v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v13);
        }
        v7 = v12;
      }
      while (v12 != v8);
    }
  }
  return result;
}

void sub_2300A7C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::internal::TexturePrimToMaterialPrimMap::connectionsBetweenTextureAndMaterial(realityio::internal::TexturePrimToMaterialPrimMap *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;

  v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, a2);
  if ((_QWORD *)((char *)this + 8) == v5)
    return 0;
  v6 = v5 + 6;
  v7 = (_QWORD *)v5[6];
  if (!v7)
    goto LABEL_9;
  v8 = v5 + 6;
  do
  {
    v9 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 4), a3);
    v10 = v7 + 1;
    if (!v9)
    {
      v10 = v7;
      v8 = v7;
    }
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v8 == v6
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 4)))
  {
LABEL_9:
    v8 = v6;
  }
  if (v6 == v8)
    return 0;
  else
    return v8 + 5;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::~pair(uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void realityio::TextureBuilder::~TextureBuilder(id *this)
{
  realityio::TextureBuilder::~TextureBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::TextureBuilder *v2;
  uint64_t v3;
  realityio::TextureBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDF2FC8;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::TextureBuilder *)this[34];
  if (v2 == (realityio::TextureBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::TextureBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::TextureBuilder *)this[30];
  if (v4 == (realityio::TextureBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::TextureBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

std::string *realityio::TextureImportOperationSettings::TextureImportOperationSettings(std::string *this, const realityio::TextureImportOperationSettings *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_OWORD *)((char *)a2 + 72);
  LOWORD(this[3].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 44);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v8;
  v9 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_2300A7EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void realityio::TextureBuilder::TextureDataT::~TextureDataT(id *this)
{

  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 2), this[3]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void `anonymous namespace'::UsdUVTextureOutput::multipleMaterialStart(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 192);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t `anonymous namespace'::UsdUVTextureOutput::multipleMaterialInstance(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  std::string::size_type v2;
  __int128 **v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t **v6;
  std::string __p;
  uint64_t v9;
  std::string v10;

  v2 = *((_QWORD *)this + 22);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF3118;
  __p.__r_.__value_.__l.__size_ = v2;
  if (v10.__r_.__value_.__s.__data_[0])
  {
    v3 = (__int128 **)*((_QWORD *)this + 20);
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      v6 = (uint64_t **)((char *)this + 184);
      do
      {
        std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(&__p, v4, &v10.__r_.__value_.__l.__size_);
        std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v4 += 3;
      }
      while (v4 != v5);
    }
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&v10);
}

void sub_2300A80A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::~pair((uint64_t)&a9);
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::UsdUVTextureOutput::multipleMaterialEnd(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  realityio::TextureBuilder::setOutput(*((uint64_t **)this + 21), *((_anonymous_namespace_ **)this + 18), (_QWORD *)this + 23);
}

uint64_t `anonymous namespace'::UsdUVTextureOutput::singleMaterialInstance(_anonymous_namespace_::UsdUVTextureOutput *this)
{
  uint64_t v2;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v3;
  uint64_t *v4;
  _anonymous_namespace_ *v5;
  void *v6;
  _QWORD *v7;
  void *p_p;
  id v9;
  uint64_t *v10;
  realityio::TextureBuilder *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v20[2];
  std::string::size_type v21;
  uint64_t *v22;
  void *__p;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  _QWORD v26[3];
  std::string::size_type size;
  uint64_t (**v28)(_anonymous_namespace_::InputsContext *__hidden);
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;

  v2 = *((_QWORD *)this + 22);
  v28 = &off_24FDF3118;
  v29 = v2;
  if (v20[0].__r_.__value_.__s.__data_[0])
  {
    v4 = (uint64_t *)*((_QWORD *)this + 21);
    v5 = (_anonymous_namespace_ *)*((_QWORD *)this + 18);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v28);
    v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"_texture_", 9);
    size = v20[0].__r_.__value_.__l.__size_;
    if (v20[0].__r_.__value_.__l.__size_)
      RERetain();
    std::stringbuf::str();
    if (SHIBYTE(v25) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    realityio::Builder::addAsset(v4, (uint64_t *)&size, (uint64_t)p_p);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&size);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v5, &v22);
    v21 = v20[0].__r_.__value_.__l.__size_;
    if (v20[0].__r_.__value_.__l.__size_)
      RERetain();
    v9 = v6;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, &v22);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)&v22 + 1);
    v26[0] = 0;
    v26[1] = 0;
    v24 = 0;
    v25 = v26;
    v10 = v4 + 35;
    v26[2] = v9;
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)(v4 + 35), (uint64_t)&__p);
    realityio::TextureBuilder::TextureDataT::~TextureDataT(&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v11 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    v13 = (void *)v4[2];
    v12 = (std::__shared_weak_count *)v4[3];
    __p = v13;
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (__int128 *)realityio::TextureBuilder::kOutputName(v11);
    v22 = v10;
    realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>((uint64_t)v13, v16, &v22);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v28 = (uint64_t (**)(_anonymous_namespace_::InputsContext *__hidden))*MEMORY[0x24BEDB800];
    *(uint64_t (***)(_anonymous_namespace_::InputsContext *__hidden))((char *)&v28 + (_QWORD)*(v28 - 3)) = *(uint64_t (***)(_anonymous_namespace_::InputsContext *__hidden))(MEMORY[0x24BEDB800] + 24);
    v29 = MEMORY[0x24BEDB848] + 16;
    if (v31 < 0)
      operator delete(v30);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v32);

  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_2300A8330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  std::ostringstream::~ostringstream((uint64_t)&a31);

  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TextureAssetInstance::TextureAssetInstance(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  std::string *v8;

  v6 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)a1);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v6 + 48), "");
  v7 = realityio::TextureSwizzleChannels::kDefault;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *(_BYTE *)(a1 + 80) = 2;
  *(_DWORD *)(a1 + 84) = 0;
  *(_WORD *)(a1 + 88) = 512;
  v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 96), "");
  *(_QWORD *)(a1 + 120) = a3;
  std::string::operator=(v8, a2);
  return a1;
}

void sub_2300A8454(_Unwind_Exception *a1)
{
  void **v1;

  realityio::TextureImportOperationSettings::~TextureImportOperationSettings(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  this[1].__r_.__value_.__r.__words[0] = *a3;
  if (v6)
    RERetain();
  return this;
}

void sub_2300A8510(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (v5)
    RERetain();
  return this;
}

void sub_2300A8588(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::getSamplerAddressMode(_anonymous_namespace_ *this, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v3;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v4;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v5;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  unsigned int *v10;
  unsigned int v11;
  __int16 v12;
  uint8_t buf[2];
  uint64_t v14;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
    return;
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
  if ((v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)Data + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v3 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v3)
      v3 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    if ((v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFFFF8))
    {
      v4 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
      if (!v4)
        v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
      if ((v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v4 + 10) & 0xFFFFFFFFFFFFFFF8))
      {
        v5 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v5)
          v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
        if ((v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v5 + 11) & 0xFFFFFFFFFFFFFFF8))
        {
          v6 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v6)
            v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
          if ((v14 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 12) & 0xFFFFFFFFFFFFFFF8))
          {
            v7 = *(NSObject **)(realityio::logObjects(v6) + 24);
            if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
              goto LABEL_26;
            *(_WORD *)buf = 0;
            v8 = "Reading wrap mode from image metadata is currently not supported; defaulting to \"repeat\"";
            v9 = buf;
          }
          else
          {
            v7 = *(NSObject **)(realityio::logObjects(v6) + 24);
            if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
              goto LABEL_26;
            v12 = 0;
            v8 = "Wrap mode for imported USD was an invalid option; defaulting to \"repeat\"";
            v9 = (uint8_t *)&v12;
          }
          _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
        }
      }
    }
  }
LABEL_26:
  if ((v14 & 7) != 0)
  {
    v10 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
}

void sub_2300A87B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureBuilder::TextureDataT::TextureDataT(uint64_t a1, _DWORD *a2, _QWORD *a3, void *a4)
{
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v7 = a4;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), a2 + 1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *a3;
  v9 = a3 + 1;
  v8 = a3[1];
  *(_QWORD *)(a1 + 24) = v8;
  v10 = a1 + 24;
  v11 = a3[2];
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = 0;
    *(_QWORD *)(v8 + 16) = v10;
    *a3 = v9;
    *v9 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v10;
    v12 = (_QWORD *)*v9;
  }
  *(_QWORD *)(a1 + 40) = v7;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)a3, v12);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v9;
  return a1;
}

void `anonymous namespace'::makeImportSettingsForAsset(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::UsdObject *a5, unsigned __int8 **a6)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  const std::error_category *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  std::string::size_type size;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  pxrInternal__aapl__pxrReserved__::TfToken *ColorSpace;
  const std::string *EmptyString;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v49;
  uint64_t v50;
  pxrInternal__aapl__pxrReserved__::VtValue *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  const pxrInternal__aapl__pxrReserved__::TfToken *v57;
  unsigned int *v58;
  unsigned int v59;
  const std::error_category *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v67;
  std::string::size_type v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  char shouldRestrictTo8bits;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v86;
  unint64_t v87;
  uint64_t v90;
  int v91;
  int v93;
  _BYTE *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v104;
  uint64_t v107;
  int v108;
  BOOL v109;
  int v110;
  int v114;
  unint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  unint64_t *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t *v127;
  unint64_t **v128;
  unint64_t *v130;
  int v131;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  __int128 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  __int128 *p_p;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::string::size_type v161;
  char v162;
  std::string::size_type v163;
  char v164;
  std::string::size_type v165;
  char v166;
  __int128 v167;
  std::string::size_type v168;
  char v169;
  std::string::size_type v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  unsigned __int8 **v185;
  unsigned int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  std::string v192;
  std::string v193;
  std::string v194;
  __int128 v195;
  __int16 v196;
  std::string v197;
  uint64_t v198;
  __int128 __p;
  uint64_t v200;
  __int128 v201;
  _BYTE v202[15];
  std::string v203;
  __int128 v204;
  __int128 v205;
  int v206;
  int v207;
  uint64_t v208;
  __int128 v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v192);
  std::string::basic_string[abi:ne180100]<0>(&v194, "");
  LODWORD(v195) = 0;
  DWORD1(v195) = realityio::TextureSwizzleChannels::kDefault;
  BYTE8(v195) = 2;
  HIDWORD(v195) = 0;
  v196 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v197, "");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a3) & 1) != 0)
  {
    v185 = a6;
    LODWORD(v209) = *(_DWORD *)a3;
    v12 = *(_QWORD *)(a3 + 8);
    *((_QWORD *)&v209 + 1) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 48);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v210, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v211, (_DWORD *)(a3 + 20));
    v15 = *(_QWORD *)(a3 + 24);
    v212 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v212 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(_QWORD *)(a4 + 8))
        goto LABEL_63;
    }
    else if (*(_BYTE *)(a4 + 23))
    {
      goto LABEL_63;
    }
    realityio::findOriginalSourceAttribute((realityio *)a3, (uint64_t)&v203);
    LODWORD(v209) = v203.__r_.__value_.__l.__data_;
    size = v203.__r_.__value_.__l.__size_;
    v203.__r_.__value_.__l.__size_ = 0;
    v23 = *((_QWORD *)&v209 + 1);
    *((_QWORD *)&v209 + 1) = size;
    if (v23)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v210, (int *)&v203.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v211);
    if ((v212 & 7) != 0)
    {
      v24 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    v212 = v204;
    *(_QWORD *)&v204 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203.__r_.__value_.__r.__words[2]);
    if (v203.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v203.__r_.__value_.__l.__size_);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, (uint64_t *)&v209 + 1, &v210);
    MEMORY[0x2348B274C](v202, "info:id");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)v202);
    if ((v202[0] & 7) != 0)
    {
      v26 = (unsigned int *)(*(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((v201 & 7) != 0)
    {
      v28 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v203))
    {
      *(_QWORD *)v202 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>())
      {
        MEMORY[0x2348B274C](&__p, "ND_constant_filename");
        v30 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
        v31 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
        if ((__p & 7) != 0)
        {
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        if ((unsigned int *)v30 == v31)
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, (uint64_t *)&v209 + 1, &v210);
          MEMORY[0x2348B274C](&v198, "inputs:value");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v198);
          if ((v198 & 7) != 0)
          {
            v178 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
            do
              v179 = __ldxr(v178);
            while (__stlxr(v179 - 2, v178));
          }
          if ((v201 & 7) != 0)
          {
            v180 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
            do
              v181 = __ldxr(v180);
            while (__stlxr(v181 - 2, v180));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
          if (*((_QWORD *)&__p + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
          if ((v202[0] & 7) != 0)
          {
            v182 = (unsigned int *)(*(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8);
            do
              v183 = __ldxr(v182);
            while (__stlxr(v183 - 2, v182));
          }
          v35 = 0;
          goto LABEL_40;
        }
      }
      if ((v202[0] & 7) != 0)
      {
        v33 = (unsigned int *)(*(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
    }
    v35 = 1;
LABEL_40:
    if ((v204 & 7) != 0)
    {
      v36 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203.__r_.__value_.__r.__words[2]);
    if (v203.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v203.__r_.__value_.__l.__size_);
    if (v35)
    {
      LODWORD(v205) = v209;
      *((_QWORD *)&v205 + 1) = *((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 48);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v206, &v210);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v207, &v211);
      v208 = v212;
      if ((v212 & 7) != 0)
      {
        v40 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 2, v40));
        if ((v41 & 1) == 0)
          v208 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    LODWORD(v209) = v205;
    v42 = *((_QWORD *)&v205 + 1);
    *((_QWORD *)&v205 + 1) = 0;
    v43 = *((_QWORD *)&v209 + 1);
    *((_QWORD *)&v209 + 1) = v42;
    if (v43)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v210, &v206);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v211);
    if ((v212 & 7) != 0)
    {
      v44 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    v212 = v208;
    v208 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v206);
    if (*((_QWORD *)&v205 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v205 + 1));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v209, (uint64_t)&v203);
    if (!v203.__r_.__value_.__s.__data_[0])
    {
      v60 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(&v205, "Attribute is not an asset path");
      realityio::DetailedError::DetailedError(&__p, 0, (uint64_t)v60, &v205);
      *(_OWORD *)(a1 + 8) = __p;
      v61 = v200;
      *(_QWORD *)v202 = v201;
      *(_QWORD *)&v202[7] = *(_QWORD *)((char *)&v201 + 7);
      v62 = HIBYTE(v201);
      v201 = 0uLL;
      v200 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)&v202[7];
      v63 = *(_QWORD *)v202;
      *(_QWORD *)(a1 + 24) = v61;
      *(_QWORD *)(a1 + 32) = v63;
      *(_BYTE *)(a1 + 47) = v62;
      if (SHIBYTE(v207) < 0)
        operator delete((void *)v205);
      realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v203);
      goto LABEL_404;
    }
    std::string::operator=((std::string *)a4, (const std::string *)&v203.__r_.__value_.__r.__words[1]);
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)((char *)&v204 + 8));
    realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v203);
LABEL_63:
    std::string::operator=(&v192, (const std::string *)a4);
    std::string::operator=(&v193, (const std::string *)(a4 + 24));
    std::string::operator=(&v197, a2);
    ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v209);
    if ((v198 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((v198 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
    std::string::operator=(&v194, EmptyString);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData((pxrInternal__aapl__pxrReserved__::UsdObject *)&v209);
    std::string::basic_string[abi:ne180100]<0>(&v203, "downsampleFactor");
    ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    v49 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v203.__r_.__value_.__l.__data_);
      if (!v49)
        goto LABEL_71;
    }
    else if (!ValueAtPath)
    {
LABEL_71:
      std::string::basic_string[abi:ne180100]<0>(&v203, "RealityKit:compression");
      v50 = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      v51 = (pxrInternal__aapl__pxrReserved__::VtValue *)v50;
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v203.__r_.__value_.__l.__data_);
        if (!v51)
          goto LABEL_96;
      }
      else if (!v50)
      {
        goto LABEL_96;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v51))
      {
        v52 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v51);
        if (*(char *)(v52 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
        }
        else
        {
          v53 = *(_OWORD *)v52;
          v203.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
          *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v53;
        }
        MEMORY[0x2348B2764](&__p, &v203);
        realityio::TextureCompression::TextureCompression((realityio::TextureCompression *)&v205, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        HIBYTE(v196) = v205;
        if ((__p & 7) != 0)
        {
          v64 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v203.__r_.__value_.__l.__data_);
      }
      else
      {
        v54 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v51);
        if ((v54 & 7) != 0)
        {
          v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 2, v55));
          if ((v56 & 1) == 0)
            v54 &= 0xFFFFFFFFFFFFFFF8;
        }
        v57 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v51);
        realityio::TextureCompression::TextureCompression((realityio::TextureCompression *)&v203, v57);
        HIBYTE(v196) = v203.__r_.__value_.__s.__data_[0];
        if ((v54 & 7) != 0)
        {
          v58 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
          do
            v59 = __ldxr(v58);
          while (__stlxr(v59 - 2, v58));
        }
      }
LABEL_96:
      LODWORD(v195) = 6;
      v184 = a1;
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a5))
        goto LABEL_112;
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v194.__r_.__value_.__l.__size_)
          goto LABEL_112;
      }
      else if (*((_BYTE *)&v194.__r_.__value_.__s + 23))
      {
        goto LABEL_112;
      }
      v203.__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
      if ((v203.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 4) & 0xFFFFFFFFFFFFFFF8))
      {
        LODWORD(v195) = 3;
        MEMORY[0x2348B4AD4](&v194, "sRGB");
        v68 = v203.__r_.__value_.__r.__words[0];
      }
      else
      {
        v67 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v67)
          v67 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
        v68 = v203.__r_.__value_.__r.__words[0];
        if ((v203.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v67 + 29) & 0xFFFFFFFFFFFFFFF8))
          LODWORD(v195) = 1;
      }
      if ((v68 & 7) != 0)
      {
        v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
LABEL_112:
      v72 = *v185;
      v71 = v185[1];
      if (v71 != *v185)
      {
        v73 = realityio::TextureSwizzleChannels::fromOutputSourceName(v72 + 24);
        DWORD1(v195) = v73;
        v75 = v73;
        v76 = BYTE1(v73);
        v77 = BYTE2(v73);
        v78 = HIBYTE(v73);
        v188 = BYTE1(realityio::TextureSwizzleChannels::kDefault);
        v189 = realityio::TextureSwizzleChannels::kDefault;
        v190 = realityio::TextureSwizzleChannels::kDefault;
        v186 = HIBYTE(realityio::TextureSwizzleChannels::kDefault);
        v187 = BYTE2(realityio::TextureSwizzleChannels::kDefault);
        LOBYTE(v196) = shouldRestrictTo8bits;
        v79 = v195;
        v80 = v72;
        while (1)
        {
          v81 = v80[23];
          if ((char)v80[23] < 0)
          {
            v83 = *((_QWORD *)v80 + 1);
            if (v83 == 6)
            {
              if (**(_DWORD **)v80 != 1836216174 || *(_WORD *)(*(_QWORD *)v80 + 4) != 27745)
              {
LABEL_151:
                v93 = (char)v80[47];
                if (v93 < 0)
                {
                  if (*((_QWORD *)v80 + 4) != 1)
                  {
LABEL_224:
                    v87 = 0;
                    v86 = 6;
                    goto LABEL_225;
                  }
                  v94 = (_BYTE *)*((_QWORD *)v80 + 3);
                }
                else
                {
                  v94 = v80 + 24;
                  if (v93 != 1)
                    goto LABEL_224;
                }
                if (*v94 == 114)
                {
                  if ((v81 & 0x80) == 0)
                  {
                    switch(v80[23])
                    {
                      case 7u:
                        v95 = v80;
                        goto LABEL_219;
                      case 8u:
                        v97 = *(_QWORD **)v80;
                        goto LABEL_164;
                      case 9u:
                        if ((*(_QWORD *)v80 != 0x73656E6867756F72 || v80[8] != 115)
                          && (*(_QWORD *)v80 != 0x6F6973756C63636FLL || v80[8] != 110)
                          && (*(_QWORD *)v80 != 0x616F637261656C63 || v80[8] != 116))
                        {
                          goto LABEL_224;
                        }
                        goto LABEL_237;
                      case 0xDu:
                        if (*(_QWORD *)v80 != 0x72616C7563657073 || *(_QWORD *)(v80 + 5) != 0x726F6C6F4372616CLL)
                          goto LABEL_224;
                        goto LABEL_237;
                      case 0x12u:
                        if (*(_QWORD *)v80 != 0x616F637261656C63
                          || *((_QWORD *)v80 + 1) != 0x656E6867756F5274
                          || *((_WORD *)v80 + 8) != 29555)
                        {
                          goto LABEL_224;
                        }
                        goto LABEL_237;
                      default:
                        goto LABEL_224;
                    }
                  }
                  v96 = *((_QWORD *)v80 + 1);
                  switch(v96)
                  {
                    case 7:
                      goto LABEL_218;
                    case 8:
                      v97 = **(_QWORD ***)v80;
LABEL_164:
                      if (v97 != (_QWORD *)0x63696C6C6174656DLL)
                        goto LABEL_224;
                      goto LABEL_237;
                    case 9:
                      v104 = *(_QWORD **)v80;
                      if (**(_QWORD **)v80 == 0x73656E6867756F72 && *(_BYTE *)(*(_QWORD *)v80 + 8) == 115)
                        goto LABEL_237;
                      if (*v104 == 0x6F6973756C63636FLL && *((_BYTE *)v104 + 8) == 110)
                        goto LABEL_237;
                      v107 = *v104;
                      v108 = *((unsigned __int8 *)v104 + 8);
                      v109 = v107 == 0x616F637261656C63;
                      v110 = 116;
                      goto LABEL_220;
                    case 13:
                      if (**(_QWORD **)v80 != 0x72616C7563657073
                        || *(_QWORD *)(*(_QWORD *)v80 + 5) != 0x726F6C6F4372616CLL)
                      {
                        goto LABEL_224;
                      }
                      goto LABEL_237;
                    case 18:
                      if (**(_QWORD **)v80 == 0x616F637261656C63
                        && *(_QWORD *)(*(_QWORD *)v80 + 8) == 0x656E6867756F5274
                        && *(_WORD *)(*(_QWORD *)v80 + 16) == 29555)
                      {
                        goto LABEL_237;
                      }
                      if (v96 != 7)
                        goto LABEL_224;
LABEL_218:
                      v95 = *(unsigned __int8 **)v80;
LABEL_219:
                      v114 = *(_DWORD *)v95;
                      v108 = *(_DWORD *)(v95 + 3);
                      v109 = v114 == 1667330159;
                      v110 = 2037672291;
LABEL_220:
                      if (!v109 || v108 != v110)
                        goto LABEL_224;
LABEL_237:
                      v86 = 2;
                      v87 = 1;
                      break;
                    default:
                      goto LABEL_224;
                  }
                  goto LABEL_225;
                }
                goto LABEL_224;
              }
              goto LABEL_145;
            }
            if (v83 != 12)
            {
              if (v83 != 13)
                goto LABEL_151;
              if (**(_QWORD **)v80 != 0x6576697373696D65 || *(_QWORD *)(*(_QWORD *)v80 + 5) != 0x726F6C6F43657669)
                goto LABEL_151;
              goto LABEL_133;
            }
            v82 = *(unsigned __int8 **)v80;
          }
          else
          {
            if (v81 == 6)
            {
              if (*(_DWORD *)v80 != 1836216174 || *((_WORD *)v80 + 2) != 27745)
                goto LABEL_151;
LABEL_145:
              v86 = 5;
              v87 = 4;
              goto LABEL_225;
            }
            if (v81 == 13)
            {
              if (*(_QWORD *)v80 != 0x6576697373696D65 || *(_QWORD *)(v80 + 5) != 0x726F6C6F43657669)
                goto LABEL_151;
LABEL_133:
              v86 = 4;
              v87 = 2;
              goto LABEL_225;
            }
            v82 = v80;
            if (v81 != 12)
              goto LABEL_151;
          }
          v90 = *(_QWORD *)v82;
          v91 = *((_DWORD *)v82 + 2);
          if (v90 != 0x4365737566666964 || v91 != 1919904879)
            goto LABEL_151;
          v86 = 3;
          v87 = 3;
LABEL_225:
          if (v79 > 5)
            v116 = 0;
          else
            v116 = qword_230212198[v79];
          if (v87 > v116)
          {
            LODWORD(v195) = v86;
            v79 = v86;
          }
          v117 = realityio::TextureSwizzleChannels::fromOutputSourceName(v80 + 24);
          if (v75 != v117 || v76 != BYTE1(v117) || v77 != BYTE2(v117) || v78 != HIBYTE(v117))
          {
            v75 = v189;
            DWORD1(v195) = v190;
            v78 = v186;
            v77 = v187;
            v76 = v188;
          }
          v80 += 48;
          if (v80 == v71)
          {
            v118 = 0;
            a1 = v184;
            while (1)
            {
              if ((char)v72[23] < 0)
              {
                v121 = (_QWORD *)*((_QWORD *)v72 + 1);
                if (v121 == (_QWORD *)8)
                {
                  v127 = **(unint64_t ***)v72;
LABEL_266:
                  if (v127 == (unint64_t *)0x63696C6C6174656DLL)
                    v118 |= 4u;
                  goto LABEL_279;
                }
                if (v121 == (_QWORD *)9)
                {
                  v128 = *(unint64_t ***)v72;
                  if (**(_QWORD **)v72 == 0x73656E6867756F72 && *(_BYTE *)(*(_QWORD *)v72 + 8) == 115)
                  {
LABEL_278:
                    v118 |= 8u;
                    goto LABEL_279;
                  }
                  v130 = *v128;
                  v131 = *((unsigned __int8 *)v128 + 8);
                  if (v130 != (unint64_t *)0x6F6973756C63636FLL || v131 != 110)
                    goto LABEL_279;
                  goto LABEL_277;
                }
                if (v121 == (_QWORD *)13)
                {
                  v120 = *(unint64_t **)v72;
LABEL_247:
                  v122 = bswap64(*v120);
                  v123 = 0x73706563756C6172;
                  if (v122 == 0x73706563756C6172
                    && (v122 = bswap64(*(unint64_t *)((char *)v120 + 5)),
                        v123 = 0x6C6172436F6C6F72,
                        v122 == 0x6C6172436F6C6F72))
                  {
                    v124 = 0;
                  }
                  else if (v122 < v123)
                  {
                    v124 = -1;
                  }
                  else
                  {
                    v124 = 1;
                  }
                  v118 |= v124 == 0;
                }
              }
              else
              {
                v119 = v72[23];
                if (v119 == 8)
                {
                  v127 = *(unint64_t **)v72;
                  goto LABEL_266;
                }
                if (v119 == 9)
                {
                  if (*(_QWORD *)v72 == 0x73656E6867756F72 && v72[8] == 115)
                    goto LABEL_278;
                  if (*(_QWORD *)v72 != 0x6F6973756C63636FLL || v72[8] != 110)
                    goto LABEL_279;
LABEL_277:
                  v118 |= 2u;
                  goto LABEL_279;
                }
                v120 = (unint64_t *)v72;
                if (v119 == 13)
                  goto LABEL_247;
              }
LABEL_279:
              v72 += 48;
              if (v72 == v71)
                goto LABEL_282;
            }
          }
        }
      }
      LOBYTE(v118) = 0;
      DWORD1(v195) = realityio::TextureSwizzleChannels::kDefault;
      LOBYTE(v196) = 0;
LABEL_282:
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v118), (int8x16_t)xmmword_230211C40), (int32x4_t)xmmword_230211C40))) & 1) == 0&& (v118 & 5) != 5&& (v118 & 3) != 3)
      {
        goto LABEL_401;
      }
      LOBYTE(v196) = 0;
      LODWORD(v195) = 6;
      std::string::basic_string[abi:ne180100]<0>(&__p, "roughness");
      v133 = *v185;
      v134 = v185[1];
      if (*v185 == v134)
      {
LABEL_305:
        if (v133 != v134)
        {
          if ((char)v133[47] < 0)
            std::string::__init_copy_ctor_external(&v203, *((const std::string::value_type **)v133 + 3), *((_QWORD *)v133 + 4));
          else
            v203 = *(std::string *)(v133 + 1);
LABEL_310:
          BYTE4(v195) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v203);
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v203.__r_.__value_.__l.__data_);
          if (SHIBYTE(v200) < 0)
            operator delete((void *)__p);
          std::string::basic_string[abi:ne180100]<0>(&__p, "metallic");
          v140 = *v185;
          v141 = v185[1];
          if (*v185 == v141)
          {
LABEL_334:
            if (v140 != v141)
            {
              if ((char)v140[47] < 0)
                std::string::__init_copy_ctor_external(&v203, *((const std::string::value_type **)v140 + 3), *((_QWORD *)v140 + 4));
              else
                v203 = *(std::string *)(v140 + 1);
LABEL_339:
              BYTE5(v195) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v203);
              if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v203.__r_.__value_.__l.__data_);
              if (SHIBYTE(v200) < 0)
                operator delete((void *)__p);
              std::string::basic_string[abi:ne180100]<0>(&__p, "occlusion");
              v147 = *v185;
              v148 = v185[1];
              if (*v185 == v148)
              {
LABEL_363:
                if (v147 != v148)
                {
                  if ((char)v147[47] < 0)
                    std::string::__init_copy_ctor_external(&v203, *((const std::string::value_type **)v147 + 3), *((_QWORD *)v147 + 4));
                  else
                    v203 = *(std::string *)(v147 + 1);
LABEL_368:
                  BYTE6(v195) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v203);
                  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v203.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v200) < 0)
                    operator delete((void *)__p);
                  std::string::basic_string[abi:ne180100]<0>(&__p, "specularColor");
                  v154 = *v185;
                  v155 = v185[1];
                  if (*v185 == v155)
                  {
LABEL_392:
                    if (v154 != v155)
                    {
                      if ((char)v154[47] < 0)
                        std::string::__init_copy_ctor_external(&v203, *((const std::string::value_type **)v154 + 3), *((_QWORD *)v154 + 4));
                      else
                        v203 = *(std::string *)(v154 + 1);
                      goto LABEL_397;
                    }
                  }
                  else
                  {
                    if (v200 >= 0)
                      v156 = HIBYTE(v200);
                    else
                      v156 = *((_QWORD *)&__p + 1);
                    if (v200 >= 0)
                      p_p = &__p;
                    else
                      p_p = (__int128 *)__p;
                    do
                    {
                      v158 = v154[23];
                      if ((v158 & 0x80u) == 0)
                        v159 = v154[23];
                      else
                        v159 = *((_QWORD *)v154 + 1);
                      if (v159 == v156)
                      {
                        if ((v158 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v154, p_p, *((_QWORD *)v154 + 1)))
                            goto LABEL_392;
                        }
                        else
                        {
                          if (!v154[23])
                            goto LABEL_392;
                          v160 = 0;
                          while (v154[v160] == *((unsigned __int8 *)p_p + v160))
                          {
                            if (v158 == ++v160)
                              goto LABEL_392;
                          }
                        }
                      }
                      v154 += 48;
                    }
                    while (v154 != v155);
                  }
                  memset(&v203, 0, sizeof(v203));
LABEL_397:
                  BYTE7(v195) = realityio::TextureSwizzleChannels::channelFromChar((unsigned __int8 *)&v203);
                  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v203.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v200) < 0)
                    operator delete((void *)__p);
LABEL_401:
                  v203.__r_.__value_.__r.__words[0] = v192.__r_.__value_.__l.__size_;
                  v161 = v192.__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v192.__r_.__value_.__r.__words[1] + 7);
                  v162 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
                  memset(&v192, 0, sizeof(v192));
                  *(_QWORD *)&__p = v193.__r_.__value_.__l.__size_;
                  v163 = v193.__r_.__value_.__r.__words[0];
                  *(_QWORD *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v193.__r_.__value_.__r.__words[1]
                                                                            + 7);
                  v164 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                  memset(&v193, 0, sizeof(v193));
                  v165 = v194.__r_.__value_.__r.__words[0];
                  *(_QWORD *)((char *)&v205 + 7) = *(std::string::size_type *)((char *)&v194.__r_.__value_.__r.__words[1]
                                                                             + 7);
                  *(_QWORD *)&v205 = v194.__r_.__value_.__l.__size_;
                  v166 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
                  memset(&v194, 0, sizeof(v194));
                  v167 = v195;
                  *(_WORD *)(a1 + 96) = v196;
                  *(_OWORD *)(a1 + 80) = v167;
                  v168 = v197.__r_.__value_.__r.__words[0];
                  *(_QWORD *)&v202[7] = *(std::string::size_type *)((char *)&v197.__r_.__value_.__r.__words[1] + 7);
                  *(_QWORD *)v202 = v197.__r_.__value_.__l.__size_;
                  v169 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                  memset(&v197, 0, sizeof(v197));
                  *(_BYTE *)a1 = 1;
                  v170 = v203.__r_.__value_.__r.__words[0];
                  *(_QWORD *)(a1 + 23) = *(std::string::size_type *)((char *)v203.__r_.__value_.__r.__words + 7);
                  *(_QWORD *)(a1 + 8) = v161;
                  *(_QWORD *)(a1 + 16) = v170;
                  *(_BYTE *)(a1 + 31) = v162;
                  v171 = __p;
                  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&__p + 7);
                  *(_QWORD *)(a1 + 32) = v163;
                  *(_QWORD *)(a1 + 40) = v171;
                  *(_BYTE *)(a1 + 55) = v164;
                  v172 = v205;
                  *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)&v205 + 7);
                  *(_QWORD *)(a1 + 56) = v165;
                  *(_QWORD *)(a1 + 64) = v172;
                  *(_BYTE *)(a1 + 79) = v166;
                  v173 = *(_QWORD *)v202;
                  *(_QWORD *)(a1 + 119) = *(_QWORD *)&v202[7];
                  *(_QWORD *)(a1 + 104) = v168;
                  *(_QWORD *)(a1 + 112) = v173;
                  *(_BYTE *)(a1 + 127) = v169;
                  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v191, 0);
                  if ((v198 & 7) != 0)
                  {
                    v174 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v175 = __ldxr(v174);
                    while (__stlxr(v175 - 2, v174));
                  }
LABEL_404:
                  if ((v212 & 7) != 0)
                  {
                    v176 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v177 = __ldxr(v176);
                    while (__stlxr(v177 - 2, v176));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v210);
                  if (*((_QWORD *)&v209 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v209 + 1));
                  goto LABEL_409;
                }
              }
              else
              {
                if (v200 >= 0)
                  v149 = HIBYTE(v200);
                else
                  v149 = *((_QWORD *)&__p + 1);
                if (v200 >= 0)
                  v150 = &__p;
                else
                  v150 = (__int128 *)__p;
                do
                {
                  v151 = v147[23];
                  if ((v151 & 0x80u) == 0)
                    v152 = v147[23];
                  else
                    v152 = *((_QWORD *)v147 + 1);
                  if (v152 == v149)
                  {
                    if ((v151 & 0x80) != 0)
                    {
                      if (!memcmp(*(const void **)v147, v150, *((_QWORD *)v147 + 1)))
                        goto LABEL_363;
                    }
                    else
                    {
                      if (!v147[23])
                        goto LABEL_363;
                      v153 = 0;
                      while (v147[v153] == *((unsigned __int8 *)v150 + v153))
                      {
                        if (v151 == ++v153)
                          goto LABEL_363;
                      }
                    }
                  }
                  v147 += 48;
                }
                while (v147 != v148);
              }
              memset(&v203, 0, sizeof(v203));
              goto LABEL_368;
            }
          }
          else
          {
            if (v200 >= 0)
              v142 = HIBYTE(v200);
            else
              v142 = *((_QWORD *)&__p + 1);
            if (v200 >= 0)
              v143 = &__p;
            else
              v143 = (__int128 *)__p;
            do
            {
              v144 = v140[23];
              if ((v144 & 0x80u) == 0)
                v145 = v140[23];
              else
                v145 = *((_QWORD *)v140 + 1);
              if (v145 == v142)
              {
                if ((v144 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v140, v143, *((_QWORD *)v140 + 1)))
                    goto LABEL_334;
                }
                else
                {
                  if (!v140[23])
                    goto LABEL_334;
                  v146 = 0;
                  while (v140[v146] == *((unsigned __int8 *)v143 + v146))
                  {
                    if (v144 == ++v146)
                      goto LABEL_334;
                  }
                }
              }
              v140 += 48;
            }
            while (v140 != v141);
          }
          memset(&v203, 0, sizeof(v203));
          goto LABEL_339;
        }
      }
      else
      {
        if (v200 >= 0)
          v135 = HIBYTE(v200);
        else
          v135 = *((_QWORD *)&__p + 1);
        if (v200 >= 0)
          v136 = &__p;
        else
          v136 = (__int128 *)__p;
        do
        {
          v137 = v133[23];
          if ((v137 & 0x80u) == 0)
            v138 = v133[23];
          else
            v138 = *((_QWORD *)v133 + 1);
          if (v138 == v135)
          {
            if ((v137 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v133, v136, *((_QWORD *)v133 + 1)))
                goto LABEL_305;
            }
            else
            {
              if (!v133[23])
                goto LABEL_305;
              v139 = 0;
              while (v133[v139] == *((unsigned __int8 *)v136 + v139))
              {
                if (v137 == ++v139)
                  goto LABEL_305;
              }
            }
          }
          v133 += 48;
        }
        while (v133 != v134);
      }
      memset(&v203, 0, sizeof(v203));
      goto LABEL_310;
    }
    HIDWORD(v195) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v49);
    goto LABEL_71;
  }
  v18 = std::system_category();
  std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute is not valid");
  realityio::DetailedError::DetailedError(&v203, 0, (uint64_t)v18, &__p);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v203.__r_.__value_.__l.__data_;
  v19 = v203.__r_.__value_.__r.__words[2];
  *(_QWORD *)&v209 = v204;
  *(_QWORD *)((char *)&v209 + 7) = *(_QWORD *)((char *)&v204 + 7);
  v20 = HIBYTE(v204);
  v204 = 0uLL;
  v203.__r_.__value_.__r.__words[2] = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)&v209 + 7);
  v21 = v209;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v21;
  *(_BYTE *)(a1 + 47) = v20;
  if (SHIBYTE(v200) < 0)
    operator delete((void *)__p);
LABEL_409:
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v194.__r_.__value_.__l.__data_);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
}

void sub_2300A9F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::shouldRestrictTo8bits(_QWORD *a1, uint64_t **a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v12;
  int v13;
  _QWORD *v17;

  v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != (uint64_t *)1)
      return 0;
    a2 = (uint64_t **)*a2;
  }
  else if (v2 != 1)
  {
    return 0;
  }
  if (*(_BYTE *)a2 != 114)
    return 0;
  if (*((char *)a1 + 23) < 0)
  {
    v3 = 0;
    v8 = a1[1];
    if (v8 <= 12)
    {
      if (v8 != 8)
      {
        if (v8 == 9)
        {
          v9 = (_QWORD *)*a1;
          if ((*(_QWORD *)*a1 != 0x73656E6867756F72 || *(_BYTE *)(*a1 + 8) != 115)
            && (*v9 != 0x6F6973756C63636FLL || *((_BYTE *)v9 + 8) != 110))
          {
            v12 = *v9;
            v13 = *((unsigned __int8 *)v9 + 8);
            if (v12 != 0x616F637261656C63 || v13 != 116)
              return 0;
          }
          return 1;
        }
        return v3;
      }
      v17 = *(_QWORD **)*a1;
      return v17 == (_QWORD *)0x63696C6C6174656DLL;
    }
    if (v8 == 13)
      return *(_QWORD *)*a1 == 0x72616C7563657073 && *(_QWORD *)(*a1 + 5) == 0x726F6C6F4372616CLL;
    if (v8 != 18)
      return v3;
    a1 = (_QWORD *)*a1;
    return *a1 == 0x616F637261656C63 && a1[1] == 0x656E6867756F5274 && *((_WORD *)a1 + 8) == 29555;
  }
  v3 = 0;
  v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 > 0xC)
  {
    if (v4 == 13)
      return *a1 == 0x72616C7563657073 && *(_QWORD *)((char *)a1 + 5) == 0x726F6C6F4372616CLL;
    if (v4 != 18)
      return v3;
    return *a1 == 0x616F637261656C63 && a1[1] == 0x656E6867756F5274 && *((_WORD *)a1 + 8) == 29555;
  }
  if (v4 == 8)
  {
    v17 = (_QWORD *)*a1;
    return v17 == (_QWORD *)0x63696C6C6174656DLL;
  }
  if (v4 == 9)
    return *a1 == 0x73656E6867756F72 && *((_BYTE *)a1 + 8) == 115
        || *a1 == 0x6F6973756C63636FLL && *((_BYTE *)a1 + 8) == 110
        || *a1 == 0x616F637261656C63 && *((_BYTE *)a1 + 8) == 116;
  return v3;
}

realityio::TextureCompression *realityio::TextureCompression::TextureCompression(realityio::TextureCompression *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3;

  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
  {
    v3 = 0;
  }
  else if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
  {
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }
  *(_BYTE *)this = v3;
  return this;
}

uint64_t `anonymous namespace'::InputsContext::engine(_anonymous_namespace_::InputsContext *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 16) + 16);
}

void `anonymous namespace'::InputsContext::getTextureAssetWithKey(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  realityio::ImportSession::getTextureAssetWithKey(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), a2, a3);
}

std::string *`anonymous namespace'::InputsContext::getBundleInfo@<X0>(_anonymous_namespace_::InputsContext *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 16);
  return std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (__int128 *)(v2 + 304), (__int128 *)(v2 + 352));
}

_QWORD *`anonymous namespace'::InputsContext::insertTextureIntoCache(uint64_t a1, __int128 *a2, std::string::size_type *a3)
{
  uint64_t v4;
  std::string::size_type v6;
  std::string __p;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v6 = *a3;
  if (v6)
    RERetain();
  std::mutex::lock((std::mutex *)(v4 + 88));
  std::pair<std::string,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]<std::string const&,realityio::WrappedRERef<REAsset *>&,0>(&__p, a2, &v6);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)(v4 + 64), (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock((std::mutex *)(v4 + 88));
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
}

void sub_2300AA578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::~pair((uint64_t)va1);
  std::mutex::unlock(v2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::InputsContext::insertTextureConfigIntoCache(uint64_t a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
  realityio::ImportSession::insertTextureImportSettingsIntoCache(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), a2, a3);
}

void `anonymous namespace'::InputsContext::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 16) + 40);
  if (v2)
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
}

void `anonymous namespace'::InputsContext::dataFromRawPath(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void realityio::ImportSession::getTextureAssetWithKey(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (std::mutex *)(a1 + 88);
  std::mutex::lock((std::mutex *)(a1 + 88));
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 64, a2);
  if (a1 + 72 == v7)
  {
    *a3 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    *a3 = v8;
    if (v8)
      RERetain();
  }
  std::mutex::unlock(v6);
}

void sub_2300AA648(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void UsdInfoGatherer::~UsdInfoGatherer(void **this)
{
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void UsdInfoGatherer::multipleMaterialInstance(UsdInfoGatherer *this)
{
  GatheringDestination::instance(*((_QWORD *)this + 21), (UsdInfoGatherer *)((char *)this + 8));
}

void UsdInfoGatherer::singleMaterialInstance(UsdInfoGatherer *this)
{
  GatheringDestination::instance(*((_QWORD *)this + 21), (UsdInfoGatherer *)((char *)this + 8));
}

void GatheringDestination::instance(uint64_t a1, realityio::TextureImportOperationSettings *this)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  _QWORD *v5;
  std::string *v6;
  pxrInternal__aapl__pxrReserved__ *Extension;
  uint64_t v8;
  unsigned __int8 v9;
  const UInt8 *v10;
  CFIndex v11;
  CFDataRef v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFDataRef v22;
  std::string v23;
  CFTypeRef cf;
  const UInt8 *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  uint64_t v30;
  unsigned __int8 v31;
  std::string v32;

  realityio::TextureImportOperationSettings::makeTextureResourceKey(this, &v32);
  v4 = (pxrInternal__aapl__pxrReserved__ *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 40, (const void **)&v32.__r_.__value_.__l.__data_);
  if ((pxrInternal__aapl__pxrReserved__ *)(a1 + 48) == v4)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
    Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
    v8 = v31;
    v9 = v31;
    if ((v31 & 0x80u) != 0)
      v8 = v30;
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
      if (*((char *)this + 47) < 0)
        std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
      else
        v23 = *(std::string *)((_BYTE *)this + 1);
      pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v27)
      {
        (*(void (**)(const UInt8 **__return_ptr))(*(_QWORD *)v27 + 24))(&v25);
        cf = 0;
        v10 = v25;
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v12 = CFDataCreateWithBytesNoCopy(0, v10, v11, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
        if (cf)
          CFRelease(cf);
        cf = v12;
        if (v12)
        {
          v13 = *(_QWORD *)(a1 + 32);
          v22 = v12;
          CFRetain(v12);
          realityio::createRETextureImportOperation(v13, (uint64_t)this, 0, (uint64_t)&v23);
          realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v22);
          if (v23.__r_.__value_.__s.__data_[0])
          {
            v14 = (_QWORD *)(a1 + 64);
            if (*(char *)(a1 + 87) < 0)
              v14 = (_QWORD *)*v14;
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v15 = &v32;
            else
              v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
            std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(*(_QWORD *)(a1 + 24), v23.__r_.__value_.__l.__size_, (uint64_t)v14, (uint64_t)v15);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 40), (const void **)&v32.__r_.__value_.__l.__data_, (uint64_t)&v32);
          }
          realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&v23);
        }
        realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        v16 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      v19 = v28;
      if (v28)
      {
        v20 = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v9 = v31;
    }
    if ((v9 & 0x80) != 0)
      operator delete(v29);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v5 = (_QWORD *)*v5;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v32;
    else
      v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
    std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(*(_QWORD *)(a1 + 24), 0, (uint64_t)v5, (uint64_t)v6);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_2300AA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 73) < 0)
    operator delete(*(void **)(v27 - 96));
  if (*(char *)(v27 - 49) < 0)
    operator delete(*(void **)(v27 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(RETextureImportOperation0 *,char const*,char const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v5 = a4;
  v6 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v7, &v6, &v5);
}

void MtlxInfoGatherer::instance(MtlxInfoGatherer *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  GatheringDestination::instance(*((_QWORD *)this + 19), (MtlxInfoGatherer *)((char *)this + 8));
}

void std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF3200;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF3200;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void **std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const void **v10;
  const void *v11;
  const void *v13;

  v2 = (_QWORD *)a1[1];
  v3 = (std::__shared_weak_count *)v2[1];
  *v2 = 0;
  v2[1] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (_QWORD *)a1[2];
  v7 = (std::__shared_weak_count *)v6[1];
  *v6 = 0;
  v6[1] = 0;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = 0;
  v10 = (const void **)a1[3];
  v11 = *v10;
  if (*v10)
  {
    *v10 = 0;
    v13 = v11;
  }
  return realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v13);
}

uint64_t std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0,std::allocator<`anonymous namespace'::createTextureAssetData(realityio::TextureBuilder::Context &,`anonymous namespace'::TextureAssetInstance const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

_QWORD *realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

std::string *std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,std::set<realityio::TextureImportOperationSettings>,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;
  _QWORD *v9;
  std::string::size_type v10;
  std::string::value_type *v11;
  std::string::size_type v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  v9 = a3 + 1;
  v10 = a3[1];
  this[2].__r_.__value_.__l.__size_ = v10;
  v11 = &this[2].__r_.__value_.__s.__data_[8];
  v12 = a3[2];
  this[2].__r_.__value_.__r.__words[2] = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *a3 = (std::string::size_type)v9;
    *v9 = 0;
    a3[2] = 0;
  }
  else
  {
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  return this;
}

void sub_2300AAD84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>(uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v8 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v9 = *((_QWORD *)a3 + 2);
    v10 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    v6[2] = v8;
    *((_QWORD *)v6 + 6) = v9;
    *((_QWORD *)v6 + 7) = v10;
    v13 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v6;
}

uint64_t realityio::Result<realityio::TextureImportOperationSettings,realityio::DetailedError>::~Result(uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)a1)
  {
    if (*(char *)(a1 + 127) < 0)
      operator delete(*(void **)(a1 + 104));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
    {
      v2 = (void **)(a1 + 8);
LABEL_12:
      operator delete(*v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    v2 = (void **)(a1 + 24);
    goto LABEL_12;
  }
  return a1;
}

_QWORD *realityio::WrappedRERef<RETextureAssetData *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF3280;
  return result;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF3280;
}

char *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF3300;
  return result;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF3300;
}

void std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 37, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300AB368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextureBuilder::TextureBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TextureBuilder::TextureDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::find<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return v1;
  v3 = (_QWORD *)(a1 + 8);
  do
  {
    v4 = pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
    v5 = v2 + 1;
    if (!v4)
    {
      v5 = v2;
      v3 = v2;
    }
    v2 = (_QWORD *)*v5;
  }
  while (*v5);
  if (v3 == v1 || pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
    return v1;
  return v3;
}

void std::__tree<realityio::TextureImportOperationSettings>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<realityio::TextureImportOperationSettings>::destroy(a1, *a2);
    std::__tree<realityio::TextureImportOperationSettings>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  char *v8;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v17[2];
  char v18;
  uint64_t v19;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, &v19);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = (char *)operator new(0x68uLL);
    v9 = v8;
    v17[0] = (uint64_t *)v8;
    v17[1] = (uint64_t *)(a1 + 8);
    v18 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v8 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *((_OWORD *)v8 + 2) = *(_OWORD *)a3;
      *((_QWORD *)v8 + 6) = *(_QWORD *)(a3 + 16);
    }
    v10 = (std::string *)(v9 + 7);
    if (*(char *)(a3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
      v9[9] = *(_QWORD *)(a3 + 40);
    }
    v11 = (_QWORD *)(a3 + 56);
    v12 = *(_QWORD *)(a3 + 56);
    v13 = *(_QWORD *)(a3 + 48);
    v9[11] = v12;
    v14 = v9 + 11;
    v9[10] = v13;
    v15 = *(_QWORD *)(a3 + 64);
    v9[12] = v15;
    if (v15)
    {
      *(_QWORD *)(v12 + 16) = v14;
      *(_QWORD *)(a3 + 48) = v11;
      *v11 = 0;
      *(_QWORD *)(a3 + 64) = 0;
    }
    else
    {
      v9[10] = v14;
    }
    v18 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, v19, v7, v17[0]);
    v6 = v17[0];
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)v17, 0);
  }
  return v6;
}

void sub_2300AB710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 + 55) < 0)
    operator delete(*v10);
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    do
    {
      while (1)
      {
        v5 = v3;
        if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
          break;
        v3 = (_QWORD *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
        break;
      v4 = v5 + 1;
      v3 = (_QWORD *)v5[1];
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>(uint64_t **a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!realityio::TextureImportOperationSettings::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!realityio::TextureImportOperationSettings::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>@<X0>(uint64_t a1@<X0>, const realityio::TextureImportOperationSettings *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x98uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = realityio::TextureImportOperationSettings::TextureImportOperationSettings((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2300AB984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureImportOperationSettings::operator<(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  const void *v10;
  size_t v11;
  unsigned __int8 *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  if ((pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<() & 1) != 0)
    return 1;
  if (pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    v5 = (unsigned __int8 *)(a1 + 48);
    v4 = *(const void **)(a1 + 48);
    v6 = *(char *)(a2 + 71);
    v7 = *(unsigned __int8 *)(a1 + 71);
    v8 = *(_QWORD *)(a1 + 56);
    if ((v7 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(a1 + 71);
    else
      v9 = *(_QWORD *)(a1 + 56);
    if ((v7 & 0x80u) == 0)
      v10 = (const void *)(a1 + 48);
    else
      v10 = *(const void **)(a1 + 48);
    if (v6 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 71);
    else
      v11 = *(_QWORD *)(a2 + 56);
    if (v6 >= 0)
      v12 = (unsigned __int8 *)(a2 + 48);
    else
      v12 = *(unsigned __int8 **)(a2 + 48);
    if (v11 >= v9)
      v13 = v9;
    else
      v13 = v11;
    v14 = memcmp(v10, v12, v13);
    v15 = v9 < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      return 1;
    if (v9 == v11)
    {
      if ((v7 & 0x80) == 0)
      {
        if ((_DWORD)v7)
        {
          while (*v5 == *v12)
          {
            ++v5;
            ++v12;
            if (!--v7)
              goto LABEL_29;
          }
          return 0;
        }
LABEL_29:
        v17 = *(_DWORD *)(a1 + 72);
        v18 = *(_DWORD *)(a2 + 72);
        if (v17 >= v18)
        {
          if (v17 != v18)
            return 0;
          if (!realityio::TextureSwizzleChannels::operator<((unsigned __int8 *)(a1 + 76), (unsigned __int8 *)(a2 + 76)))
          {
            if (*(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
              return 0;
            if (*(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77))
              return 0;
            if (*(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78))
              return 0;
            if (*(unsigned __int8 *)(a1 + 79) != *(unsigned __int8 *)(a2 + 79))
              return 0;
            v19 = *(unsigned __int8 *)(a1 + 80);
            v20 = *(unsigned __int8 *)(a2 + 80);
            if (v19 >= v20)
            {
              if (v19 != v20)
                return 0;
              v21 = *(_DWORD *)(a1 + 84);
              v22 = *(_DWORD *)(a2 + 84);
              if (v21 >= v22)
              {
                if (v21 != v22)
                  return 0;
                v23 = *(unsigned __int8 *)(a1 + 88);
                v24 = *(unsigned __int8 *)(a2 + 88);
                if (v23 >= v24)
                {
                  if (v23 != v24)
                    return 0;
                  v25 = *(unsigned __int8 *)(a1 + 89);
                  v26 = *(unsigned __int8 *)(a2 + 89);
                  if (v25 >= v26
                    && (v25 != v26
                     || !std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96))))
                  {
                    return 0;
                  }
                }
              }
            }
          }
        }
        return 1;
      }
      if (!memcmp(v4, v12, v8))
        goto LABEL_29;
    }
  }
  return 0;
}

BOOL realityio::TextureSwizzleChannels::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 1;
  if (v2 != v3)
    return 0;
  v5 = a1[1];
  v6 = a2[1];
  if (v5 < v6)
    return 1;
  if (v5 != v6)
    return 0;
  v7 = a1[2];
  v8 = a2[2];
  if (v7 < v8)
    return 1;
  if (v7 == v8)
    return a1[3] < a2[3];
  return 0;
}

void std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<realityio::TextureImportOperationSettings,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void realityio::mtlx::fillAttr(realityio::mtlx *this, realityio::mtlx::MxDataSource *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  uint64_t TypeName;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  _DWORD *v10;
  uint64_t v11;
  char HasValue;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v28);
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, &v29);
  v33[0] = TypeName;
  v7 = (_QWORD *)((char *)this + 184);
  v6 = (_QWORD *)*((_QWORD *)this + 23);
  if (!v6)
  {
    v8 = (_QWORD *)((char *)this + 184);
LABEL_9:
    v10 = operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 8, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 9, &v32);
    *((_QWORD *)v10 + 5) = v33[0];
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v7 = v10;
    v11 = **((_QWORD **)this + 22);
    if (v11)
    {
      *((_QWORD *)this + 22) = v11;
      v10 = (_DWORD *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 23), (uint64_t *)v10);
    ++*((_QWORD *)this + 24);
    goto LABEL_12;
  }
  while (1)
  {
    while (1)
    {
      v8 = v6;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4)))break;
      v6 = (_QWORD *)*v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31))break;
    v7 = v8 + 1;
    v6 = (_QWORD *)v8[1];
    if (!v6)
      goto LABEL_9;
  }
  if (!*v7)
    goto LABEL_9;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v28);
  HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, &v29);
  LOBYTE(v33[0]) = HasValue;
  v14 = (_QWORD *)((char *)this + 136);
  v13 = (_QWORD *)*((_QWORD *)this + 17);
  if (!v13)
  {
    v15 = (_QWORD *)((char *)this + 136);
LABEL_20:
    v17 = operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v17 + 7, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v17 + 8, &v32);
    *((_BYTE *)v17 + 36) = v33[0];
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v15;
    *v14 = v17;
    v18 = **((_QWORD **)this + 16);
    if (v18)
    {
      *((_QWORD *)this + 16) = v18;
      v17 = (_DWORD *)*v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 17), (uint64_t *)v17);
    ++*((_QWORD *)this + 18);
    goto LABEL_23;
  }
  while (1)
  {
    while (1)
    {
      v15 = v13;
      v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28)))break;
      v13 = (_QWORD *)*v15;
      v14 = v15;
      if (!*v15)
        goto LABEL_20;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31))break;
    v14 = v15 + 1;
    v13 = (_QWORD *)v15[1];
    if (!v13)
      goto LABEL_20;
  }
  if (!*v14)
    goto LABEL_20;
LABEL_23:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v28);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v31, &v28, &v27);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t **)this + 31, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)&v31);
  if ((v33[0] & 7) != 0)
  {
    v19 = (unsigned int *)(v33[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  if ((v27 & 7) != 0)
  {
    v21 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v28);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v31, &v28, &v27);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t **)this + 34, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)&v31);
  if ((v33[0] & 7) != 0)
  {
    v23 = (unsigned int *)(v33[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  if ((v27 & 7) != 0)
  {
    v25 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(a2))
  {
    v30 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v27);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(&v31, &v27, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>((uint64_t **)this + 25, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)&v31);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
  }
}

void sub_2300AC0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::fillDataSourceFromShaderPrim(realityio::mtlx *a1, pxrInternal__aapl__pxrReserved__ **this, uint64_t *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t i;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  _QWORD *v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__ *v23;
  _QWORD *v24;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__ *v29;
  _QWORD *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__ *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  char *v53;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  char *v75;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v76;
  unsigned int *v77;
  unsigned int v78;
  _DWORD *v79;
  _DWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  pxrInternal__aapl__pxrReserved__ *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *NameToken;
  _QWORD *v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  char *v107;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t *v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  char *v129;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v130;
  unsigned int *v131;
  unsigned int v132;
  _DWORD *v133;
  _DWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  pxrInternal__aapl__pxrReserved__ *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  char *v160;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t *v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  char *v182;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v183;
  unsigned int *v184;
  unsigned int v185;
  _DWORD *v186;
  _DWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t m;
  uint64_t n;
  uint64_t j;
  uint64_t k;
  uint64_t ii;
  uint64_t jj;
  int v200;
  uint64_t v201;
  int v202;
  int v203;
  unint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  unint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  _DWORD *v222;
  _DWORD *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t *v228;
  uint64_t *v229;
  unint64_t v230;
  void **v231;
  uint64_t v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD v241[3];
  void **v242[2];

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)this);
  for (i = v218; i != v219; i += 32)
  {
    LODWORD(v231) = *(_DWORD *)i;
    v8 = *(_QWORD *)(i + 8);
    v232 = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 48);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(i + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(i + 20));
    v12 = *(_QWORD *)(i + 24);
    v235 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v235 &= 0xFFFFFFFFFFFFFFF8;
    }
    realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v11);
    if ((v235 & 7) != 0)
    {
      v15 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
    if (v232)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
  }
  v17 = this[1];
  if (!v17 || (*((_BYTE *)v17 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v6);
  v18 = (_QWORD *)*((_QWORD *)v17 + 3);
  MEMORY[0x2348B274C](&v231, "Shader");
  v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
  v21 = (unsigned int *)((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8);
  if ((v231 & 7) != 0)
  {
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if ((unsigned int *)v20 == v21)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v217);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v217, 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v217);
    v212 = *(_DWORD *)this;
    v88 = this[1];
    v213 = (uint64_t)v88;
    if (v88)
    {
      v89 = (unint64_t *)((char *)v88 + 48);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v214, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v215, (_DWORD *)this + 5);
    v91 = (unint64_t)this[3];
    v216 = v91;
    if ((v91 & 7) != 0)
    {
      v92 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 2, v92));
      if ((v93 & 1) == 0)
        v216 &= 0xFFFFFFFFFFFFFFF8;
    }
    v94 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v240 = 0;
    v241[0] = MEMORY[0x24BEE9D38] + 16;
    v238 = 0;
    v239 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(v94);
    v95 = v236;
    for (j = v237; v95 != j; v95 += 32)
    {
      LODWORD(v231) = *(_DWORD *)v95;
      v96 = *(_QWORD *)(v95 + 8);
      v232 = v96;
      if (v96)
      {
        v97 = (unint64_t *)(v96 + 48);
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v95 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v95 + 20));
      v99 = *(_QWORD *)(v95 + 24);
      v235 = v99;
      if ((v99 & 7) != 0)
      {
        v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 2, v100));
        if ((v101 & 1) == 0)
          v235 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
      NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v228);
      v103 = v239;
      if ((unint64_t)v239 >= v240)
      {
        v107 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v238, NameToken);
      }
      else
      {
        v104 = *NameToken;
        *v239 = *NameToken;
        if ((v104 & 7) != 0)
        {
          v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 2, v105));
          if ((v106 & 1) == 0)
            *v103 &= 0xFFFFFFFFFFFFFFF8;
        }
        v107 = (char *)(v103 + 1);
      }
      v239 = v107;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v108);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v231);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v228, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v225);
      if ((v225 & 7) != 0)
      {
        v109 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
      v228 = 0;
      v229 = 0;
      v230 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v111 = v228;
        v112 = v229;
        while (v111 != v112)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v225, v111);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v225 + 1, (_DWORD *)v111 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v225);
          v113 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v222);
          v113[1] = a3;
          v114 = *a3;
          *v113 = *a3;
          *(_QWORD *)(v114 + 8) = v113;
          *a3 = (uint64_t)v113;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v225);
          ++v111;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v227);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v227, (_DWORD **)&v228);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
      v225 = (unint64_t)&v228;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
      if ((v235 & 7) != 0)
      {
        v115 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
      if (v232)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
    }
    v228 = 0;
    v229 = 0;
    v230 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v241);
    v117 = v225;
    for (k = v226; v117 != k; v117 += 32)
    {
      LODWORD(v231) = *(_DWORD *)v117;
      v118 = *(_QWORD *)(v117 + 8);
      v232 = v118;
      if (v118)
      {
        v119 = (unint64_t *)(v118 + 48);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v117 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v117 + 20));
      v121 = *(_QWORD *)(v117 + 24);
      v235 = v121;
      if ((v121 & 7) != 0)
      {
        v122 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 2, v122));
        if ((v123 & 1) == 0)
          v235 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
      v124 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v222);
      v125 = v229;
      if ((unint64_t)v229 >= v230)
      {
        v129 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v228, v124);
      }
      else
      {
        v126 = *v124;
        *v229 = *v124;
        if ((v126 & 7) != 0)
        {
          v127 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 2, v127));
          if ((v128 & 1) == 0)
            *v125 &= 0xFFFFFFFFFFFFFFF8;
        }
        v129 = (char *)(v125 + 1);
      }
      v229 = (uint64_t *)v129;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v130);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v231);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)v242);
      if (((uint64_t)v242[0] & 7) != 0)
      {
        v131 = (unsigned int *)((unint64_t)v242[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
      v222 = 0;
      v223 = 0;
      v224 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v133 = v222;
        v134 = v223;
        while (v133 != v134)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v242, v133);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v242 + 1, v133 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v242);
          v135 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v221);
          v135[1] = a3;
          v136 = *a3;
          *v135 = *a3;
          *(_QWORD *)(v136 + 8) = v135;
          *a3 = (uint64_t)v135;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v242);
          v133 += 2;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v220);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v220, &v222);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
      v242[0] = (void **)&v222;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v242);
      if ((v235 & 7) != 0)
      {
        v137 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
      if (v232)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v212, &v222);
    realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v222, &v238, &v228);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
    v231 = (void **)&v225;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v228;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v236;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v238;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
    MEMORY[0x2348B1EC4](v241);
    if ((v216 & 7) != 0)
    {
      v139 = (unsigned int *)(v216 & 0xFFFFFFFFFFFFFFF8);
      do
        v140 = __ldxr(v139);
      while (__stlxr(v140 - 2, v139));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v214);
    v87 = v213;
    if (v213)
      goto LABEL_179;
  }
  else
  {
    v23 = this[1];
    if (!v23 || (*((_BYTE *)v23 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v19);
    v24 = (_QWORD *)*((_QWORD *)v23 + 3);
    MEMORY[0x2348B274C](&v231, "NodeGraph");
    v26 = *v24 & 0xFFFFFFFFFFFFFFF8;
    v27 = (unsigned int *)((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8);
    if ((v231 & 7) != 0)
    {
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    if ((unsigned int *)v26 != v27)
    {
      v29 = this[1];
      if (!v29 || (*((_BYTE *)v29 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v25);
      v30 = (_QWORD *)*((_QWORD *)v29 + 3);
      MEMORY[0x2348B274C](&v231, "Material");
      v31 = *v30 & 0xFFFFFFFFFFFFFFF8;
      v32 = (unsigned int *)((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8);
      if ((v231 & 7) != 0)
      {
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((unsigned int *)v31 != v32)
        goto LABEL_180;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v205);
      realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v205, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v205);
      v200 = *(_DWORD *)this;
      v34 = this[1];
      v201 = (uint64_t)v34;
      if (v34)
      {
        v35 = (unint64_t *)((char *)v34 + 48);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v202, (_DWORD *)this + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v203, (_DWORD *)this + 5);
      v37 = (unint64_t)this[3];
      v204 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 2, v38));
        if ((v39 & 1) == 0)
          v204 &= 0xFFFFFFFFFFFFFFF8;
      }
      v40 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v240 = 0;
      v241[0] = MEMORY[0x24BEE9D88] + 16;
      v238 = 0;
      v239 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(v40);
      v41 = v236;
      for (m = v237; v41 != m; v41 += 32)
      {
        LODWORD(v231) = *(_DWORD *)v41;
        v42 = *(_QWORD *)(v41 + 8);
        v232 = v42;
        if (v42)
        {
          v43 = (unint64_t *)(v42 + 48);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v41 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v41 + 20));
        v45 = *(_QWORD *)(v41 + 24);
        v235 = v45;
        if ((v45 & 7) != 0)
        {
          v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 2, v46));
          if ((v47 & 1) == 0)
            v235 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
        v48 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v228);
        v49 = v239;
        if ((unint64_t)v239 >= v240)
        {
          v53 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v238, v48);
        }
        else
        {
          v50 = *v48;
          *v239 = *v48;
          if ((v50 & 7) != 0)
          {
            v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 2, v51));
            if ((v52 & 1) == 0)
              *v49 &= 0xFFFFFFFFFFFFFFF8;
          }
          v53 = (char *)(v49 + 1);
        }
        v239 = v53;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
        realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v54);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v231);
        realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v228, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v225);
        if ((v225 & 7) != 0)
        {
          v55 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stlxr(v56 - 2, v55));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
        v228 = 0;
        v229 = 0;
        v230 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
        {
          v57 = v228;
          v58 = v229;
          while (v57 != v58)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v225, v57);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v225 + 1, (_DWORD *)v57 + 1);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v225);
            v59 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v222);
            v59[1] = a3;
            v60 = *a3;
            *v59 = *a3;
            *(_QWORD *)(v60 + 8) = v59;
            *a3 = (uint64_t)v59;
            ++a3[2];
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v225);
            ++v57;
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v227);
        realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v227, (_DWORD **)&v228);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
        v225 = (unint64_t)&v228;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
        if ((v235 & 7) != 0)
        {
          v61 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
        if (v232)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
      }
      v228 = 0;
      v229 = 0;
      v230 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v241);
      v63 = v225;
      for (n = v226; v63 != n; v63 += 32)
      {
        LODWORD(v231) = *(_DWORD *)v63;
        v64 = *(_QWORD *)(v63 + 8);
        v232 = v64;
        if (v64)
        {
          v65 = (unint64_t *)(v64 + 48);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v63 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v63 + 20));
        v67 = *(_QWORD *)(v63 + 24);
        v235 = v67;
        if ((v67 & 7) != 0)
        {
          v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 2, v68));
          if ((v69 & 1) == 0)
            v235 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
        v70 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v222);
        v71 = v229;
        if ((unint64_t)v229 >= v230)
        {
          v75 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v228, v70);
        }
        else
        {
          v72 = *v70;
          *v229 = *v70;
          if ((v72 & 7) != 0)
          {
            v73 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 2, v73));
            if ((v74 & 1) == 0)
              *v71 &= 0xFFFFFFFFFFFFFFF8;
          }
          v75 = (char *)(v71 + 1);
        }
        v229 = (uint64_t *)v75;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
        realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v76);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
        pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v231);
        realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)v242);
        if (((uint64_t)v242[0] & 7) != 0)
        {
          v77 = (unsigned int *)((unint64_t)v242[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v78 = __ldxr(v77);
          while (__stlxr(v78 - 2, v77));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
        v222 = 0;
        v223 = 0;
        v224 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
        {
          v79 = v222;
          v80 = v223;
          while (v79 != v80)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v242, v79);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v242 + 1, v79 + 1);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v242);
            v81 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v221);
            v81[1] = a3;
            v82 = *a3;
            *v81 = *a3;
            *(_QWORD *)(v82 + 8) = v81;
            *a3 = (uint64_t)v81;
            ++a3[2];
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v242);
            v79 += 2;
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v220);
        realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v220, &v222);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
        v242[0] = (void **)&v222;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v242);
        if ((v235 & 7) != 0)
        {
          v83 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
          do
            v84 = __ldxr(v83);
          while (__stlxr(v84 - 2, v83));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
        if (v232)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v200, &v222);
      realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v222, &v238, &v228);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
      v231 = (void **)&v225;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v231);
      v231 = (void **)&v228;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
      v231 = (void **)&v236;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v231);
      v231 = (void **)&v238;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
      MEMORY[0x2348B20B0](v241);
      if ((v204 & 7) != 0)
      {
        v85 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v202);
      v87 = v201;
      if (!v201)
        goto LABEL_180;
LABEL_179:
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v87);
      goto LABEL_180;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v211);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)a1, &v211, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
    v206 = *(_DWORD *)this;
    v141 = this[1];
    v207 = (uint64_t)v141;
    if (v141)
    {
      v142 = (unint64_t *)((char *)v141 + 48);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v208, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v209, (_DWORD *)this + 5);
    v144 = (unint64_t)this[3];
    v210 = v144;
    if ((v144 & 7) != 0)
    {
      v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 2, v145));
      if ((v146 & 1) == 0)
        v210 &= 0xFFFFFFFFFFFFFFF8;
    }
    v147 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v240 = 0;
    v241[0] = MEMORY[0x24BEE9D98] + 16;
    v238 = 0;
    v239 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(v147);
    v148 = v236;
    for (ii = v237; v148 != ii; v148 += 32)
    {
      LODWORD(v231) = *(_DWORD *)v148;
      v149 = *(_QWORD *)(v148 + 8);
      v232 = v149;
      if (v149)
      {
        v150 = (unint64_t *)(v149 + 48);
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v148 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v148 + 20));
      v152 = *(_QWORD *)(v148 + 24);
      v235 = v152;
      if ((v152 & 7) != 0)
      {
        v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 2, v153));
        if ((v154 & 1) == 0)
          v235 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
      v155 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v228);
      v156 = v239;
      if ((unint64_t)v239 >= v240)
      {
        v160 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v238, v155);
      }
      else
      {
        v157 = *v155;
        *v239 = *v155;
        if ((v157 & 7) != 0)
        {
          v158 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 2, v158));
          if ((v159 & 1) == 0)
            *v156 &= 0xFFFFFFFFFFFFFFF8;
        }
        v160 = (char *)(v156 + 1);
      }
      v239 = v160;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v161);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v228);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v231);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v228, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v225);
      if ((v225 & 7) != 0)
      {
        v162 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
      v228 = 0;
      v229 = 0;
      v230 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v164 = v228;
        v165 = v229;
        while (v164 != v165)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v225, v164);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v225 + 1, (_DWORD *)v164 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v225);
          v166 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v222);
          v166[1] = a3;
          v167 = *a3;
          *v166 = *a3;
          *(_QWORD *)(v167 + 8) = v166;
          *a3 = (uint64_t)v166;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v225);
          ++v164;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v227);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v227, (_DWORD **)&v228);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
      v225 = (unint64_t)&v228;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
      if ((v235 & 7) != 0)
      {
        v168 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v169 = __ldxr(v168);
        while (__stlxr(v169 - 2, v168));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
      if (v232)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
    }
    v228 = 0;
    v229 = 0;
    v230 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v241);
    v170 = v225;
    for (jj = v226; v170 != jj; v170 += 32)
    {
      LODWORD(v231) = *(_DWORD *)v170;
      v171 = *(_QWORD *)(v170 + 8);
      v232 = v171;
      if (v171)
      {
        v172 = (unint64_t *)(v171 + 48);
        do
          v173 = __ldxr(v172);
        while (__stxr(v173 + 1, v172));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v233, (_DWORD *)(v170 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)(v170 + 20));
      v174 = *(_QWORD *)(v170 + 24);
      v235 = v174;
      if ((v174 & 7) != 0)
      {
        v175 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFFFF8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 2, v175));
        if ((v176 & 1) == 0)
          v235 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
      v177 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v222);
      v178 = v229;
      if ((unint64_t)v229 >= v230)
      {
        v182 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v228, v177);
      }
      else
      {
        v179 = *v177;
        *v229 = *v177;
        if ((v179 & 7) != 0)
        {
          v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
          do
            v181 = __ldxr(v180);
          while (__stxr(v181 + 2, v180));
          if ((v181 & 1) == 0)
            *v178 &= 0xFFFFFFFFFFFFFFF8;
        }
        v182 = (char *)(v178 + 1);
      }
      v229 = (uint64_t *)v182;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
      realityio::mtlx::fillAttr(a1, (realityio::mtlx::MxDataSource *)&v231, v183);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v222);
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v231);
      realityio::mtlx::MxDataSource::addBaseName(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v222, (const pxrInternal__aapl__pxrReserved__::TfToken *)v242);
      if (((uint64_t)v242[0] & 7) != 0)
      {
        v184 = (unsigned int *)((unint64_t)v242[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v185 = __ldxr(v184);
        while (__stlxr(v185 - 2, v184));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
      v222 = 0;
      v223 = 0;
      v224 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v186 = v222;
        v187 = v223;
        while (v186 != v187)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v242, v186);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v242 + 1, v186 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v242);
          v188 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(&v221);
          v188[1] = a3;
          v189 = *a3;
          *v188 = *a3;
          *(_QWORD *)(v189 + 8) = v188;
          *a3 = (uint64_t)v188;
          ++a3[2];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v242);
          v186 += 2;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v220);
      realityio::mtlx::MxDataSource::addConnectedAttribute((uint64_t)a1, &v220, &v222);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220);
      v242[0] = (void **)&v222;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v242);
      if ((v235 & 7) != 0)
      {
        v190 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
        do
          v191 = __ldxr(v190);
        while (__stlxr(v191 - 2, v190));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
      if (v232)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v232);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v206, &v222);
    realityio::mtlx::MxDataSource::addInputsOutputs((uint64_t)a1, &v222, &v238, &v228);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
    v231 = (void **)&v225;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v228;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v236;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v231);
    v231 = (void **)&v238;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v231);
    MEMORY[0x2348B2170](v241);
    if ((v210 & 7) != 0)
    {
      v192 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFFFF8);
      do
        v193 = __ldxr(v192);
      while (__stlxr(v193 - 2, v192));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
    v87 = v207;
    if (v207)
      goto LABEL_179;
  }
LABEL_180:
  v231 = (void **)&v218;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v231);
}

void sub_2300AD96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a34);
  *(_QWORD *)(v37 - 200) = &a37;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(_QWORD *)(v37 - 200) = v37 - 224;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(_QWORD *)(v37 - 200) = v37 - 168;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  *(_QWORD *)(v37 - 200) = v37 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  MEMORY[0x2348B20B0](v37 - 120);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a14);
  *(_QWORD *)(v37 - 200) = &a29;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 200));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::addPrim(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v6 = (uint64_t *)(a1 + 56);
  v7 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
  v8 = (uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v16 + 1, a2 + 1);
  v17 = v7;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, (uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a2 + 1);
  v15 = a3;
  v9 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 32, &v19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  if (!*v9)
  {
    v10 = (uint64_t *)operator new(0x28uLL);
    v17 = a1 + 40;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 7, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, &v14);
    *((_DWORD *)v10 + 9) = v15;
    v18 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 32), v19, v9, v10);
    v16 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100]((uint64_t)&v16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  v11 = *(_QWORD *)(a1 + 64);
  if (v11 >= *(_QWORD *)(a1 + 72))
  {
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*(_DWORD **)(a1 + 64), a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v11 + 4), a2 + 1);
    result = v11 + 8;
  }
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void sub_2300AE114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::chaseConnection(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2)+ 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6, a2 + 1);
  while (1)
  {
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    if (!(_DWORD)result)
      break;
    result = (uint64_t)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, a1);
    v8 = result;
    if (a3 + 8 == result)
    {
      if (*(_QWORD *)a1 == *(_QWORD *)a2)
      {
        v9 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (int *)&v9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      }
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (_DWORD *)(result + 36));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6, (_DWORD *)(v8 + 40));
  }
  return result;
}

void sub_2300AE22C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::buildConnectionsMaps(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t **a2, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  int v26;
  int v27;
  void **v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  char v58[8];
  uint64_t v59;
  uint64_t v60;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v52);
  pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v5);
  v6 = v53;
  if (v53)
  {
    v7 = (unsigned int *)(v53 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v58, (uint64_t)&v52);
  v47 = v59;
  v48 = v58;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v50 = 0;
  v51 = 0;
  while ((char *)v53 != v48
       || v52 != v47
       || v54 != v49
       || v55 != v50
       || v56 != v51
       || v57 != HIBYTE(v51))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v52, (uint64_t)v43);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)v43);
    v11 = v41;
    v10 = v42;
    v25 = v42;
    while (v11 != v10)
    {
      LODWORD(v36) = *(_DWORD *)v11;
      v12 = *(_QWORD *)(v11 + 8);
      v37 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 48);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, (_DWORD *)(v11 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, (_DWORD *)(v11 + 20));
      v15 = *(_QWORD *)(v11 + 24);
      v40 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          v40 &= 0xFFFFFFFFFFFFFFF8;
      }
      v33 = 0;
      v34 = 0;
      v35 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections())
      {
        v18 = v33;
        v19 = v34;
        while (v18 != v19)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, v18);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, v18 + 1);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v26);
          LODWORD(v28) = v26;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          HIDWORD(v28) = v27;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, &v31);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, &v32);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v28);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, &v26);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, &v31);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v28 + 1, &v32);
          v29 = v26;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          v30 = v27;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v28);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
          v18 += 2;
        }
      }
      v28 = (void **)&v33;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v28);
      if ((v40 & 7) != 0)
      {
        v20 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
      if (v37)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
      v11 += 32;
      v10 = v25;
    }
    v36 = (void **)&v41;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v36);
    if ((v46 & 7) != 0)
    {
      v22 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
    if (v44)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v52);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
}

void sub_2300AE6BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_2300AE884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  JUMPOUT(0x2300AE8B0);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

unsigned int **realityio::mtlx::mtlxDocToDataSource@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::UsdStage *v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  char v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  realityio::mtlx *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  void **v55;
  int v56;
  int v57;
  int v58;
  pxrInternal__aapl__pxrReserved__::UsdStage *v60;
  pxrInternal__aapl__pxrReserved__ *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  const pxrInternal__aapl__pxrReserved__::TfToken *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  pxrInternal__aapl__pxrReserved__ *v82;
  uint64_t UsdPrimAllPrimsPredicate;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  pxrInternal__aapl__pxrReserved__::TfToken *v87;
  unsigned int *v88;
  unsigned int v89;
  int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  pxrInternal__aapl__pxrReserved__ *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  int v104;
  const char *v105;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;
  _DWORD *v107;
  _DWORD *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  pxrInternal__aapl__pxrReserved__::UsdStage *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t (*v138)(void **);
  int v139;
  unint64_t *v140;
  int v141;
  int v142;
  uint64_t v143;
  __int128 v144;
  unsigned int *v145;
  int v146;
  unint64_t *v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int *v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t *v175;
  _QWORD *v176;
  uint64_t v177;
  void *v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t TypeName;
  char v183[8];
  _QWORD v184[3];
  unint64_t v185;
  pxrInternal__aapl__pxrReserved__ *v186;
  int v187;
  int v188;
  uint64_t v189;
  char *v190;
  void **v191;
  __int128 v192;
  uint64_t v193;
  void *__p;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  void *v198;
  char *v199;
  __int128 v200;
  uint64_t v201;
  char *v202;
  int v203;
  int v204;
  __int128 v205;
  uint64_t v206;
  _QWORD v207[3];
  uint64_t v208;
  _DWORD *v209;
  unint64_t v210;
  void ***v211;
  void ***v212;
  int v213;
  int v214;
  uint64_t v215;
  _QWORD v216[5];

  v216[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v200 = 0;
  v199 = 0;
  v198 = &v199;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v198, v199);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v190, (uint64_t *)&v151);
  std::string::basic_string[abi:ne180100]<0>(&v198, "/MaterialX");
  MEMORY[0x2348B26F8](&v211, &v198);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/ModelRoot");
  MEMORY[0x2348B26F8](&v185, &__p);
  realityio::mtlx::UsdMtlxRead(a2, &v190, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v211, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v185);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
  if (SBYTE7(v196) < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
  if (SBYTE7(v200) < 0)
    operator delete(v198);
  v5 = v191;
  if (v191)
  {
    v6 = (unsigned int *)(v191 + 1);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*((void (**)(void **))*v5 + 1))(v5);
  }
  v146 = 1;
  v147 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v150 = 0;
  v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v151);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/MaterialX/Materials");
    MEMORY[0x2348B26F8](&v211, &__p);
    MEMORY[0x2348B2764](&v185, a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v211, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v185);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v190);
    v146 = (int)v198;
    v11 = v199;
    v199 = 0;
    v147 = (unint64_t *)v11;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v148, (int *)&v200);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v149);
    if ((v150 & 7) != 0)
    {
      v12 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v150 = *((_QWORD *)&v200 + 1);
    *((_QWORD *)&v200 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
    if (v199)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v199);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v190);
    if ((v185 & 7) != 0)
    {
      v14 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
    if (SBYTE7(v196) < 0)
      operator delete(__p);
  }
  else
  {
    v145 = v151;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v145);
    v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v145);
    pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v16);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v198, (uint64_t)&__p);
    v190 = v199;
    v191 = &v198;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v192) = 0;
    WORD6(v192) = 0;
    while ((void **)v195 != v191
         || __p != v190
         || (_QWORD)v196 != (_QWORD)v192
         || DWORD2(v196) != DWORD2(v192)
         || BYTE12(v196) != BYTE12(v192)
         || BYTE13(v196) != BYTE13(v192))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v211);
      v18 = (pxrInternal__aapl__pxrReserved__ *)v212;
      if (!v212 || (*((_BYTE *)v212 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v212, v17);
      v19 = (uint64_t *)*((_QWORD *)v18 + 3);
      MEMORY[0x2348B274C](&v185, "Material");
      v20 = *v19;
      v21 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
      if ((v185 & 7) != 0)
      {
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      if ((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8) == v21)
      {
        v25 = 0;
        goto LABEL_43;
      }
      if ((v215 & 7) != 0)
      {
        v23 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
      if (v212)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v212);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    v25 = 1;
LABEL_43:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v196);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
    if ((v25 & 1) != 0)
    {
      LODWORD(v211) = 1;
      v212 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v215 = 0;
    }
    v146 = (int)v211;
    v26 = (pxrInternal__aapl__pxrReserved__ *)v212;
    v212 = 0;
    v27 = (uint64_t)v147;
    v147 = (unint64_t *)v26;
    if (v27)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v148, &v213);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v149);
    if ((v150 & 7) != 0)
    {
      v28 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    v150 = v215;
    v215 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
    if (v212)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v212);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v145);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v146) & 1) != 0)
  {
    v30 = operator new(0x140uLL);
    v30[1] = 0;
    v30[2] = 0;
    *v30 = &off_24FDF3418;
    v30[3] = &off_24FDF3468;
    v31 = (realityio::mtlx *)(v30 + 3);
    v30[5] = 0;
    v30[4] = v30 + 5;
    v30[8] = 0;
    v30[6] = 0;
    v30[7] = v30 + 8;
    v30[14] = 0;
    v30[9] = 0;
    v30[10] = 0;
    v30[12] = 0;
    v30[13] = v30 + 14;
    v30[17] = 0;
    v30[11] = 0;
    v30[15] = 0;
    v30[16] = v30 + 17;
    v30[20] = 0;
    v30[18] = 0;
    v30[19] = v30 + 20;
    v30[23] = 0;
    v30[21] = 0;
    v30[22] = v30 + 23;
    v30[26] = 0;
    v30[24] = 0;
    v30[25] = v30 + 26;
    v30[29] = 0;
    v30[27] = 0;
    v30[28] = v30 + 29;
    v30[32] = 0;
    v30[33] = 0;
    v30[30] = 0;
    v30[31] = v30 + 32;
    v30[34] = v30 + 35;
    v30[35] = 0;
    v30[38] = 0;
    v30[39] = 0;
    v30[36] = 0;
    v30[37] = v30 + 38;
    *(_QWORD *)&v144 = v30 + 3;
    *((_QWORD *)&v144 + 1) = v30;
    v139 = v146;
    v140 = v147;
    if (v147)
    {
      v32 = v147 + 6;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v141, &v148);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v142, &v149);
    v143 = v150;
    if ((v150 & 7) != 0)
    {
      v34 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v143 &= 0xFFFFFFFFFFFFFFF8;
    }
    v176 = 0;
    v177 = 0;
    v174 = 0;
    v175 = (uint64_t *)&v176;
    v172 = (uint64_t *)&v173;
    v173 = 0;
    v167 = v139;
    v168 = (uint64_t)v140;
    if (v140)
    {
      v36 = v140 + 6;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v169, &v141);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v170, &v142);
    v171 = v143;
    if ((v143 & 7) != 0)
    {
      v38 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        v171 &= 0xFFFFFFFFFFFFFFF8;
    }
    realityio::mtlx::buildConnectionsMaps((pxrInternal__aapl__pxrReserved__::UsdObject *)&v167, &v175, &v172);
    if ((v171 & 7) != 0)
    {
      v40 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169);
    if (v168)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v168);
    v162 = v139;
    v163 = (uint64_t)v140;
    if (v140)
    {
      v42 = v140 + 6;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v164, &v141);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v165, &v142);
    v166 = v143;
    if ((v143 & 7) != 0)
    {
      v44 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 2, v44));
      if ((v45 & 1) == 0)
        v166 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v162);
    v46 = v190;
    v47 = (char *)v191;
    if (v190 != (char *)v191)
    {
      do
      {
        LODWORD(v198) = *(_DWORD *)v46;
        v48 = (char *)*((_QWORD *)v46 + 1);
        v199 = v48;
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 48);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v200, (_DWORD *)v46 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v200 + 1, (_DWORD *)v46 + 5);
        v51 = *((_QWORD *)v46 + 3);
        *((_QWORD *)&v200 + 1) = v51;
        if ((v51 & 7) != 0)
        {
          v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 2, v52));
          if ((v53 & 1) == 0)
            *((_QWORD *)&v200 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v198);
        if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
        pxrInternal__aapl__pxrReserved__::TfStringTokenize();
        if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v198) & 1) != 0)
          goto LABEL_119;
        v55 = (void **)v211;
        if (v212 == v211)
          goto LABEL_119;
        v56 = *((char *)v211 + 23);
        if (v56 < 0)
        {
          if (v211[1] == (void **)6)
          {
            v55 = *v211;
LABEL_101:
            v57 = *(_DWORD *)v55;
            v58 = *((unsigned __int16 *)v55 + 2);
            if (v57 == 1970302569 && v58 == 29556)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v198, &__p);
              realityio::mtlx::chaseConnection((const pxrInternal__aapl__pxrReserved__::SdfPath *)&v178, &__p, (uint64_t)&v172);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v162);
              v60 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v185);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v178);
              v61 = v186;
              if (v186)
              {
                v62 = (unsigned int *)((char *)v186 + 8);
                do
                {
                  v63 = __ldxr(v62);
                  v64 = v63 - 1;
                }
                while (__stlxr(v64, v62));
                if (!v64)
                  (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v61 + 8))(v61);
              }
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
              {
                pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
                v65 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v198);
                pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v162, v65);
              }
              if ((BYTE8(v196) & 7) != 0)
              {
                v66 = (unsigned int *)(*((_QWORD *)&v196 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v67 = __ldxr(v66);
                while (__stlxr(v67 - 2, v66));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v196);
              if (v195)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v195);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v178);
            }
          }
        }
        else if (v56 == 6)
        {
          goto LABEL_101;
        }
LABEL_119:
        __p = &v211;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if ((BYTE8(v200) & 7) != 0)
        {
          v68 = (unsigned int *)(*((_QWORD *)&v200 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v69 = __ldxr(v68);
          while (__stlxr(v69 - 2, v68));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
        if (v199)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v199);
        v46 += 32;
      }
      while (v46 != v47);
    }
    v198 = &v190;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
    if ((v166 & 7) != 0)
    {
      v70 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v164);
    if (v163)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v163);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v175, v176);
    v176 = 0;
    v177 = 0;
    v175 = (uint64_t *)&v176;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v172, v173);
    v173 = 0;
    v174 = 0;
    v172 = (uint64_t *)&v173;
    v157 = v139;
    v158 = (uint64_t)v140;
    if (v140)
    {
      v72 = v140 + 6;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v159, &v141);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v160, &v142);
    v161 = v143;
    if ((v143 & 7) != 0)
    {
      v74 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 2, v74));
      if ((v75 & 1) == 0)
        v161 &= 0xFFFFFFFFFFFFFFF8;
    }
    realityio::mtlx::buildConnectionsMaps((pxrInternal__aapl__pxrReserved__::UsdObject *)&v157, &v175, &v172);
    if ((v161 & 7) != 0)
    {
      v76 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159);
    if (v158)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v158);
    v152 = v139;
    v153 = (uint64_t)v140;
    if (v140)
    {
      v78 = v140 + 6;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v154, &v141);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v155, &v142);
    v156 = v143;
    if ((v143 & 7) != 0)
    {
      v80 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 2, v80));
      if ((v81 & 1) == 0)
        v156 &= 0xFFFFFFFFFFFFFFF8;
    }
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v82 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v207[0] = MEMORY[0x24BEE9D88] + 16;
    UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v82);
    v85 = *(_QWORD *)UsdPrimAllPrimsPredicate;
    v84 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 8);
    v86 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v85 & 0x2000) != 0 || (v84 & 0x2000) == 0))
    {
      v85 |= 0x2000uLL;
      v84 &= ~0x2000uLL;
    }
    __p = (void *)v85;
    v195 = v84;
    *(_QWORD *)&v196 = v86;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v152, (uint64_t *)&__p, (uint64_t)&v198);
    __p = v198;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v195, &v199);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v195 + 1, (_DWORD *)&v199 + 1);
    v196 = v200;
    v197 = v201;
    v190 = v202;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v191, &v203);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v191 + 1, &v204);
    v192 = v205;
    v193 = v206;
    v138 = *(uint64_t (**)(void **))(MEMORY[0x24BEE9D38] + 48);
    while (__p != v190
         || (void **)v195 != v191
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v196, (uint64_t)&v192))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&__p, (uint64_t)&v185);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v178 = (void *)(MEMORY[0x24BEE9D38] + 16);
      if (v179 && (*((_BYTE *)v179 + 57) & 8) == 0 && (v138(&v178) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v178);
        v184[0] = 0;
        v87 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        if ((v184[0] & 0xFFFFFFFFFFFFFFF8) == 0)
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v87);
        v90 = pxrInternal__aapl__pxrReserved__::TfStringContains();
        if ((v184[0] & 7) != 0)
        {
          v91 = (unsigned int *)(v184[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v92 = __ldxr(v91);
          while (__stlxr(v92 - 2, v91));
        }
        if ((v215 & 7) != 0)
        {
          v93 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
          do
            v94 = __ldxr(v93);
          while (__stlxr(v94 - 2, v93));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
        if (v212)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v212);
        MEMORY[0x2348B1EC4](&v178);
        if (v90)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v185);
          v95 = v184[0];
          v96 = v184[1];
          while (v95 != v96)
          {
            LODWORD(v211) = *(_DWORD *)v95;
            v97 = *(pxrInternal__aapl__pxrReserved__ **)(v95 + 8);
            v212 = (void ***)v97;
            if (v97)
            {
              v98 = (unint64_t *)((char *)v97 + 48);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v213, (_DWORD *)(v95 + 16));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v214, (_DWORD *)(v95 + 20));
            v100 = *(_QWORD *)(v95 + 24);
            v215 = v100;
            if ((v100 & 7) != 0)
            {
              v101 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 2, v101));
              if ((v102 & 1) == 0)
                v215 &= 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v211, &v178);
            realityio::mtlx::chaseConnection((const pxrInternal__aapl__pxrReserved__::SdfPath *)v183, &v178, (uint64_t)&v175);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v178);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v183);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v152, v216);
            if (v178 == (void *)v216[0])
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v216);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v178);
            }
            else
            {
              TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v211);
              if (!atomic_load(MEMORY[0x24BEE82A0]))
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
              v104 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v216);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v178);
              if (v104)
              {
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"promoted_%i", v105, ((unint64_t)v209 - v208) >> 3);
                MEMORY[0x2348B2764](&TypeName, &v178);
                if (SHIBYTE(v180) < 0)
                  operator delete(v178);
                Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!Data)
                  Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v207, (const pxrInternal__aapl__pxrReserved__::TfToken *)&TypeName, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)Data + 96));
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v178, v216);
                v107 = v209;
                if ((unint64_t)v209 >= v210)
                {
                  v108 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v208, v216);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v209, v216);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v107 + 1, (_DWORD *)v216 + 1);
                  v108 = v107 + 2;
                }
                v209 = v108;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v216);
                if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v211))
                {
                  v216[1] = 0;
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
                  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v216);
                }
                if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v211))
                {
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v211);
                  pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (const pxrInternal__aapl__pxrReserved__::TfToken *)v216);
                  if ((v216[0] & 7) != 0)
                  {
                    v109 = (unsigned int *)(v216[0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v110 = __ldxr(v109);
                    while (__stlxr(v110 - 2, v109));
                  }
                }
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v178, v216);
                pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection();
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v216);
                if ((v181 & 7) != 0)
                {
                  v111 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v112 = __ldxr(v111);
                  while (__stlxr(v112 - 2, v111));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v180);
                if (v179)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v179);
                if ((TypeName & 7) != 0)
                {
                  v113 = (unsigned int *)(TypeName & 0xFFFFFFFFFFFFFFF8);
                  do
                    v114 = __ldxr(v113);
                  while (__stlxr(v114 - 2, v113));
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v183);
            if ((v215 & 7) != 0)
            {
              v115 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
              do
                v116 = __ldxr(v115);
              while (__stlxr(v116 - 2, v115));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
            if (v212)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v212);
            v95 += 32;
          }
          v211 = (void ***)v184;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
        }
      }
      else
      {
        MEMORY[0x2348B1EC4](&v178);
      }
      if ((v189 & 7) != 0)
      {
        v88 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
      if (v186)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v186);
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v199);
    MEMORY[0x2348B20B0](v207);
    v198 = &v208;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
    if ((v156 & 7) != 0)
    {
      v117 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
      do
        v118 = __ldxr(v117);
      while (__stlxr(v118 - 2, v117));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154);
    if (v153)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v153);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v208);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v198, &v208);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v198 + 1, (_DWORD *)&v208 + 1);
    realityio::mtlx::MxDataSource::addPrim((uint64_t)v31, &v198, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v198);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
    v178 = &v178;
    v179 = &v178;
    v180 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139);
    v119 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(v119);
    v120 = v195;
    if (v195)
    {
      v121 = (unsigned int *)(v195 + 8);
      do
      {
        v122 = __ldxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v198, (uint64_t)&__p);
    v190 = v199;
    v191 = &v198;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v192) = 0;
    WORD6(v192) = 0;
    while ((void **)v195 != v191
         || __p != v190
         || (_QWORD)v196 != (_QWORD)v192
         || DWORD2(v196) != DWORD2(v192)
         || BYTE12(v196) != BYTE12(v192)
         || BYTE13(v196) != BYTE13(v192))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v211);
      LODWORD(v185) = (_DWORD)v211;
      v186 = (pxrInternal__aapl__pxrReserved__ *)v212;
      if (v212)
      {
        v124 = (unint64_t *)(v212 + 6);
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v187, &v213);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v188, &v214);
      v189 = v215;
      if ((v215 & 7) != 0)
      {
        v126 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 2, v126));
        if ((v127 & 1) == 0)
          v189 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::mtlx::fillDataSourceFromShaderPrim(v31, (pxrInternal__aapl__pxrReserved__ **)&v185, (uint64_t *)&v178);
      if ((v189 & 7) != 0)
      {
        v128 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
      if (v186)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v186);
      if ((v215 & 7) != 0)
      {
        v130 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v213);
      if (v212)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v212);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v192);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v196);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v200);
    std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)&v178);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v172, v173);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v175, v176);
    if ((v143 & 7) != 0)
    {
      v132 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v133 = __ldxr(v132);
      while (__stlxr(v133 - 2, v132));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
    if (v140)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v140);
    *(_OWORD *)a3 = v144;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  if ((v150 & 7) != 0)
  {
    v134 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
    do
      v135 = __ldxr(v134);
    while (__stlxr(v135 - 2, v134));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
  if (v147)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v147);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v151);
}

void sub_2300B0044(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void realityio::mtlx::mtlxToDataSource(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  realityio *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = a2;
  v6 = (realityio *)objc_msgSend(v5, "isFileURL");
  if ((v6 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v5), "fileSystemRepresentation"));
    realityio::mtlx::UsdMtlxGetDocument((uint64_t)__p, &v20);
    if (v19 < 0)
      operator delete(__p[0]);
    v16 = v20;
    v17 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    realityio::mtlx::mtlxDocToDataSource(a1, &v16, (uint64_t)a3);
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v21;
    if (v21)
    {
      v13 = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v15 = *(NSObject **)(realityio::logObjects(v6) + 32);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_22FF26000, v15, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", (uint8_t *)__p, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
  }

}

void sub_2300B0724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void realityio::mtlx::mtlxToDataSource(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  realityio::mtlx::UsdMtlxGetDocumentFromString(a2, &v15);
  v13 = v15;
  v14 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  realityio::mtlx::mtlxDocToDataSource(a1, &v13, a3);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2300B0840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, (_DWORD *)(a2 + 4));
  *((_QWORD *)v6 + 5) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  v7 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x38uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)(v6 + 4), a3);
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue,0>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 7, (_DWORD *)a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)(a2 + 4));
  v6[9] = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>((uint64_t)v1 + 28);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t realityio::mtlx::MxDataSource::addBaseName(realityio::mtlx::MxDataSource *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t **v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t **)((char *)this + 152);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v7, a2, (uint64_t *)a3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (uint64_t)&v7);
  if ((v8 & 7) != 0)
  {
    v4 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
}

void sub_2300B0E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::addConnectedAttribute(uint64_t a1, _DWORD *a2, _DWORD **a3)
{
  int v7;
  int v8;
  _QWORD v9[3];
  void **v10;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, a2 + 1);
  memset(v9, 0, sizeof(v9));
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v9, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>((uint64_t **)(a1 + 224), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (uint64_t)&v7);
  v10 = (void **)v9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
}

void sub_2300B0F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::addInputsOutputs(uint64_t a1, _DWORD *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t **v7;
  _BYTE v9[8];
  _BYTE v10[24];
  void **v11;

  v7 = (uint64_t **)(a1 + 80);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>((uint64_t)v9, a2, a3);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)v9);
  v11 = (void **)v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v9);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>((uint64_t)v9, a2, a4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t **)(a1 + 104), (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)v9);
  v11 = (void **)v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v9);
}

void sub_2300B1018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(_DWORD *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = 0;
  v2[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 5, a1 + 1);
  return v2;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)(v6 + 4), a3);
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,0>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  char *v5;
  char **v6;
  char **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t result;
  char *v11;
  uint64_t *v12;

  v6 = (char **)(a1 + 1);
  v5 = (char *)a1[1];
  if (!v5)
  {
    v8 = (char **)(a1 + 1);
LABEL_10:
    v11 = (char *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v11 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = v11;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v11 = *v6;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32)))break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&,0>(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  _DWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((_QWORD *)(a1 + 8), *a3, a3[1], a3[1] - *a3);
  return a1;
}

void sub_2300B1400(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]((_DWORD *)v6 + 7, a3);
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)v2 + 28);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::SdfPath>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::mtlx::MxDataSource>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 24) = &off_24FDF3468;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 296, *(_QWORD **)(a1 + 304));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 272, *(_QWORD **)(a1 + 280));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1 + 248, *(_QWORD **)(a1 + 256));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1 + 224, *(_QWORD **)(a1 + 232));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 176, *(_QWORD **)(a1 + 184));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(char **)(a1 + 136));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(char **)(a1 + 112));
  v2 = (void **)(a1 + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(*(_QWORD **)(a1 + 64));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
}

uint64_t realityio::mtlx::MxDataSource::getIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE v6[8];

  v3 = a1 + 8;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v6);
  if ((_QWORD *)(a1 + 16) == v4)
    return 0;
  else
    return *((unsigned int *)v4 + 9);
}

void sub_2300B16FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

_DWORD *realityio::mtlx::MxDataSource::getPath@<X0>(realityio::mtlx::MxDataSource *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = *((_QWORD *)this + 7);
  v4 = a3 + 1;
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v3) >> 3))
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  else
  {
    v5 = (_DWORD *)(v3 + 8 * a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a3, v5);
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v5 + 1);
  }
}

uint64_t realityio::mtlx::MxDataSource::getPath(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v5, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
}

void sub_2300B17E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::hasValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v3;
  _DWORD *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  _BOOL8 v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  unsigned int *v14;
  unsigned int v15;
  void *__p[2];
  char v18;
  uint64_t v19;
  int v20;
  _BYTE v21[4];
  _BYTE v22[4];
  int v23;
  int v24;

  v3 = *((_QWORD *)this + 7);
  if (a2 < (unint64_t)((*((_QWORD *)this + 8) - v3) >> 3))
  {
    v6 = (_DWORD *)(v3 + 8 * a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, v6 + 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, a3);
    v7 = (char *)this + 128;
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 128, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
    v9 = v8;
    if ((realityio::mtlx::MxDataSource *)((char *)this + 136) == v8)
    {
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      MEMORY[0x2348B2764](&v19, __p);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v21, &v20);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
      if ((v19 & 7) != 0)
      {
        v11 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      if (v18 < 0)
        operator delete(__p[0]);
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
      if (v9 == v13)
      {
        if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == 0)
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
        std::operator+<char>();
        MEMORY[0x2348B2764](&v19, __p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v21, &v20);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
        if ((v19 & 7) != 0)
        {
          v14 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        if (v18 < 0)
          operator delete(__p[0]);
        v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
        if (v9 == v13)
        {
          v10 = 0;
          goto LABEL_23;
        }
      }
      v9 = v13;
    }
    v10 = *((_BYTE *)v9 + 36) != 0;
LABEL_23:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    return v10;
  }
  return 0;
}

void sub_2300B1A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a18);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a20);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getBaseName@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  std::string *v15;
  void *__p[2];
  char v18;
  std::string v19;
  _BYTE v20[8];
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v21);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2);
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 152, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20);
  if ((_QWORD *)((char *)this + 160) == v8)
  {
    if (a3)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "inputs:");
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (std::string *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      realityio::mtlx::MxDataSource::stripLeading(&v19, (char *)__p, EmptyString);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "outputs:");
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        v15 = (std::string *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v15 = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      realityio::mtlx::MxDataSource::stripLeading(&v19, (char *)__p, v15);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    MEMORY[0x2348B2764](a4, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = v8[5];
    *a4 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        *a4 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
}

void sub_2300B1CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a20 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 40));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getTypeName(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 176, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
  if ((_QWORD *)((char *)this + 184) == v5)
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v9);
  else
    v9 = v5[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v9;
}

void sub_2300B1DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getInputValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  _DWORD *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  int v20;

  v4 = *((_QWORD *)this + 7);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v4) >> 3))
    return 0;
  v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, v8);
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, v8 + 1);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  std::operator+<char>();
  MEMORY[0x2348B2764](&v18, __p);
  if (v17 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
  v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
  if (a4)
    v11 = (_QWORD *)((char *)this + 208) == v10;
  else
    v11 = 1;
  v12 = v11;
  if (!v11)
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v10 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  if ((v18 & 7) != 0)
  {
    v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  return (v12 & 1) == 0;
}

void sub_2300B1F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;

  if ((a16 & 7) != 0)
  {
    v18 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getInputValue(realityio::mtlx::MxDataSource *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v5 = (*(uint64_t (**)(realityio::mtlx::MxDataSource *, uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, _BYTE *))(*(_QWORD *)this + 56))(this, a2, a3, v9) ^ 1;
  if (!a4)
    LOBYTE(v5) = 1;
  if ((v5 & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v9))
  {
    v7 = 0;
  }
  else
  {
    if ((v10 & 4) != 0)
      v6 = (_QWORD *)(*(uint64_t (**)(_BYTE *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v9);
    else
      v6 = v9;
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, v6);
    v7 = 1;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  return v7;
}

void sub_2300B2050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getInputValue(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  int v5;
  std::string *v6;
  uint64_t v7;
  std::string *__str;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string **))(*(_QWORD *)a1 + 56))(a1, a2, a3, &__str) ^ 1;
  if (!a4)
    LOBYTE(v5) = 1;
  if ((v5 & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    v7 = 0;
  }
  else
  {
    if ((v10 & 4) != 0)
      v6 = (std::string *)(*(uint64_t (**)(std::string **))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    else
      v6 = __str;
    std::string::operator=(a4, v6);
    v7 = 1;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  return v7;
}

void sub_2300B2128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getRawConnectedSourcePaths(_QWORD *a1, unsigned int a2, _QWORD *a3, int a4, _QWORD *a5)
{
  uint64_t v5;
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  _BOOL8 v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void *__p[2];
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v5 = a1[7];
  if (a2 >= (unint64_t)((a1[8] - v5) >> 3))
    return 0;
  v10 = (_DWORD *)(v5 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, v10);
  v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, v10 + 1);
  if (a4)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
LABEL_7:
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
LABEL_8:
  std::operator+<char>();
  MEMORY[0x2348B2764](&v20, __p);
  v13 = v20;
  v20 = 0;
  v21 = v13;
  if (v19 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v21, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21);
  v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a1 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
  v12 = 0;
  if (a5 && a1 + 29 != v14)
  {
    if (v14 + 5 != a5)
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)a5, (_DWORD *)v14[5], (_DWORD *)v14[6], (uint64_t)(v14[6] - v14[5]) >> 3);
    v12 = *a5 != a5[1];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  return v12;
}

void sub_2300B22FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getAttributeConnections(uint64_t a1, unsigned int a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char v18[8];
  unsigned int *v19;
  int v20;
  int v21;

  v4 = *(_QWORD *)(a1 + 56);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 64) - v4) >> 3))
    return 0;
  v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, v8 + 1);
  v9 = *a3;
  v19 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v19 = v10;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
  v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
  if (a4)
    v13 = a1 + 232 == (_QWORD)v12;
  else
    v13 = 1;
  v14 = !v13;
  if (!v13 && v12 + 5 != (_QWORD *)a4)
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(a4, (_DWORD *)v12[5], (_DWORD *)v12[6], (uint64_t)(v12[6] - v12[5]) >> 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
  if ((v19 & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  return v14;
}

void sub_2300B24B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a4);
  if ((a4 & 7) != 0)
  {
    v5 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MxDataSource::surfaceOutput(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  std::string *v7;
  __int128 v8;
  std::string::size_type v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  std::operator+<char>();
  v7 = std::string::append(&v17, ":surface");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  MEMORY[0x2348B2764](&v17, __p);
  v9 = v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v10 = (unsigned int *)(v17.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v9 &= 0xFFFFFFFFFFFFFFF8;
    if ((v17.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v12 = (unsigned int *)(v17.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  *(_QWORD *)a4 = this;
  *(_DWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = v9;
  if ((v9 & 7) != 0)
  {
    v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a4 + 16) = v14;
    do
      v16 = __ldxr(v14);
    while (__stlxr(v16 - 2, v14));
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_2300B2638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL realityio::mtlx::MxDataSource::getAttrValue(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  _DWORD *v8;
  _QWORD *v9;
  BOOL v10;
  BOOL v11;
  uint64_t v13;
  int v14;
  int v15;

  v4 = *((_QWORD *)this + 7);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v4) >> 3))
    return 0;
  v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v8 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, a3);
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  v10 = !a4 || (_QWORD *)((char *)this + 208) == v9;
  v11 = v10;
  if (!v10)
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, v9 + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  return !v11;
}

void sub_2300B2754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::mtlx::MxDataSource::getAttrToken(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v4;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *((_QWORD *)this + 7);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v4) >> 3))
    return 0;
  v8 = (_DWORD *)(v4 + 8 * a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, v8 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, a3);
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
  v10 = v9;
  if (a4)
    v11 = (_QWORD *)((char *)this + 208) == v9;
  else
    v11 = 1;
  v12 = v11;
  if (!v11)
  {
    v13 = v9 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5)))
    {
      v14 = v10[6];
      if ((v14 & 4) != 0)
        v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 5);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, v13);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  return (v12 & 1) == 0;
}

void sub_2300B2898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getAttrRoleName@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, unsigned int **a4@<X8>)
{
  _DWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  int v15;

  v7 = (_DWORD *)(*((_QWORD *)this + 7) + 8 * a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v7 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, a2);
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 248, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  if ((_QWORD *)((char *)this + 256) == v8)
  {
    v10 = 0;
LABEL_8:
    *a4 = v10;
    goto LABEL_9;
  }
  v9 = (unsigned int *)v8[5];
  *a4 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      goto LABEL_8;
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
}

void sub_2300B29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getAttrColorSpace@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, unsigned int **a4@<X8>)
{
  _DWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  int v15;

  v7 = (_DWORD *)(*((_QWORD *)this + 7) + 8 * a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v7 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, a2);
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 272, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  if ((_QWORD *)((char *)this + 280) == v8)
  {
    v10 = 0;
LABEL_8:
    *a4 = v10;
    goto LABEL_9;
  }
  v9 = (unsigned int *)v8[5];
  *a4 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      goto LABEL_8;
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
}

void sub_2300B2AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetList@<X0>(realityio::mtlx::MxDataSource *this@<X0>, int a2@<W1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *i;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  int64x2_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t *j;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  int64x2_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v65;
  int64x2_t v66;
  uint64_t v67;
  int64x2_t *v68;
  uint64_t v69;

  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v69);
  if (a3)
  {
    v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    if ((_QWORD *)((char *)this + 88) != v8)
    {
      v9 = (unint64_t *)v8[5];
      for (i = (unint64_t *)v8[6]; v9 != i; ++v9)
      {
        v11 = *v9;
        if ((*v9 & 7) != 0)
        {
          v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 2, v12));
          if ((v13 & 1) == 0)
            v11 &= 0xFFFFFFFFFFFFFFF8;
        }
        v14 = v11;
        if ((v11 & 7) != 0)
        {
          v15 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) != 0)
            v14 = v11;
          else
            v14 = v11 & 0xFFFFFFFFFFFFFFF8;
        }
        v18 = a4->u64[1];
        v17 = a4[1].u64[0];
        if (v18 >= v17)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - a4->i64[0]) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - a4->i64[0]) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v21;
          v68 = a4 + 1;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v23);
          v26 = &v24[24 * v20];
          *(_QWORD *)v26 = this;
          *((_DWORD *)v26 + 2) = a2;
          *((_QWORD *)v26 + 2) = v14;
          v28 = a4->i64[0];
          v27 = a4->u64[1];
          if (v27 == a4->i64[0])
          {
            v32 = vdupq_n_s64(v27);
            v29 = &v24[24 * v20];
          }
          else
          {
            v29 = &v24[24 * v20];
            do
            {
              v30 = *(_QWORD *)(v27 - 24);
              v27 -= 24;
              v31 = *(_DWORD *)(v27 + 8);
              *((_QWORD *)v29 - 3) = v30;
              v29 -= 24;
              *((_DWORD *)v29 + 2) = v31;
              *((_QWORD *)v29 + 2) = *(_QWORD *)(v27 + 16);
              *(_QWORD *)(v27 + 16) = 0;
            }
            while (v27 != v28);
            v32 = *a4;
          }
          v19 = v26 + 24;
          a4->i64[0] = (uint64_t)v29;
          a4->i64[1] = (uint64_t)(v26 + 24);
          v66 = v32;
          v33 = a4[1].i64[0];
          a4[1].i64[0] = (uint64_t)&v24[24 * v25];
          v67 = v33;
          v65 = v32.i64[0];
          std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v65);
        }
        else
        {
          *(_QWORD *)v18 = this;
          *(_DWORD *)(v18 + 8) = a2;
          v19 = (char *)(v18 + 24);
          *(_QWORD *)(v18 + 16) = v14;
        }
        a4->i64[1] = (uint64_t)v19;
        if ((v11 & 7) != 0)
        {
          v34 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
      }
    }
  }
  else
  {
    v36 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    if ((_QWORD *)((char *)this + 112) != v36)
    {
      v37 = (unint64_t *)v36[5];
      for (j = (unint64_t *)v36[6]; v37 != j; ++v37)
      {
        v39 = *v37;
        if ((*v37 & 7) != 0)
        {
          v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 2, v40));
          if ((v41 & 1) == 0)
            v39 &= 0xFFFFFFFFFFFFFFF8;
        }
        v42 = v39;
        if ((v39 & 7) != 0)
        {
          v43 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 2, v43));
          if ((v44 & 1) != 0)
            v42 = v39;
          else
            v42 = v39 & 0xFFFFFFFFFFFFFFF8;
        }
        v46 = a4->u64[1];
        v45 = a4[1].u64[0];
        if (v46 >= v45)
        {
          v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - a4->i64[0]) >> 3);
          v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - a4->i64[0]) >> 3);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v49;
          v68 = a4 + 1;
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v51);
          v54 = &v52[24 * v48];
          *(_QWORD *)v54 = this;
          *((_DWORD *)v54 + 2) = a2;
          *((_QWORD *)v54 + 2) = v42;
          v56 = a4->i64[0];
          v55 = a4->u64[1];
          if (v55 == a4->i64[0])
          {
            v60 = vdupq_n_s64(v55);
            v57 = &v52[24 * v48];
          }
          else
          {
            v57 = &v52[24 * v48];
            do
            {
              v58 = *(_QWORD *)(v55 - 24);
              v55 -= 24;
              v59 = *(_DWORD *)(v55 + 8);
              *((_QWORD *)v57 - 3) = v58;
              v57 -= 24;
              *((_DWORD *)v57 + 2) = v59;
              *((_QWORD *)v57 + 2) = *(_QWORD *)(v55 + 16);
              *(_QWORD *)(v55 + 16) = 0;
            }
            while (v55 != v56);
            v60 = *a4;
          }
          v47 = v54 + 24;
          a4->i64[0] = (uint64_t)v57;
          a4->i64[1] = (uint64_t)(v54 + 24);
          v66 = v60;
          v61 = a4[1].i64[0];
          a4[1].i64[0] = (uint64_t)&v52[24 * v53];
          v67 = v61;
          v65 = v60.i64[0];
          std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v65);
        }
        else
        {
          *(_QWORD *)v46 = this;
          *(_DWORD *)(v46 + 8) = a2;
          v47 = (char *)(v46 + 24);
          *(_QWORD *)(v46 + 16) = v42;
        }
        a4->i64[1] = (uint64_t)v47;
        if ((v39 & 7) != 0)
        {
          v62 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v63 = __ldxr(v62);
          while (__stlxr(v63 - 2, v62));
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
}

void sub_2300B2EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetInput@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  char *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  unsigned int *v16;
  std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  int v23;
  std::string *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  void *__p[2];
  char v41;
  std::string v42;
  uint64_t v43;

  v8 = (char *)this + 80;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v43);
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
  if ((_QWORD *)((char *)this + 88) != v9)
  {
    v10 = (uint64_t *)v9[5];
    for (i = (uint64_t *)v9[6]; v10 != i; ++v10)
    {
      v12 = *v10;
      if ((*v10 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "inputs:");
      v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (std::string *)(v16 + 4);
      else
        EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      realityio::mtlx::MxDataSource::stripLeading(&v42, (char *)__p, EmptyString);
      if (v41 < 0)
        operator delete(__p[0]);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        v19 = (unsigned __int8 *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v19 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      v20 = v19[23];
      if ((v20 & 0x80u) == 0)
        v21 = v19[23];
      else
        v21 = *((_QWORD *)v19 + 1);
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      v23 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v42.__r_.__value_.__l.__size_;
      if (v21 == size)
      {
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v42;
        else
          v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v19, v24, *((_QWORD *)v19 + 1)))
          {
LABEL_48:
            v32 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 7) != 0)
            {
              v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 2, v33));
              *(_QWORD *)a4 = this;
              if ((v34 & 1) == 0)
                v32 &= 0xFFFFFFFFFFFFFFF8;
              *(_DWORD *)(a4 + 8) = a3;
              *(_QWORD *)(a4 + 16) = v32;
              if ((v32 & 7) != 0)
              {
                v35 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 2, v35));
                if ((v36 & 1) == 0)
                  *(_QWORD *)(a4 + 16) = v35;
                do
                  v37 = __ldxr(v35);
                while (__stlxr(v37 - 2, v35));
              }
            }
            else
            {
              *(_QWORD *)a4 = this;
              *(_DWORD *)(a4 + 8) = a3;
              *(_QWORD *)(a4 + 16) = v32;
            }
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
            if ((v12 & 7) != 0)
            {
              do
                v38 = __ldxr(v16);
              while (__stlxr(v38 - 2, v16));
            }
            goto LABEL_66;
          }
        }
        else
        {
          if (!v19[23])
            goto LABEL_48;
          while (*v19 == v24->__r_.__value_.__s.__data_[0])
          {
            ++v19;
            v24 = (std::string *)((char *)v24 + 1);
            if (!--v20)
              goto LABEL_48;
          }
        }
      }
      if (v23 < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((v12 & 7) != 0)
      {
        do
          v25 = __ldxr(v16);
        while (__stlxr(v25 - 2, v16));
      }
    }
  }
  v26 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    *(_QWORD *)a4 = this;
    if ((v28 & 1) == 0)
      v26 &= 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(a4 + 8) = a3;
    *(_QWORD *)(a4 + 16) = v26;
    if ((v26 & 7) != 0)
    {
      v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        *(_QWORD *)(a4 + 16) = v29;
      do
        v31 = __ldxr(v29);
      while (__stlxr(v31 - 2, v29));
    }
  }
  else
  {
    *(_QWORD *)a4 = this;
    *(_DWORD *)(a4 + 8) = a3;
    *(_QWORD *)(a4 + 16) = v26;
  }
LABEL_66:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
}

void sub_2300B3278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;

  if (a21 < 0)
    operator delete(__p);
  if ((v22 & 7) != 0)
  {
    v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a22);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::nodeGraphGetOutput@<X0>(realityio::mtlx::MxDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  char *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  unsigned int *v16;
  std::string *EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  int v23;
  std::string *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  void *__p[2];
  char v41;
  std::string v42;
  uint64_t v43;

  v8 = (char *)this + 104;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v43);
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
  if ((_QWORD *)((char *)this + 112) != v9)
  {
    v10 = (uint64_t *)v9[5];
    for (i = (uint64_t *)v9[6]; v10 != i; ++v10)
    {
      v12 = *v10;
      if ((*v10 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(__p, "outputs:");
      v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (std::string *)(v16 + 4);
      else
        EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      realityio::mtlx::MxDataSource::stripLeading(&v42, (char *)__p, EmptyString);
      if (v41 < 0)
        operator delete(__p[0]);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        v19 = (unsigned __int8 *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v19 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      v20 = v19[23];
      if ((v20 & 0x80u) == 0)
        v21 = v19[23];
      else
        v21 = *((_QWORD *)v19 + 1);
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      v23 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v42.__r_.__value_.__l.__size_;
      if (v21 == size)
      {
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v42;
        else
          v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v19, v24, *((_QWORD *)v19 + 1)))
          {
LABEL_48:
            v32 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 7) != 0)
            {
              v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 2, v33));
              *(_QWORD *)a4 = this;
              if ((v34 & 1) == 0)
                v32 &= 0xFFFFFFFFFFFFFFF8;
              *(_DWORD *)(a4 + 8) = a3;
              *(_QWORD *)(a4 + 16) = v32;
              if ((v32 & 7) != 0)
              {
                v35 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 2, v35));
                if ((v36 & 1) == 0)
                  *(_QWORD *)(a4 + 16) = v35;
                do
                  v37 = __ldxr(v35);
                while (__stlxr(v37 - 2, v35));
              }
            }
            else
            {
              *(_QWORD *)a4 = this;
              *(_DWORD *)(a4 + 8) = a3;
              *(_QWORD *)(a4 + 16) = v32;
            }
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
            if ((v12 & 7) != 0)
            {
              do
                v38 = __ldxr(v16);
              while (__stlxr(v38 - 2, v16));
            }
            goto LABEL_66;
          }
        }
        else
        {
          if (!v19[23])
            goto LABEL_48;
          while (*v19 == v24->__r_.__value_.__s.__data_[0])
          {
            ++v19;
            v24 = (std::string *)((char *)v24 + 1);
            if (!--v20)
              goto LABEL_48;
          }
        }
      }
      if (v23 < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((v12 & 7) != 0)
      {
        do
          v25 = __ldxr(v16);
        while (__stlxr(v25 - 2, v16));
      }
    }
  }
  v26 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    *(_QWORD *)a4 = this;
    if ((v28 & 1) == 0)
      v26 &= 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(a4 + 8) = a3;
    *(_QWORD *)(a4 + 16) = v26;
    if ((v26 & 7) != 0)
    {
      v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        *(_QWORD *)(a4 + 16) = v29;
      do
        v31 = __ldxr(v29);
      while (__stlxr(v31 - 2, v29));
    }
  }
  else
  {
    *(_QWORD *)a4 = this;
    *(_DWORD *)(a4 + 8) = a3;
    *(_QWORD *)(a4 + 16) = v26;
  }
LABEL_66:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
}

void sub_2300B35C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;

  if (a21 < 0)
    operator delete(__p);
  if ((v22 & 7) != 0)
  {
    v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a22);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::gatherSources(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *j;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;

  v5 = a1 + 80;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v27);
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
  if ((_QWORD *)(a1 + 88) != v6)
  {
    v7 = (uint64_t *)v6[5];
    for (i = (uint64_t *)v6[6]; v7 != i; ++v7)
    {
      v9 = *v7;
      v26 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26);
      v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v25);
      if ((_QWORD *)(a1 + 232) != v12)
        realityio::mtlx::MxDataSource::mergeSourcePrimIndices(a1, (_DWORD *)v12[5], (_DWORD *)v12[6], a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      if ((v26 & 7) != 0)
      {
        v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
    }
  }
  v15 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
  if ((_QWORD *)(a1 + 112) != v15)
  {
    v16 = (uint64_t *)v15[5];
    for (j = (uint64_t *)v15[6]; v16 != j; ++v16)
    {
      v18 = *v16;
      v26 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26);
      v21 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 224, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v25);
      if ((_QWORD *)(a1 + 232) != v21)
        realityio::mtlx::MxDataSource::mergeSourcePrimIndices(a1, (_DWORD *)v21[5], (_DWORD *)v21[6], a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      if ((v26 & 7) != 0)
      {
        v22 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
}

void sub_2300B384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::shaderUsesSecondUV(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v27, "info:id");
  v3 = *((_DWORD *)a2 + 2);
  v31 = (unsigned int *)*a2;
  v32 = v3;
  v33 = v27;
  if ((v27 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v33 = v4;
  }
  if ((v27 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v30 = 0;
  result = (*(uint64_t (**)(unsigned int *, _QWORD, unsigned int **, uint64_t *))(*(_QWORD *)v31 + 112))(v31, v32, &v33, &v30);
  if ((_DWORD)result)
  {
    MEMORY[0x2348B274C](&v27, "ND_texcoord");
    v9 = v30 & 0xFFFFFFFFFFFFFFF8;
    v10 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    if ((v27 & 7) != 0)
    {
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    if ((unsigned int *)v9 == v10)
    {
      MEMORY[0x2348B274C](&v34, "index");
      v12 = (unsigned int *)*a2;
      v13 = *((unsigned int *)a2 + 2);
      v27 = (unsigned int *)*a2;
      v28 = v13;
      v29 = v34;
      if ((v34 & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          v29 = v14;
      }
      if ((v34 & 7) != 0)
      {
        v16 = (unsigned int *)((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
        v12 = v27;
        v13 = v28;
      }
      v35 = 0;
      if ((*(unsigned int (**)(unsigned int *, uint64_t, unsigned int **, unsigned int **))(*(_QWORD *)v12 + 104))(v12, v13, &v29, &v34)&& pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v34))
      {
        v18 = (v35 & 4) != 0
            ? (unsigned int **)(*(uint64_t (**)(unsigned int **))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(&v34)
            : &v34;
        if (*(_DWORD *)v18 == 1)
        {
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
          if ((v29 & 7) != 0)
          {
            v19 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
            do
              v20 = __ldxr(v19);
            while (__stlxr(v20 - 2, v19));
          }
          result = 1;
          goto LABEL_35;
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
      if ((v29 & 7) != 0)
      {
        v21 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    result = 0;
  }
LABEL_35:
  if ((v30 & 7) != 0)
  {
    v23 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if ((v33 & 7) != 0)
  {
    v25 = (unsigned int *)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  return result;
}

void sub_2300B3B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  if ((a12 & 7) != 0)
  {
    v15 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((a15 & 7) != 0)
  {
    v17 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::mtlx::MxDataSource::primIsValid(realityio::mtlx::MxDataSource *this, unsigned int a2)
{
  return a2 < (unint64_t)((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
}

BOOL realityio::mtlx::MxDataSource::attrIsValid(realityio::mtlx::MxDataSource *this, unsigned int a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::mtlx::MxDataSource *v5;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  v5 = (realityio::mtlx::MxDataSource *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 176, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return (realityio::mtlx::MxDataSource *)((char *)this + 184) != v5;
}

void sub_2300B3CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::primType(realityio::mtlx::MxDataSource *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t **v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 7);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v2) >> 3))
    return 3;
  v4 = (uint64_t **)((char *)this + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8 * a2);
  v6 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, &v12, v5);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = (char *)this + 40;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 7, v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, (_DWORD *)v5 + 1);
    *((_DWORD *)v7 + 9) = 0;
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v4, v12, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return *((unsigned int *)v7 + 9);
}

uint64_t realityio::mtlx::MxDataSource::getShadeInputs@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v29, *(_QWORD *)a2, a2[2]);
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
  if ((_QWORD *)(a1 + 88) != v6)
  {
    v7 = (unint64_t *)v6[5];
    v8 = (unint64_t *)v6[6];
    while (v7 != v8)
    {
      v9 = *v7;
      if ((*v7 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v12 = a2[2];
      if ((v9 & 7) != 0)
      {
        v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        v26 = a1;
        if ((v14 & 1) != 0)
          v15 = v9;
        else
          v15 = v9 & 0xFFFFFFFFFFFFFFF8;
        v27 = v12;
        v28 = v15;
        if ((v15 & 7) != 0)
        {
          v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 2, v16));
          v18 = 0;
          if ((v17 & 1) == 0)
            v28 &= 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v18 = 1;
        }
      }
      else
      {
        v26 = a1;
        v27 = v12;
        v18 = 1;
        v15 = v9;
        v28 = v9;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, &v26);
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if ((v18 & 1) == 0)
      {
        v21 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      if ((v9 & 7) != 0)
      {
        v23 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      ++v7;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
}

void sub_2300B3F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MxDataSource::getShadeOutputs@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v29, *(_QWORD *)a2, a2[2]);
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
  if ((_QWORD *)(a1 + 112) != v6)
  {
    v7 = (unint64_t *)v6[5];
    v8 = (unint64_t *)v6[6];
    while (v7 != v8)
    {
      v9 = *v7;
      if ((*v7 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v12 = a2[2];
      if ((v9 & 7) != 0)
      {
        v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        v26 = a1;
        if ((v14 & 1) != 0)
          v15 = v9;
        else
          v15 = v9 & 0xFFFFFFFFFFFFFFF8;
        v27 = v12;
        v28 = v15;
        if ((v15 & 7) != 0)
        {
          v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 2, v16));
          v18 = 0;
          if ((v17 & 1) == 0)
            v28 &= 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v18 = 1;
        }
      }
      else
      {
        v26 = a1;
        v27 = v12;
        v18 = 1;
        v15 = v9;
        v28 = v9;
      }
      std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, &v26);
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      if ((v18 & 1) == 0)
      {
        v21 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      if ((v9 & 7) != 0)
      {
        v23 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      ++v7;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
}

void sub_2300B4190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

const void **realityio::mtlx::MxDataSource::assignGamut(uint64_t a1, const void **a2, _BYTE *a3, unsigned int *a4)
{
  uint64_t v7;
  _QWORD *v8;
  const void **result;
  uint64_t v10;

  v7 = a1 + 272;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)a4 + 24))(&v10, *(_QWORD *)a4, a4[2], a4 + 4);
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = (const void **)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if ((_QWORD *)(a1 + 280) != v8)
    return realityio::assignGamutFromToken(a2, a3, v8 + 5);
  return result;
}

void sub_2300B42B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MxDataSource::textureSettings(unsigned int *a1@<X1>, std::string *a2@<X2>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const std::string *EmptyString;
  unsigned int *v8;
  unsigned int v9;
  const std::string *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  *(_DWORD *)(a3 + 24) = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)a1 + 128))(v11, *(_QWORD *)a1, a1[2], a1 + 4);
  if ((v11[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const std::string *)((v11[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::string::operator=((std::string *)a3, EmptyString);
  if ((v11[0] & 7) != 0)
  {
    v8 = (unsigned int *)(v11[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v11[1] = 0;
  (*(void (**)(_QWORD, _QWORD, unsigned int *, _QWORD *))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1, a1[2], a1 + 4, v11);
  v10 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  std::string::operator=(a2, v10);
  std::string::operator=(a2 + 1, v10 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
}

void sub_2300B43E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::MxDataSource::stripLeading(std::string *this, char *a2, std::string *__str)
{
  char v5;
  const std::string::value_type *v6;
  std::string *v7;
  int v8;
  char *v9;
  int64_t v10;
  int64_t size;
  std::string *v12;
  int v13;
  std::string *v14;
  int64_t v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type __sz;
  char v19;

  v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v6 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v7 = __str;
  else
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v8 = a2[23];
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    __sz = __str->__r_.__value_.__l.__size_;
    if (v5 >= 0)
      size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      size = __str->__r_.__value_.__l.__size_;
    if (size >= v10)
    {
      v12 = (std::string *)((char *)v7 + size);
      v13 = *v9;
      v14 = v7;
      do
      {
        v15 = size - v10;
        if (v15 == -1)
          break;
        v16 = (std::string *)memchr(v14, v13, v15 + 1);
        if (!v16)
          break;
        v17 = v16;
        if (!memcmp(v16, v9, v10))
        {
          if (v17 == v12 || v17 != v7)
            break;
          goto LABEL_26;
        }
        v14 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        size = (char *)v12 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
      }
      while (size >= v10);
    }
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(this, v6, __sz);
    }
    else
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    }
  }
  else
  {
LABEL_26:
    std::string::basic_string(this, __str, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  }
}

uint64_t realityio::mtlx::MxDataSource::mergeSourcePrimIndices(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = result;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, v6 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v12);
      v10 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 8))(v7, &v8);
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(a4, &v10, &v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
      v6 += 2;
    }
    while (v6 != a3);
  }
  return result;
}

void sub_2300B466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a11);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a13);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 40);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 32));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::NeoPrimType>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::NeoPrimType>,0>((uint64_t)a1 + 28);
    operator delete(a1);
  }
}

uint64_t realityio::replication::SetFieldOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE v22[16];
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v17))
  {
    v16 = 0;
    if (realityio::replication::read(a1, a2, &v16))
    {
      v24 = 0;
      if (realityio::replication::read(a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v17);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v18);
        v21 = v16;
        if ((v16 & 7) != 0)
        {
          v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 2, v6));
          if ((v7 & 1) == 0)
            v21 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22, (const pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        *(_BYTE *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v20);
        v8 = v21;
        *(_QWORD *)(a3 + 16) = v21;
        if ((v8 & 7) != 0)
        {
          v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 2, v9));
          if ((v10 & 1) == 0)
            *(_QWORD *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)v22);
        *(_BYTE *)a3 = 1;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
        if ((v21 & 7) != 0)
        {
          v11 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    if ((v16 & 7) != 0)
    {
      v13 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
}

void sub_2300B4A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetFieldOperation::~SetFieldOperation(realityio::replication::SetFieldOperation *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetFieldOperation *)((char *)this + 16));
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetFieldOperation::Serialize(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);
  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 2));
}

uint64_t realityio::replication::SetFieldDictValueByKeyOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v27))
  {
    v26 = 0;
    if (realityio::replication::read(a1, a2, &v26))
    {
      v25 = 0;
      if (realityio::replication::read(a1, a2, &v25))
      {
        v35 = 0;
        if (realityio::replication::read(a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, &v27);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, &v28);
          v31 = v26;
          if ((v26 & 7) != 0)
          {
            v6 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
            do
              v7 = __ldxr(v6);
            while (__stxr(v7 + 2, v6));
            if ((v7 & 1) == 0)
              v31 &= 0xFFFFFFFFFFFFFFF8;
          }
          v32 = v25;
          if ((v25 & 7) != 0)
          {
            v8 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 2, v8));
            if ((v9 & 1) == 0)
              v32 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v34);
          *(_BYTE *)a3 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v29);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v30);
          v10 = v31;
          *(_QWORD *)(a3 + 16) = v31;
          if ((v10 & 7) != 0)
          {
            v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 2, v11));
            if ((v12 & 1) == 0)
              *(_QWORD *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
          }
          v13 = v32;
          *(_QWORD *)(a3 + 24) = v32;
          if ((v13 & 7) != 0)
          {
            v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 2, v14));
            if ((v15 & 1) == 0)
              *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)v33);
          *(_BYTE *)a3 = 1;
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v33);
          if ((v32 & 7) != 0)
          {
            v16 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          if ((v31 & 7) != 0)
          {
            v18 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
            do
              v19 = __ldxr(v18);
            while (__stlxr(v19 - 2, v18));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
        }
        else
        {
          *(_BYTE *)a3 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      if ((v25 & 7) != 0)
      {
        v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    if ((v26 & 7) != 0)
    {
      v22 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
}

void sub_2300B4EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetFieldDictValueByKeyOperation::~SetFieldDictValueByKeyOperation(realityio::replication::SetFieldDictValueByKeyOperation *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetFieldDictValueByKeyOperation *)((char *)this + 24));
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetFieldDictValueByKeyOperation::Serialize(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);
  realityio::replication::write(a2, a1 + 2);
  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 3));
}

uint64_t realityio::replication::SetTimeSampleOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE v13[16];
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v8)
    && (v7 = 0, realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)&v7, 1uLL)))
  {
    v15 = 0;
    if (realityio::replication::read(a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, &v9);
      v12 = v7;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      *a3 = 0;
      boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::construct((uint64_t)a3, (uint64_t)&v10);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_2300B5240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::SetTimeSampleOperation::~SetTimeSampleOperation(realityio::replication::SetTimeSampleOperation *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((realityio::replication::SetTimeSampleOperation *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::SetTimeSampleOperation::Serialize(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  std::ostream::write();
  realityio::replication::write(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16));
}

uint64_t realityio::replication::CreateSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;
  int v13;
  int v14;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v13)
    && (v12 = 0,
        realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfSpecType,0>(a1, a2, (uint64_t)&v12, 1uLL))&& (v11 = 0, realityio::replication::details::readBuffer<BOOL,0>(a1)))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v14);
    v9 = v12;
    v10 = v11;
    *(_BYTE *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 4), &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v8);
    *(_DWORD *)(a3 + 12) = v9;
    *(_BYTE *)(a3 + 16) = v10;
    *(_BYTE *)a3 = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_2300B5448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::CreateSpecOperation::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::DeleteSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  int v8;
  char v9;
  char v10;
  int v11;
  int v12;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v11)
    && (v10 = 0, realityio::replication::details::readBuffer<BOOL,0>(a1)))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v12);
    v9 = v10;
    *(_BYTE *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 4), &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v8);
    *(_BYTE *)(a3 + 12) = v9;
    *(_BYTE *)a3 = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
}

void sub_2300B55B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::DeleteSpecOperation::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();
  return std::ostream::write();
}

uint64_t realityio::replication::MoveSpecOperation::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v13))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    if (realityio::replication::read(a1, a2, (uint64_t)&v11))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, &v12);
      *a3 = 0;
      boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::construct((uint64_t)a3, &v7);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_2300B575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13)
{
  realityio::replication::MoveSpecOperation::~MoveSpecOperation((realityio::replication::MoveSpecOperation *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a11);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a13);
  _Unwind_Resume(a1);
}

void realityio::replication::MoveSpecOperation::~MoveSpecOperation(realityio::replication::MoveSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::MoveSpecOperation::Serialize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
  return realityio::replication::write();
}

uint64_t realityio::replication::PushChildOperation_TfToken::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v31))
  {
    v30 = 0;
    if (realityio::replication::read(a1, a2, &v30))
    {
      v29 = 0;
      if (realityio::replication::read(a1, a2, &v29))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v31);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v32);
        v27 = v30;
        if ((v30 & 7) != 0)
        {
          v6 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 2, v6));
          if ((v7 & 1) == 0)
            v27 &= 0xFFFFFFFFFFFFFFF8;
        }
        v28 = v29;
        if ((v29 & 7) != 0)
        {
          v8 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            v28 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_BYTE *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v25);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v26);
        v10 = v27;
        *(_QWORD *)(a3 + 16) = v27;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            *(_QWORD *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        v13 = v28;
        *(_QWORD *)(a3 + 24) = v28;
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 2, v14));
          if ((v15 & 1) == 0)
            *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_BYTE *)a3 = 1;
        if ((v28 & 7) != 0)
        {
          v16 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if ((v27 & 7) != 0)
        {
          v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      if ((v29 & 7) != 0)
      {
        v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    if ((v30 & 7) != 0)
    {
      v22 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
}

void sub_2300B5A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  va_list va;

  va_start(va, a6);
  if ((a5 & 7) != 0)
  {
    v7 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((a6 & 7) != 0)
  {
    v9 = (unsigned int *)(a6 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::PushChildOperation_TfToken::~PushChildOperation_TfToken(realityio::replication::PushChildOperation_TfToken *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::PushChildOperation_TfToken::Serialize(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a1);
  realityio::replication::write();
  realityio::replication::write(a2, (_QWORD *)a1 + 1);
  return realityio::replication::write(a2, (_QWORD *)a1 + 2);
}

uint64_t realityio::replication::PushChildOperation_SdfPath::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v24))
  {
    v23 = 0;
    if (realityio::replication::read(a1, a2, &v23))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      if (realityio::replication::read(a1, a2, (uint64_t)&v21))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, &v24);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v25);
        v18 = v23;
        if ((v23 & 7) != 0)
        {
          v6 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 2, v6));
          if ((v7 & 1) == 0)
            v18 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v21);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v22);
        *(_BYTE *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v17);
        v8 = v18;
        *(_QWORD *)(a3 + 16) = v18;
        if ((v8 & 7) != 0)
        {
          v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 2, v9));
          if ((v10 & 1) == 0)
            *(_QWORD *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 24), &v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 28), &v20);
        *(_BYTE *)a3 = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
        if ((v18 & 7) != 0)
        {
          v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    if ((v23 & 7) != 0)
    {
      v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
}

void sub_2300B5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  if ((v9 & 7) != 0)
  {
    v5 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  _Unwind_Resume(a1);
}

void realityio::replication::PushChildOperation_SdfPath::~PushChildOperation_SdfPath(realityio::replication::PushChildOperation_SdfPath *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::PushChildOperation_SdfPath::Serialize(_QWORD *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  realityio::replication::write();
  realityio::replication::write(a2, a1 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2));
  return realityio::replication::write();
}

uint64_t realityio::replication::PopChildOperation_TfToken::Deserialize@<X0>(realityio *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  if (realityio::replication::read(a1, a2, (uint64_t)&v31))
  {
    v30 = 0;
    if (realityio::replication::read(a1, a2, &v30))
    {
      v29 = 0;
      if (realityio::replication::read(a1, a2, &v29))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v31);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, &v32);
        v27 = v30;
        if ((v30 & 7) != 0)
        {
          v6 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 2, v6));
          if ((v7 & 1) == 0)
            v27 &= 0xFFFFFFFFFFFFFFF8;
        }
        v28 = v29;
        if ((v29 & 7) != 0)
        {
          v8 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            v28 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_BYTE *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 8), &v25);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 12), &v26);
        v10 = v27;
        *(_QWORD *)(a3 + 16) = v27;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            *(_QWORD *)(a3 + 16) &= 0xFFFFFFFFFFFFFFF8;
        }
        v13 = v28;
        *(_QWORD *)(a3 + 24) = v28;
        if ((v13 & 7) != 0)
        {
          v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 2, v14));
          if ((v15 & 1) == 0)
            *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_BYTE *)a3 = 1;
        if ((v28 & 7) != 0)
        {
          v16 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if ((v27 & 7) != 0)
        {
          v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
      }
      else
      {
        *(_BYTE *)a3 = 0;
      }
      if ((v29 & 7) != 0)
      {
        v20 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    if ((v30 & 7) != 0)
    {
      v22 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
}

void sub_2300B6140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  va_list va;

  va_start(va, a6);
  if ((a5 & 7) != 0)
  {
    v7 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((a6 & 7) != 0)
  {
    v9 = (unsigned int *)(a6 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::PopChildOperation_TfToken::~PopChildOperation_TfToken(realityio::replication::PopChildOperation_TfToken *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::replication::PopChildOperation_SdfPath::~PopChildOperation_SdfPath(realityio::replication::PopChildOperation_SdfPath *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

pxrInternal__aapl__pxrReserved__::VtValue *boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::construct(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *result;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 16));
  *(_BYTE *)a1 = 1;
  return result;
}

void sub_2300B62D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfSpecType,0>(realityio *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  uint8_t *v7;
  realityio *v9;
  __int16 v10;
  __int16 v11;

  if (a4 >> 62)
  {
    v4 = *(NSObject **)(realityio::logObjects(a1) + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = 0;
    v6 = "Read size overflowed";
    v7 = (uint8_t *)&v11;
LABEL_7:
    _os_log_error_impl(&dword_22FF26000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  v9 = (realityio *)std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) != 0)
  {
    v4 = *(NSObject **)(realityio::logObjects(v9) + 40);
    result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v6 = "Failed to read";
    v7 = (uint8_t *)&v10;
    goto LABEL_7;
  }
  return 1;
}

_DWORD *boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::construct(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a2 + 2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a2 + 3);
  *(_BYTE *)a1 = 1;
  return result;
}

void realityio::ImportSessionV2::getAction(realityio::ImportSessionV2 *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  int v11;
  _QWORD *v12;
  unsigned __int8 v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  int v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)*((_QWORD *)this + 166);
  if (!v7)
    goto LABEL_8;
  v8 = (uint64_t *)((char *)this + 1328);
  v9 = (char *)this + 1336;
  v10 = (uint64_t *)((char *)this + 1328);
  do
  {
    v11 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)v9, v7 + 4, (uint64_t *)a2);
    v12 = v7 + 1;
    if (!v11)
    {
      v12 = v7;
      v10 = v7;
    }
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8
    || (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)v9, (uint64_t *)a2, v10 + 4) & 1) != 0)
  {
LABEL_8:
    v13 = atomic_load((unsigned __int8 *)&_MergedGlobals_30);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_30))
    {
      qword_255E54A68 = 0;
      qword_255E54A60 = 0;
      qword_255E54A58 = (uint64_t)&qword_255E54A60;
      __cxa_guard_release(&_MergedGlobals_30);
    }
    if (!std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__count_unique<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&qword_255E54A58, (uint64_t *)a2))
    {
      v14 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)&qword_255E54A58, (uint64_t *)a2, (uint64_t *)a2);
      v15 = *(NSObject **)(realityio::logObjects((realityio *)v14) + 24);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (v19)
        {
          v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0)
            v20 = *(const char **)v20;
        }
        else
        {
          v20 = "";
        }
        v21 = 136315138;
        v22 = v20;
        _os_log_error_impl(&dword_22FF26000, v15, OS_LOG_TYPE_ERROR, "Un-handled rule %s\n", (uint8_t *)&v21, 0xCu);
      }
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v16 = v10[6];
    *a3 = v10[5];
    a3[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
}

void `non-virtual thunk to'realityio::ImportSessionV2::getAction(realityio::ImportSessionV2 *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X3>, _QWORD *a3@<X8>)
{
  realityio::ImportSessionV2::getAction((realityio::ImportSessionV2 *)((char *)this - 400), a2, a3);
}

uint64_t realityio::ImportSessionV2::ImportSessionV2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, const void **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  realityio::tokens::ActionTokens_StaticTokenType *Data;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  realityio::tokens::ActionTokens_StaticTokenType *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  realityio::tokens::ActionTokens_StaticTokenType *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  realityio::tokens::ActionTokens_StaticTokenType *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  realityio::tokens::ActionTokens_StaticTokenType *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  realityio::tokens::ActionTokens_StaticTokenType *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  realityio::tokens::ActionTokens_StaticTokenType *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  realityio::tokens::ActionTokens_StaticTokenType *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  realityio::tokens::ActionTokens_StaticTokenType *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  realityio::tokens::ActionTokens_StaticTokenType *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  realityio::tokens::ActionTokens_StaticTokenType *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  realityio::tokens::ActionTokens_StaticTokenType *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  realityio::tokens::ActionTokens_StaticTokenType *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  realityio::tokens::ActionTokens_StaticTokenType *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  realityio::tokens::ActionTokens_StaticTokenType *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  realityio::tokens::ActionTokens_StaticTokenType *v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  realityio::tokens::ActionTokens_StaticTokenType *v119;
  uint64_t v120;
  _QWORD *v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  realityio::tokens::ActionTokens_StaticTokenType *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  realityio::tokens::ActionTokens_StaticTokenType *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  realityio::tokens::ActionTokens_StaticTokenType *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  realityio::tokens::ActionTokens_StaticTokenType *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  realityio::tokens::ActionTokens_StaticTokenType *v152;
  _QWORD *v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  realityio::tokens::ActionTokens_StaticTokenType *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  realityio::tokens::ActionTokens_StaticTokenType *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  realityio::tokens::ActionTokens_StaticTokenType *v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  realityio::tokens::ActionTokens_StaticTokenType *v176;
  uint64_t v177;
  _QWORD *v178;
  unsigned int *v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  realityio::tokens::ActionTokens_StaticTokenType *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  realityio::tokens::ActionTokens_StaticTokenType *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  realityio::tokens::ActionTokens_StaticTokenType *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  realityio::tokens::ActionTokens_StaticTokenType *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  realityio::tokens::ActionTokens_StaticTokenType *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  realityio::tokens::ActionTokens_StaticTokenType *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  realityio::tokens::ActionTokens_StaticTokenType *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  realityio::tokens::ActionTokens_StaticTokenType *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  realityio::tokens::ActionTokens_StaticTokenType *v239;
  _QWORD *v240;
  uint64_t *v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t i;
  uint64_t **v251;
  uint64_t v252;
  uint64_t *v254;
  uint64_t **v255;
  uint64_t *v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *p_shared_owners;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int *v379;
  unsigned int *v380;
  unsigned int v381;
  unsigned int *v382;
  unsigned int *v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int *v386;
  unsigned int *v387;
  unsigned int v388;
  unsigned int v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int *v394;
  unsigned int v395;
  unsigned int v396;
  uint64_t v398;
  unsigned int *v399;
  unsigned int *v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  unsigned int *v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  unsigned int *v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  uint64_t v435;
  std::__shared_weak_count *v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  uint64_t v439;
  std::__shared_weak_count *v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  uint64_t v447;
  std::__shared_weak_count *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  __int128 v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int *v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t v469;
  _QWORD *v470;
  _QWORD *v471;
  uint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  _QWORD *v479;
  _QWORD *v480;
  uint64_t v481;
  _QWORD *v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  _QWORD *v486;
  uint64_t v487;
  _QWORD *v488;
  _QWORD *v489;
  uint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  uint64_t v493;
  __int128 v494;
  uint64_t v495;
  __int128 v496;
  uint64_t v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  __int128 v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  __int128 v508;
  uint64_t v509;
  __int128 v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  __int128 v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  __int128 v520;
  uint64_t v521;
  __int128 v522;
  uint64_t v523;
  __int128 v524;
  uint64_t v525;
  __int128 v526;
  uint64_t v527;
  __int128 v528;
  uint64_t v529;
  __int128 v530;
  uint64_t v531;
  __int128 v532;
  uint64_t v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;

  v537 = *MEMORY[0x24BDAC8D0];
  v400 = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v400);
  realityio::ImportSessionImpl::ImportSessionImpl(a1, (uint64_t *)&v400, a3, a4, a5);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v400);
  *(_QWORD *)a1 = &off_24FDF3578;
  *(_QWORD *)(a1 + 400) = &unk_24FDF35F8;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 850045863;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_BYTE *)(a1 + 624) = 1;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 1065353216;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  v399 = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v399);
  TgECS::TgECS(a1 + 816, a1 + 432, &v399, a1 + 400);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v399);
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  v398 = a1 + 1328;
  *(_QWORD *)(a1 + 1320) = a1 + 1328;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_BYTE *)(a1 + 1360) = 1;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_QWORD *)(a1 + 1512) = 0;
  MEMORY[0x2348B4CCC](a1 + 1520, v10, v11, v12);
  v13 = operator new();
  *(_QWORD *)(v13 + 32) = &off_24FDF3708;
  *(_QWORD *)(v13 + 64) = &off_24FDF3788;
  *(_QWORD *)v13 = &off_24FDF3678;
  *(_QWORD *)(v13 + 8) = a1;
  *(_QWORD *)(v13 + 24) = v13;
  *(_QWORD *)(v13 + 40) = a1;
  *(_QWORD *)(v13 + 56) = v13 + 32;
  *(_QWORD *)(v13 + 72) = a1;
  *(_QWORD *)(v13 + 88) = v13 + 64;
  *(_QWORD *)(v13 + 96) = &off_24FDF3808;
  *(_QWORD *)(v13 + 104) = a1;
  *(_QWORD *)(v13 + 120) = v13 + 96;
  *(_QWORD *)(v13 + 128) = &off_24FDF3898;
  *(_QWORD *)(v13 + 136) = a1;
  *(_QWORD *)(v13 + 152) = v13 + 128;
  *(_QWORD *)(v13 + 160) = &off_24FDF3928;
  *(_QWORD *)(v13 + 168) = a1;
  v14 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(v13 + 184) = v13 + 160;
  *(_QWORD *)(v13 + 192) = v14;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  std::unique_ptr<realityio::ExecContext>::reset[abi:ne180100]((_QWORD *)(a1 + 416), v13);
  Data = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v16 = operator new(0x20uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_24FDF39B8;
  v16[3] = &off_24FDE8060;
  v17 = *((_QWORD *)Data + 1);
  v454 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v454 &= 0xFFFFFFFFFFFFFFF8;
  }
  v455 = (unsigned int *)(v16 + 3);
  v456 = v16;
  v450 = 0;
  v449 = 0;
  v20 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 416);
  v23 = operator new(0x30uLL);
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = &off_24FDE8350;
  *v23 = &off_24FDF3A08;
  v23[4] = v21;
  v23[5] = v22;
  v24 = *((_QWORD *)v20 + 2);
  v457 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v457 &= 0xFFFFFFFFFFFFFFF8;
  }
  v458 = v23 + 3;
  v459 = v23;
  v448 = 0;
  v447 = 0;
  v27 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v27)
    v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 416);
  v30 = operator new(0x30uLL);
  v30[1] = 0;
  v30[2] = 0;
  v30[3] = &off_24FDE8458;
  *v30 = &off_24FDF3A58;
  v30[4] = v28;
  v30[5] = v29;
  v31 = *((_QWORD *)v27 + 3);
  v460 = v31;
  if ((v31 & 7) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 2, v32));
    if ((v33 & 1) == 0)
      v460 &= 0xFFFFFFFFFFFFFFF8;
  }
  v461 = v30 + 3;
  v462 = v30;
  v446 = 0;
  v445 = 0;
  v34 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v34)
    v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v35 = operator new(0x20uLL);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_24FDF3AA8;
  v35[3] = &off_24FDF9620;
  v36 = *((_QWORD *)v34 + 4);
  v463 = v36;
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 2, v37));
    if ((v38 & 1) == 0)
      v463 &= 0xFFFFFFFFFFFFFFF8;
  }
  v464 = v35 + 3;
  v465 = v35;
  v444 = 0;
  v443 = 0;
  v39 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v39)
    v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 416);
  v42 = operator new(0x30uLL);
  v42[1] = 0;
  v42[2] = 0;
  v42[3] = &off_24FDF0450;
  *v42 = &off_24FDF3AF8;
  v42[4] = v40;
  v42[5] = v41;
  v43 = *((_QWORD *)v39 + 6);
  v466 = v43;
  if ((v43 & 7) != 0)
  {
    v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 2, v44));
    if ((v45 & 1) == 0)
      v466 &= 0xFFFFFFFFFFFFFFF8;
  }
  v467 = v42 + 3;
  v468 = v42;
  v442 = 0;
  v441 = 0;
  v46 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v46)
    v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v47 = operator new(0x20uLL);
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_24FDF3B48;
  v47[3] = &off_24FDEF960;
  v48 = *((_QWORD *)v46 + 5);
  v469 = v48;
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 2, v49));
    if ((v50 & 1) == 0)
      v469 &= 0xFFFFFFFFFFFFFFF8;
  }
  v470 = v47 + 3;
  v471 = v47;
  v440 = 0;
  v439 = 0;
  v51 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v51)
    v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v52 = *(_QWORD *)(a1 + 16);
  v53 = *(_QWORD *)(a1 + 416);
  v54 = operator new(0x30uLL);
  v54[1] = 0;
  v54[2] = 0;
  v54[3] = &off_24FDEF730;
  *v54 = &off_24FDF3B98;
  v54[4] = v52;
  v54[5] = v53;
  v55 = *((_QWORD *)v51 + 7);
  v472 = v55;
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 2, v56));
    if ((v57 & 1) == 0)
      v472 &= 0xFFFFFFFFFFFFFFF8;
  }
  v473 = v54 + 3;
  v474 = v54;
  v438 = 0;
  v437 = 0;
  v58 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v58)
    v58 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v59 = *(_QWORD *)(a1 + 16);
  v60 = *(_QWORD *)(a1 + 416);
  v61 = operator new(0x30uLL);
  v61[1] = 0;
  v61[2] = 0;
  v61[3] = &off_24FDEF848;
  *v61 = &off_24FDF3BE8;
  v61[4] = v59;
  v61[5] = v60;
  v62 = *((_QWORD *)v58 + 8);
  v475 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v475 &= 0xFFFFFFFFFFFFFFF8;
  }
  v476 = v61 + 3;
  v477 = v61;
  v436 = 0;
  v435 = 0;
  v65 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v65)
    v65 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v66 = *(_QWORD *)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 416);
  v68 = operator new(0x30uLL);
  v68[1] = 0;
  v68[2] = 0;
  v68[3] = &off_24FDEF768;
  *v68 = &off_24FDF3C38;
  v68[4] = v66;
  v68[5] = v67;
  v69 = *((_QWORD *)v65 + 9);
  v478 = v69;
  if ((v69 & 7) != 0)
  {
    v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 2, v70));
    if ((v71 & 1) == 0)
      v478 &= 0xFFFFFFFFFFFFFFF8;
  }
  v479 = v68 + 3;
  v480 = v68;
  v434 = 0;
  v433 = 0;
  v72 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v72)
    v72 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v73 = *(_QWORD *)(a1 + 16);
  v74 = *(_QWORD *)(a1 + 416);
  v75 = operator new(0x30uLL);
  v75[1] = 0;
  v75[2] = 0;
  v75[3] = &off_24FDEF880;
  *v75 = &off_24FDF3C88;
  v75[4] = v73;
  v75[5] = v74;
  v76 = *((_QWORD *)v72 + 10);
  v481 = v76;
  if ((v76 & 7) != 0)
  {
    v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 2, v77));
    if ((v78 & 1) == 0)
      v481 &= 0xFFFFFFFFFFFFFFF8;
  }
  v482 = v75 + 3;
  v483 = v75;
  v431 = 0;
  v432 = 0;
  v79 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v79)
    v79 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v80 = *(_QWORD *)(a1 + 16);
  v81 = *(_QWORD *)(a1 + 416);
  v82 = operator new(0x30uLL);
  v82[1] = 0;
  v82[2] = 0;
  v82[3] = &off_24FDEF7A0;
  *v82 = &off_24FDF3CD8;
  v82[4] = v80;
  v82[5] = v81;
  v83 = *((_QWORD *)v79 + 12);
  v484 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v484 &= 0xFFFFFFFFFFFFFFF8;
  }
  v485 = v82 + 3;
  v486 = v82;
  v429 = 0;
  v430 = 0;
  v86 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v86)
    v86 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v87 = *(_QWORD *)(a1 + 16);
  v88 = *(_QWORD *)(a1 + 416);
  v89 = operator new(0x30uLL);
  v89[1] = 0;
  v89[2] = 0;
  v89[3] = &off_24FDEF8B8;
  *v89 = &off_24FDF3D28;
  v89[4] = v87;
  v89[5] = v88;
  v90 = *((_QWORD *)v86 + 13);
  v487 = v90;
  if ((v90 & 7) != 0)
  {
    v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 2, v91));
    if ((v92 & 1) == 0)
      v487 &= 0xFFFFFFFFFFFFFFF8;
  }
  v488 = v89 + 3;
  v489 = v89;
  v427 = 0;
  v428 = 0;
  v93 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v93)
    v93 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v94 = *(_QWORD *)(a1 + 16);
  v95 = *(_QWORD *)(a1 + 416);
  v96 = operator new(0x30uLL);
  v96[1] = 0;
  v96[2] = 0;
  v96[3] = &off_24FDEF7D8;
  *v96 = &off_24FDF3D78;
  v96[4] = v94;
  v96[5] = v95;
  v97 = *((_QWORD *)v93 + 15);
  v490 = v97;
  if ((v97 & 7) != 0)
  {
    v98 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 2, v98));
    if ((v99 & 1) == 0)
      v490 &= 0xFFFFFFFFFFFFFFF8;
  }
  v491 = v96 + 3;
  v492 = v96;
  v425 = 0;
  v426 = 0;
  v100 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v100)
    v100 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v101 = *(_QWORD *)(a1 + 16);
  v102 = *(_QWORD *)(a1 + 416);
  v103 = operator new(0x30uLL);
  v103[1] = 0;
  v103[2] = 0;
  *v103 = &off_24FDF3DC8;
  v103[3] = &off_24FDEF8F0;
  v103[4] = v101;
  v103[5] = v102;
  *(_QWORD *)&v424 = v103 + 3;
  *((_QWORD *)&v424 + 1) = v103;
  v104 = *((_QWORD *)v100 + 16);
  v493 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v493 &= 0xFFFFFFFFFFFFFFF8;
  }
  v494 = v424;
  v424 = 0uLL;
  v107 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v107)
    v107 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v108 = *(_QWORD *)(a1 + 16);
  v109 = *(_QWORD *)(a1 + 416);
  v110 = operator new(0x30uLL);
  *v110 = &off_24FDF3E18;
  v110[1] = 0;
  v110[3] = &off_24FDEEBB8;
  v110[2] = 0;
  v110[4] = v108;
  v110[5] = v109;
  *(_QWORD *)&v423 = v110 + 3;
  *((_QWORD *)&v423 + 1) = v110;
  v111 = *((_QWORD *)v107 + 18);
  v495 = v111;
  if ((v111 & 7) != 0)
  {
    v112 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 2, v112));
    if ((v113 & 1) == 0)
      v495 &= 0xFFFFFFFFFFFFFFF8;
  }
  v496 = v423;
  v423 = 0uLL;
  v114 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v114)
    v114 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v115 = operator new(0x20uLL);
  v115[1] = 0;
  v115[2] = 0;
  v115[3] = &off_24FDEEC28;
  *v115 = &off_24FDF3E68;
  *(_QWORD *)&v422 = v115 + 3;
  *((_QWORD *)&v422 + 1) = v115;
  v116 = *((_QWORD *)v114 + 19);
  v497 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v497 &= 0xFFFFFFFFFFFFFFF8;
  }
  v498 = v422;
  v422 = 0uLL;
  v119 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v119)
    v119 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v120 = *(_QWORD *)(a1 + 16);
  v420 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v420);
  v121 = operator new(0x38uLL);
  v121[1] = 0;
  v121[2] = 0;
  *v121 = &off_24FDF3EB8;
  v121[3] = &off_24FDE7C78;
  v121[4] = v120;
  v122 = v420;
  *(_QWORD *)&v451 = v420;
  v420 = 0;
  v121[5] = 0;
  v121[6] = v122;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v121 + 6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v451);
  *(_QWORD *)&v421 = v121 + 3;
  *((_QWORD *)&v421 + 1) = v121;
  v123 = *((_QWORD *)v119 + 20);
  v499 = v123;
  if ((v123 & 7) != 0)
  {
    v124 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 2, v124));
    if ((v125 & 1) == 0)
      v499 &= 0xFFFFFFFFFFFFFFF8;
  }
  v500 = v421;
  v421 = 0uLL;
  v126 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v126)
    v126 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v127 = operator new(0x20uLL);
  v127[1] = 0;
  v127[2] = 0;
  v127[3] = &off_24FDE5490;
  *v127 = &off_24FDF3F08;
  *(_QWORD *)&v419 = v127 + 3;
  *((_QWORD *)&v419 + 1) = v127;
  v128 = *((_QWORD *)v126 + 22);
  v501 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v501 &= 0xFFFFFFFFFFFFFFF8;
  }
  v502 = v419;
  v419 = 0uLL;
  v131 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v131)
    v131 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v132 = *(_QWORD *)(a1 + 16);
  v133 = *(_QWORD *)(a1 + 416);
  v134 = operator new(0x30uLL);
  v134[1] = 0;
  v134[2] = 0;
  *v134 = &off_24FDF3F58;
  v134[3] = &off_24FDF4588;
  v134[4] = v132;
  v134[5] = v133;
  *(_QWORD *)&v418 = v134 + 3;
  *((_QWORD *)&v418 + 1) = v134;
  v135 = *((_QWORD *)v131 + 23);
  v503 = v135;
  if ((v135 & 7) != 0)
  {
    v136 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 2, v136));
    if ((v137 & 1) == 0)
      v503 &= 0xFFFFFFFFFFFFFFF8;
  }
  v504 = v418;
  v418 = 0uLL;
  v138 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v138)
    v138 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v139 = *(_QWORD *)(a1 + 16);
  v140 = *(_QWORD *)(a1 + 416);
  v141 = operator new(0x30uLL);
  v141[1] = 0;
  v141[2] = 0;
  *v141 = &off_24FDF3FA8;
  v141[3] = &off_24FDF0418;
  v141[4] = v139;
  v141[5] = v140;
  *(_QWORD *)&v417 = v141 + 3;
  *((_QWORD *)&v417 + 1) = v141;
  v142 = *((_QWORD *)v138 + 25);
  v505 = v142;
  if ((v142 & 7) != 0)
  {
    v143 = (unsigned int *)(v142 & 0xFFFFFFFFFFFFFFF8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 2, v143));
    if ((v144 & 1) == 0)
      v505 &= 0xFFFFFFFFFFFFFFF8;
  }
  v506 = v417;
  v417 = 0uLL;
  v145 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v145)
    v145 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v146 = *(_QWORD *)(a1 + 16);
  v147 = *(_QWORD *)(a1 + 416);
  v148 = operator new(0x30uLL);
  v148[1] = 0;
  v148[2] = 0;
  *v148 = &off_24FDF3FF8;
  v148[3] = &off_24FDF55E0;
  v148[4] = v146;
  v148[5] = v147;
  *(_QWORD *)&v416 = v148 + 3;
  *((_QWORD *)&v416 + 1) = v148;
  v149 = *((_QWORD *)v145 + 26);
  v507 = v149;
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 2, v150));
    if ((v151 & 1) == 0)
      v507 &= 0xFFFFFFFFFFFFFFF8;
  }
  v508 = v416;
  v416 = 0uLL;
  v152 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v152)
    v152 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v153 = operator new(0x20uLL);
  v153[1] = 0;
  v153[2] = 0;
  v153[3] = &off_24FDE44B0;
  *v153 = &off_24FDF4048;
  *(_QWORD *)&v415 = v153 + 3;
  *((_QWORD *)&v415 + 1) = v153;
  v154 = *((_QWORD *)v152 + 27);
  v509 = v154;
  if ((v154 & 7) != 0)
  {
    v155 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFFFF8);
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 2, v155));
    if ((v156 & 1) == 0)
      v509 &= 0xFFFFFFFFFFFFFFF8;
  }
  v510 = v415;
  v415 = 0uLL;
  v157 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v157)
    v157 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v158 = *(_QWORD *)(a1 + 16);
  v159 = *(_QWORD *)(a1 + 416);
  v160 = operator new(0x30uLL);
  v160[1] = 0;
  v160[2] = 0;
  *v160 = &off_24FDF4098;
  v160[3] = &off_24FDEF6F8;
  v160[4] = v158;
  v160[5] = v159;
  *(_QWORD *)&v414 = v160 + 3;
  *((_QWORD *)&v414 + 1) = v160;
  v161 = *((_QWORD *)v157 + 28);
  v511 = v161;
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 2, v162));
    if ((v163 & 1) == 0)
      v511 &= 0xFFFFFFFFFFFFFFF8;
  }
  v512 = v414;
  v414 = 0uLL;
  v164 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v164)
    v164 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v165 = *(_QWORD *)(a1 + 16);
  v166 = *(_QWORD *)(a1 + 416);
  v167 = operator new(0x30uLL);
  v167[1] = 0;
  v167[2] = 0;
  *v167 = &off_24FDF40E8;
  v167[3] = &off_24FDEEBF0;
  v167[4] = v165;
  v167[5] = v166;
  *(_QWORD *)&v413 = v167 + 3;
  *((_QWORD *)&v413 + 1) = v167;
  v168 = *((_QWORD *)v164 + 32);
  v513 = v168;
  if ((v168 & 7) != 0)
  {
    v169 = (unsigned int *)(v168 & 0xFFFFFFFFFFFFFFF8);
    do
      v170 = __ldxr(v169);
    while (__stxr(v170 + 2, v169));
    if ((v170 & 1) == 0)
      v513 &= 0xFFFFFFFFFFFFFFF8;
  }
  v514 = v413;
  v413 = 0uLL;
  v171 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v171)
    v171 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v172 = operator new(0x20uLL);
  v172[1] = 0;
  v172[2] = 0;
  v172[3] = &off_24FDF55A8;
  *v172 = &off_24FDF4138;
  *(_QWORD *)&v412 = v172 + 3;
  *((_QWORD *)&v412 + 1) = v172;
  v173 = *((_QWORD *)v171 + 30);
  v515 = v173;
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 2, v174));
    if ((v175 & 1) == 0)
      v515 &= 0xFFFFFFFFFFFFFFF8;
  }
  v516 = v412;
  v412 = 0uLL;
  v176 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v176)
    v176 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v177 = *(_QWORD *)(a1 + 16);
  v410 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v410);
  v178 = operator new(0x38uLL);
  v178[1] = 0;
  v178[2] = 0;
  *v178 = &off_24FDF4188;
  v178[3] = &off_24FDE8658;
  v178[4] = v177;
  v179 = v410;
  *(_QWORD *)&v451 = v410;
  v410 = 0;
  v178[5] = 0;
  v178[6] = v179;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v178 + 6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v451);
  *(_QWORD *)&v411 = v178 + 3;
  *((_QWORD *)&v411 + 1) = v178;
  v180 = *((_QWORD *)v176 + 33);
  v517 = v180;
  if ((v180 & 7) != 0)
  {
    v181 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 2, v181));
    if ((v182 & 1) == 0)
      v517 &= 0xFFFFFFFFFFFFFFF8;
  }
  v518 = v411;
  v411 = 0uLL;
  v183 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v183)
    v183 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v184 = *(_QWORD *)(a1 + 16);
  v185 = *(_QWORD *)(a1 + 416);
  v186 = operator new(0x30uLL);
  v186[1] = 0;
  v186[2] = 0;
  *v186 = &off_24FDF41D8;
  v186[3] = &off_24FDE4600;
  v186[4] = v184;
  v186[5] = v185;
  *(_QWORD *)&v409 = v186 + 3;
  *((_QWORD *)&v409 + 1) = v186;
  v187 = *((_QWORD *)v183 + 36);
  v519 = v187;
  if ((v187 & 7) != 0)
  {
    v188 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 2, v188));
    if ((v189 & 1) == 0)
      v519 &= 0xFFFFFFFFFFFFFFF8;
  }
  v520 = v409;
  v409 = 0uLL;
  v190 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v190)
    v190 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v191 = *(_QWORD *)(a1 + 16);
  v192 = *(_QWORD *)(a1 + 416);
  v193 = operator new(0x30uLL);
  v193[1] = 0;
  v193[2] = 0;
  *v193 = &off_24FDF4228;
  v193[3] = &off_24FDE9878;
  v193[4] = v191;
  v193[5] = v192;
  *(_QWORD *)&v408 = v193 + 3;
  *((_QWORD *)&v408 + 1) = v193;
  v194 = *((_QWORD *)v190 + 37);
  v521 = v194;
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 2, v195));
    if ((v196 & 1) == 0)
      v521 &= 0xFFFFFFFFFFFFFFF8;
  }
  v522 = v408;
  v408 = 0uLL;
  v197 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v197)
    v197 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v198 = *(_QWORD *)(a1 + 16);
  v199 = *(_QWORD *)(a1 + 416);
  v200 = operator new(0x30uLL);
  v200[1] = 0;
  v200[2] = 0;
  *v200 = &off_24FDF4278;
  v200[3] = &off_24FDE7D78;
  v200[4] = v198;
  v200[5] = v199;
  *(_QWORD *)&v407 = v200 + 3;
  *((_QWORD *)&v407 + 1) = v200;
  v201 = *((_QWORD *)v197 + 38);
  v523 = v201;
  if ((v201 & 7) != 0)
  {
    v202 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 2, v202));
    if ((v203 & 1) == 0)
      v523 &= 0xFFFFFFFFFFFFFFF8;
  }
  v524 = v407;
  v407 = 0uLL;
  v204 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v204)
    v204 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v205 = *(_QWORD *)(a1 + 16);
  v206 = *(_QWORD *)(a1 + 416);
  v207 = operator new(0x30uLL);
  v207[1] = 0;
  v207[2] = 0;
  *v207 = &off_24FDF42C8;
  v207[3] = &off_24FDFB6B8;
  v207[4] = v205;
  v207[5] = v206;
  *(_QWORD *)&v406 = v207 + 3;
  *((_QWORD *)&v406 + 1) = v207;
  v208 = *((_QWORD *)v204 + 39);
  v525 = v208;
  if ((v208 & 7) != 0)
  {
    v209 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 2, v209));
    if ((v210 & 1) == 0)
      v525 &= 0xFFFFFFFFFFFFFFF8;
  }
  v526 = v406;
  v406 = 0uLL;
  v211 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v211)
    v211 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v212 = *(_QWORD *)(a1 + 16);
  v213 = *(_QWORD *)(a1 + 416);
  v214 = operator new(0x30uLL);
  v214[1] = 0;
  v214[2] = 0;
  *v214 = &off_24FDF4318;
  v214[3] = &off_24FDEF810;
  v214[4] = v212;
  v214[5] = v213;
  *(_QWORD *)&v405 = v214 + 3;
  *((_QWORD *)&v405 + 1) = v214;
  v215 = *((_QWORD *)v211 + 40);
  v527 = v215;
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 2, v216));
    if ((v217 & 1) == 0)
      v527 &= 0xFFFFFFFFFFFFFFF8;
  }
  v528 = v405;
  v405 = 0uLL;
  v218 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v218)
    v218 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v219 = *(_QWORD *)(a1 + 16);
  v220 = *(_QWORD *)(a1 + 416);
  v221 = operator new(0x30uLL);
  v221[1] = 0;
  v221[2] = 0;
  *v221 = &off_24FDF4368;
  v221[3] = &off_24FDEF928;
  v221[4] = v219;
  v221[5] = v220;
  *(_QWORD *)&v404 = v221 + 3;
  *((_QWORD *)&v404 + 1) = v221;
  v222 = *((_QWORD *)v218 + 41);
  v529 = v222;
  if ((v222 & 7) != 0)
  {
    v223 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stxr(v224 + 2, v223));
    if ((v224 & 1) == 0)
      v529 &= 0xFFFFFFFFFFFFFFF8;
  }
  v530 = v404;
  v404 = 0uLL;
  v225 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v225)
    v225 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v226 = *(_QWORD *)(a1 + 16);
  v227 = *(_QWORD *)(a1 + 416);
  v228 = operator new(0x30uLL);
  v228[1] = 0;
  v228[2] = 0;
  *v228 = &off_24FDF43B8;
  v228[3] = &off_24FDFBB90;
  v228[4] = v226;
  v228[5] = v227;
  *(_QWORD *)&v403 = v228 + 3;
  *((_QWORD *)&v403 + 1) = v228;
  v229 = *((_QWORD *)v225 + 45);
  v531 = v229;
  if ((v229 & 7) != 0)
  {
    v230 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFFFF8);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 2, v230));
    if ((v231 & 1) == 0)
      v531 &= 0xFFFFFFFFFFFFFFF8;
  }
  v532 = v403;
  v403 = 0uLL;
  v232 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v232)
    v232 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v233 = *(_QWORD *)(a1 + 16);
  v234 = *(_QWORD *)(a1 + 416);
  v235 = operator new(0x30uLL);
  v235[1] = 0;
  v235[2] = 0;
  *v235 = &off_24FDF4408;
  v235[3] = &off_24FDE6020;
  v235[4] = v233;
  v235[5] = v234;
  *(_QWORD *)&v402 = v235 + 3;
  *((_QWORD *)&v402 + 1) = v235;
  v236 = *((_QWORD *)v232 + 46);
  v533 = v236;
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 2, v237));
    if ((v238 & 1) == 0)
      v533 &= 0xFFFFFFFFFFFFFFF8;
  }
  v534 = v402;
  v402 = 0uLL;
  v239 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v239)
    v239 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v240 = operator new(0x20uLL);
  v241 = (uint64_t *)(a1 + 1320);
  v240[1] = 0;
  v240[2] = 0;
  v240[3] = &off_24FDE8028;
  *v240 = &off_24FDF4458;
  *(_QWORD *)&v401 = v240 + 3;
  *((_QWORD *)&v401 + 1) = v240;
  v242 = *((_QWORD *)v239 + 47);
  v535 = v242;
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 2, v243));
    if ((v244 & 1) == 0)
      v535 &= 0xFFFFFFFFFFFFFFF8;
  }
  v536 = v401;
  v401 = 0uLL;
  v245 = &v537;
  if (!*(_QWORD *)(a1 + 1336))
  {
    v246 = (uint64_t *)a2;
LABEL_264:
    for (i = 0; i != 35; ++i)
    {
LABEL_265:
      v254 = &v454 + 3 * i;
      v255 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1 + 1320, &v451, v254);
      if (!*v255)
      {
        v256 = (uint64_t *)operator new(0x38uLL);
        v257 = *v254;
        v256[4] = *v254;
        if ((v257 & 7) != 0)
        {
          v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
          do
            v259 = __ldxr(v258);
          while (__stxr(v259 + 2, v258));
          if ((v259 & 1) == 0)
            v256[4] &= 0xFFFFFFFFFFFFFFF8;
        }
        v260 = &v454 + 3 * i;
        v262 = v260[1];
        v261 = v260[2];
        v256[5] = v262;
        v256[6] = v261;
        if (v261)
        {
          v263 = (unint64_t *)(v261 + 8);
          do
            v264 = __ldxr(v263);
          while (__stxr(v264 + 1, v263));
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 1320), v451, v255, v256);
      }
    }
    goto LABEL_276;
  }
  v246 = (uint64_t *)a2;
  v247 = *v241;
  *v241 = v398;
  *(_QWORD *)(*(_QWORD *)v398 + 16) = 0;
  *(_QWORD *)v398 = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  if (*(_QWORD *)(v247 + 8))
    v248 = *(uint64_t **)(v247 + 8);
  else
    v248 = (uint64_t *)v247;
  *(_QWORD *)&v451 = a1 + 1320;
  *((_QWORD *)&v451 + 1) = v248;
  v452 = v248;
  if (!v248)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v451);
    goto LABEL_264;
  }
  *((_QWORD *)&v451 + 1) = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v248);
  v249 = &v454;
  i = 1;
  do
  {
    v251 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1 + 1320, &v453, v249);
    if (*v251)
    {
      v248 = v452;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(v248 + 4, v249);
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v248 + 5, v249 + 1);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 1320), v453, v251, v248);
      v248 = (uint64_t *)*((_QWORD *)&v451 + 1);
      v452 = (uint64_t *)*((_QWORD *)&v451 + 1);
      if (!*((_QWORD *)&v451 + 1))
        goto LABEL_260;
      *((_QWORD *)&v451 + 1) = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(*((uint64_t *)&v451 + 1));
    }
    v252 = i + 1;
    if (!v248)
      break;
    v249 += 3;
  }
  while (i++ != 35);
  i = v252 - 1;
LABEL_260:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v451);
  if (i != 35)
    goto LABEL_265;
  do
  {
LABEL_276:
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v245 - 2));
    v266 = *(v245 - 3);
    v245 -= 3;
    v265 = v266;
    if ((v266 & 7) != 0)
    {
      v267 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFFFF8);
      do
        v268 = __ldxr(v267);
      while (__stlxr(v268 - 2, v267));
    }
  }
  while (v245 != &v454);
  v269 = (std::__shared_weak_count *)*((_QWORD *)&v401 + 1);
  if (*((_QWORD *)&v401 + 1))
  {
    v270 = (unint64_t *)(*((_QWORD *)&v401 + 1) + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
  if (*((_QWORD *)&v402 + 1))
  {
    v273 = (unint64_t *)(*((_QWORD *)&v402 + 1) + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v275 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
  if (*((_QWORD *)&v403 + 1))
  {
    v276 = (unint64_t *)(*((_QWORD *)&v403 + 1) + 8);
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = (std::__shared_weak_count *)*((_QWORD *)&v404 + 1);
  if (*((_QWORD *)&v404 + 1))
  {
    v279 = (unint64_t *)(*((_QWORD *)&v404 + 1) + 8);
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
  if (*((_QWORD *)&v405 + 1))
  {
    v282 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 8);
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  v284 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
  if (*((_QWORD *)&v406 + 1))
  {
    v285 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  v287 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
  if (*((_QWORD *)&v407 + 1))
  {
    v288 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
  if (*((_QWORD *)&v408 + 1))
  {
    v291 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
  if (*((_QWORD *)&v409 + 1))
  {
    v294 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v411 + 1);
  if (*((_QWORD *)&v411 + 1))
  {
    v297 = (unint64_t *)(*((_QWORD *)&v411 + 1) + 8);
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v410);
  v299 = (std::__shared_weak_count *)*((_QWORD *)&v412 + 1);
  if (*((_QWORD *)&v412 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 8);
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = (std::__shared_weak_count *)*((_QWORD *)&v413 + 1);
  if (*((_QWORD *)&v413 + 1))
  {
    v303 = (unint64_t *)(*((_QWORD *)&v413 + 1) + 8);
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
  if (*((_QWORD *)&v414 + 1))
  {
    v306 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = (std::__shared_weak_count *)*((_QWORD *)&v415 + 1);
  if (*((_QWORD *)&v415 + 1))
  {
    v309 = (unint64_t *)(*((_QWORD *)&v415 + 1) + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = (std::__shared_weak_count *)*((_QWORD *)&v416 + 1);
  if (*((_QWORD *)&v416 + 1))
  {
    v312 = (unint64_t *)(*((_QWORD *)&v416 + 1) + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
  if (*((_QWORD *)&v417 + 1))
  {
    v315 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  v317 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
  if (*((_QWORD *)&v418 + 1))
  {
    v318 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
  if (*((_QWORD *)&v419 + 1))
  {
    v321 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = (std::__shared_weak_count *)*((_QWORD *)&v421 + 1);
  if (*((_QWORD *)&v421 + 1))
  {
    v324 = (unint64_t *)(*((_QWORD *)&v421 + 1) + 8);
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v420);
  v326 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
  if (*((_QWORD *)&v422 + 1))
  {
    v327 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  v329 = (std::__shared_weak_count *)*((_QWORD *)&v423 + 1);
  if (*((_QWORD *)&v423 + 1))
  {
    v330 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 8);
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = (std::__shared_weak_count *)*((_QWORD *)&v424 + 1);
  if (*((_QWORD *)&v424 + 1))
  {
    v333 = (unint64_t *)(*((_QWORD *)&v424 + 1) + 8);
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = v426;
  if (v426)
  {
    p_shared_owners = (unint64_t *)&v426->__shared_owners_;
    do
      v337 = __ldaxr(p_shared_owners);
    while (__stlxr(v337 - 1, p_shared_owners));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = v428;
  if (v428)
  {
    v339 = (unint64_t *)&v428->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v341 = v430;
  if (v430)
  {
    v342 = (unint64_t *)&v430->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = v432;
  if (v432)
  {
    v345 = (unint64_t *)&v432->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v347 = v434;
  if (v434)
  {
    v348 = (unint64_t *)&v434->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v350 = v436;
  if (v436)
  {
    v351 = (unint64_t *)&v436->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  v353 = v438;
  if (v438)
  {
    v354 = (unint64_t *)&v438->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = v440;
  if (v440)
  {
    v357 = (unint64_t *)&v440->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  v359 = v442;
  if (v442)
  {
    v360 = (unint64_t *)&v442->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
  v362 = v444;
  if (v444)
  {
    v363 = (unint64_t *)&v444->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  v365 = v446;
  if (v446)
  {
    v366 = (unint64_t *)&v446->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  v368 = v448;
  if (v448)
  {
    v369 = (unint64_t *)&v448->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  v371 = v450;
  if (v450)
  {
    v372 = (unint64_t *)&v450->__shared_owners_;
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  realityio::ImportSessionV2::setRootEntity((std::chrono::steady_clock::time_point *)a1);
  *(_QWORD *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1464) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(a1 + 408), (unint64_t *)&v454);
  v374 = v454;
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v454, v246);
  v375 = operator new();
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v449);
  *(_QWORD *)(v375 + 16) = 0;
  *(_QWORD *)(v375 + 24) = 0;
  *(_WORD *)(v375 + 32) = 1;
  *(_QWORD *)v375 = &off_24FDF44A8;
  *(_QWORD *)(v375 + 8) = 0;
  *(_QWORD *)(v375 + 40) = a1;
  *(_QWORD *)(v375 + 48) = v374;
  if (v374)
  {
    v377 = (unsigned int *)(v374 + 8);
    do
      v378 = __ldxr(v377);
    while (__stxr(v378 + 1, v377));
  }
  v379 = v455;
  *(_QWORD *)(v375 + 56) = v454;
  *(_QWORD *)(v375 + 64) = v379;
  if (v379)
  {
    v380 = v379 + 2;
    do
      v381 = __ldxr(v380);
    while (__stxr(v381 + 1, v380));
    v382 = v455;
    *(_QWORD *)(v375 + 72) = realityio::ImportSessionV2::changeNoticeCB;
    *(_QWORD *)(v375 + 80) = 0;
    if (v382)
    {
      v383 = v382 + 2;
      do
      {
        v384 = __ldxr(v383);
        v385 = v384 - 1;
      }
      while (__stlxr(v385, v383));
      if (!v385)
        (*(void (**)(unsigned int *))(*(_QWORD *)v382 + 8))(v382);
    }
  }
  else
  {
    *(_QWORD *)(v375 + 72) = realityio::ImportSessionV2::changeNoticeCB;
    *(_QWORD *)(v375 + 80) = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register((pxrInternal__aapl__pxrReserved__::TfNotice *)v375, v376);
  v386 = *(unsigned int **)(a1 + 1352);
  *(_OWORD *)(a1 + 1344) = v451;
  *((_QWORD *)&v451 + 1) = 0;
  if (!v386)
  {
    *(_QWORD *)&v451 = 0;
    if (!v374)
      return a1;
    goto LABEL_477;
  }
  v387 = v386 + 2;
  do
  {
    v388 = __ldxr(v387);
    v389 = v388 - 1;
  }
  while (__stlxr(v389, v387));
  if (!v389)
    (*(void (**)(unsigned int *))(*(_QWORD *)v386 + 8))(v386);
  v390 = *((_QWORD *)&v451 + 1);
  *(_QWORD *)&v451 = 0;
  if (*((_QWORD *)&v451 + 1))
  {
    v391 = (unsigned int *)(*((_QWORD *)&v451 + 1) + 8);
    do
    {
      v392 = __ldxr(v391);
      v393 = v392 - 1;
    }
    while (__stlxr(v393, v391));
    if (!v393)
      (*(void (**)(uint64_t))(*(_QWORD *)v390 + 8))(v390);
  }
  if (v374)
  {
LABEL_477:
    v394 = (unsigned int *)(v374 + 8);
    do
    {
      v395 = __ldxr(v394);
      v396 = v395 - 1;
    }
    while (__stlxr(v396, v394));
    if (!v396)
      (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  }
  return a1;
}

void sub_2300B8958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::recursive_mutex *a9, TgECS *a10, Exec *a11, _QWORD *a12, _QWORD **a13, unsigned int **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,unsigned int *a36,__int16 a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,unsigned int *a56,__int16 a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  char a69;
  char a71;
  _QWORD *v71;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  const void *v84;

  v73 = &STACK[0x5E8];
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a36);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a56);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  if (&STACK[0x2B8] != &STACK[0x5E8])
  {
    do
    {
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v73 - 2));
      v75 = *(v73 - 3);
      v73 -= 3;
      v74 = v75;
      if ((v75 & 7) != 0)
      {
        v76 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
    }
    while (v73 != &STACK[0x2B8]);
  }
  std::recursive_mutex::~recursive_mutex(a9);
  v78 = (_QWORD *)v71[189];
  if (v78 == v71 + 186)
  {
    v79 = 4;
    v78 = v71 + 186;
  }
  else
  {
    if (!v78)
      goto LABEL_11;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_11:
  v80 = (unsigned int *)v71[169];
  if (v80)
  {
    v81 = v80 + 2;
    do
    {
      v82 = __ldxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*a13);
  TgECS::~TgECS(a10);
  Exec::~Exec((std::mutex *)a11);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v71 + 53);
  std::unique_ptr<realityio::ExecContext>::reset[abi:ne180100](a12, 0);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(a14, v84);
  realityio::ImportSessionImpl::~ImportSessionImpl((realityio::ImportSessionImpl *)v71);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV2::setRootEntity(std::chrono::steady_clock::time_point *this)
{
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3;
  uint64_t v4;
  realityio *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[3];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  this[184].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v9[1] = 0;
  if (this[52].__d_.__rep_ && this[5].__d_.__rep_)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    rep = (_QWORD *)this[52].__d_.__rep_;
    v3 = this[5].__d_.__rep_;
    v4 = *(_QWORD *)(v3 + 472);
    rep[25] = *(_QWORD *)(v3 + 40);
    rep[26] = v4;
    rep[27] = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(rep + 28), v8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)rep + 228, (_DWORD *)v8 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  }
  TgECS::eval((TgECS *)&this[102], (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(v9, v8);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  v5 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if ((_DWORD)v5)
  {
    v8[0] = 0;
    v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    realityio::WrappedRERef<REAsset *>::operator=(&this[53].__d_.__rep_, v6);
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(v8);
  }
  else
  {
    v7 = *(NSObject **)realityio::logObjects(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8[0]) = 0;
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Update did not produce a root entity", (uint8_t *)v8, 2u);
    }
  }
  realityio::RioTimer::stop(this + 181);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_2300B9084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::ImportSessionV2::changeNoticeCB(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  _QWORD *ResyncedPaths;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *ChangedInfoOnlyPaths;
  _QWORD *v11;
  _QWORD *v12;
  std::mutex *v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unsigned int **Data;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p[2];
  char v21;
  _BYTE v22[8];

  ResyncedPaths = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(this);
  v5 = ResyncedPaths + 1;
  v6 = (_QWORD *)*ResyncedPaths;
  if ((_QWORD *)*ResyncedPaths != ResyncedPaths + 1)
  {
    do
    {
      Exec::setHierarchyDirty((std::mutex *)(a1 + 432), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4), 1);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
  }
  ChangedInfoOnlyPaths = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(this);
  v11 = ChangedInfoOnlyPaths + 1;
  v12 = (_QWORD *)*ChangedInfoOnlyPaths;
  if ((_QWORD *)*ChangedInfoOnlyPaths != ChangedInfoOnlyPaths + 1)
  {
    v13 = (std::mutex *)(a1 + 432);
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4)))
      {
        Exec::setDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), 1);
      }
      else
      {
        Exec::setPropertiesDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), 1);
        if (v12[4] == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14))
        {
          Data = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
          v16 = (unint64_t)*Data & 0xFFFFFFFFFFFFFFF8;
          if (v16)
          {
            v17 = (char *)(v16 + 16);
            if (*(char *)(v16 + 39) < 0)
              v17 = *(char **)v17;
          }
          else
          {
            v17 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v17);
          MEMORY[0x2348B26F8](v22, __p);
          Exec::setPropertiesDirty(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v22, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
          if (v21 < 0)
            operator delete(__p[0]);
        }
      }
      v18 = (_QWORD *)v12[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v12[2];
          v9 = *v19 == (_QWORD)v12;
          v12 = v19;
        }
        while (!v9);
      }
      v12 = v19;
    }
    while (v19 != v11);
  }
}

void sub_2300B929C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Exec::~Exec(std::mutex *this)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[40]);
  pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable(this[3].__m_.__opaque);
  v2 = *(void **)&this[2].__m_.__opaque[32];
  if (v2)
  {
    *(_QWORD *)&this[2].__m_.__opaque[40] = v2;
    operator delete(v2);
  }
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)&this[1]);
  std::mutex::~mutex(this);
}

void realityio::ImportSessionV2::~ImportSessionV2(realityio::ImportSessionV2 *this)
{
  realityio::ImportSessionV2 *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  const void *v9;

  *(_QWORD *)this = &off_24FDF3578;
  *((_QWORD *)this + 50) = &unk_24FDF35F8;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 1520));
  v2 = (realityio::ImportSessionV2 *)*((_QWORD *)this + 189);
  if (v2 == (realityio::ImportSessionV2 *)((char *)this + 1488))
  {
    v3 = 4;
    v2 = (realityio::ImportSessionV2 *)((char *)this + 1488);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  v4 = (unsigned int *)*((_QWORD *)this + 169);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*((_QWORD **)this + 166));
  TgECS::~TgECS((realityio::ImportSessionV2 *)((char *)this + 816));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table((uint64_t)this + 672);
  pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable((_QWORD *)this + 79);
  v8 = (void *)*((_QWORD *)this + 75);
  if (v8)
  {
    *((_QWORD *)this + 76) = v8;
    operator delete(v8);
  }
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph((uint64_t)this + 496);
  std::mutex::~mutex((std::mutex *)((char *)this + 432));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 53);
  std::unique_ptr<realityio::ExecContext>::reset[abi:ne180100]((_QWORD *)this + 52, 0);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((unsigned int **)this + 51, v9);
  realityio::ImportSessionImpl::~ImportSessionImpl(this);
}

{
  realityio::ImportSessionV2::~ImportSessionV2(this);
  JUMPOUT(0x2348B4E1CLL);
}

void `non-virtual thunk to'realityio::ImportSessionV2::~ImportSessionV2(realityio::ImportSessionV2 *this)
{
  realityio::ImportSessionV2::~ImportSessionV2((realityio::ImportSessionV2 *)((char *)this - 400));
}

{
  realityio::ImportSessionV2::~ImportSessionV2((realityio::ImportSessionV2 *)((char *)this - 400));
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::ImportSessionV2::updateLiveScene(realityio::ImportSessionV2 *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__::TraceCollector *v4;
  uint64_t v5;
  unsigned int *v6[3];
  __int128 *v7[3];
  unsigned int **v8;

  *((_BYTE *)this + 920) = *((_BYTE *)this + 272);
  *((std::chrono::steady_clock::time_point *)this + 174) = std::chrono::steady_clock::now();
  *((std::chrono::steady_clock::time_point *)this + 179) = std::chrono::steady_clock::now();
  v6[0] = *(unsigned int **)(*((_QWORD *)this + 1) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v6);
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v6);
  realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)v6, v7[0], v7[1]);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)v6);
  if (*((_BYTE *)this + 1360))
  {
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
    pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(Instance);
    v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
    if (!v4)
      v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
    pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v4);
  }
  TgECS::update((realityio::ImportSessionV2 *)((char *)this + 816));
  realityio::RioTimer::stop((std::chrono::steady_clock::time_point *)this + 176);
  std::chrono::steady_clock::now();
  realityio::ImportSessionV2::setRootEntity((std::chrono::steady_clock::time_point *)this);
  realityio::RioTimer::stop((std::chrono::steady_clock::time_point *)this + 171);
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)v6);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 1520));
  v5 = *((_QWORD *)this + 189);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 1520));
  v8 = v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v6[0] = (unsigned int *)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v6);
}

void sub_2300B9598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13)
{
  std::recursive_mutex *v13;
  uint64_t v14;

  std::recursive_mutex::unlock(v13);
  *(_QWORD *)(v14 - 24) = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::setRootEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Exec *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::type_info **v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 920) = *(_BYTE *)(a1 + 272);
  v12 = a2;
  if (a2)
    RERetain();
  v4 = *(_QWORD *)(a1 + 424);
  if (v4 != a2)
  {
    *(_QWORD *)(a1 + 424) = a2;
    v12 = v4;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v12);
  v11 = a2;
  if (a2)
    RERetain();
  v13 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy(&v12, &v11);
  v5 = (Exec *)(a1 + 432);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 912);
  Exec::setValue(v5, v6, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v6);
  MEMORY[0x2348B274C](&v10, "__entityPreMesh");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
  if ((v10 & 7) != 0)
  {
    v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  v10 = a2;
  if (a2)
    RERetain();
  v13 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy(&v12, &v10);
  Exec::setValue(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
}

void sub_2300B9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

unsigned int **realityio::ImportSessionV2::setStage(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v5;

  v5 = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v5);
  v3 = *(unsigned int **)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v5;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v5);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef(a1 + 904, v3);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v5);
}

void sub_2300B9888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::rootEntity(realityio::ImportSessionV2 *this)
{
  return *((_QWORD *)this + 53);
}

uint64_t realityio::ImportSessionV2::version(realityio::ImportSessionV2 *this)
{
  return 2;
}

uint64_t realityio::ImportSessionV2::getEntityAtPrimPath(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 152));
  Exec::getValue((Exec *)(a1 + 432), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v9))
  {
    if ((v10 & 4) != 0)
      v5 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&v9);
    else
      v5 = v9;
    v6 = *v5;
  }
  else
  {
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v6;
}

void sub_2300B9998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::dumpDiagnostics(_QWORD *a1, const void **a2)
{
  uint64_t v4;
  unsigned int *v6;

  v6 = *(unsigned int **)(a1[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v4 = realityio::internal::dumpDiagnostics(a2, &v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  return v4;
}

void sub_2300B9A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV2::dumpDependencies(uint64_t a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  FILE *v5;
  const char *p_p;
  uint64_t v7;
  void *__p;
  char v10;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "w");
  if (v4)
  {
    v5 = v4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
    Exec::dumpDotfile((_QWORD *)(a1 + 432), v12);
    std::stringbuf::str();
    if (v10 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    fprintf(v5, "\n%s\n", p_p);
    if (v10 < 0)
      operator delete(__p);
    v11[0] = *MEMORY[0x24BEDB7F0];
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v12[0] = v7;
    v12[1] = MEMORY[0x24BEDB848] + 16;
    if (v13 < 0)
      operator delete((void *)v12[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2348B4DA4](&v14);
    fclose(v5);
  }
  return 1;
}

void sub_2300B9B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v34;

  a14 = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a14 + *(_QWORD *)(a14 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a16 = v34;
  a17 = MEMORY[0x24BEDB848] + 16;
  if (a30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&a33);
  _Unwind_Resume(a1);
}

void timerStat(uint64_t a1, const void **a2, uint64_t a3)
{
  size_t v5;
  void **v6;
  const void *v7;
  double v8;
  size_t v9;
  void **v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  double v15;
  void *__p[2];
  char v17;
  double v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 6);
  if (v17 < 0)
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ":total");
  v8 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a3 + 24)) / 1000) / 1000.0)
             / 1000.0);
  v19 = &unk_24FDE5B2B;
  v18 = v8;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 6);
  if (v17 < 0)
    v10 = (void **)__p[0];
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ":count");
  v18 = *(double *)(a3 + 16);
  v19 = &unk_24FDF0B93;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (*((char *)a2 + 23) >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 4);
  if (v17 < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *a2;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ":avg");
  v15 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(a3 + 24)) / 1000) / 1000.0)
              / 1000.0)
      / (double)*(unint64_t *)(a3 + 16);
  v19 = &unk_24FDE5B2B;
  v18 = v15;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_2300B9F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

_QWORD *realityio::ImportSessionV2::gatherFaultRecords(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  Exec::gatherFaultRecords(a1 + 432, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2300BA068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::ImportSessionV2::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)(a1 + 1520);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 1520));
  std::function<void ()(void)>::operator=((_QWORD *)(a1 + 1488), a2);
  std::recursive_mutex::unlock(v4);
}

void sub_2300BA0F0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionImpl::updateInProgress(realityio::ImportSessionImpl *this)
{
  return 0;
}

uint64_t realityio::ImportSessionImpl::isUsingTargetBasedBuilderDirtying(realityio::ImportSessionImpl *this)
{
  return 0;
}

void realityio::ImportSessionV2::gatherStatistics(realityio::ImportSessionV2 *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v11;
  uint64_t Counters;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *i;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[2];
  void *v25[2];
  char v26;
  void *__p;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:update");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1368);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:targetGeneration");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1408);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "time:evaluation");
  timerStat((uint64_t)a2, (const void **)&__p, (uint64_t)this + 1448);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  Exec::getUnreachableTargets((realityio::ImportSessionV2 *)((char *)this + 432), (realityio::ImportSessionV2 *)((char *)this + 912), &__p);
  std::string::basic_string[abi:ne180100]<0>(v25, "graph:unreachableTargets");
  v24[0] = v29;
  v24[1] = &unk_24FDF0B93;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
  if (v26 < 0)
    operator delete(v25[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&__p, v28);
  Exec::getStatistics((realityio::ImportSessionV2 *)((char *)this + 432), a2);
  Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  v5 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(Instance);
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(v5);
  v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  MEMORY[0x2348B1CCC](v6);
  v7 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)v28;
  if (v28)
  {
    v8 = v28 + 2;
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      v7 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TraceReporter *))(*(_QWORD *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(v7);
  v11 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  Counters = pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(v11);
  v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)v28;
  if (v28)
  {
    v14 = v28 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v13 + 8))(v13);
  }
  for (i = *(_QWORD **)(Counters + 16); i; i = (_QWORD *)*i)
  {
    v18 = i[2];
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (void *)i[3];
    v22 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
    v28 = (unsigned int *)&unk_24FDE5B2B;
    __p = v21;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    if ((v18 & 7) != 0)
    {
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSessionVersion");
  v25[0] = (void *)0x4000000000000000;
  v25[1] = &unk_24FDE5B2B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
}

void sub_2300BA42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a12);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,realityio::SdfPathHashCompare,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,realityio::SdfPathHashCompare,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::~SdfPathTable(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)a1[1];
  if (v2 != (_QWORD *)*a1)
  {
    v3 = 0;
    v4 = ((uint64_t)v2 - *a1) >> 3;
    do
    {
      v5 = (_QWORD *)*a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 24);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 8));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v6);
          MEMORY[0x2348B4E1C](v8, 0x1060C407FF37761);
          v6 = v7;
        }
        while (v7);
        v5 = (_QWORD *)*a1;
      }
      v5[v3++] = 0;
    }
    while (v3 != v4);
    v2 = (_QWORD *)*a1;
  }
  a1[3] = 0;
  if (v2)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::~Graph(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 72);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 48);
  std::vector<std::set<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>>>::destroy(a1[1]);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void TgECS::~TgECS(TgECS *this)
{
  *(_QWORD *)this = &off_24FDFD6C0;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 480, *((_QWORD **)this + 61));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)this + 408);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable((uint64_t *)this + 43);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 108);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 96);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 11);
  *(_QWORD *)this = &unk_24FDF4530;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim const,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim const,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  void **v6;

  v6 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable(uint64_t *a1)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::clear(a1);
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::clear(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  v2 = result[1] - *result;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *v1;
      v6 = *(_QWORD *)(*v1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v6);
          result = (uint64_t *)MEMORY[0x2348B4E1C](v8, 0x1020C4084A03ABELL);
          v6 = v7;
        }
        while (v7);
        v5 = *v1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  v1[3] = 0;
  return result;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v2)
    return realityio::LiveSceneManager::performBlockSyncOnEngineQueue(v2, a2);
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_0,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_0>,void ()(std::function<void ()(void)>)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3708;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2300BAB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_1,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_1>,void ()(std::function<void ()(void)>)>::target_type()
{
}

_QWORD *realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
    realityio::LiveSceneManager::performBlockLaterOnEngineQueue(v2, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v4 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
}

void sub_2300BACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3788;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3788;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  realityio::ImportSessionImpl::performBlockPostAssetLoadOnEngineQueue(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2300BAE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_2,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_2>,void ()(std::function<void ()(void)>)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3808;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::LiveSceneManager::enableEntityOnCompletion(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), a2);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_3,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_3>,void ()(realityio::WrappedRERef<REEntity *> &)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3898;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v2)
    realityio::LiveSceneManager::queueForDeferredAssetLoad(v2, a2);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_4,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_4>,void ()(realityio::WrappedRERef<REAsset *> const&)>::target_type()
{
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF3928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF3928;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  realityio::ImportSessionImpl::queueDedupingAssetForDeferredLoad(*(_QWORD *)(a1 + 8), a2);
}

uint64_t std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ImportSessionV2::initActionTable(void)::$_5,std::allocator<realityio::ImportSessionV2::initActionTable(void)::$_5>,void ()(std::shared_ptr<realityio::AssetLoadTracker::Asset> const&)>::target_type()
{
}

_QWORD *std::unique_ptr<realityio::ExecContext>::reset[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(v2 + 28));
    v3 = (_QWORD *)v2[23];
    if (v3 == v2 + 20)
    {
      v4 = 4;
      v3 = v2 + 20;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)v2[19];
    if (v5 == v2 + 16)
    {
      v6 = 4;
      v5 = v2 + 16;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    v7 = (_QWORD *)v2[15];
    if (v7 == v2 + 12)
    {
      v8 = 4;
      v7 = v2 + 12;
    }
    else
    {
      if (!v7)
        goto LABEL_18;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
    v9 = (_QWORD *)v2[11];
    if (v9 == v2 + 8)
    {
      v10 = 4;
      v9 = v2 + 8;
    }
    else
    {
      if (!v9)
        goto LABEL_23;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
    v11 = (_QWORD *)v2[7];
    if (v11 == v2 + 4)
    {
      v12 = 4;
      v11 = v2 + 4;
    }
    else
    {
      if (!v11)
        goto LABEL_28;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
    v13 = (_QWORD *)v2[3];
    if (v13 == v2)
    {
      v14 = 4;
      v13 = v2;
    }
    else
    {
      if (!v13)
        goto LABEL_33;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_33:
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

realityio::tokens::ActionTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::ActionTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ActionTokens_StaticTokenType::~ActionTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::ActionTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>::New()
{
  realityio::tokens::ActionTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::ActionTokens_StaticTokenType *)operator new();
  realityio::tokens::ActionTokens_StaticTokenType::ActionTokens_StaticTokenType(v0);
  return v0;
}

void sub_2300BB2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40C131C456);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::AnchoringComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF39B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnchoringComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF39B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::AnimationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnimationLibraryComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::BlendShapeWeightsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CapsuleAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CapsuleAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CapsuleMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CapsuleMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::ConeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::ConeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CubeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CubeAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CubeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CubeMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CylinderAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CylinderAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::CylinderMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CylinderMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::EntityAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::EntitySyncAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntitySyncAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::GetFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GetFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int **std::__shared_ptr_emplace<realityio::GetFromUsdAction>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDE7C78;
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(a1 + 48));
}

void std::__shared_ptr_emplace<realityio::MapFromGroupsAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MapFromGroupsAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MaterialAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MeshAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MeshComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF3FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MeshDeformationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshDeformationComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::MeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::RenderOptionsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF40E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RenderOptionsComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF40E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::RigComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RigComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int **std::__shared_ptr_emplace<realityio::SampleAnimationFromUsdAction>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDE8658;
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(a1 + 48));
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF41D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF41D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF42C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalPoseDefinitionAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF42C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SphereAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SphereAssetDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::SphereMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SphereMeshDescriptorAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::TextureAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF43B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TextureAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF43B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformAnimationTimelineAssetAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::TransformComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::TransformComponentAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<Exec::ExecAction>>>>::destroy(a1[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    v2 = a1[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    operator delete(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_DelivererWithSender(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_24FDF44A8;
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_24FDF44A8;
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t *);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v13 = v8 - 1;
  v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  v15 = *v13;
  v16 = !*(_BYTE *)(v14 + 14) || v15 == 0;
  if (v16
    || a1[8]
    && !*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 8)
                 + 14))
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::ImportSessionV2>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  if (a4)
    v18 = a4 - 16;
  else
    v18 = 0;
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v26, v18);
  v19 = (void (*)(_QWORD *, uint64_t, uint64_t *))a1[9];
  v20 = a1[10];
  v21 = (_QWORD *)(v15 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(void (**)(_QWORD *, uint64_t, uint64_t *))(*v21 + v19);
  v19(v21, a2, &v26);
  v22 = v27;
  if (v27)
  {
    v23 = (unsigned int *)(v27 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  return 1;
}

void sub_2300BC01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _QWORD v14[4];
  char v15;
  int v16;

  v2 = MEMORY[0x24BEE9CD0];
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEE9CD0], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    v14[2] = 563;
    v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>"
             ", pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio:"
             ":ImportSessionV2::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal"
             "__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrRese"
             "rved__::UsdNotice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfN"
             "otice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>, pxrInt"
             "ernal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio::ImportS"
             "essionV2::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal__aapl__"
             "pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrReserved__::"
             "UsdNotice::ObjectsChanged>]";
    v15 = 0;
    v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    v5 = std::string::insert(&v10, 0, "notice type ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, " undefined in the TfType system");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_2300BC170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)result)
  {
    v8 = a1[8];
    v7 = a1 + 8;
    v6 = v8;
    if (v8)
      v6 = *(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7)
                    + 14) == 0;
    result = 0;
    if (a3)
    {
      if (!v6)
        return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7 - 1)
             + 16 == a3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  uint64_t *v1;
  uint64_t (*v2)(uint64_t *);
  char v3;

  v1 = (uint64_t *)(a1 + 56);
  v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((_QWORD *)(a1 + 56));
  if (v3 & 1 | (unint64_t)v2)
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1)
         + 16;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::ImportSessionV2>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::ImportSessionV2::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 1;
  *(_QWORD *)v2 = &off_24FDF44A8;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 48) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 64) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  return v2;
}

void sub_2300BC330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C40C1C1184DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::ImportSessionV2>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_2300BC490(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  __n128 *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[9];

  v4 = a2;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::reserve(a1, a3 - a2);
  while (v4 != a3)
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::push_back[abi:ne180100](a1, v4++);
  v6 = (__n128 *)a1[1];
  v7 = 126 - 2 * __clz(((uint64_t)v6 - *a1) >> 4);
  if (v6 == (__n128 *)*a1)
    v8 = 0;
  else
    v8 = v7;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *,false>((__n128 *)*a1, v6, (uint64_t)v10, v8, 1);
  return a1;
}

void sub_2300BC55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unsigned int *std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unsigned int *result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (unsigned int *)(a1 + 2);
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_2300BC68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((unsigned int *)va);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType((realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::StageTokens_StaticTokenType::StageTokens_StaticTokenType(v0);
  return v0;
}

void sub_2300BC734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40F64FA5DBLL);
  _Unwind_Resume(a1);
}

const void **realityio::UsdMetadataDelta::description@<X0>(realityio::UsdMetadataDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Mutable;
  const char *v5;
  __CFArray *v6;
  _QWORD *i;
  uint64_t EmptyString;
  const char *v9;
  CFStringRef v10;
  CFStringRef v11;
  CFTypeRef cf;

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = Mutable;
  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
  {
    if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (i[2] & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
    if (*(char *)(EmptyString + 23) >= 0)
      v9 = (const char *)EmptyString;
    else
      v9 = *(const char **)EmptyString;
    v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
    CFArrayAppendValue(v6, v10);
    CFRelease(v10);
  }
  v11 = realityio::joinAsCFStringRef(v6, (const __CFArray *)", ", v5);
  CFRelease(v6);
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<UsdMetadataDelta: %p { metadata: (%lu) [ %@ ] }>"), this, *((_QWORD *)this + 4), v11, v11);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_2300BC864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void **v4;
  va_list va;

  va_start(va, a4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::UsdMetadataDelta::~UsdMetadataDelta(realityio::UsdMetadataDelta *this)
{
  *(_QWORD *)this = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x2348B4E1CLL);
}

void stripInputsPrefixString(std::string *a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) == 0)
    v4 = (_BYTE *)a2;
  else
    v4 = *(_BYTE **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 7)
    v2 = 7;
  if (!v2)
    goto LABEL_22;
  v5 = &v4[v2];
  v6 = v4;
  v7 = v5;
  do
  {
    if (*v6 == 105)
    {
      v8 = 1u;
      while (v8 != 7)
      {
        if (&v6[v8] == v5)
          goto LABEL_19;
        v9 = v6[v8];
        v10 = aInputs_0[v8++];
        if (v9 != v10)
          goto LABEL_11;
      }
      v7 = v6;
    }
LABEL_11:
    ++v6;
  }
  while (v6 != v5);
LABEL_19:
  if (v7 != v5 && v7 == v4)
  {
    std::string::basic_string(a1, (const std::string *)a2, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
  }
  else
  {
LABEL_22:
    if (v3 < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
}

void realityio::MaterialAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t *NameToken;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *p_p;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  std::string *v34;
  __int128 v35;
  std::string::size_type size;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t i;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  std::string **v47;
  uint64_t **v48;
  _QWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD **v67;
  _QWORD *v68;
  unsigned int *v69;
  unsigned int v70;
  int v71;
  unsigned int *v72;
  unsigned int v73;
  const std::string *v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  std::string **v81;
  uint64_t v82;
  pxrInternal__aapl__pxrReserved__::SdfPath *v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfPath *v87;
  _DWORD *v88;
  std::string *v89;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  std::string *v103;
  uint64_t *v104;
  void **v105;
  void **v106;
  void **v107;
  void **v108;
  void **v109;
  pxrInternal__aapl__pxrReserved__::SdfPath *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t EmptyString;
  uint64_t String;
  __int128 v118;
  pxrInternal__aapl__pxrReserved__::TfToken *v119;
  unsigned int *v120;
  unsigned int v121;
  unint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t **v126;
  void **v127;
  const void **v128;
  const void **v129;
  std::string *v130;
  std::string **v131;
  const void **p_data;
  std::string **v133;
  void *v134;
  uint64_t *v135;
  const void **v136;
  const void **v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  const void **v144;
  const void **v145;
  std::__shared_weak_count *v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  void *v151;
  realityio::TextureBuilder *v152;
  unsigned int *v153;
  unsigned int v154;
  unint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t shared_weak_owners;
  std::__shared_weak_count *v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  __int128 *v162;
  unint64_t *v163;
  unint64_t v164;
  realityio::TextureBuilder *v165;
  const void **v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  realityio::TextureBuilder *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  const void **v194;
  const void **v195;
  unint64_t *v196;
  unint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  void **v202;
  void **v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  std::string **v210;
  uint64_t v211;
  realityio::Inputs *v212;
  _QWORD *v213;
  unint64_t *v214;
  unint64_t v215;
  realityio::MaterialAssetBuilder *v216;
  std::__shared_weak_count *v217;
  std::mutex *v218;
  unint64_t *v219;
  unint64_t v220;
  const void **v221;
  int v222;
  std::string *v223;
  unint64_t *v224;
  unint64_t v225;
  char v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t Name;
  __int128 v232;
  _QWORD *v233;
  _QWORD *v234;
  float *v235;
  uint64_t v236;
  BOOL v237;
  unsigned int *v238;
  unsigned int v239;
  _BOOL4 v240;
  BOOL v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  pxrInternal__aapl__pxrReserved__::SdfPath *v256;
  pxrInternal__aapl__pxrReserved__::SdfPath *TargetPath;
  int HasPrefix;
  pxrInternal__aapl__pxrReserved__::SdfPath *v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int *v266;
  unsigned int v267;
  std::string::size_type v268;
  unsigned int *v269;
  unsigned int v270;
  std::string::size_type v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int v283;
  uint64_t v284;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v285;
  uint64_t j;
  unint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int *v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int *v301;
  unsigned int v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int *v322;
  unsigned int v323;
  float ShadeInputValueWith;
  unsigned int *v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int *v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int *v337;
  unsigned int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unsigned int v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int *v347;
  unsigned int v348;
  _QWORD *v349;
  unsigned int *v350;
  unsigned int v351;
  pxrInternal__aapl__pxrReserved__::TfToken *v352;
  uint64_t v353;
  __int128 v354;
  pxrInternal__aapl__pxrReserved__::TfToken *v355;
  uint64_t v356;
  __int128 v357;
  pxrInternal__aapl__pxrReserved__::TfToken *v358;
  uint64_t v359;
  __int128 v360;
  pxrInternal__aapl__pxrReserved__::TfToken *v361;
  uint64_t v362;
  __int128 v363;
  pxrInternal__aapl__pxrReserved__::TfToken *v364;
  uint64_t v365;
  __int128 v366;
  pxrInternal__aapl__pxrReserved__::TfToken *v367;
  uint64_t v368;
  __int128 v369;
  pxrInternal__aapl__pxrReserved__::TfToken *v370;
  uint64_t v371;
  __int128 v372;
  pxrInternal__aapl__pxrReserved__::TfToken *v373;
  uint64_t v374;
  __int128 v375;
  pxrInternal__aapl__pxrReserved__::TfToken *v376;
  uint64_t v377;
  __int128 v378;
  pxrInternal__aapl__pxrReserved__::TfToken *v379;
  uint64_t v380;
  __int128 v381;
  uint64_t v382;
  unsigned int *v383;
  unsigned int v384;
  unsigned int *v385;
  unsigned int v386;
  unsigned int *v387;
  unsigned int v388;
  unsigned int *v389;
  unsigned int v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int *v393;
  unsigned int v394;
  unsigned int *v395;
  unsigned int v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int *v399;
  unsigned int v400;
  unsigned int *v401;
  unsigned int v402;
  uint64_t *v403;
  char v404;
  char v405;
  uint64_t v406;
  unsigned int *v407;
  unsigned int v408;
  pxrInternal__aapl__pxrReserved__::TfToken *v409;
  const void **v410;
  uint64_t v411;
  unsigned int *v412;
  unsigned int v413;
  unsigned int *v414;
  unsigned int v415;
  std::string *v416;
  __int128 v417;
  unsigned int *v418;
  unsigned int v419;
  unsigned int *v420;
  unsigned int v421;
  void *v422;
  unsigned int *v423;
  unsigned int v424;
  unsigned int *v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  std::string::size_type v429;
  std::string *v430;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v431;
  BOOL v432;
  const std::string::value_type *v433;
  std::string::size_type v434;
  std::string *v435;
  __int128 v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int *v439;
  unsigned int v440;
  unsigned int *v441;
  unsigned int v442;
  uint64_t *v443;
  uint64_t **v444;
  void *v445;
  void *v446;
  unsigned int *v447;
  unsigned int v448;
  unint64_t v449;
  float v455;
  uint64_t v456;
  std::string v457;
  unint64_t v458;
  std::string::size_type v459;
  unint64_t v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v463;
  char v464[8];
  void *v465;
  std::string *v466;
  std::string v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  uint64_t v470;
  void *v471[2];
  std::string::size_type v472;
  void *v473[2];
  uint64_t v474;
  _BYTE v475[32];
  int v476;
  _BYTE v477[4];
  int v478;
  uint64_t **v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t **v482;
  uint64_t *v483;
  uint64_t v484;
  std::string v485;
  uint64_t v486;
  unint64_t v487;
  _QWORD *v488[2];
  std::string *v489;
  unint64_t v490;
  std::string *v491;
  uint64_t v492;
  std::string *v493;
  std::string::size_type v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  char v499;
  uint64_t v500;
  uint64_t v501;
  std::string::size_type v502;
  uint64_t v503;
  std::string::size_type v504;
  unint64_t v505;
  std::string::size_type v506;
  unint64_t v507;
  uint64_t v508;
  _QWORD v509[2];
  std::string *__str[2];
  std::string v511;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p;
  uint64_t v513;

  v513 = *MEMORY[0x24BDAC8D0];
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v509, a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  MEMORY[0x2348B274C](__str, "standardConstColorMaterial");
  v9 = *NameToken;
  v10 = (unsigned int *)((unint64_t)__str[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)__str[0] & 7) != 0)
  {
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if ((unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8) == v10)
  {
    v20 = *(_QWORD *)(a1 + 16);
    if (v20)
    {
      if (*(_QWORD *)(v20 + 192))
      {
        __str[0] = 0;
        *(_QWORD *)v475 = 0;
        v496 = 0;
        v495 = 0;
        realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, &v496, &v495);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v495);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v496);
        a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a6, (uint64_t *)&__p);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        p_p = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)v475;
LABEL_358:
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(p_p);
        v210 = __str;
LABEL_379:
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v210);
        goto LABEL_853;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  v12 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  MEMORY[0x2348B274C](__str, "__materialAssetWithMeshVertexColors");
  v13 = *v12;
  v14 = (unsigned int *)((unint64_t)__str[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)__str[0] & 7) != 0)
  {
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if ((unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8) == v14)
  {
    *(_QWORD *)v475 = REAssetManagerCreateAssetHandle();
    if (*(_QWORD *)v475)
      RERetain();
    realityio::ECSAction::queueForDeferredAssetLoad(a1);
    RERelease();
    v487 = 0;
    v22 = *a4;
    if (a4[1] == *a4)
    {
      __asm { FMOV            V0.2S, #1.0 }
      v456 = _D0;
      v455 = 1.0;
    }
    else
    {
      v23 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      v456 = _D0;
      v455 = 1.0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v23));
        v28 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 8 * v23));
        MEMORY[0x2348B274C](&__p, "primvars:displayColor");
        v29 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
        if ((*v28 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
        {
          v31 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
          if ((__p.__x_[0] & 7) != 0)
          {
            v32 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          if (v31)
          {
            if (((uint64_t)__str[1] & 4) != 0)
              v34 = (std::string *)(*(uint64_t (**)(std::string **))(((unint64_t)__str[1] & 0xFFFFFFFFFFFFFFF8)
                                                                             + 168))(__str);
            else
              v34 = __str[0];
            v35 = *(_OWORD *)&v34->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p.__x_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            *(_OWORD *)&__p.__x_[4] = v35;
            size = v34[1].__r_.__value_.__l.__size_;
            *(_QWORD *)&__p.__x_[8] = size;
            if (size)
            {
              v37 = (unint64_t *)(size - 16);
              if (*(_QWORD *)&__p.__x_[6])
                v37 = *(unint64_t **)&__p.__x_[6];
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            if (*(_QWORD *)__p.__x_ == 1)
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p);
              v456 = **(_QWORD **)&__p.__x_[8];
              v455 = *(float *)(*(_QWORD *)&__p.__x_[8] + 8);
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&__p);
          }
        }
        else if ((__p.__x_[0] & 7) != 0)
        {
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
        ++v23;
        v22 = *a4;
      }
      while (v23 < (a4[1] - *a4) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v482);
    v485.__r_.__value_.__r.__words[0] = 0;
    __str[0] = (std::string *)REMaterialAssetBuilderCreate();
    if (__str[0])
    {
      RERetain();
      if (__str[0])
      {
        RERelease();
        REMaterialAssetBuilderSetMaterialDefinition();
        *(_QWORD *)&v91 = v456;
        *((_QWORD *)&v91 + 1) = __PAIR64__(1.0, LODWORD(v455));
        *(_OWORD *)__p.__x_ = v91;
        LOBYTE(v479) = 0;
        realityio::assignGamutFromToken((const void **)&__p, &v479, (uint64_t *)&v487);
        REMaterialAssetBuilderSetColor4F();
        v92 = REAssetManagerMaterialAssetBuilderBuild();
        *(_QWORD *)__p.__x_ = v92;
        if (v92)
        {
          RERetain();
          v485.__r_.__value_.__r.__words[0] = v92;
          *(_QWORD *)__p.__x_ = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        }
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(__str);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v482);
    realityio::ECSAction::queueForDeferredAssetLoad(a1);
    __str[0] = 0;
    v494 = v485.__r_.__value_.__r.__words[0];
    if (v485.__r_.__value_.__r.__words[0])
    {
      RERetain();
      v493 = __str[0];
      if (__str[0])
        RERetain();
    }
    else
    {
      v493 = 0;
    }
    realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, (uint64_t *)&v494, (uint64_t *)&v493);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v493);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v494);
    a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a6, (uint64_t *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v485);
    if ((v487 & 7) != 0)
    {
      v208 = (unsigned int *)(v487 & 0xFFFFFFFFFFFFFFF8);
      do
        v209 = __ldxr(v208);
      while (__stlxr(v209 - 2, v208));
    }
    goto LABEL_378;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/__builtin/standardNoMaterial");
  MEMORY[0x2348B26F8](v475, &__p);
  v16 = __str[0];
  v17 = *(std::string **)v475;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v475);
  if (SHIBYTE(__p.__x_[5]) < 0)
    operator delete(*(void **)__p.__x_);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__str);
  if (v16 == v17)
  {
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 192);
      if (v19)
      {
        __str[0] = 0;
        v492 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 248);
        if (v492)
        {
          RERetain();
          v491 = __str[0];
          if (__str[0])
            RERetain();
        }
        else
        {
          v491 = 0;
        }
        realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, &v492, (uint64_t *)&v491);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v491);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v492);
        a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a6, (uint64_t *)&__p);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
        p_p = &__p;
        goto LABEL_358;
      }
    }
    *(_QWORD *)v475 = REAssetManagerCreateAssetHandle();
    if (*(_QWORD *)v475)
      RERetain();
    realityio::ECSAction::queueForDeferredAssetLoad(a1);
    RERelease();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v485);
    v487 = 0;
    *(_QWORD *)__p.__x_ = REMaterialAssetBuilderCreate();
    if (*(_QWORD *)__p.__x_)
    {
      RERetain();
      if (*(_QWORD *)__p.__x_)
      {
        RERelease();
        REMaterialAssetBuilderSetMaterialDefinition();
        v89 = (std::string *)REAssetManagerMaterialAssetBuilderBuild();
        __str[0] = v89;
        if (v89)
        {
          RERetain();
          v487 = (unint64_t)v89;
          __str[0] = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
        }
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v485);
    realityio::ECSAction::queueForDeferredAssetLoad(a1);
    __str[0] = 0;
    v490 = v487;
    if (v487)
    {
      RERetain();
      v489 = __str[0];
      if (__str[0])
        RERetain();
    }
    else
    {
      v489 = 0;
    }
    realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, (uint64_t *)&v490, (uint64_t *)&v489);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v489);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v490);
    a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a6, (uint64_t *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v487);
LABEL_378:
    v210 = (std::string **)v475;
    goto LABEL_379;
  }
  v488[1] = 0;
  v488[0] = 0;
  v487 = (unint64_t)v488;
  v486 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v485, "st");
  v483 = 0;
  v484 = 0;
  v481 = 0;
  v482 = &v483;
  v479 = &v480;
  v480 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v39 = *a4;
  if (a4[1] != *a4)
  {
    for (i = 0; i < (a4[1] - *a4) >> 3; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * i));
      v41 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 8 * i));
      MEMORY[0x2348B274C](&__p, "info:id");
      v42 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
      if ((*v41 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
      {
        v44 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
        if ((__p.__x_[0] & 7) != 0)
        {
          v45 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
        if (v44)
        {
          if (((uint64_t)__str[1] & 4) != 0)
            v47 = (std::string **)(*(uint64_t (**)(std::string **))(((unint64_t)__str[1] & 0xFFFFFFFFFFFFFFF8)
                                                                            + 168))(__str);
          else
            v47 = __str;
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v486, v47);
          goto LABEL_119;
        }
      }
      else if ((__p.__x_[0] & 7) != 0)
      {
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__str))
      {
        if (((uint64_t)__str[1] & 4) != 0)
          v48 = (uint64_t **)(*(uint64_t (**)(std::string **))(((unint64_t)__str[1] & 0xFFFFFFFFFFFFFFF8)
                                                                      + 168))(__str);
        else
          v48 = (uint64_t **)__str[0];
        if (&v487 != (unint64_t *)v48)
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>((uint64_t **)&v487, *v48, v48 + 1);
        v49 = (_QWORD *)v487;
        if ((_QWORD **)v487 != v488)
        {
          do
          {
            *(_QWORD *)v475 = 0;
            LODWORD(v467.__r_.__value_.__l.__data_) = 0;
            v457.__r_.__value_.__s.__data_[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            if (v471[0])
            {
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(v475, v49 + 4);
              std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&__p, v49 + 4, v473);
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)&v479, (uint64_t *)&__p, (uint64_t)&__p);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__x_[2]);
              if ((__p.__x_[0] & 7) != 0)
              {
                v50 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
                do
                  v51 = __ldxr(v50);
                while (__stlxr(v51 - 2, v50));
              }
              v52 = v49[4];
              *(_QWORD *)__p.__x_ = v52;
              if ((v52 & 7) != 0)
              {
                v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 2, v53));
                if ((v54 & 1) == 0)
                  *(_QWORD *)__p.__x_ &= 0xFFFFFFFFFFFFFFF8;
              }
              *(void **)&__p.__x_[2] = v471[0];
              if (v471[0])
                RERetain();
              v55 = v483;
              v56 = &v483;
              v57 = &v483;
              if (!v483)
                goto LABEL_81;
              v57 = &v483;
              while (1)
              {
                while (1)
                {
                  v56 = (uint64_t **)v55;
                  v58 = v55 + 4;
                  if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v484, (uint64_t *)&__p, v55 + 4))break;
                  v55 = *v56;
                  v57 = v56;
                  if (!*v56)
                    goto LABEL_81;
                }
                if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v484, v58, (uint64_t *)&__p))break;
                v57 = v56 + 1;
                v55 = v56[1];
                if (!v55)
                  goto LABEL_81;
              }
              if (!*v57)
              {
LABEL_81:
                v59 = (uint64_t *)operator new(0x30uLL);
                v60 = *(_QWORD *)__p.__x_;
                v61 = *(_QWORD *)&__p.__x_[2];
                *(_QWORD *)&__p.__x_[2] = 0;
                *(_QWORD *)__p.__x_ = 0;
                v59[4] = v60;
                v59[5] = v61;
                *v59 = 0;
                v59[1] = 0;
                v59[2] = (uint64_t)v56;
                *v57 = v59;
                if (*v482)
                {
                  v482 = (uint64_t **)*v482;
                  v59 = *v57;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v483, v59);
                ++v484;
              }
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
              if ((__p.__x_[0] & 7) != 0)
              {
                v62 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
                do
                  v63 = __ldxr(v62);
                while (__stlxr(v63 - 2, v62));
              }
            }
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(v471);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v473);
            if ((v475[0] & 7) != 0)
            {
              v64 = (unsigned int *)(*(_QWORD *)v475 & 0xFFFFFFFFFFFFFFF8);
              do
                v65 = __ldxr(v64);
              while (__stlxr(v65 - 2, v64));
            }
            v66 = (_QWORD *)v49[1];
            if (v66)
            {
              do
              {
                v67 = (_QWORD **)v66;
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
            else
            {
              do
              {
                v67 = (_QWORD **)v49[2];
                _ZF = *v67 == v49;
                v49 = v67;
              }
              while (!_ZF);
            }
            v49 = v67;
          }
          while (v67 != v488);
        }
        goto LABEL_119;
      }
      v68 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 8 * i));
      MEMORY[0x2348B274C](&__p, "__defaultUV");
      v69 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
      if ((*v68 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
      {
        if ((__p.__x_[0] & 7) != 0)
        {
          do
            v70 = __ldxr(v69);
          while (__stlxr(v70 - 2, v69));
        }
LABEL_108:
        v75 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 8 * i));
        MEMORY[0x2348B274C](&__p, "__shaderPrimPath");
        v76 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
        if ((*v75 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8))
        {
          v78 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
          if ((__p.__x_[0] & 7) != 0)
          {
            v79 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
            do
              v80 = __ldxr(v79);
            while (__stlxr(v80 - 2, v79));
          }
          if (v78)
          {
            if (((uint64_t)__str[1] & 4) != 0)
              v81 = (std::string **)(*(uint64_t (**)(std::string **))(((unint64_t)__str[1] & 0xFFFFFFFFFFFFFFF8)
                                                                              + 168))(__str);
            else
              v81 = __str;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v477, v81);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v478, (_DWORD *)v81 + 1);
          }
        }
        else if ((__p.__x_[0] & 7) != 0)
        {
          do
            v77 = __ldxr(v76);
          while (__stlxr(v77 - 2, v76));
        }
        goto LABEL_119;
      }
      v71 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
      if ((__p.__x_[0] & 7) != 0)
      {
        v72 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if (!v71)
        goto LABEL_108;
      if (((uint64_t)__str[1] & 4) != 0)
        v74 = (const std::string *)(*(uint64_t (**)(std::string **))(((unint64_t)__str[1] & 0xFFFFFFFFFFFFFFF8)
                                                                             + 168))(__str);
      else
        v74 = __str[0];
      std::string::operator=(&v485, v74);
LABEL_119:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__str);
      v39 = *a4;
    }
  }
  v82 = *(_QWORD *)(a1 + 16);
  v83 = a2;
  if (!v82 || !*(_QWORD *)(v82 + 200))
    goto LABEL_416;
  MEMORY[0x2348B274C](&__p, "UsdPreviewSurface");
  v84 = v486;
  v85 = *(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8;
  if ((__p.__x_[0] & 7) != 0)
  {
    do
      v86 = __ldxr((unsigned int *)v85);
    while (__stlxr(v86 - 2, (unsigned int *)v85));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
  v87 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2348B26F8](v475, &__p);
  if (__str[0] == *(std::string **)v475)
  {
    v88 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v87);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v508, v88);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v508 + 1, v88 + 1);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v475);
  if (SHIBYTE(__p.__x_[5]) < 0)
    operator delete(*(void **)__p.__x_);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__str);
  v93 = operator new(0x180uLL);
  v93[1] = 0;
  v93[2] = 0;
  *v93 = &off_24FDEC1D8;
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)realityio::MaterialAssetBuilder::MaterialAssetBuilder((realityio::MaterialAssetBuilder *)(v93 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v508);
  v457.__r_.__value_.__l.__size_ = (std::string::size_type)v93;
  memset(v475, 0, sizeof(v475));
  v476 = 1065353216;
  v473[1] = 0;
  v474 = 0;
  v473[0] = &v473[1];
  v94 = (uint64_t *)v482;
  if (v482 == &v483)
    goto LABEL_345;
  v95 = v84 & 0xFFFFFFFFFFFFFFF8;
  v449 = v84 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v96 = v94 + 4;
    v97 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v479, __str, v94 + 4);
    v98 = *v97;
    if (!*v97)
    {
      v99 = (uint64_t *)operator new(0x30uLL);
      v98 = v99;
      *(_QWORD *)&__p.__x_[2] = &v480;
      v100 = *v96;
      v99[4] = *v96;
      if ((v100 & 7) != 0)
      {
        v101 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 2, v101));
        if ((v102 & 1) == 0)
          v99[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      v99[5] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      LOBYTE(__p.__x_[4]) = 1;
      v103 = __str[0];
      *v98 = 0;
      v98[1] = 0;
      v98[2] = (uint64_t)v103;
      *v97 = v98;
      v104 = v98;
      if (*v479)
      {
        v479 = (uint64_t **)*v479;
        v104 = *v97;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v480, v104);
      ++v481;
      *(_QWORD *)__p.__x_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v471, (_DWORD *)v98 + 10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v471 + 1, (_DWORD *)v98 + 11);
    v105 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v473, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v471);
    v106 = v105;
    if (&v473[1] == v105)
    {
      __str[1] = 0;
      v511.__r_.__value_.__r.__words[0] = 0;
      __str[0] = (std::string *)&__str[1];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v471);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p.__x_[1], (_DWORD *)v471 + 1);
      *(std::string **)&__p.__x_[2] = __str[0];
      *(std::string **)&__p.__x_[4] = __str[1];
      *(_QWORD *)&__p.__x_[6] = v511.__r_.__value_.__r.__words[0];
      if (v511.__r_.__value_.__r.__words[0])
      {
        __str[1]->__r_.__value_.__r.__words[2] = (std::string::size_type)&__p.__x_[4];
        __str[0] = (std::string *)&__str[1];
        __str[1] = 0;
        v511.__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        *(_QWORD *)&__p.__x_[2] = &__p.__x_[4];
      }
      v107 = (void **)v473[1];
      v108 = &v473[1];
      v109 = &v473[1];
      if (!v473[1])
        goto LABEL_169;
      v109 = &v473[1];
      while (1)
      {
        while (1)
        {
          v108 = v107;
          v110 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v107 + 4);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v107 + 4)))break;
          v107 = (void **)*v108;
          v109 = v108;
          if (!*v108)
            goto LABEL_169;
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v110, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p))break;
        v109 = v108 + 1;
        v107 = (void **)v108[1];
        if (!v107)
          goto LABEL_169;
      }
      if (!*v109)
      {
LABEL_169:
        v111 = operator new(0x40uLL);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v111 + 8, &__p);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v111 + 9, &__p.__x_[1]);
        v112 = *(_QWORD *)&__p.__x_[2];
        v113 = *(_QWORD *)&__p.__x_[4];
        *((_QWORD *)v111 + 6) = *(_QWORD *)&__p.__x_[4];
        v114 = (char *)(v111 + 12);
        *((_QWORD *)v111 + 5) = v112;
        v115 = *(_QWORD *)&__p.__x_[6];
        *((_QWORD *)v111 + 7) = *(_QWORD *)&__p.__x_[6];
        if (v115)
        {
          *(_QWORD *)(v113 + 16) = v114;
          *(_QWORD *)&__p.__x_[2] = &__p.__x_[4];
          *(_QWORD *)&__p.__x_[4] = 0;
          *(_QWORD *)&__p.__x_[6] = 0;
        }
        else
        {
          *((_QWORD *)v111 + 5) = v114;
        }
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
        *((_QWORD *)v111 + 2) = v108;
        *v109 = v111;
        if (*(_QWORD *)v473[0])
        {
          v473[0] = *(void **)v473[0];
          v111 = *v109;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v473[1], (uint64_t *)v111);
        ++v474;
      }
      std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&__p.__x_[2], *(_QWORD **)&__p.__x_[4]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)__str, __str[1]->__r_.__value_.__r.__words);
      v105 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v473, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v471);
      v95 = v449;
      v106 = v105;
    }
    if ((*v96 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (*v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v105);
    stripInputsPrefixString((std::string *)&__p, EmptyString);
    MEMORY[0x2348B2764](&v467, &__p);
    if (SHIBYTE(__p.__x_[5]) < 0)
      operator delete(*(void **)__p.__x_);
    MEMORY[0x2348B274C](&v468, "inputs:file");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v471, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v468);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v118 = *(_OWORD *)String;
      v511.__r_.__value_.__r.__words[0] = *(_QWORD *)(String + 16);
      *(_OWORD *)__str = v118;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v119 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    if ((v468 & 7) != 0)
    {
      v120 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
      do
        v121 = __ldxr(v120);
      while (__stlxr(v121 - 2, v120));
    }
    if (v95 == v85)
    {
      if ((*v96 & 0xFFFFFFFFFFFFFFF8) != 0)
        v122 = (*v96 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v122 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v119);
      stripInputsPrefixString((std::string *)&__p, v122);
      if (v511.__r_.__value_.__s.__data_[7] < 0)
        operator delete(__str[0]);
      *(_OWORD *)__str = *(_OWORD *)__p.__x_;
      v511.__r_.__value_.__r.__words[0] = *(_QWORD *)&__p.__x_[4];
    }
    if (v511.__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)__str[0], (std::string::size_type)__str[1]);
    }
    else
    {
      *(_OWORD *)__p.__x_ = *(_OWORD *)__str;
      *(_QWORD *)&__p.__x_[4] = v511.__r_.__value_.__r.__words[0];
    }
    *(_QWORD *)&__p.__x_[6] = v94[5];
    if (*(_QWORD *)&__p.__x_[6])
      RERetain();
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::WrappedRERef<REAsset *>>>((uint64_t **)v106 + 5, (const void **)&__p, (__int128 *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[6]);
    if (SHIBYTE(__p.__x_[5]) < 0)
      operator delete(*(void **)__p.__x_);
    if (v511.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__str[0]);
    if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v123 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v124 = __ldxr(v123);
      while (__stlxr(v124 - 2, v123));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v471);
    v125 = (uint64_t *)v94[1];
    if (v125)
    {
      do
      {
        v126 = (uint64_t **)v125;
        v125 = (uint64_t *)*v125;
      }
      while (v125);
    }
    else
    {
      do
      {
        v126 = (uint64_t **)v94[2];
        _ZF = *v126 == v94;
        v94 = (uint64_t *)v126;
      }
      while (!_ZF);
    }
    v94 = (uint64_t *)v126;
  }
  while (v126 != &v483);
  v127 = (void **)v473[0];
  if (v473[0] == &v473[1])
    goto LABEL_345;
  v85 = (unint64_t)&v511;
  do
  {
    __str[1] = 0;
    v511.__r_.__value_.__r.__words[0] = 0;
    __str[0] = (std::string *)&__str[1];
    v128 = (const void **)v127[5];
    v129 = (const void **)(v127 + 6);
    if (v128 == (const void **)(v127 + 6))
      goto LABEL_237;
    do
    {
      v130 = __str[1];
      if ((std::string **)__str[0] == &__str[1])
      {
        p_data = (const void **)&__str[1];
        if (!__str[1])
          goto LABEL_222;
LABEL_224:
        v471[0] = p_data;
        v133 = (std::string **)(p_data + 1);
LABEL_226:
        if (*v133)
          goto LABEL_230;
        goto LABEL_227;
      }
      v131 = &__str[1];
      if (__str[1])
      {
        do
        {
          p_data = (const void **)&v130->__r_.__value_.__l.__data_;
          v130 = (std::string *)v130->__r_.__value_.__l.__size_;
        }
        while (v130);
      }
      else
      {
        do
        {
          p_data = (const void **)v131[2];
          _ZF = *p_data == v131;
          v131 = (std::string **)p_data;
        }
        while (_ZF);
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v85, p_data + 4, v128 + 4))
      {
        v133 = (std::string **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)__str, v471, v128 + 4);
        goto LABEL_226;
      }
      if (__str[1])
        goto LABEL_224;
LABEL_222:
      v471[0] = &__str[1];
      v133 = &__str[1];
LABEL_227:
      *(_QWORD *)__p.__x_ = operator new(0x40uLL);
      *(_QWORD *)&__p.__x_[2] = &__str[1];
      LOBYTE(__p.__x_[4]) = 0;
      std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100]((std::string *)(*(_QWORD *)__p.__x_ + 32), (__int128 *)v128 + 2);
      LOBYTE(__p.__x_[4]) = 1;
      v134 = v471[0];
      v135 = *(uint64_t **)__p.__x_;
      **(_QWORD **)__p.__x_ = 0;
      v135[1] = 0;
      v135[2] = (uint64_t)v134;
      *v133 = (std::string *)v135;
      if (__str[0]->__r_.__value_.__l.__data_)
      {
        __str[0] = (std::string *)__str[0]->__r_.__value_.__l.__data_;
        v135 = (uint64_t *)*v133;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__str[1], v135);
      ++v511.__r_.__value_.__r.__words[0];
      *(_QWORD *)__p.__x_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
LABEL_230:
      v136 = (const void **)v128[1];
      if (v136)
      {
        do
        {
          v137 = v136;
          v136 = (const void **)*v136;
        }
        while (v136);
      }
      else
      {
        do
        {
          v137 = (const void **)v128[2];
          _ZF = *v137 == v128;
          v128 = v137;
        }
        while (!_ZF);
      }
      v128 = v137;
    }
    while (v137 != v129);
    v128 = (const void **)v127[5];
LABEL_237:
    v507 = 0;
    v506 = 0;
    memset(&__p, 0, 24);
    *(_OWORD *)&v467.__r_.__value_.__l.__data_ = xmmword_230204CE0;
    v468 = 0;
    if (v128 != v129)
    {
      do
      {
        std::operator+<char>();
        MEMORY[0x2348B2764](&v461, v471);
        if (SHIBYTE(v472) < 0)
          operator delete(v471[0]);
        v470 = v461;
        if ((v461 & 7) != 0)
        {
          v138 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v139 = __ldxr(v138);
          while (__stxr(v139 + 2, v138));
          if ((v139 & 1) == 0)
            v470 &= 0xFFFFFFFFFFFFFFF8;
        }
        if ((v470 & 7) != 0)
        {
          v140 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
          do
            v141 = __ldxr(v140);
          while (__stlxr(v141 - 2, v140));
        }
        if ((v461 & 7) != 0)
        {
          v142 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v143 = __ldxr(v142);
          while (__stlxr(v143 - 2, v142));
        }
        v144 = (const void **)v128[1];
        if (v144)
        {
          do
          {
            v145 = v144;
            v144 = (const void **)*v144;
          }
          while (v144);
        }
        else
        {
          do
          {
            v145 = (const void **)v128[2];
            _ZF = *v145 == v128;
            v128 = v145;
          }
          while (!_ZF);
        }
        v128 = v145;
      }
      while (v145 != v129);
      if (SHIBYTE(__p.__x_[5]) < 0)
        operator delete(*(void **)__p.__x_);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v127 + 4));
    v146 = (std::__shared_weak_count *)operator new(0x100uLL);
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4678;
    realityio::Builder::Builder((realityio::Builder *)&v146[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v505);
    v146[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF46C8;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v146[9].__shared_weak_owners_ = 0;
    v146[10].__vftable = 0;
    v146[10].__shared_owners_ = 0;
    v146[9].__vftable = 0;
    v146[9].__shared_owners_ = (uint64_t)&v146[9].__shared_weak_owners_;
    v471[0] = (void *)v507;
    if ((v507 & 7) != 0)
    {
      v147 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
      do
        v148 = __ldxr(v147);
      while (__stxr(v148 + 2, v147));
      if ((v148 & 1) == 0)
        v471[0] = v147;
    }
    v467.__r_.__value_.__r.__words[0] = v506;
    if ((v506 & 7) != 0)
    {
      v149 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 2, v149));
      if ((v150 & 1) == 0)
        v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
    }
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    realityio::TextureBuilder::TextureDataT::TextureDataT((uint64_t)&__p, &v505, __str, v151);
    realityio::TextureBuilder::TextureDataT::operator=((uint64_t)&v146[8].__shared_weak_owners_, (uint64_t)&__p);
    realityio::TextureBuilder::TextureDataT::~TextureDataT((id *)&__p);

    if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v153 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v154 = __ldxr(v153);
      while (__stlxr(v154 - 2, v153));
    }
    v155 = v85;
    if (((uint64_t)v471[0] & 7) != 0)
    {
      v156 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v157 = __ldxr(v156);
      while (__stlxr(v157 - 2, v156));
    }
    shared_weak_owners = v146[1].__shared_weak_owners_;
    v159 = (std::__shared_weak_count *)v146[2].__vftable;
    *(_QWORD *)__p.__x_ = shared_weak_owners;
    *(_QWORD *)&__p.__x_[2] = v159;
    if (v159)
    {
      p_shared_owners = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldxr(p_shared_owners);
      while (__stxr(v161 + 1, p_shared_owners));
    }
    v162 = (__int128 *)realityio::TextureBuilder::kOutputName(v152);
    *(_QWORD *)&v461 = (char *)v146 + 208;
    realityio::Outputs::storeValue<realityio::TextureBuilder::TextureDataT *>(shared_weak_owners, v162, &v461);
    v85 = v155;
    if (v159)
    {
      v163 = (unint64_t *)&v159->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v468 = (unint64_t)&v146[1];
    v469 = v146;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v165 = (realityio::TextureBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v505);
    v166 = (const void **)v127[5];
    if (v166 == v129)
      goto LABEL_329;
    do
    {
      v471[0] = (void *)v468;
      v471[1] = v469;
      if (v469)
      {
        v167 = (unint64_t *)&v469->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      v169 = realityio::TextureBuilder::kOutputName(v165);
      v170 = (realityio::TextureBuilder *)MEMORY[0x2348B2764](&v472, v169);
      *(_OWORD *)&v467.__r_.__value_.__l.__data_ = *(_OWORD *)&v457.__r_.__value_.__l.__data_;
      if (v457.__r_.__value_.__l.__size_)
      {
        v171 = (unint64_t *)(v457.__r_.__value_.__l.__size_ + 8);
        do
          v172 = __ldxr(v171);
        while (__stxr(v172 + 1, v171));
      }
      v173 = realityio::TextureBuilder::kOutputName(v170);
      MEMORY[0x2348B2764](&v467.__r_.__value_.__r.__words[2], v173);
      std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(&__p, &v467, v471);
      v165 = (realityio::TextureBuilder *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v475, (uint64_t)&__p);
      if ((__p.__x_[10] & 7) != 0)
      {
        v174 = (unsigned int *)(*(_QWORD *)&__p.__x_[10] & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stlxr(v175 - 2, v174));
      }
      v176 = *(std::__shared_weak_count **)&__p.__x_[8];
      if (*(_QWORD *)&__p.__x_[8])
      {
        v177 = (unint64_t *)(*(_QWORD *)&__p.__x_[8] + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      if ((__p.__x_[4] & 7) != 0)
      {
        v179 = (unsigned int *)(*(_QWORD *)&__p.__x_[4] & 0xFFFFFFFFFFFFFFF8);
        do
          v180 = __ldxr(v179);
        while (__stlxr(v180 - 2, v179));
      }
      v181 = *(std::__shared_weak_count **)&__p.__x_[2];
      if (*(_QWORD *)&__p.__x_[2])
      {
        v182 = (unint64_t *)(*(_QWORD *)&__p.__x_[2] + 8);
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      if ((v467.__r_.__value_.__s.__data_[16] & 7) != 0)
      {
        v184 = (unsigned int *)(v467.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
        do
          v185 = __ldxr(v184);
        while (__stlxr(v185 - 2, v184));
      }
      v186 = (std::__shared_weak_count *)v467.__r_.__value_.__l.__size_;
      if (v467.__r_.__value_.__l.__size_)
      {
        v187 = (unint64_t *)(v467.__r_.__value_.__l.__size_ + 8);
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      if ((v472 & 7) != 0)
      {
        v189 = (unsigned int *)(v472 & 0xFFFFFFFFFFFFFFF8);
        do
          v190 = __ldxr(v189);
        while (__stlxr(v190 - 2, v189));
      }
      v191 = (std::__shared_weak_count *)v471[1];
      if (v471[1])
      {
        v192 = (unint64_t *)((char *)v471[1] + 8);
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v194 = (const void **)v166[1];
      if (v194)
      {
        do
        {
          v195 = v194;
          v194 = (const void **)*v194;
        }
        while (v194);
      }
      else
      {
        do
        {
          v195 = (const void **)v166[2];
          _ZF = *v195 == v166;
          v166 = v195;
        }
        while (!_ZF);
      }
      v166 = v195;
    }
    while (v195 != v129);
    v146 = v469;
    if (v469)
    {
LABEL_329:
      v196 = (unint64_t *)&v146->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    if ((v506 & 7) != 0)
    {
      v198 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
      do
        v199 = __ldxr(v198);
      while (__stlxr(v199 - 2, v198));
    }
    if ((v507 & 7) != 0)
    {
      v200 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
      do
        v201 = __ldxr(v200);
      while (__stlxr(v201 - 2, v200));
    }
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)__str, __str[1]->__r_.__value_.__r.__words);
    v202 = (void **)v127[1];
    if (v202)
    {
      do
      {
        v203 = v202;
        v202 = (void **)*v202;
      }
      while (v202);
    }
    else
    {
      do
      {
        v203 = (void **)v127[2];
        _ZF = *v203 == v127;
        v127 = v203;
      }
      while (!_ZF);
    }
    v127 = v203;
  }
  while (v203 != &v473[1]);
LABEL_345:
  v204 = *(_QWORD **)(a1 + 16);
  if (v204)
  {
    v205 = v204[24];
    v206 = v204[25];
    v207 = v204[26];
  }
  else
  {
    v206 = 0;
    v205 = 0;
    v207 = 0;
  }
  v83 = a2;
  v211 = operator new();
  v212 = (realityio::Inputs *)v211;
  v213 = (_QWORD *)v457.__r_.__value_.__r.__words[0];
  *(_OWORD *)__p.__x_ = *(_OWORD *)&v457.__r_.__value_.__l.__data_;
  if (v457.__r_.__value_.__l.__size_)
  {
    v214 = (unint64_t *)(v457.__r_.__value_.__l.__size_ + 16);
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
  }
  realityio::Inputs::Inputs(v211, &__p, &v508, v205, (uint64_t)v475, v206, v207);
  if (*(_QWORD *)&__p.__x_[2])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p.__x_[2]);
  v216 = (realityio::MaterialAssetBuilder *)(*(uint64_t (**)(_QWORD *, realityio::Inputs *))(*v213 + 64))(v213, v212);
  v218 = (std::mutex *)v213[2];
  v217 = (std::__shared_weak_count *)v213[3];
  v471[0] = v218;
  v471[1] = v217;
  if (v217)
  {
    v219 = (unint64_t *)&v217->__shared_owners_;
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = (const void **)realityio::MaterialAssetBuilder::kMaterialDataName(v216);
  realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v218, v221, (uint64_t)&__p);
  v222 = LOBYTE(__p.__x_[0]);
  if (LOBYTE(__p.__x_[0]))
  {
    v223 = *(std::string **)&__p.__x_[2];
  }
  else
  {
    *(_OWORD *)__str = *(_OWORD *)&__p.__x_[2];
    if (SHIBYTE(__p.__x_[11]) < 0)
    {
      std::string::__init_copy_ctor_external(&v511, *(const std::string::value_type **)&__p.__x_[6], *(std::string::size_type *)&__p.__x_[8]);
      v223 = __str[0];
      v218 = (std::mutex *)v511.__r_.__value_.__r.__words[0];
      LOBYTE(v85) = *((_BYTE *)&v511.__r_.__value_.__s + 23);
      if (!LOBYTE(__p.__x_[0]) && SHIBYTE(__p.__x_[11]) < 0)
        operator delete(*(void **)&__p.__x_[6]);
    }
    else
    {
      v511 = *(std::string *)&__p.__x_[6];
      v223 = __str[0];
      v218 = *(std::mutex **)&__p.__x_[6];
      LOBYTE(v85) = HIBYTE(__p.__x_[11]);
    }
  }
  if (v217)
  {
    v224 = (unint64_t *)&v217->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  if (v222)
    _ZF = v223 == 0;
  else
    _ZF = 1;
  v227 = _ZF;
  if (_ZF)
  {
    realityio::Inputs::~Inputs(v212);
    MEMORY[0x2348B4E1C]();
    if (!v222 && (v85 & 0x80) != 0)
      operator delete(v218);
  }
  else
  {
    __str[0] = (std::string *)v223->__r_.__value_.__l.__size_;
    if (__str[0])
    {
      RERetain();
      if (__str[0])
        realityio::ECSAction::queueForDeferredAssetLoad(a1);
    }
    v471[0] = (void *)v223->__r_.__value_.__r.__words[2];
    if (v471[0])
    {
      RERetain();
      if (v471[0])
        realityio::ECSAction::queueForDeferredAssetLoad(a1);
    }
    v466 = __str[0];
    if (__str[0])
      RERetain();
    v465 = v471[0];
    if (v471[0])
      RERetain();
    realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&__p, (uint64_t *)&v466, (uint64_t *)&v465);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v465);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v466);
    realityio::Inputs::~Inputs(v212);
    MEMORY[0x2348B4E1C]();
    a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a6, (uint64_t *)&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p.__x_[2]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v471);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(__str);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy((_QWORD *)v473[1]);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)v475);
  v228 = (std::__shared_weak_count *)v457.__r_.__value_.__l.__size_;
  if (v457.__r_.__value_.__l.__size_)
  {
    v229 = (unint64_t *)(v457.__r_.__value_.__l.__size_ + 8);
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v508);
  if ((v227 & 1) != 0)
  {
LABEL_416:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v83);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v83);
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v475, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v232 = *(_OWORD *)Name;
      *(_QWORD *)&v475[16] = *(_QWORD *)(Name + 16);
      *(_OWORD *)v475 = v232;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    MEMORY[0x2348B274C](&__p, "inputs:opacityThreshold");
    v233 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v487, (uint64_t *)&__p);
    v234 = v233;
    if (v488 != v233
      && (v235 = (float *)(v233 + 5),
          pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v233 + 5)))
      && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v234 + 5)))
    {
      v236 = v234[6];
      if ((v236 & 4) != 0)
        v235 = (float *)(*(uint64_t (**)(_QWORD *))((v236 & 0xFFFFFFFFFFFFFFF8) + 168))(v234 + 5);
      v237 = *v235 > 0.0;
    }
    else
    {
      v237 = 0;
    }
    if ((__p.__x_[0] & 7) != 0)
    {
      v238 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
      do
        v239 = __ldxr(v238);
      while (__stlxr(v239 - 2, v238));
    }
    if (v237)
    {
      v463 = 0;
      *(_QWORD *)__p.__x_ = REAssetManagerCreateAssetHandle();
      if (*(_QWORD *)__p.__x_)
        goto LABEL_457;
LABEL_458:
      v249 = 0;
      goto LABEL_459;
    }
    MEMORY[0x2348B274C](&__p, "inputs:diffuseColor");
    MEMORY[0x2348B274C](__str, "inputs:opacity");
    LODWORD(v468) = 1065353216;
    LOBYTE(v461) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LOBYTE(v508) = 0;
    if (v471[0] == v467.__r_.__value_.__l.__data_)
    {
      MEMORY[0x2348B274C](&v457, "outputs:a");
      v242 = v457.__r_.__value_.__r.__words[0] < 8 && v471[0] != 0;
      if ((v457.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v243 = (unsigned int *)(v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v244 = __ldxr(v243);
        while (__stlxr(v244 - 2, v243));
      }
      if (v242 || v467.__r_.__value_.__r.__words[0])
        goto LABEL_446;
LABEL_434:
      v240 = *(float *)&v468 < 1.0;
    }
    else
    {
      if (!v467.__r_.__value_.__r.__words[0])
        goto LABEL_434;
LABEL_446:
      v240 = 1;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v467);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v471);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v473);
    if (((uint64_t)__str[0] & 7) != 0)
    {
      v245 = (unsigned int *)((unint64_t)__str[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v246 = __ldxr(v245);
      while (__stlxr(v246 - 2, v245));
    }
    if ((__p.__x_[0] & 7) != 0)
    {
      v247 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
      do
        v248 = __ldxr(v247);
      while (__stlxr(v248 - 2, v247));
    }
    v463 = 0;
    if (!v240)
    {
      *(_QWORD *)__p.__x_ = REAssetManagerCreateAssetHandle();
      if (*(_QWORD *)__p.__x_)
        goto LABEL_457;
      goto LABEL_458;
    }
    *(_QWORD *)__p.__x_ = REAssetManagerCreateAssetHandle();
    if (!*(_QWORD *)__p.__x_)
      goto LABEL_458;
LABEL_457:
    RERetain();
    v249 = *(_QWORD *)__p.__x_;
LABEL_459:
    v250 = v463;
    if (v463 != v249)
    {
      v463 = v249;
      *(_QWORD *)__p.__x_ = v250;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
    if (v463)
    {
      realityio::ECSAction::queueForDeferredAssetLoad(a1);
      RERelease();
      v462 = REMaterialAssetBuilderCreate();
      if (v462 && (RERetain(), v462))
      {
        RERelease();
        REMaterialAssetBuilderSetName();
        REMaterialAssetBuilderSetMaterialDefinition();
        v251 = v462;
        v252 = *a4;
        if (a4[1] != *a4)
        {
          v253 = 0;
          v254 = 0;
          v255 = 0;
          do
          {
            v256 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v252 + v253);
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v252 + v253)))
            {
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v256);
              std::string::basic_string[abi:ne180100]<0>(&__p, "/__stage.layerData");
              MEMORY[0x2348B26F8](v471, &__p);
              if (v473[0] == v471[0])
              {
                TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v256);
                std::string::basic_string[abi:ne180100]<0>(__str, "/customLayerData");
                MEMORY[0x2348B26F8](&v467, __str);
                HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(TargetPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v467);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v467);
                if (v511.__r_.__value_.__s.__data_[7] < 0)
                  operator delete(__str[0]);
              }
              else
              {
                HasPrefix = 0;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v471);
              if (SHIBYTE(__p.__x_[5]) < 0)
                operator delete(*(void **)__p.__x_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v473);
              if (HasPrefix
                && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + v254)))
              {
                v259 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a4 + v253));
                pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v259);
                v260 = *(_QWORD *)(*a5 + v254 + 8);
                if ((v260 & 4) != 0)
                  (*(void (**)(void))((v260 & 0xFFFFFFFFFFFFFFF8) + 168))();
                REMaterialAssetBuilderSetFunctionConstant();
              }
            }
            ++v255;
            v252 = *a4;
            v254 += 16;
            v253 += 8;
          }
          while (v255 < (a4[1] - *a4) >> 3);
          v251 = v462;
          v83 = a2;
        }
        MEMORY[0x2348B274C](&__p, "inputs:opacity");
        LODWORD(__str[0]) = 1065353216;
        if ((__p.__x_[0] & 7) != 0)
        {
          v261 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
          do
            v262 = __ldxr(v261);
          while (__stlxr(v262 - 2, v261));
        }
        MEMORY[0x2348B274C](v473, "inputs:diffuseColor");
        __str[0] = (std::string *)vdup_n_s32(0x3E3851ECu);
        LODWORD(__str[1]) = 1043878380;
        if (((uint64_t)v473[0] & 7) != 0)
        {
          v263 = (unsigned int *)((unint64_t)v473[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v264 = __ldxr(v263);
          while (__stlxr(v264 - 2, v263));
        }
        MEMORY[0x2348B274C](v471, "inputs:realitykit:tint");
        __asm { FMOV            V0.2S, #1.0 }
        v473[0] = _D0;
        LODWORD(v473[1]) = 1065353216;
        if (((uint64_t)v471[0] & 7) != 0)
        {
          v266 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v267 = __ldxr(v266);
          while (__stlxr(v267 - 2, v266));
        }
        LODWORD(v501) = 1065353216;
        MEMORY[0x2348B274C](&v457, "inputs:diffuseColor");
        MEMORY[0x2348B274C](&v468, "inputs:opacity");
        MEMORY[0x2348B274C](&v461, "outputs:a");
        v508 = 0;
        LOBYTE(v500) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v505 = 0;
        LOBYTE(v498) = 0;
        if (v506 != v504 || !v506 || (v505 & 0xFFFFFFFFFFFFFFF8) != (v461 & 0xFFFFFFFFFFFFFFF8))
        {
          LOBYTE(v497) = 0;
          v499 = 0;
          v503 = 0;
          v268 = v504;
          if (v504 != v502)
          {
            v504 = v502;
            v502 = v268;
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v502);
          if ((v503 & 7) != 0)
          {
            v269 = (unsigned int *)(v503 & 0xFFFFFFFFFFFFFFF8);
            do
              v270 = __ldxr(v269);
            while (__stlxr(v270 - 2, v269));
          }
        }
        LOBYTE(v497) = 0;
        v499 = 0;
        v503 = 0;
        v271 = v506;
        if (v506 != v502)
        {
          v506 = v502;
          v502 = v271;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v502);
        if ((v503 & 7) != 0)
        {
          v272 = (unsigned int *)(v503 & 0xFFFFFFFFFFFFFFF8);
          do
            v273 = __ldxr(v272);
          while (__stlxr(v273 - 2, v272));
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v504);
        if ((v505 & 7) != 0)
        {
          v274 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
          do
            v275 = __ldxr(v274);
          while (__stlxr(v275 - 2, v274));
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v506);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v507);
        if ((v508 & 7) != 0)
        {
          v276 = (unsigned int *)(v508 & 0xFFFFFFFFFFFFFFF8);
          do
            v277 = __ldxr(v276);
          while (__stlxr(v277 - 2, v276));
        }
        if ((v461 & 7) != 0)
        {
          v278 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v279 = __ldxr(v278);
          while (__stlxr(v279 - 2, v278));
        }
        if ((v468 & 7) != 0)
        {
          v280 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
          do
            v281 = __ldxr(v280);
          while (__stlxr(v281 - 2, v280));
        }
        if ((v457.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v282 = (unsigned int *)(v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v283 = __ldxr(v282);
          while (__stlxr(v283 - 2, v282));
        }
        REMaterialAssetBuilderSetColor4F();
        REMaterialAssetBuilderSetFunctionConstant();
        v284 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v477);
        v285 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__str, v284);
        __p.__x_[0] = v285;
        for (j = 1; j != 624; ++j)
        {
          v285 = j + 1812433253 * (v285 ^ (v285 >> 30));
          __p.__x_[j] = v285;
        }
        __p.__i_ = 0;
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
        REMaterialAssetBuilderSetColor3F();
        MEMORY[0x2348B274C](&v457, "inputs:emissiveColor");
        v468 = 0;
        *(_QWORD *)&v461 = 0;
        LOBYTE(v502) = 0;
        LOBYTE(v501) = 0;
        if ((_BYTE)v502)
        {
          REMaterialAssetBuilderSetFloat4();
        }
        else
        {
          v287 = v468;
          if ((v468 & 7) != 0)
          {
            v288 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
            do
              v289 = __ldxr(v288);
            while (__stxr(v289 + 2, v288));
            if ((v289 & 1) == 0)
              v287 &= 0xFFFFFFFFFFFFFFF8;
          }
          LOBYTE(v507) = 0;
          *(_OWORD *)__str = *(_OWORD *)v473;
          if ((v287 & 7) != 0)
          {
            v290 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
            do
              v291 = __ldxr(v290);
            while (__stlxr(v291 - 2, v290));
          }
          REMaterialAssetBuilderSetColor3F();
          __asm { FMOV            V0.4S, #1.0 }
          REMaterialAssetBuilderSetFloat4();
        }
        REMaterialAssetBuilderSetFloat();
        MEMORY[0x2348B274C](&v507, "inputs:metallic");
        std::string::basic_string[abi:ne180100]<0>(__str, "metallicScale");
        if (v511.__r_.__value_.__s.__data_[7] < 0)
          operator delete(__str[0]);
        MEMORY[0x2348B274C](&v506, "inputs:roughness");
        std::string::basic_string[abi:ne180100]<0>(__str, "roughnessScale");
        if (v511.__r_.__value_.__s.__data_[7] < 0)
          operator delete(__str[0]);
        MEMORY[0x2348B274C](&v505, "inputs:clearcoat");
        std::string::basic_string[abi:ne180100]<0>(__str, "clearcoatScale");
        if (v511.__r_.__value_.__s.__data_[7] < 0)
          operator delete(__str[0]);
        MEMORY[0x2348B274C](&v504, "inputs:clearcoatRoughness");
        std::string::basic_string[abi:ne180100]<0>(__str, "clearcoatRoughnessScale");
        if (v511.__r_.__value_.__s.__data_[7] < 0)
          operator delete(__str[0]);
        MEMORY[0x2348B274C](__str, "inputs:opacityThreshold");
        LODWORD(v503) = 0;
        if (((uint64_t)__str[0] & 7) != 0)
        {
          v293 = (unsigned int *)((unint64_t)__str[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v294 = __ldxr(v293);
          while (__stlxr(v294 - 2, v293));
        }
        REMaterialAssetBuilderSetFloat();
        MEMORY[0x2348B274C](__str, "inputs:ior");
        LODWORD(v503) = 1069547520;
        if (((uint64_t)__str[0] & 7) != 0)
        {
          v295 = (unsigned int *)((unint64_t)__str[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v296 = __ldxr(v295);
          while (__stlxr(v296 - 2, v295));
        }
        REMaterialAssetBuilderSetFloat();
        if ((v504 & 7) != 0)
        {
          v297 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
          do
            v298 = __ldxr(v297);
          while (__stlxr(v298 - 2, v297));
        }
        if ((v505 & 7) != 0)
        {
          v299 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
          do
            v300 = __ldxr(v299);
          while (__stlxr(v300 - 2, v299));
        }
        if ((v506 & 7) != 0)
        {
          v301 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
          do
            v302 = __ldxr(v301);
          while (__stlxr(v302 - 2, v301));
        }
        if ((v507 & 7) != 0)
        {
          v303 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
          do
            v304 = __ldxr(v303);
          while (__stlxr(v304 - 2, v303));
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v508);
        if ((v461 & 7) != 0)
        {
          v305 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v306 = __ldxr(v305);
          while (__stlxr(v306 - 2, v305));
        }
        if ((v468 & 7) != 0)
        {
          v307 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
          do
            v308 = __ldxr(v307);
          while (__stlxr(v308 - 2, v307));
        }
        if ((v457.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v309 = (unsigned int *)(v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v310 = __ldxr(v309);
          while (__stlxr(v310 - 2, v309));
        }
        v311 = v462;
        MEMORY[0x2348B274C](&v468, "inputs:diffuseColor");
        MEMORY[0x2348B274C](&v461, "inputs:normal");
        MEMORY[0x2348B274C](&v508, "inputs:emissiveColor");
        MEMORY[0x2348B274C](&v507, "inputs:roughness");
        MEMORY[0x2348B274C](&v506, "inputs:metallic");
        MEMORY[0x2348B274C](&v505, "inputs:occlusion");
        MEMORY[0x2348B274C](&v504, "inputs:specularColor");
        MEMORY[0x2348B274C](&v503, "inputs:opacity");
        MEMORY[0x2348B274C](&v502, "inputs:clearcoat");
        MEMORY[0x2348B274C](&v501, "inputs:clearcoatRoughness");
        MEMORY[0x2348B274C](&v500, "inputs:realitykitTintMask");
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableBaseColorMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableNormalMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableEmissiveMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableRoughnessMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableMetallicMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableAOMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EnableSpecularMap");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        v471[0] = 0;
        LOBYTE(v498) = 0;
        LOBYTE(v497) = 0;
        v467.__r_.__value_.__r.__words[0] = 0;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v457);
        if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v312 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v313 = __ldxr(v312);
          while (__stlxr(v313 - 2, v312));
        }
        if (((uint64_t)v471[0] & 7) != 0)
        {
          v314 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v315 = __ldxr(v314);
          while (__stlxr(v315 - 2, v314));
        }
        REMaterialAssetBuilderSetFunctionConstant();
        std::string::basic_string[abi:ne180100]<0>(&__p, "UseBaseColorMapAsTintMask");
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        v471[0] = 0;
        v467.__r_.__value_.__r.__words[0] = 0;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v457);
        if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v316 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v317 = __ldxr(v316);
          while (__stlxr(v317 - 2, v316));
        }
        if (((uint64_t)v471[0] & 7) != 0)
        {
          v318 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v319 = __ldxr(v318);
          while (__stlxr(v319 - 2, v318));
        }
        v471[0] = 0;
        v467.__r_.__value_.__r.__words[0] = 0;
        v497 = 1008981770;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v457);
        if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v320 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v321 = __ldxr(v320);
          while (__stlxr(v321 - 2, v320));
        }
        if (((uint64_t)v471[0] & 7) != 0)
        {
          v322 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v323 = __ldxr(v322);
          while (__stlxr(v323 - 2, v322));
        }
        MEMORY[0x2348B274C](&__p, "inputs:opacityThreshold");
        LODWORD(__str[0]) = 0;
        if ((__p.__x_[0] & 7) != 0)
        {
          v325 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
          do
            v326 = __ldxr(v325);
          while (__stlxr(v326 - 2, v325));
        }
        if (ShadeInputValueWith > 0.0)
          REMaterialAssetBuilderSetFunctionConstant();
        if ((v500 & 7) != 0)
        {
          v327 = (unsigned int *)(v500 & 0xFFFFFFFFFFFFFFF8);
          do
            v328 = __ldxr(v327);
          while (__stlxr(v328 - 2, v327));
        }
        if ((v501 & 7) != 0)
        {
          v329 = (unsigned int *)(v501 & 0xFFFFFFFFFFFFFFF8);
          do
            v330 = __ldxr(v329);
          while (__stlxr(v330 - 2, v329));
        }
        if ((v502 & 7) != 0)
        {
          v331 = (unsigned int *)(v502 & 0xFFFFFFFFFFFFFFF8);
          do
            v332 = __ldxr(v331);
          while (__stlxr(v332 - 2, v331));
        }
        if ((v503 & 7) != 0)
        {
          v333 = (unsigned int *)(v503 & 0xFFFFFFFFFFFFFFF8);
          do
            v334 = __ldxr(v333);
          while (__stlxr(v334 - 2, v333));
        }
        if ((v504 & 7) != 0)
        {
          v335 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
          do
            v336 = __ldxr(v335);
          while (__stlxr(v336 - 2, v335));
        }
        if ((v505 & 7) != 0)
        {
          v337 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
          do
            v338 = __ldxr(v337);
          while (__stlxr(v338 - 2, v337));
        }
        if ((v506 & 7) != 0)
        {
          v339 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
          do
            v340 = __ldxr(v339);
          while (__stlxr(v340 - 2, v339));
        }
        if ((v507 & 7) != 0)
        {
          v341 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
          do
            v342 = __ldxr(v341);
          while (__stlxr(v342 - 2, v341));
        }
        if ((v508 & 7) != 0)
        {
          v343 = (unsigned int *)(v508 & 0xFFFFFFFFFFFFFFF8);
          do
            v344 = __ldxr(v343);
          while (__stlxr(v344 - 2, v343));
        }
        if ((v461 & 7) != 0)
        {
          v345 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v346 = __ldxr(v345);
          while (__stlxr(v346 - 2, v345));
        }
        if ((v468 & 7) != 0)
        {
          v347 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
          do
            v348 = __ldxr(v347);
          while (__stlxr(v348 - 2, v347));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "/__builtin/standardVertexColorMaterial");
        MEMORY[0x2348B26F8](&v508, &__p);
        if (SHIBYTE(__p.__x_[5]) < 0)
          operator delete(*(void **)__p.__x_);
        v349 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v83);
        MEMORY[0x2348B274C](&__p, "__materialAssetWithVertexColors");
        if ((*v349 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8)
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(v83))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v83);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__str);
        }
        if ((__p.__x_[0] & 7) != 0)
        {
          v350 = (unsigned int *)(*(_QWORD *)__p.__x_ & 0xFFFFFFFFFFFFFFF8);
          do
            v351 = __ldxr(v350);
          while (__stlxr(v351 - 2, v350));
        }
        v352 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](v473, "inputs:diffuseColor");
        if (((unint64_t)v473[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v353 = ((unint64_t)v473[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v353 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v352);
        if (*(char *)(v353 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)v353, *(_QWORD *)(v353 + 8));
        }
        else
        {
          v354 = *(_OWORD *)v353;
          *(_QWORD *)&__p.__x_[4] = *(_QWORD *)(v353 + 16);
          *(_OWORD *)__p.__x_ = v354;
        }
        *(_QWORD *)&__p.__x_[6] = "textureBaseColor";
        v355 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](v471, "inputs:metallic");
        if (((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v356 = ((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v356 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v355);
        if (*(char *)(v356 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[8], *(const std::string::value_type **)v356, *(_QWORD *)(v356 + 8));
        }
        else
        {
          v357 = *(_OWORD *)v356;
          *(_QWORD *)&__p.__x_[12] = *(_QWORD *)(v356 + 16);
          *(_OWORD *)&__p.__x_[8] = v357;
        }
        *(_QWORD *)&__p.__x_[14] = "textureMetallic";
        v358 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v467, "inputs:roughness");
        if ((v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v359 = (v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v359 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v358);
        if (*(char *)(v359 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[16], *(const std::string::value_type **)v359, *(_QWORD *)(v359 + 8));
        }
        else
        {
          v360 = *(_OWORD *)v359;
          *(_QWORD *)&__p.__x_[20] = *(_QWORD *)(v359 + 16);
          *(_OWORD *)&__p.__x_[16] = v360;
        }
        *(_QWORD *)&__p.__x_[22] = "textureRoughness";
        v361 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v457, "inputs:emissiveColor");
        if ((v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v362 = (v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v362 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v361);
        if (*(char *)(v362 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[24], *(const std::string::value_type **)v362, *(_QWORD *)(v362 + 8));
        }
        else
        {
          v363 = *(_OWORD *)v362;
          *(_QWORD *)&__p.__x_[28] = *(_QWORD *)(v362 + 16);
          *(_OWORD *)&__p.__x_[24] = v363;
        }
        *(_QWORD *)&__p.__x_[30] = "textureEmissive";
        v364 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v468, "inputs:specularColor");
        if ((v468 & 0xFFFFFFFFFFFFFFF8) != 0)
          v365 = (v468 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v365 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v364);
        if (*(char *)(v365 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[32], *(const std::string::value_type **)v365, *(_QWORD *)(v365 + 8));
        }
        else
        {
          v366 = *(_OWORD *)v365;
          *(_QWORD *)&__p.__x_[36] = *(_QWORD *)(v365 + 16);
          *(_OWORD *)&__p.__x_[32] = v366;
        }
        *(_QWORD *)&__p.__x_[38] = "textureSpecular";
        v367 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v461, "inputs:clearcoat");
        if ((v461 & 0xFFFFFFFFFFFFFFF8) != 0)
          v368 = (v461 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v368 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v367);
        if (*(char *)(v368 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[40], *(const std::string::value_type **)v368, *(_QWORD *)(v368 + 8));
        }
        else
        {
          v369 = *(_OWORD *)v368;
          *(_QWORD *)&__p.__x_[44] = *(_QWORD *)(v368 + 16);
          *(_OWORD *)&__p.__x_[40] = v369;
        }
        *(_QWORD *)&__p.__x_[46] = "textureClearcoat";
        v370 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v507, "inputs:clearcoatRoughness");
        if ((v507 & 0xFFFFFFFFFFFFFFF8) != 0)
          v371 = (v507 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v371 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v370);
        if (*(char *)(v371 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[48], *(const std::string::value_type **)v371, *(_QWORD *)(v371 + 8));
        }
        else
        {
          v372 = *(_OWORD *)v371;
          *(_QWORD *)&__p.__x_[52] = *(_QWORD *)(v371 + 16);
          *(_OWORD *)&__p.__x_[48] = v372;
        }
        *(_QWORD *)&__p.__x_[54] = "textureClearcoatRoughness";
        v373 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v506, "inputs:normal");
        if ((v506 & 0xFFFFFFFFFFFFFFF8) != 0)
          v374 = (v506 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v374 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v373);
        if (*(char *)(v374 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[56], *(const std::string::value_type **)v374, *(_QWORD *)(v374 + 8));
        }
        else
        {
          v375 = *(_OWORD *)v374;
          *(_QWORD *)&__p.__x_[60] = *(_QWORD *)(v374 + 16);
          *(_OWORD *)&__p.__x_[56] = v375;
        }
        *(_QWORD *)&__p.__x_[62] = "textureNormal";
        v376 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v505, "inputs:occlusion");
        if ((v505 & 0xFFFFFFFFFFFFFFF8) != 0)
          v377 = (v505 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v377 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v376);
        if (*(char *)(v377 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[64], *(const std::string::value_type **)v377, *(_QWORD *)(v377 + 8));
        }
        else
        {
          v378 = *(_OWORD *)v377;
          *(_QWORD *)&__p.__x_[68] = *(_QWORD *)(v377 + 16);
          *(_OWORD *)&__p.__x_[64] = v378;
        }
        *(_QWORD *)&__p.__x_[70] = "textureAmbientOcclusion";
        v379 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v504, "inputs:opacity");
        if ((v504 & 0xFFFFFFFFFFFFFFF8) != 0)
          v380 = (v504 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v380 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v379);
        if (*(char *)(v380 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__x_[72], *(const std::string::value_type **)v380, *(_QWORD *)(v380 + 8));
        }
        else
        {
          v381 = *(_OWORD *)v380;
          *(_QWORD *)&__p.__x_[76] = *(_QWORD *)(v380 + 16);
          *(_OWORD *)&__p.__x_[72] = v381;
        }
        *(_QWORD *)&__p.__x_[78] = "textureOpacity";
        std::map<std::string,char const*>::map[abi:ne180100]((uint64_t)__str, (const void **)&__p, 10);
        v382 = 40;
        do
        {
          if (SHIBYTE(v511.__r_.__value_.__r.__words[v382 + 2]) < 0)
            operator delete(*(void **)((char *)&v511.__r_.__value_.__l.__data_ + v382 * 8));
          v382 -= 4;
        }
        while (v382 * 8);
        if ((v504 & 7) != 0)
        {
          v383 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
          do
            v384 = __ldxr(v383);
          while (__stlxr(v384 - 2, v383));
        }
        if ((v505 & 7) != 0)
        {
          v385 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
          do
            v386 = __ldxr(v385);
          while (__stlxr(v386 - 2, v385));
        }
        if ((v506 & 7) != 0)
        {
          v387 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
          do
            v388 = __ldxr(v387);
          while (__stlxr(v388 - 2, v387));
        }
        if ((v507 & 7) != 0)
        {
          v389 = (unsigned int *)(v507 & 0xFFFFFFFFFFFFFFF8);
          do
            v390 = __ldxr(v389);
          while (__stlxr(v390 - 2, v389));
        }
        if ((v461 & 7) != 0)
        {
          v391 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
          do
            v392 = __ldxr(v391);
          while (__stlxr(v392 - 2, v391));
        }
        if ((v468 & 7) != 0)
        {
          v393 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
          do
            v394 = __ldxr(v393);
          while (__stlxr(v394 - 2, v393));
        }
        if ((v457.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v395 = (unsigned int *)(v457.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v396 = __ldxr(v395);
          while (__stlxr(v396 - 2, v395));
        }
        if ((v467.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v397 = (unsigned int *)(v467.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v398 = __ldxr(v397);
          while (__stlxr(v398 - 2, v397));
        }
        if (((uint64_t)v471[0] & 7) != 0)
        {
          v399 = (unsigned int *)((unint64_t)v471[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v400 = __ldxr(v399);
          while (__stlxr(v400 - 2, v399));
        }
        if (((uint64_t)v473[0] & 7) != 0)
        {
          v401 = (unsigned int *)((unint64_t)v473[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v402 = __ldxr(v401);
          while (__stlxr(v402 - 2, v401));
        }
        v403 = (uint64_t *)v482;
        if (v482 != &v483)
        {
          v404 = 0;
          v405 = 0;
          while (2)
          {
            v406 = v403[4];
            v468 = v406;
            if ((v406 & 7) != 0)
            {
              v407 = (unsigned int *)(v406 & 0xFFFFFFFFFFFFFFF8);
              do
                v408 = __ldxr(v407);
              while (__stxr(v408 + 2, v407));
              if ((v408 & 1) == 0)
                v468 &= 0xFFFFFFFFFFFFFFF8;
            }
            v409 = (pxrInternal__aapl__pxrReserved__::TfToken *)v403[5];
            v469 = (std::__shared_weak_count *)v409;
            if (v409)
              v409 = (pxrInternal__aapl__pxrReserved__::TfToken *)RERetain();
            if ((v468 & 0xFFFFFFFFFFFFFFF8) != 0)
              v410 = (const void **)((v468 & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              v410 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v409);
            v411 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)__str, v410);
            if (&__str[1] == (std::string **)v411)
              goto LABEL_826;
            memset(&__p, 0, 24);
            v461 = xmmword_230204CE0;
            v507 = 0;
            v506 = 0;
            v505 = 0;
            v460 = v468;
            if ((v468 & 7) != 0)
            {
              v412 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
              do
                v413 = __ldxr(v412);
              while (__stxr(v413 + 2, v412));
              if ((v413 & 1) == 0)
                v460 &= 0xFFFFFFFFFFFFFFF8;
            }
            if ((v460 & 7) != 0)
            {
              v414 = (unsigned int *)(v460 & 0xFFFFFFFFFFFFFFF8);
              do
                v415 = __ldxr(v414);
              while (__stlxr(v415 - 2, v414));
            }
            std::string::basic_string[abi:ne180100]<0>(v473, *(char **)(v411 + 56));
            REMaterialAssetBuilderSetTextureFromAsset();
            std::string::basic_string[abi:ne180100]<0>(&v467, *(char **)(v411 + 56));
            v416 = std::string::append(&v467, "_sampler");
            v417 = *(_OWORD *)&v416->__r_.__value_.__l.__data_;
            v472 = v416->__r_.__value_.__r.__words[2];
            *(_OWORD *)v471 = v417;
            v416->__r_.__value_.__l.__size_ = 0;
            v416->__r_.__value_.__r.__words[2] = 0;
            v416->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v467.__r_.__value_.__l.__data_);
            v459 = v506;
            if ((v506 & 7) != 0)
            {
              v418 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
              do
                v419 = __ldxr(v418);
              while (__stxr(v419 + 2, v418));
              if ((v419 & 1) == 0)
                v459 = (std::string::size_type)v418;
            }
            v458 = v505;
            if ((v505 & 7) != 0)
            {
              v420 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
              do
                v421 = __ldxr(v420);
              while (__stxr(v421 + 2, v420));
              if ((v421 & 1) == 0)
                v458 = (unint64_t)v420;
            }
            v422 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v458 & 7) != 0)
            {
              v423 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFFFF8);
              do
                v424 = __ldxr(v423);
              while (__stlxr(v424 - 2, v423));
            }
            if ((v459 & 7) != 0)
            {
              v425 = (unsigned int *)(v459 & 0xFFFFFFFFFFFFFFF8);
              do
                v426 = __ldxr(v425);
              while (__stlxr(v426 - 2, v425));
            }
            REMaterialAssetBuilderSetSampler();
            REMaterialAssetBuilderBindTextureToSampler();
            v427 = HIBYTE(__p.__x_[5]);
            if ((__p.__x_[5] & 0x80000000) == 0)
              v428 = HIBYTE(__p.__x_[5]);
            else
              v428 = *(_QWORD *)&__p.__x_[2];
            if (!v428)
              goto LABEL_800;
            v429 = HIBYTE(v485.__r_.__value_.__r.__words[2]);
            if ((v485.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v429 = v485.__r_.__value_.__l.__size_;
            if (v428 != v429)
              goto LABEL_797;
            if ((v485.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v430 = &v485;
            else
              v430 = (std::string *)v485.__r_.__value_.__r.__words[0];
            if ((__p.__x_[5] & 0x80000000) != 0)
            {
              v432 = memcmp(*(const void **)__p.__x_, v430, *(size_t *)&__p.__x_[2]) != 0;
              goto LABEL_799;
            }
            if (!HIBYTE(__p.__x_[5]))
              goto LABEL_800;
            v431 = &__p;
            while (LOBYTE(v431->__x_[0]) == v430->__r_.__value_.__s.__data_[0])
            {
              v431 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)((char *)v431 + 1);
              v430 = (std::string *)((char *)v430 + 1);
              if (!--v427)
                goto LABEL_800;
            }
LABEL_797:
            v432 = 1;
LABEL_799:
            if (!(v404 & 1 | !v432))
            {
              std::string::basic_string[abi:ne180100]<0>(&v457, "geometry.primvars:");
              if ((__p.__x_[5] & 0x80000000) == 0)
                v433 = (const std::string::value_type *)&__p;
              else
                v433 = *(const std::string::value_type **)__p.__x_;
              if ((__p.__x_[5] & 0x80000000) == 0)
                v434 = HIBYTE(__p.__x_[5]);
              else
                v434 = *(_QWORD *)&__p.__x_[2];
              v435 = std::string::append(&v457, v433, v434);
              v436 = *(_OWORD *)&v435->__r_.__value_.__l.__data_;
              v467.__r_.__value_.__r.__words[2] = v435->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v467.__r_.__value_.__l.__data_ = v436;
              v435->__r_.__value_.__l.__size_ = 0;
              v435->__r_.__value_.__r.__words[2] = 0;
              v435->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v457.__r_.__value_.__l.__data_);
              REMaterialAssetBuilderSetBufferFromBinding();
              REMaterialAssetBuilderSetFloat4();
              REMaterialAssetBuilderSetFloat2();
              REMaterialAssetBuilderSetUVIndexForTexture();
              if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v467.__r_.__value_.__l.__data_);
              v404 = 1;
            }
            else
            {
LABEL_800:
              if ((v405 & 1) == 0)
              {
                REMaterialAssetBuilderSetFloat4();
                REMaterialAssetBuilderSetFloat2();
              }
              REMaterialAssetBuilderSetUVIndexForTexture();
              v405 = 1;
            }

            if (SHIBYTE(v472) < 0)
              operator delete(v471[0]);
            if (SHIBYTE(v474) < 0)
              operator delete(v473[0]);
            if ((v505 & 7) != 0)
            {
              v437 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
              do
                v438 = __ldxr(v437);
              while (__stlxr(v438 - 2, v437));
            }
            if ((v506 & 7) != 0)
            {
              v439 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
              do
                v440 = __ldxr(v439);
              while (__stlxr(v440 - 2, v439));
            }
            if (SHIBYTE(__p.__x_[5]) < 0)
              operator delete(*(void **)__p.__x_);
LABEL_826:
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v469);
            if ((v468 & 7) != 0)
            {
              v441 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
              do
                v442 = __ldxr(v441);
              while (__stlxr(v442 - 2, v441));
            }
            v443 = (uint64_t *)v403[1];
            if (v443)
            {
              do
              {
                v444 = (uint64_t **)v443;
                v443 = (uint64_t *)*v443;
              }
              while (v443);
            }
            else
            {
              do
              {
                v444 = (uint64_t **)v403[2];
                _ZF = *v444 == v403;
                v403 = (uint64_t *)v444;
              }
              while (!_ZF);
            }
            v403 = (uint64_t *)v444;
            if (v444 == &v483)
              break;
            continue;
          }
        }
        REMaterialAssetBuilderSetFunctionConstant();
        v473[0] = 0;
        *(_QWORD *)__p.__x_ = REAssetManagerMaterialAssetBuilderBuild();
        if (*(_QWORD *)__p.__x_)
        {
          RERetain();
          v445 = *(void **)__p.__x_;
        }
        else
        {
          v445 = 0;
        }
        v446 = v473[0];
        if (v473[0] != v445)
        {
          v473[0] = v445;
          *(_QWORD *)__p.__x_ = v446;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        if (v473[0])
          RERelease();
        realityio::ECSAction::queueForDeferredAssetLoad(a1);
        *(_QWORD *)&__p.__x_[2] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy((uint64_t *)&__p, (uint64_t *)v473);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(v509, &__p);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v509);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v473);
        std::__tree<std::string>::destroy((uint64_t)__str, (char *)__str[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v508);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v509);
      }
      realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v462);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v509);
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v463);
    if ((v475[23] & 0x80000000) != 0)
      operator delete(*(void **)v475);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v464);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v477);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v479, v480);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(v483);
  if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v485.__r_.__value_.__l.__data_);
  if ((v486 & 7) != 0)
  {
    v447 = (unsigned int *)(v486 & 0xFFFFFFFFFFFFFFF8);
    do
      v448 = __ldxr(v447);
    while (__stlxr(v448 - 2, v447));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v487, v488[0]);
LABEL_853:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v509);
}

void sub_2300C0900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,realityio::TextureBuilder::TextureDataT *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  unsigned int *v62;
  unsigned int v63;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2E0]);
  if ((STACK[0x220] & 7) != 0)
  {
    v62 = (unsigned int *)(STACK[0x220] & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a61);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void `anonymous namespace'::uvNameAndTransformForTextureInput(uint64_t a1, uint64_t *a2, uint64_t a3, _OWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v24;
  uint64_t EmptyString;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned int *v81;
  unsigned int v82;
  float v83;
  float *v84;
  uint64_t v85;
  float v86;
  __float2 v87;
  float v92;
  float v93;
  float v94;
  __int128 v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t *v107;
  _OWORD *v108;
  _QWORD *v109;
  _BYTE v110[32];
  uint64_t *v111;
  _QWORD *v112[2];
  __int128 v113;
  __int128 v114;
  int v115;
  __int128 v116;
  __int128 v117;
  int v118;
  char v119[36];
  __int128 v120;
  __int128 v121;
  int v122;
  __int128 v123;
  __int128 v124;
  int v125;
  __int128 v126;
  __int128 v127;
  int v128;
  char v129[24];
  uint64_t v130;
  int v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2);
  if ((_QWORD *)(a1 + 8) == v13
    || (v14 = v13,
        v15 = v13 + 5,
        !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 5))))
  {
    JUMPOUT(0x2348B4AD4);
  }
  v16 = v14[6];
  if ((v16 & 4) != 0)
    v17 = (*(uint64_t (**)(uint64_t *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
  else
    v17 = *v15;
  v108 = a4;
  v109 = a7;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v111, v17);
  v18 = v111;
  if (v111 != (uint64_t *)v112)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v24 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v141, v18 + 4);
      if ((v141 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (v141 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v24);
      v26 = *(unsigned __int8 *)(EmptyString + 23);
      v27 = (char)v26;
      if ((v26 & 0x80u) != 0)
        v26 = *(_QWORD *)(EmptyString + 8);
      if (v26 >= 8)
      {
        if (v27 < 0)
          EmptyString = *(_QWORD *)EmptyString;
        if (!strncmp((const char *)EmptyString, "outputs:", 8uLL)
          && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v142))
        {
          if ((v143 & 4) != 0)
            v28 = (*(uint64_t (**)(uint64_t *))((v143 & 0xFFFFFFFFFFFFFFF8) + 168))(&v142);
          else
            v28 = v142;
          MEMORY[0x2348B274C](&v138, "inputs:wrapS");
          v29 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v138);
          v30 = v29;
          if ((v138 & 7) != 0)
          {
            v31 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          v33 = (_QWORD *)(v28 + 8);
          if ((_QWORD *)(v28 + 8) != v29)
          {
            v34 = v29 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v29 + 5)))
            {
              v35 = v30[6];
              if ((v35 & 4) != 0)
                v34 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v30 + 5);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(a6, v34);
            }
          }
          MEMORY[0x2348B274C](&v138, "inputs:wrapT");
          v36 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v138);
          v37 = v36;
          if ((v138 & 7) != 0)
          {
            v38 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
            do
              v39 = __ldxr(v38);
            while (__stlxr(v39 - 2, v38));
          }
          if (v33 != v36)
          {
            v40 = v36 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v36 + 5)))
            {
              v41 = v37[6];
              if ((v41 & 4) != 0)
                v40 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(v37 + 5);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(v109, v40);
            }
          }
          MEMORY[0x2348B274C](&v138, "inputs:st");
          v42 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v28, (uint64_t *)&v138);
          v43 = v42;
          if ((v138 & 7) != 0)
          {
            v44 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          if (v33 != v42)
          {
            v46 = v42 + 5;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v42 + 5)))
            {
              v47 = v43[6];
              if ((v47 & 4) != 0)
                v48 = (*(uint64_t (**)(_QWORD *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v43 + 5);
              else
                v48 = *v46;
              MEMORY[0x2348B274C](&v138, "outputs:result");
              v49 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v48, (uint64_t *)&v138);
              v50 = v49;
              if ((v138 & 7) != 0)
              {
                v51 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
                do
                  v52 = __ldxr(v51);
                while (__stlxr(v52 - 2, v51));
              }
              if ((_QWORD *)(v48 + 8) != v49)
              {
                v53 = v49 + 5;
                if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v49 + 5)))
                {
                  v54 = v50[6];
                  if ((v54 & 4) != 0)
                    v55 = (*(uint64_t (**)(_QWORD *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v50 + 5);
                  else
                    v55 = *v53;
                  MEMORY[0x2348B274C](&v138, "inputs:varname");
                  v56 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v55, (uint64_t *)&v138);
                  v57 = v56;
                  if ((v138 & 7) != 0)
                  {
                    v58 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v59 = __ldxr(v58);
                    while (__stlxr(v59 - 2, v58));
                  }
                  v60 = (_QWORD *)(v55 + 8);
                  if ((_QWORD *)(v55 + 8) != v56)
                  {
                    v61 = v56 + 5;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v56 + 5)))
                    {
                      v62 = v57[6];
                      if ((v62 & 4) != 0)
                        v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(v57 + 5);
                      v63 = *v61 & 0xFFFFFFFFFFFFFFF8;
                      if (v63)
                      {
                        v64 = (const char *)(v63 + 16);
                        if (*(char *)(v63 + 39) < 0)
                          v64 = *(const char **)v64;
                      }
                      else
                      {
                        v64 = "";
                      }
                      MEMORY[0x2348B4AD4](a3, v64);
                    }
                  }
                  MEMORY[0x2348B274C](&v138, "inputs:scale");
                  v65 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v55, (uint64_t *)&v138);
                  v66 = v65;
                  if ((v138 & 7) != 0)
                  {
                    v67 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v68 = __ldxr(v67);
                    while (__stlxr(v68 - 2, v67));
                  }
                  v69 = _D8;
                  if (v60 != v65)
                  {
                    v70 = v65 + 5;
                    v69 = _D8;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v65 + 5)))
                    {
                      v71 = v66[6];
                      if ((v71 & 4) != 0)
                        v70 = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(v66 + 5);
                      v69 = *v70;
                    }
                  }
                  MEMORY[0x2348B274C](&v138, "inputs:translation");
                  v72 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v55, (uint64_t *)&v138);
                  v73 = v72;
                  if ((v138 & 7) != 0)
                  {
                    v74 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v75 = __ldxr(v74);
                    while (__stlxr(v75 - 2, v74));
                  }
                  v76 = 0;
                  if (v60 != v72)
                  {
                    v77 = v72 + 5;
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v72 + 5)))
                    {
                      v78 = v73[6];
                      if ((v78 & 4) != 0)
                        v77 = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(v73 + 5);
                      v76 = *v77;
                    }
                  }
                  MEMORY[0x2348B274C](&v138, "inputs:rotation");
                  v79 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v55, (uint64_t *)&v138);
                  v80 = v79;
                  if ((v138 & 7) != 0)
                  {
                    v81 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v82 = __ldxr(v81);
                    while (__stlxr(v82 - 2, v81));
                  }
                  v83 = 0.0;
                  if (v60 != v79)
                  {
                    v84 = (float *)(v79 + 5);
                    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v79 + 5)))
                    {
                      v85 = v80[6];
                      if ((v85 & 4) != 0)
                        v84 = (float *)(*(uint64_t (**)(_QWORD *))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(v80 + 5);
                      v83 = *v84;
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v119, 1.0);
                  *(_QWORD *)&v138 = v69;
                  DWORD2(v138) = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale();
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v116, 1.0);
                  v86 = v83 / 180.0 * 3.14159265;
                  v87 = __sincosf_stret(v86 * 0.5);
                  _Q0 = vmulq_n_f32((float32x4_t)xmmword_230201510, v87.__sinval);
                  _S2 = _Q0.i32[1];
                  _S4 = _Q0.i32[2];
                  __asm { FMLS            S3, S4, V0.S[2] }
                  v92 = vmlas_n_f32(vmuls_lane_f32(v87.__cosval, _Q0, 2), _Q0.f32[1], _Q0.f32[0]);
                  v93 = vmlas_n_f32(-(float)(v87.__cosval * _Q0.f32[1]), _Q0.f32[2], _Q0.f32[0]);
                  v94 = vmlas_n_f32(-(float)(v87.__cosval * _Q0.f32[2]), _Q0.f32[1], _Q0.f32[0]);
                  __asm
                  {
                    FMLA            S5, S2, V0.S[1]
                    FMLS            S5, S0, V0.S[0]
                    FMLA            S18, S4, V0.S[1]
                    FMLA            S7, S0, V0.S[2]
                    FMLA            S19, S4, V0.S[1]
                    FMLA            S1, S4, V0.S[2]
                  }
                  *(float *)&v116 = _S3 + (float)(v87.__cosval * v87.__cosval);
                  *((float *)&v116 + 1) = v92 + v92;
                  __asm { FMLS            S1, S0, V0.S[0] }
                  *((float *)&v116 + 2) = v93 + v93;
                  *((float *)&v116 + 3) = v94 + v94;
                  LODWORD(v117) = _S5;
                  *((float *)&v117 + 1) = _S18 + _S18;
                  __asm { FMLS            S1, S2, V0.S[1] }
                  *((float *)&v117 + 2) = _S7 + _S7;
                  *((float *)&v117 + 3) = _S19 + _S19;
                  v118 = _S1;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v113, 1.0);
                  *((_QWORD *)&v114 + 1) = v76;
                  v138 = v113;
                  v139 = v114;
                  v140 = v115;
                  *((float *)&v139 + 3) = -*((float *)&v76 + 1);
                  v135 = v116;
                  v136 = v117;
                  v137 = v118;
                  *((float *)&v135 + 1) = -*((float *)&v116 + 1);
                  *((float *)&v135 + 3) = -*((float *)&v116 + 3);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v132, 1.0);
                  *((_QWORD *)&v133 + 1) = 0xBF80000000000000;
                  v134 = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v129, 1.0);
                  v130 = 0x3F80000000000000;
                  v131 = 1065353216;
                  v120 = v132;
                  v121 = v133;
                  v122 = v134;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  v123 = v120;
                  v124 = v121;
                  v125 = v122;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  v126 = v123;
                  v127 = v124;
                  v128 = v125;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_OWORD *)v110 = v126;
                  *(_OWORD *)&v110[16] = v127;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_QWORD *)&v103 = *(_QWORD *)v110;
                  *((_QWORD *)&v103 + 1) = *(_QWORD *)&v110[12];
                  *v108 = v103;
                  *a5 = *(_QWORD *)&v110[24];
                }
              }
            }
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v142);
      if ((v141 & 7) != 0)
      {
        v104 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      v106 = (uint64_t *)v18[1];
      if (v106)
      {
        do
        {
          v107 = v106;
          v106 = (uint64_t *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          v107 = (uint64_t *)v18[2];
          _ZF = *v107 == (_QWORD)v18;
          v18 = v107;
        }
        while (!_ZF);
      }
      v18 = v107;
    }
    while (v107 != (uint64_t *)v112);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v111, v112[0]);
}

void sub_2300C280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v23);
  v26 = *(_QWORD *)(v24 - 192);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

id `anonymous namespace'::samplerForTextureAttribute(unint64_t *a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t SamplerAddressMode;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v17;
  unint64_t v18;

  REMaterialCreateDefaultSamplerDescriptor();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *a1;
  v18 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
    {
      v18 = v5 & 0xFFFFFFFFFFFFFFF8;
      v5 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((v5 & 7) != 0)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *a2;
  v17 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
    {
      v17 = v10 & 0xFFFFFFFFFFFFFFF8;
      v10 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  objc_msgSend(v4, "setTAddressMode:", SamplerAddressMode, v17, v18);
  if ((v10 & 7) != 0)
  {
    v14 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  return v4;
}

void sub_2300C2B04(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;

  if ((v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }

  _Unwind_Resume(a1);
}

void `anonymous namespace'::getTextureFromConnection(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _DWORD *a5, _BYTE *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD **v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  *a6 = 0;
  if ((_QWORD *)(a2 + 8) != v11)
  {
    v12 = v11;
    v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5);
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5)))
    {
      v14 = v12[6];
      if ((v14 & 4) != 0)
        v15 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v13);
      else
        v15 = *(_QWORD *)v13;
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100](&v30, v15);
      MEMORY[0x2348B274C](&v29, "__value");
      v16 = v31;
      if (!v31)
        goto LABEL_15;
      v17 = &v31;
      do
      {
        v18 = v17;
        v19 = v16 + 4;
        v20 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v32, v16 + 4, &v29);
        v21 = v16 + 1;
        if (!v20)
        {
          v21 = v16;
          v17 = (_QWORD **)v16;
        }
        v16 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v17 == &v31
        || (!v20 ? (v22 = v19) : (v22 = (uint64_t *)(v18 + 4)),
            std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&v32, &v29, v22)))
      {
LABEL_15:
        v17 = &v31;
      }
      if ((v29 & 7) != 0)
      {
        v23 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if (&v31 == v17)
      {
        if (*a1)
        {
LABEL_30:
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v30, v31);
          return;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1);
      }
      else
      {
        *a6 = 1;
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v17 + 5)))
        {
          v25 = (unint64_t)v17[6];
          if ((v25 & 4) != 0)
            v26 = (uint64_t *)(*(uint64_t (**)(_QWORD **))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v17 + 5);
          else
            v26 = v17[5];
          v27 = *v26;
          *a1 = v27;
          if (v27)
            RERetain();
          goto LABEL_30;
        }
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v30, v31);
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(v13))
    {
      v28 = v12[6];
      if ((v28 & 4) != 0)
        v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v13);
      *a5 = *(_DWORD *)v13;
    }
  }
  *a1 = 0;
}

void sub_2300C2D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a9 & 7) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  if ((*a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return a1;
}

uint64_t `anonymous namespace'::getTextureFromTokValMapAtValue(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = (_QWORD *)result;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
LABEL_16:
    *v3 = 0;
    return result;
  }
  while (1)
  {
    v8 = v5 + 5;
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5)))
      break;
    v9 = v5[6];
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(_QWORD *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 5);
    else
      v10 = *v8;
    if (*v3)
      return result;
    result = (uint64_t)realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
LABEL_8:
    v11 = (_QWORD *)v5[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v5[2];
        v13 = *v12 == (_QWORD)v5;
        v5 = v12;
      }
      while (!v13);
    }
    v5 = v12;
    if (v12 == v4)
      goto LABEL_16;
  }
  result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5));
  if (!(_DWORD)result)
    goto LABEL_8;
  MEMORY[0x2348B274C](&v25, "__value");
  v14 = v5[4] & 0xFFFFFFFFFFFFFFF8;
  v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0)
  {
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((unsigned int *)v14 == v15)
  {
    MEMORY[0x2348B274C](&v25, "__sourcePrimPath");
    v19 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a2, &v25);
    v20 = v19;
    if ((v25 & 7) != 0)
    {
      v21 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v4 != v19)
    {
      v23 = v19 + 5;
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 5)))
      {
        v24 = v20[6];
        if ((v24 & 4) != 0)
          v23 = (_DWORD *)(*(uint64_t (**)(_QWORD *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v20 + 5);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3, v23);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 4, v23 + 1);
      }
    }
  }
  v17 = v5[6];
  if ((v17 & 4) != 0)
    v18 = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 5);
  else
    v18 = (uint64_t *)*v8;
  result = *v18;
  *v3 = result;
  if (result)
    return RERetain();
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[4] = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 10, (_DWORD *)(a2 + 8));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 11, (_DWORD *)(a2 + 12));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

void `anonymous namespace'::getTextureInfoFromConnection(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, int32x4_t *a5, int32x4_t *a6, int32x4_t *a7, _QWORD *a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t EmptyString;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  __int128 *v46;
  __int128 v47;
  int32x4_t *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int *v55;
  unsigned int v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  __int128 *v60;
  unsigned int *v61;
  unsigned int v62;
  int v63;
  unsigned int *v64;
  unsigned int v65;
  __int128 **v66;
  unsigned int *v67;
  unsigned int v68;
  _QWORD *v69;
  _QWORD *v70;
  unsigned int *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD **v74;
  uint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v78;
  pxrInternal__aapl__pxrReserved__::TfToken *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  pxrInternal__aapl__pxrReserved__::TfToken *v83;
  uint64_t v84;
  size_t v85;
  void *p_p;
  const void *v87;
  _QWORD *v88;
  unsigned int *v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  size_t v93;
  void *v94;
  const void *v95;
  _QWORD *v96;
  unsigned int *v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  int32x4_t *v102;
  int32x4_t v103;
  uint64_t v109;
  void *__p;
  _QWORD *v111;
  char v112;
  uint64_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  *a5 = (int32x4_t)xmmword_230204CF0;
  __asm { FMOV            V0.4S, #1.0 }
  v103 = _Q0;
  *a6 = _Q0;
  a7->i64[0] = 0;
  a7->i64[1] = 0;
  if ((*a8 & 7) != 0)
  {
    v18 = (unsigned int *)(*a8 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  *a8 = 0;
  *a1 = 0;
  v20 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  v21 = v20;
  *a9 = 0;
  *a10 = 0;
  v22 = (_QWORD *)(a2 + 8);
  if ((_QWORD *)(a2 + 8) != v20)
  {
    v23 = v20 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 + 5)))
    {
      v24 = v21[6];
      if ((v24 & 4) != 0)
        v25 = (*(uint64_t (**)(_QWORD *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v21 + 5);
      else
        v25 = *v23;
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&__p, v25);
      v26 = __p;
      if (__p == &v111)
      {
LABEL_106:
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&__p, v111);
        return;
      }
      while (1)
      {
        v27 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v116, v26 + 4);
        if ((v116 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (v116 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v27);
        v29 = *(unsigned __int8 *)(EmptyString + 23);
        v30 = (char)v29;
        if ((v29 & 0x80u) != 0)
          v29 = *(_QWORD *)(EmptyString + 8);
        if (v29 < 8)
          goto LABEL_18;
        if (v30 < 0)
          EmptyString = *(_QWORD *)EmptyString;
        if (strncmp((const char *)EmptyString, "outputs:", 8uLL))
        {
LABEL_18:
          MEMORY[0x2348B274C](&v113, "__value");
          v31 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          if ((v116 & 0xFFFFFFFFFFFFFFF8) == (v113 & 0xFFFFFFFFFFFFFFF8))
          {
            v33 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v117);
            if ((v113 & 7) != 0)
            {
              v34 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
              do
                v35 = __ldxr(v34);
              while (__stlxr(v35 - 2, v34));
            }
            if (v33)
            {
              if ((v118 & 4) != 0)
                v36 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v118 & 0xFFFFFFFFFFFFFFF8) + 168))(&v117);
              else
                v36 = (uint64_t *)v117;
              realityio::WrappedRERef<REAsset *>::operator=(a1, v36);
            }
          }
          else if ((v113 & 7) != 0)
          {
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          goto LABEL_90;
        }
        *a9 = 1;
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, &v116);
        v37 = (_QWORD *)((v118 & 4) != 0
                       ? (*(uint64_t (**)(uint64_t *))((v118 & 0xFFFFFFFFFFFFFFF8) + 168))(&v117)
                       : v117);
        v40 = (_QWORD *)*v37;
        v38 = v37 + 1;
        v39 = v40;
        if (v40 != v38)
          break;
LABEL_90:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v117);
        if ((v116 & 7) != 0)
        {
          v71 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
          do
            v72 = __ldxr(v71);
          while (__stlxr(v72 - 2, v71));
        }
        v73 = (_QWORD *)v26[1];
        if (v73)
        {
          do
          {
            v74 = (_QWORD **)v73;
            v73 = (_QWORD *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            v74 = (_QWORD **)v26[2];
            _ZF = *v74 == v26;
            v26 = v74;
          }
          while (!_ZF);
        }
        v26 = v74;
        if (v74 == &v111)
          goto LABEL_106;
      }
      while (1)
      {
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v113, v39 + 4);
        MEMORY[0x2348B274C](&v109, "inputs:scale");
        v41 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        if ((v113 & 0xFFFFFFFFFFFFFFF8) == (v109 & 0xFFFFFFFFFFFFFFF8))
        {
          v43 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
          if ((v109 & 7) != 0)
          {
            v44 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          if (v43)
          {
            if ((v115 & 4) != 0)
              v46 = (__int128 *)(*(uint64_t (**)(__int128 **))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(&v114);
            else
              v46 = v114;
            v47 = *v46;
            v48 = a6;
            goto LABEL_65;
          }
        }
        else if ((v109 & 7) != 0)
        {
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        MEMORY[0x2348B274C](&v109, "inputs:fallback");
        v49 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        if ((v113 & 0xFFFFFFFFFFFFFFF8) == (v109 & 0xFFFFFFFFFFFFFFF8))
        {
          v51 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
          if ((v109 & 7) != 0)
          {
            v52 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v53 = __ldxr(v52);
            while (__stlxr(v53 - 2, v52));
          }
          if (v51)
          {
            if ((v115 & 4) != 0)
              v54 = (__int128 *)(*(uint64_t (**)(__int128 **))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(&v114);
            else
              v54 = v114;
            v47 = *v54;
            v48 = a5;
            goto LABEL_65;
          }
        }
        else if ((v109 & 7) != 0)
        {
          do
            v50 = __ldxr(v49);
          while (__stlxr(v50 - 2, v49));
        }
        MEMORY[0x2348B274C](&v109, "inputs:bias");
        v55 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        if ((v113 & 0xFFFFFFFFFFFFFFF8) != (v109 & 0xFFFFFFFFFFFFFFF8))
        {
          if ((v109 & 7) != 0)
          {
            do
              v56 = __ldxr(v55);
            while (__stlxr(v56 - 2, v55));
          }
LABEL_66:
          MEMORY[0x2348B274C](&v109, "inputs:sourceColorSpace");
          v61 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
          if ((v113 & 0xFFFFFFFFFFFFFFF8) == (v109 & 0xFFFFFFFFFFFFFFF8))
          {
            v63 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
            if ((v109 & 7) != 0)
            {
              v64 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
              do
                v65 = __ldxr(v64);
              while (__stlxr(v65 - 2, v64));
            }
            if (v63)
            {
              v66 = &v114;
              if ((v115 & 4) != 0)
                v66 = (__int128 **)(*(uint64_t (**)(__int128 **, __int128 **))((v115 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 168))(&v114, &v114);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v66);
            }
          }
          else if ((v109 & 7) != 0)
          {
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          goto LABEL_77;
        }
        v57 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
        if ((v109 & 7) != 0)
        {
          v58 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
          do
            v59 = __ldxr(v58);
          while (__stlxr(v59 - 2, v58));
        }
        if (!v57)
          goto LABEL_66;
        if ((v115 & 4) != 0)
          v60 = (__int128 *)(*(uint64_t (**)(__int128 **))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(&v114);
        else
          v60 = v114;
        v47 = *v60;
        v48 = a7;
LABEL_65:
        *v48 = (int32x4_t)v47;
LABEL_77:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v114);
        if ((v113 & 7) != 0)
        {
          v67 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          do
            v68 = __ldxr(v67);
          while (__stlxr(v68 - 2, v67));
        }
        v69 = (_QWORD *)v39[1];
        if (v69)
        {
          do
          {
            v70 = v69;
            v69 = (_QWORD *)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            v70 = (_QWORD *)v39[2];
            _ZF = *v70 == (_QWORD)v39;
            v39 = v70;
          }
          while (!_ZF);
        }
        v39 = v70;
        if (v70 == v38)
          goto LABEL_90;
      }
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v21 + 5)))
    {
      *a10 = 1;
      v75 = v21[6];
      if ((v75 & 4) != 0)
        v23 = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(v21 + 5);
      v76 = v103;
      v76.i32[0] = *(_DWORD *)v23;
      v77 = vzip1q_s32(v76, v76);
      v77.i32[2] = *(_DWORD *)v23;
      *a5 = v77;
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v21 + 5)))
    {
      *a10 = 1;
      v78 = v21[6];
      if ((v78 & 4) != 0)
        v79 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(_QWORD *))((v78 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 168))(v21 + 5);
      else
        v79 = (pxrInternal__aapl__pxrReserved__::TfToken *)*v23;
      v80 = *(_QWORD *)v79;
      v81 = *((_DWORD *)v79 + 2);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
        v82 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v82 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v79);
      if (*(char *)(v82 + 23) >= 0)
        v85 = *(unsigned __int8 *)(v82 + 23);
      else
        v85 = *(_QWORD *)(v82 + 8);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v85 + 12);
      if (v112 < 0)
        p_p = __p;
      if (v85)
      {
        if (*(char *)(v82 + 23) >= 0)
          v87 = (const void *)v82;
        else
          v87 = *(const void **)v82;
        memmove(p_p, v87, v85);
      }
      strcpy((char *)p_p + v85, "__colorSpace");
      MEMORY[0x2348B2764](&v116, &__p);
      v88 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v116);
      if ((v116 & 7) != 0)
      {
        v89 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if (v112 < 0)
        operator delete(__p);
      if (v22 != v88)
      {
        v91 = v88 + 5;
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v88 + 5)))
        {
          v92 = v88[6];
          if ((v92 & 4) != 0)
            v91 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(v88 + 5);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v91);
        }
      }
      a5->i64[0] = v80;
      a5->i32[2] = v81;
      a5->i32[3] = 1065353216;
    }
    else
    {
      v83 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v21 + 5));
      if ((_DWORD)v83)
      {
        *a10 = 1;
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
          v84 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v84 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v83);
        if (*(char *)(v84 + 23) >= 0)
          v93 = *(unsigned __int8 *)(v84 + 23);
        else
          v93 = *(_QWORD *)(v84 + 8);
        v94 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v93 + 12);
        if (v112 < 0)
          v94 = __p;
        if (v93)
        {
          if (*(char *)(v84 + 23) >= 0)
            v95 = (const void *)v84;
          else
            v95 = *(const void **)v84;
          memmove(v94, v95, v93);
        }
        strcpy((char *)v94 + v93, "__colorSpace");
        MEMORY[0x2348B2764](&v116, &__p);
        v96 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, &v116);
        if ((v116 & 7) != 0)
        {
          v97 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
          do
            v98 = __ldxr(v97);
          while (__stlxr(v98 - 2, v97));
        }
        if (v112 < 0)
          operator delete(__p);
        if (v22 != v96)
        {
          v99 = v96 + 5;
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)(v96 + 5)))
          {
            v100 = v96[6];
            if ((v100 & 4) != 0)
              v99 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(v96 + 5);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v99);
          }
        }
        v101 = v21[6];
        if ((v101 & 4) != 0)
          v102 = (int32x4_t *)(*(uint64_t (**)(_QWORD *))((v101 & 0xFFFFFFFFFFFFFFF8) + 168))(v21 + 5);
        else
          v102 = (int32x4_t *)*v23;
        *a5 = *v102;
      }
    }
  }
}

void sub_2300C3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v27);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::setFloatMaterialConstantScale(float a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  float v17;

  v17 = a1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v10 = 0;
  REMaterialAssetBuilderSetFloat();
  result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v9);
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

void sub_2300C3DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a12);
  if ((a14 & 7) != 0)
  {
    v16 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  if ((a15 & 7) != 0)
  {
    v18 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(a1);
}

float `anonymous namespace'::getShadeInputValueWithFallback<float>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2);
  if ((_QWORD *)(a1 + 8) != v5)
  {
    v6 = v5;
    v7 = v5 + 5;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5)))
    {
      v8 = v6[6];
      if ((v8 & 4) != 0)
        a3 = (*(uint64_t (**)(_QWORD *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      else
        a3 = (uint64_t)v7;
    }
  }
  return *(float *)a3;
}

void `anonymous namespace'::getShadeInputColor3WithFallback(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;

  *(_QWORD *)&v7 = *(_QWORD *)a4;
  DWORD2(v7) = *(_DWORD *)(a4 + 8);
  HIDWORD(v7) = 1.0;
  v19 = v7;
  v8 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  if ((_QWORD *)(a2 + 8) != v8
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5)))
  {
    v9 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
    v21 = v19;
    if ((_QWORD *)(a2 + 8) != v9)
    {
      v10 = v9;
      v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 5)))
      {
        v12 = v10[6];
        if ((v12 & 4) != 0)
          v13 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 168))(v11);
        else
          v13 = *(_QWORD *)v11;
        *(_QWORD *)&v14 = *(_QWORD *)v13;
        DWORD2(v14) = *(_DWORD *)(v13 + 8);
        HIDWORD(v14) = 1.0;
LABEL_13:
        v21 = v14;
        goto LABEL_14;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(v11))
      {
        v17 = v10[6];
        if ((v17 & 4) != 0)
          v18 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 168))(v11);
        else
          v18 = *(_QWORD *)v11;
        *(_QWORD *)&v14 = *(_QWORD *)v18;
        DWORD2(v14) = *(_DWORD *)(v18 + 8);
        goto LABEL_13;
      }
    }
LABEL_14:
    v20 = 0;
    v16 = v21;
    v15 = v20;
    goto LABEL_15;
  }
  v15 = 0;
  v16 = v19;
LABEL_15:
  *(_OWORD *)a1 = v16;
  *(_BYTE *)(a1 + 16) = v15;
}

void `anonymous namespace'::assignGamutFromValueAndGamut(pxrInternal__aapl__pxrReserved__::TfToken *a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  const char *v8;
  CFStringRef v9;
  const __CFString *v10;
  CGColorSpace *v11;
  CGColorSpace *v12;
  float64x2_t v13;
  CGColorRef v14;
  unsigned int *v15;
  unsigned int v16;
  _OWORD v17[2];

  v3 = a3;
  *a2 = 0;
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v3 = a3 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v3)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (v3 & 0xFFFFFFFFFFFFFFF8) + 16
       : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    v8 = *(char *)(v7 + 23) >= 0 ? (const char *)v7 : *(const char **)v7;
    v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
    v10 = (const __CFString *)MEMORY[0x2348B142C]();
    CFRelease(v9);
    if (v10)
    {
      v11 = CGColorSpaceCreateWithName(v10);
      v12 = v11;
      if (v11)
      {
        v13 = vcvt_hight_f64_f32(*(float32x4_t *)a1);
        v17[0] = vcvtq_f64_f32(*(float32x2_t *)a1);
        v17[1] = v13;
        v14 = CGColorCreate(v11, (const CGFloat *)v17);
        CFRelease(v12);
        RECGColorToColorGamut();
        CFRelease(v14);
      }
    }
  }
  if ((v3 & 7) != 0)
  {
    v15 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
}

void sub_2300C40E0(_Unwind_Exception *a1)
{
  char v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getTextureInfoOrDefaultValueFromConnection<float>(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _OWORD *a5, _OWORD *a6, _QWORD *a7, _QWORD *a8, _DWORD *a9, int *a10, _BYTE *a11)
{
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t EmptyString;
  unint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t **v59;
  uint64_t v60;
  int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  unsigned int *v65;
  unsigned int v66;
  int v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t **v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t *v79;
  _QWORD *v80[2];
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  *a5 = xmmword_230204CF0;
  __asm { FMOV            V0.4S, #1.0 }
  *a6 = _Q0;
  *a7 = 0;
  a7[1] = 0;
  if ((*a8 & 7) != 0)
  {
    v22 = (unsigned int *)(*a8 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  *a8 = 0;
  *a1 = 0;
  v24 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a2, a3);
  v25 = v24;
  *a11 = 0;
  if ((_QWORD *)(a2 + 8) == v24)
    goto LABEL_103;
  v26 = (int *)(v24 + 5);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v24 + 5)))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + 5)))
    {
      v75 = v25[6];
      if ((v75 & 4) != 0)
        v26 = (int *)(*(uint64_t (**)(_QWORD *))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(v25 + 5);
      v76 = *v26;
      goto LABEL_104;
    }
LABEL_103:
    v76 = *a10;
LABEL_104:
    *a9 = v76;
    return;
  }
  *a11 = 1;
  v27 = v25[6];
  v77 = a1;
  if ((v27 & 4) != 0)
    v28 = (*(uint64_t (**)(_QWORD *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v25 + 5);
  else
    v28 = *(_QWORD *)v26;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v79, v28);
  v29 = v79;
  if (v79 != (uint64_t *)v80)
  {
    while (1)
    {
      v30 = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v82, v29 + 4);
      if ((v82 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (v82 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v30);
      v32 = *(unsigned __int8 *)(EmptyString + 23);
      v33 = (char)v32;
      if ((v32 & 0x80u) != 0)
        v32 = *(_QWORD *)(EmptyString + 8);
      if (v32 >= 8)
      {
        if (v33 < 0)
          EmptyString = *(_QWORD *)EmptyString;
        if (!strncmp((const char *)EmptyString, "outputs:", 8uLL))
          break;
      }
      MEMORY[0x2348B274C](&v81, "__value");
      v34 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 0xFFFFFFFFFFFFFFF8) == (v81 & 0xFFFFFFFFFFFFFFF8))
      {
        v36 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
        if ((v81 & 7) != 0)
        {
          v37 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        if (v36)
        {
          if ((v84 & 4) != 0)
            v39 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83);
          else
            v39 = v83;
          realityio::WrappedRERef<REAsset *>::operator=(v77, v39);
          goto LABEL_83;
        }
      }
      else if ((v81 & 7) != 0)
      {
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      MEMORY[0x2348B274C](&v81, "inputs:fallback");
      v40 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 0xFFFFFFFFFFFFFFF8) == (v81 & 0xFFFFFFFFFFFFFFF8))
      {
        v42 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
        if ((v81 & 7) != 0)
        {
          v43 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        if (v42)
        {
          if ((v84 & 4) != 0)
            v45 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83);
          else
            v45 = v83;
          *a5 = *(_OWORD *)v45;
          goto LABEL_83;
        }
      }
      else if ((v81 & 7) != 0)
      {
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      MEMORY[0x2348B274C](&v81, "inputs:scale");
      v46 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 0xFFFFFFFFFFFFFFF8) == (v81 & 0xFFFFFFFFFFFFFFF8))
      {
        v48 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
        if ((v81 & 7) != 0)
        {
          v49 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
          do
            v50 = __ldxr(v49);
          while (__stlxr(v50 - 2, v49));
        }
        if (v48)
        {
          if ((v84 & 4) != 0)
            v51 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83);
          else
            v51 = v83;
LABEL_64:
          *a6 = *(_OWORD *)v51;
          goto LABEL_83;
        }
      }
      else if ((v81 & 7) != 0)
      {
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      MEMORY[0x2348B274C](&v81, "inputs:bias");
      v52 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      if ((v82 & 0xFFFFFFFFFFFFFFF8) != (v81 & 0xFFFFFFFFFFFFFFF8))
      {
        if ((v81 & 7) != 0)
        {
          do
            v53 = __ldxr(v52);
          while (__stlxr(v53 - 2, v52));
        }
LABEL_72:
        MEMORY[0x2348B274C](&v81, "inputs:sourceColorSpace");
        v65 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
        if ((v82 & 0xFFFFFFFFFFFFFFF8) == (v81 & 0xFFFFFFFFFFFFFFF8))
        {
          v67 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
          if ((v81 & 7) != 0)
          {
            v68 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
            do
              v69 = __ldxr(v68);
            while (__stlxr(v69 - 2, v68));
          }
          if (v67)
          {
            v70 = &v83;
            if ((v84 & 4) != 0)
              v70 = (uint64_t **)(*(uint64_t (**)(uint64_t **, uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83, &v83);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a8, v70);
          }
        }
        else if ((v81 & 7) != 0)
        {
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
        }
        goto LABEL_83;
      }
      v61 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
      if ((v81 & 7) != 0)
      {
        v62 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if (!v61)
        goto LABEL_72;
      if ((v84 & 4) != 0)
        v64 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83);
      else
        v64 = v83;
      *(_OWORD *)a7 = *(_OWORD *)v64;
LABEL_83:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v83);
      if ((v82 & 7) != 0)
      {
        v71 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      v73 = (uint64_t *)v29[1];
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = (uint64_t *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (uint64_t *)v29[2];
          _ZF = *v74 == (_QWORD)v29;
          v29 = v74;
        }
        while (!_ZF);
      }
      v29 = v74;
      if (v74 == (uint64_t *)v80)
        goto LABEL_105;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a4, &v82);
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v83))
      goto LABEL_83;
    if ((v84 & 4) != 0)
      v54 = (*(uint64_t (**)(uint64_t **))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(&v83);
    else
      v54 = (uint64_t)v83;
    MEMORY[0x2348B274C](&v81, "inputs:scale");
    v55 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v54, &v81);
    v56 = v55;
    if ((v81 & 7) != 0)
    {
      v57 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    if ((_QWORD *)(v54 + 8) == v55)
      goto LABEL_83;
    v59 = (uint64_t **)(v55 + 5);
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)(v55 + 5)))
      goto LABEL_83;
    v60 = v56[6];
    if ((v60 & 4) != 0)
      v51 = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v56 + 5);
    else
      v51 = *v59;
    goto LABEL_64;
  }
LABEL_105:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v79, v80[0]);
}

void sub_2300C472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::setIfConnectedToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _BYTE v8[11];
  char v9;
  int v10;

  v10 = 0;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  return REMaterialAssetBuilderSetFunctionConstant();
}

void sub_2300C496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getSamplerAddressMode(_QWORD *a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  realityio *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  uint64_t v21;
  uint8_t v23[16];

  MEMORY[0x2348B274C](v23, "black");
  v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v3 = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23[0] & 7) != 0)
  {
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((unsigned int *)v2 == v3)
    return 4;
  MEMORY[0x2348B274C](v23, "clamp");
  v5 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23[0] & 7) != 0)
  {
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((unsigned int *)v5 == v6)
    return 0;
  MEMORY[0x2348B274C](v23, "repeat");
  v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23[0] & 7) != 0)
  {
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((unsigned int *)v8 == v9)
    return 2;
  MEMORY[0x2348B274C](v23, "mirror");
  v11 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v12 = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23[0] & 7) != 0)
  {
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((unsigned int *)v11 != v12)
  {
    v14 = (realityio *)MEMORY[0x2348B274C](v23, "useMetadata");
    v15 = *a1 & 0xFFFFFFFFFFFFFFF8;
    v16 = (unsigned int *)(*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8);
    if ((v23[0] & 7) != 0)
    {
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    v18 = *(NSObject **)(realityio::logObjects(v14) + 24);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((unsigned int *)v15 == v16)
    {
      if (v19)
      {
        *(_WORD *)v23 = 0;
        v20 = "Reading wrap mode from image metadata is currently not supported; defaulting to \"repeat\"";
        goto LABEL_23;
      }
    }
    else if (v19)
    {
      *(_WORD *)v23 = 0;
      v20 = "Wrap mode for imported USD was an invalid option; defaulting to \"repeat\"";
LABEL_23:
      v21 = 2;
      _os_log_impl(&dword_22FF26000, v18, OS_LOG_TYPE_DEFAULT, v20, v23, 2u);
      return v21;
    }
    return 2;
  }
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_Equal(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)a1 == **(_QWORD **)a2 && *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_EqualPtr(uint64_t a1, _QWORD *a2)
{
  return **(_QWORD **)a1 == *a2 && *(_QWORD *)(*(_QWORD *)a1 + 8) == a2[1];
}

uint64_t **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_MakeMutable(uint64_t **result)
{
  unsigned int v1;
  uint64_t **v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;

  v1 = atomic_load((unsigned int *)*result + 4);
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>::_Counted(v3, *v2);
    v4 = (unsigned int *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = (uint64_t *)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_2300C4C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40EDCEB4C7);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio17MaterialAssetPairE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MaterialAssetPair,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MaterialAssetPair>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 2);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2 + 1);
      v6 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C40EDCEB4C7);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>::_Counted(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v4)
    RERetain();
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    RERetain();
  atomic_store(0, (unsigned int *)(a1 + 16));
  return a1;
}

void sub_2300C4E40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MaterialAssetPair>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MaterialAssetPair>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2300C4EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C40EDCEB4C7);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::WrappedRERef<REAsset *>>>>::destroy(a1[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 5);
    v2 = a1[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<std::string,realityio::WrappedRERef<REAsset *>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<TinyTextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TinyTextureBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF4678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<TinyTextureBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TinyTextureBuilder::~TinyTextureBuilder(id *this)
{
  *this = &off_24FDF46C8;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 23);
  realityio::Builder::~Builder((realityio::Builder *)this);
}

{
  *this = &off_24FDF46C8;
  realityio::TextureBuilder::TextureDataT::~TextureDataT(this + 23);
  realityio::Builder::~Builder((realityio::Builder *)this);
  JUMPOUT(0x2348B4E1CLL);
}

void TinyTextureBuilder::description(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TinyTextureBuilder::identifier(TinyTextureBuilder *this)
{
  JUMPOUT(0x2348B274CLL);
}

void TinyTextureBuilder::dirtyStageSubscription(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TinyTextureBuilder::inputsDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TinyTextureBuilder::outputsDescriptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t realityio::TransformAnimationAggregationBuilder::kOutputName(realityio::TransformAnimationAggregationBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "transform_animation_scene_data");
    realityio::TransformAnimationAggregationBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::TransformAnimationAggregationBuilder::kOutputName(void)::kOutputName;
}

void sub_2300C5114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAggregationBuilder *realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(realityio::TransformAnimationAggregationBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TransformAnimationAggregationBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformAnimationAggregationBuilderIdentifier);
  realityio::generateTransformAnimationDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF47B8;
  v21 = v20;
  v18[0] = &off_24FDF4838;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF4740;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TransformAnimationAggregationBuilder *)((char *)this + 296));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_2300C5304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  _QWORD *v28;
  _QWORD *v29;

  v29 = v28;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformAnimationAggregationBuilder::run(realityio::TransformAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  realityio::EntityBuilder *v9;
  uint64_t v10;
  realityio::TransformAnimationAssetBuilder *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  realityio::TransformAnimationAssetBuilder *v15;
  _QWORD *v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  char *PrimPath;
  unsigned int *v20;
  unsigned int v21;
  realityio *v22;
  NSObject *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t result;
  uint64_t Text;
  uint64_t v28;
  realityio::TransformAnimationAggregationBuilder *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  BOOL v42;
  uint64_t ServiceLocator;
  uint64_t v44;
  std::string *v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *__p;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[16];
  uint64_t v59;
  uint64_t v60;
  char v61[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string v65;
  std::string *v66;
  uint8_t buf[4];
  _BYTE v68[12];
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v61, &v56);
  v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  v8 = (_QWORD *)(v6 + 72) != v7 && *(_QWORD *)(*(_QWORD *)(v6 + 40) + 104 * v7[5] + 24) == v56;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v59 = MEMORY[0x24BEE9D78] + 16;
    if (!v60
      || (*(_BYTE *)(v60 + 57) & 8) != 0
      || ((*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D78] + 48))(&v59) & 1) == 0
      || !pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v59))
    {
      goto LABEL_27;
    }
    v9 = realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v58, 2028, (uint64_t)this);
    v10 = realityio::EntityBuilder::kInputName(v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)&v56);
    if ((_BYTE)v56)
    {
      v55 = v57;
      if (v57)
      {
        v11 = (realityio::TransformAnimationAssetBuilder *)RERetain();
        v12 = realityio::TransformAnimationAssetBuilder::kOutputName(v11);
        realityio::Inputs::_getValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>((uint64_t)buf, (uint64_t)a2, v12);
        v13 = (uint64_t *)((char *)this + 280);
        v51 = 0;
        v52 = 0;
        v14 = *((_QWORD *)this + 35);
        if (v14)
        {
          *v13 = 0;
          v51 = v14;
        }
        *((_QWORD *)this + 36) = 0;
        v15 = (realityio::TransformAnimationAssetBuilder *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v51);
        if (buf[0])
        {
          v16 = *(_QWORD **)&v68[4];
          if (*(_QWORD *)&v68[4])
          {
            v51 = v55;
            if (v55)
            {
              RERetain();
              v17 = v51;
            }
            else
            {
              v17 = 0;
            }
            v52 = v16;
            v28 = *v13;
            if (*v13 != v17)
            {
              *v13 = v17;
              v51 = v28;
            }
            *((_QWORD *)this + 36) = v16;
            v29 = (realityio::TransformAnimationAggregationBuilder *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v51);
            v31 = *((_QWORD *)this + 2);
            v30 = (_QWORD *)*((_QWORD *)this + 3);
            v51 = v31;
            v52 = v30;
            if (v30)
            {
              v32 = v30 + 1;
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
            }
            v34 = (__int128 *)realityio::TransformAnimationAggregationBuilder::kOutputName(v29);
            v65.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 280;
            realityio::Outputs::storeValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>(v31, v34, &v65);
            v15 = (realityio::TransformAnimationAssetBuilder *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
          }
        }
        v35 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v15);
        realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>((uint64_t)a2, v35, (uint64_t)&v51);
        if ((_BYTE)v51)
          v36 = v52;
        else
          v36 = 0;
        v50 = REAnimationLibraryDefinitionCreate();
        v49 = 0;
        if (v36)
        {
          v39 = (__int128 *)*v36;
          v37 = (__int128 *)(v36 + 1);
          v38 = v39;
          if (v39 != v37)
          {
            do
            {
              std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&v65, v38 + 2);
              REAnimationLibraryDefinitionAddEntryAsset();
              REAnimationLibraryDefinitionAddKeyedEntryIndex();
              v49 = 1;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v66);
              if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v65.__r_.__value_.__l.__data_);
              v40 = (__int128 *)*((_QWORD *)v38 + 1);
              if (v40)
              {
                do
                {
                  v41 = v40;
                  v40 = *(__int128 **)v40;
                }
                while (v40);
              }
              else
              {
                do
                {
                  v41 = (__int128 *)*((_QWORD *)v38 + 2);
                  v42 = *(_QWORD *)v41 == (_QWORD)v38;
                  v38 = v41;
                }
                while (!v42);
              }
              v38 = v41;
            }
            while (v41 != v37);
          }
        }
        ServiceLocator = REEngineGetServiceLocator();
        v48 = MEMORY[0x2348B1264](ServiceLocator);
        v44 = *((_QWORD *)a2 + 6);
        v45 = (std::string *)operator new(0x40uLL);
        v45->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF4938;
        v45->__r_.__value_.__l.__size_ = (std::string::size_type)a2;
        v45->__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
        v45[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
        v45[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v48;
        v45[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v61;
        v45[2].__r_.__value_.__r.__words[0] = (std::string::size_type)this;
        v45[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v55;
        v66 = v45;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 16))(v44, &v65);
        v46 = v66;
        if (v66 == &v65)
        {
          v47 = 4;
          v46 = &v65;
        }
        else
        {
          if (!v66)
            goto LABEL_59;
          v47 = 5;
        }
        (*(void (**)(void))(v46->__r_.__value_.__r.__words[0] + 8 * v47))();
LABEL_59:
        realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v50);
        if (!(_BYTE)v51 && v54 < 0)
          operator delete(__p);
        if (!buf[0] && v71 < 0)
          operator delete((void *)v70);
LABEL_26:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v55);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v56);
        realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v58);
LABEL_27:
        MEMORY[0x2348B2080](&v59);
        goto LABEL_28;
      }
    }
    else
    {
      v55 = 0;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v18, v4);
    PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
    if ((v70 & 7) != 0)
    {
      v20 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
    v22 = *(realityio **)&v68[4];
    if (*(_QWORD *)&v68[4])
      v22 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v68[4]);
    v23 = *(id *)(realityio::logObjects(v22) + 24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v68 = Text;
      _os_log_error_impl(&dword_22FF26000, v23, OS_LOG_TYPE_ERROR, "Stopping operation to set animation component because could not create entity at path (%s).\n", buf, 0xCu);
    }

    goto LABEL_26;
  }
LABEL_28:
  if ((v64 & 7) != 0)
  {
    v24 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  result = v62;
  if (v62)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
  return result;
}

void sub_2300C5900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a25);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a26);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a34);
  MEMORY[0x2348B2080](&a36);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a39);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF48B8;
  v7[3] = &off_24FDF4908;
  v7[4] = *a3;
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  v9 = (std::__shared_weak_count *)v8[8];
  v8[7] = (uint64_t)(v7 + 3);
  v8[8] = (uint64_t)v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300C5B94(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::TransformAnimationAggregationBuilder::clear(uint64_t (***this)(), realityio::Inputs *a2)
{
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t (**v6)();
  realityio::Inputs *v8;
  uint64_t (**v9)();
  realityio::Inputs **v10;
  realityio::TransformAnimationAggregationBuilder *v11;
  uint64_t (***v12)();
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a2 + 6);
  v8 = a2;
  v9 = &off_24FDF4AB8;
  v10 = &v8;
  v11 = (realityio::TransformAnimationAggregationBuilder *)this;
  v12 = &v9;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v3 + 16))(v3, &v9);
  v4 = v12;
  if (v12 == &v9)
  {
    v5 = 4;
    v4 = &v9;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  v9 = 0;
  v10 = 0;
  v6 = this[35];
  if (v6)
  {
    this[35] = 0;
    v9 = v6;
  }
  this[36] = 0;
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v9);
}

void sub_2300C5C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::TransformAnimationAggregationBuilder::~TransformAnimationAggregationBuilder(void **this)
{
  realityio::TransformAnimationAggregationBuilder::~TransformAnimationAggregationBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::TransformAnimationAggregationBuilder *v2;
  uint64_t v3;
  realityio::TransformAnimationAggregationBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDF4740;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::TransformAnimationAggregationBuilder *)this[34];
  if (v2 == (realityio::TransformAnimationAggregationBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::TransformAnimationAggregationBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::TransformAnimationAggregationBuilder *)this[30];
  if (v4 == (realityio::TransformAnimationAggregationBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::TransformAnimationAggregationBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF47B8;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF47B8;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::TransformAnimationAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  realityio::TransformAnimationAssetBuilder *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v39) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v39, &v41);
  v6 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::TransformAnimationAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v41);
  v10 = v42;
  if (v42)
  {
    v11 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::TransformAnimationAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v37) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 38, (int *)&v37, &v39);
  v15 = v40;
  if (v40)
  {
    v16 = (unint64_t *)&v40->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (realityio::TransformAnimationAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v39);
  v19 = v40;
  if (v40)
  {
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v18);
  v23 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v36 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v22, (uint64_t *)v23 + 39, &v36, &v37);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v37);
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v15)
  {
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v34 = (unint64_t *)&v6->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300C615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 - 1, v19));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF4838;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF4838;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::TransformAnimationAggregationBuilder::kOutputName((realityio::TransformAnimationAggregationBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 40, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

