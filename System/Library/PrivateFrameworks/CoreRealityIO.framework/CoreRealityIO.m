uint64_t realityio::DirtyStageSubscription::DirtyStageSubscription(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)a1 = off_24FDE1AC0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_BYTE *)(a1 + 32) = realityio::DirtyStageSubscription::_isEmpty((realityio::DirtyStageSubscription *)a1);
  return a1;
}

void sub_22FF27ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageSubscription::_isEmpty(realityio::DirtyStageSubscription *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  while (1)
  {
    if (v1 == v2)
      return 1;
    v3 = *v1;
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
      break;
    if (!*(_BYTE *)(v3 + 56))
      return 0;
LABEL_13:
    v1 += 2;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = *(unsigned __int8 *)(v3 + 56);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v7)
    goto LABEL_13;
  return 0;
}

void realityio::DirtyStageSubscription::getExplicitPrimTypes(realityio::DirtyStageSubscription *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  realityio::DirtyStageDescriptor *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  realityio::DirtyStageDescriptor *v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;

  v21 = 0;
  v3 = 0uLL;
  v20 = 0u;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (v4 == v5)
  {
    v13 = 0;
LABEL_17:
    *(_OWORD *)a2 = v3;
    *(_QWORD *)(a2 + 16) = v13;
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    while (1)
    {
      v6 = *(realityio::DirtyStageDescriptor **)v4;
      v7 = *(std::__shared_weak_count **)(v4 + 8);
      v18 = *(realityio::DirtyStageDescriptor **)v4;
      v19 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v16 = 0uLL;
      v17 = 0;
      realityio::DirtyStageDescriptor::getExplicitPrimTypes(v6, (uint64_t)&v14);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v16);
      v16 = v14;
      v17 = v15;
      v15 = 0;
      v14 = 0uLL;
      v22 = (void **)&v14;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v22);
      v10 = v16;
      if ((_QWORD)v16 == *((_QWORD *)&v16 + 1))
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
      }
      else
      {
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t *)&v20, *((_QWORD **)&v20 + 1), (uint64_t *)v16, *((uint64_t **)&v16 + 1), (uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 3);
      }
      *(_QWORD *)&v14 = &v16;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if ((_QWORD)v10 == *((_QWORD *)&v10 + 1))
        break;
      v4 += 16;
      if (v4 == v5)
      {
        v3 = v20;
        v13 = v21;
        goto LABEL_17;
      }
    }
  }
  *(_QWORD *)&v16 = &v20;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_22FF27CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  a9 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a13 = (void **)&a19;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageSubscription::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char IsValid;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char v37;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a7 + 24) || !*(_QWORD *)(a8 + 24) || !*(_QWORD *)(a9 + 24) || !*(_QWORD *)(a10 + 24))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40);
  if ((v43 & 7) != 0)
  {
    v19 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
  if ((IsValid & 1) == 0)
    return 0;
  v21 = *(uint64_t **)(a1 + 8);
  v39 = *(uint64_t **)(a1 + 16);
  if (v21 != v39)
  {
    while (1)
    {
      v22 = *v21;
      v23 = (std::__shared_weak_count *)v21[1];
      v40 = *v21;
      v41 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v50, a7);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v48, a8);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v46, a9);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v44, a10);
      v26 = realityio::DirtyStageDescriptor::validate(v22, a2, a3, this, a5, a6, (uint64_t)v50, (uint64_t)v48, (uint64_t)v46, (uint64_t)v44);
      v27 = v45;
      if (v45 == v44)
      {
        v27 = v44;
        v28 = 4;
      }
      else
      {
        if (!v45)
          goto LABEL_20;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_20:
      v29 = v47;
      if (v47 == v46)
      {
        v29 = v46;
        v30 = 4;
      }
      else
      {
        if (!v47)
          goto LABEL_25;
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_25:
      v31 = v49;
      if (v49 == v48)
      {
        v31 = v48;
        v32 = 4;
      }
      else
      {
        if (!v49)
          goto LABEL_30;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_30:
      v33 = v51;
      if (v51 == v50)
      {
        v33 = v50;
        v34 = 4;
      }
      else
      {
        if (!v51)
          goto LABEL_35;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_35:
      if (v23)
      {
        v35 = (unint64_t *)&v23->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v21 += 2;
      if (v21 == v39)
        v37 = 1;
      else
        v37 = v26;
      if ((v37 & 1) != 0)
        return v26;
    }
  }
  return 1;
}

void sub_22FF27FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v3;
  uint64_t result;

  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    return 0;
  if (*(_DWORD *)this == 1)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || (_DWORD)result != 1)
    return *(_DWORD *)this == 4 && (_DWORD)result == 8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t realityio::DirtyStageSubscription::numberOfStageMetadataOnlyPredicates(realityio::DirtyStageSubscription *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t v9;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(unsigned __int8 *)(v4 + 57);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v8 = *(unsigned __int8 *)(v4 + 57);
    }
    v3 = (v3 + v8);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

const void **realityio::DirtyStageSubscription::description@<X0>(realityio::DirtyStageSubscription *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyStageDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  CFTypeRef cf;
  void *value[3];

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyStageDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    value[1] = *(void **)v6;
    value[2] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyStageDescriptor::description(v8, (CFStringRef *)value);
    CFArrayAppendValue(Mutable, value[0]);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<DirtyStageSubscription: %p { dirtyStageContainsAnyOf: (%lu) [ %@ ] } >"), this, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, v14);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_22FF283D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void **v5;
  va_list va;

  va_start(va, a5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v5);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *realityio::MutableDirtyPropertyTable::addProperty(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  realityio::MutableDirtyPropertyTable *v6;
  realityio::MutableDirtyPropertyTable *v7;
  uint64_t **v8;
  uint64_t *result;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = (realityio::MutableDirtyPropertyTable *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, a2);
  if (this + 1 == (uint64_t **)v6)
  {
    v10 = *(_QWORD *)a3;
    v17 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v17 = (uint64_t)v11;
    }
    v16 = a2;
    v13 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this, a2, (uint64_t)&std::piecewise_construct, &v16);
    result = (uint64_t *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__assign_unique<pxrInternal__aapl__pxrReserved__::TfToken const*>((uint64_t **)v13 + 5, &v17, &v18);
    if ((v17 & 7) != 0)
    {
      v14 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
  else
  {
    v7 = v6;
    v8 = (uint64_t **)((char *)v6 + 40);
    result = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v6 + 40, (uint64_t *)a3);
    if ((uint64_t *)((char *)v7 + 48) == result)
      return std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v8, (uint64_t *)a3, (uint64_t *)a3);
  }
  return result;
}

uint64_t realityio::MutableDirtyPropertyTable::anyMatch(realityio::MutableDirtyPropertyTable *this, const realityio::UsdStageDelta *a2)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  char *v14;

  if (!*((_QWORD *)this + 2))
    return 0;
  v2 = (char *)*((_QWORD *)a2 + 2);
  v3 = (char *)a2 + 24;
  if (v2 == (char *)a2 + 24)
    return 0;
  v5 = (char *)this + 8;
  while (1)
  {
    v6 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 48));
    if (v5 != v6)
    {
      v7 = (char *)*((_QWORD *)v2 + 8);
      if (v7 != v2 + 72)
        break;
    }
LABEL_14:
    v13 = (char *)*((_QWORD *)v2 + 1);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(char **)v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (char *)*((_QWORD *)v2 + 2);
        v12 = *(_QWORD *)v14 == (_QWORD)v2;
        v2 = v14;
      }
      while (!v12);
    }
    v2 = v14;
    if (v14 == v3)
      return 0;
  }
  v8 = (uint64_t)(v6 + 40);
  v9 = v6 + 48;
  while (v9 == std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v8, (uint64_t *)v7 + 4))
  {
    v10 = (char *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (char *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v7 = v11;
    if (v11 == v2 + 72)
      goto LABEL_14;
  }
  return 1;
}

void realityio::DirtyStageSubscription::~DirtyStageSubscription(realityio::DirtyStageSubscription *this)
{
  void **v1;

  *(_QWORD *)this = off_24FDE1AC0;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24FDE1AC0;
  v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2348B4E1C](this, 0x10A1C407F0BD61ELL);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  unsigned int *v3;
  unsigned int v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v3 = (unsigned int *)((char *)Ptr + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy(Ptr);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  void *v1;
  void *v2;

  switch(*((_BYTE *)this + 14))
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::~Sdf_PathNode(this);
      goto LABEL_5;
    case 1:
      v1 = (void *)MEMORY[0x2348B1FCC]();
      goto LABEL_5;
    case 2:
      v1 = (void *)MEMORY[0x2348B24F4]();
LABEL_5:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(v1);
      return;
    case 3:
      v2 = (void *)MEMORY[0x2348B23A4]();
      goto LABEL_12;
    case 4:
      v2 = (void *)MEMORY[0x2348B21C4]();
      goto LABEL_12;
    case 5:
      v2 = (void *)MEMORY[0x2348B21B8]();
      goto LABEL_12;
    case 6:
      v2 = (void *)MEMORY[0x2348B2578]();
      goto LABEL_12;
    case 7:
      v2 = (void *)MEMORY[0x2348B22B4]();
      goto LABEL_12;
    case 8:
      v2 = (void *)MEMORY[0x2348B2314]();
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v2);
      break;
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::~Sdf_PathNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~intrusive_ptr((pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)this);
}

pxrInternal__aapl__pxrReserved__::Sdf_PathNode **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~intrusive_ptr(pxrInternal__aapl__pxrReserved__::Sdf_PathNode **a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)((char *)v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_Destroy(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (result && v2 == 1)
  {
    MEMORY[0x2348B1C18]();
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = (_QWORD *)result;
  v2 = (unsigned int *)(result + 152);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    __dmb(9u);
    v5 = *(void **)(result + 128);
    if (v5)
    {
      v1[17] = v5;
      operator delete(v5);
    }
    v6 = (void *)v1[13];
    if (v6)
    {
      v1[14] = v6;
      operator delete(v6);
    }
    v7 = (void *)v1[10];
    if (v7)
    {
      v1[11] = v7;
      operator delete(v7);
    }
    v8 = (void *)v1[7];
    if (v8)
    {
      v1[8] = v8;
      operator delete(v8);
    }
    v9 = (void *)v1[4];
    if (v9)
    {
      v1[5] = v9;
      operator delete(v9);
    }
    v10 = (void *)v1[1];
    if (v10)
    {
      v1[2] = v10;
      operator delete(v10);
    }
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

char *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FF289CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24FDE1430, MEMORY[0x24BEDAAF0]);
}

void sub_22FF28AA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD v28[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = v12 - (_QWORD)a2;
      if (a5 <= (uint64_t)(v12 - (_QWORD)a2) >> 3)
      {
        v20 = &a3[a5];
      }
      else
      {
        v20 = &a3[v19 >> 3];
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t)a1, v20, a4);
        if (v19 < 1)
          return v5;
      }
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
      if (v20 != v7)
      {
        v21 = v5;
        do
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(v21++, v7++);
        while (v7 != v20);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v28[4] = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v9, v17);
      else
        v18 = 0;
      v22 = (uint64_t *)&v18[8 * v15];
      v28[0] = v18;
      v28[1] = v22;
      v28[3] = &v18[8 * v17];
      v23 = &v22[a5];
      do
      {
        v24 = *v7;
        *v22 = *v7;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
        ++v7;
      }
      while (v22 != v23);
      v28[2] = v23;
      v5 = (_QWORD *)std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__swap_out_circular_buffer(a1, v28, v5);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)v28);
    }
  }
  return v5;
}

void sub_22FF28DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(uint64_t **)(result + 8);
  while (a2 != a3)
  {
    v4 = *a2;
    *v3 = *a2;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
    ++v3;
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>(a2, v7, v6);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *--v7;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
      *v7 = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *a3;
      *a3++ = 0;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  if (a2 != a1)
  {
    v3 = a2;
    do
    {
      v4 = v3;
      v5 = a3;
      --v3;
      --a3;
      if (v4 != v5)
      {
        if ((*a3 & 7) != 0)
        {
          v6 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        *a3 = *v3;
        *v3 = 0;
      }
    }
    while (v3 != a1);
  }
  return a2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfToken::operator=(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if (a2 != result)
  {
    if ((*a2 & 7) != 0)
    {
      v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 2, v2));
      if ((v3 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0)
    {
      v4 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *result = *a2;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))
  {
    return v2;
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::operator<(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
    && (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(a1, a2, v4);
  }
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, v7);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, v7 + 1);
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = v6 + 12;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(_DWORD *a1, _DWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v3 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                        + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return a1;
}

{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL())
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  return a1;
}

{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>(uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1, *a2);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(a1, a2[1]);
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__assign_unique<pxrInternal__aapl__pxrReserved__::TfToken const*>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__node_assign_unique(v5, a2, v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        ++a2;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v5, a2, a2);
    ++a2;
  }
  return result;
}

void sub_22FF29814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__node_assign_unique(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  if (*v6)
    return *v6;
  v7 = v6;
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(a3 + 4, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, a3, v4 + 4))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;

  v3 = *a2;
  v4 = *a3;
  if (*a2)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      v6 = 1;
    else
      v6 = v4 == 0;
    return !v6;
  }
  else
  {
    if (v3 == v4)
      return 0;
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v10 < v11)
      return 1;
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      v14 = *(const void **)(v9 + 16);
      v12 = v9 + 16;
      v13 = v14;
      v15 = *(char *)(v12 + 23);
      v18 = *(const void **)(v8 + 16);
      v16 = v8 + 16;
      v17 = v18;
      v19 = *(char *)(v16 + 23);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v16 + 23);
      else
        v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= 0)
        v21 = (const void *)v16;
      else
        v21 = v17;
      if (v15 >= 0)
        v22 = *(unsigned __int8 *)(v12 + 23);
      else
        v22 = *(_QWORD *)(v12 + 8);
      if (v15 >= 0)
        v23 = (const void *)v12;
      else
        v23 = v13;
      if (v22 >= v20)
        v24 = v20;
      else
        v24 = v22;
      v25 = memcmp(v21, v23, v24);
      if (v25)
        return v25 < 0;
      else
        return v20 < v22;
    }
  }
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x28uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v5, v3 + 4, a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v5, a2, v6 + 4))
  {
    return v2;
  }
  return v6;
}

uint64_t realityio::mtlx::NeoDataSource::primFromPath(uint64_t a1, _DWORD *a2)
{
  int v5;
  int v6;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v5, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2 + 1);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 8))(a1, &v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  return a1;
}

void sub_22FF29CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void realityio::mtlx::NeoDataSource::gatherSources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD *v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  (*(void (**)(uint64_t, _QWORD, _QWORD ***))(*(_QWORD *)a1 + 160))(a1, *(unsigned int *)(a2 + 8), &v10);
  v5 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v9, a1, *((unsigned int *)v5 + 7));
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a3, (unsigned int *)&v9, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
      v6 = v5[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v5[2];
          v8 = *v7 == v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v11);
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v10, v11[0]);
}

void sub_22FF29DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<unsigned int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void realityio::mtlx::NeoShadeNodeGraph::GetInputs(realityio::mtlx::NeoShadeNodeGraph *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;
  int v12;
  uint64_t v13;
  _QWORD v14[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 136))(v14, *(_QWORD *)this, *((unsigned int *)this + 2), 1);
  v3 = v14[0];
  v4 = v14[1];
  while (v3 != v4)
  {
    v5 = *(void ***)v3;
    v12 = *(_DWORD *)(v3 + 8);
    v11 = v5;
    v6 = *(_QWORD *)(v3 + 16);
    v13 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v11);
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    v3 += 24;
  }
  v11 = (void **)v14;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_22FF29EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100](char **a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v27 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v16 = &v14[24 * v13];
    v26 = v16;
    v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v15 = v17;
    *((_QWORD *)v15 + 2) = a2[2];
    a2[2] = 0;
    v9 = v15 + 24;
    v25.i64[1] = (uint64_t)(v15 + 24);
    v19 = *a1;
    v18 = (unint64_t)a1[1];
    if ((char *)v18 == *a1)
    {
      v22 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 24);
        v18 -= 24;
        v21 = *(_DWORD *)(v18 + 8);
        *((_QWORD *)v15 - 3) = v20;
        v15 -= 24;
        *((_DWORD *)v15 + 2) = v21;
        *((_QWORD *)v15 + 2) = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
      }
      while ((char *)v18 != v19);
      v22 = *(int64x2_t *)a1;
      v9 = (char *)v25.i64[1];
      v16 = v26;
    }
    *a1 = v15;
    a1[1] = v9;
    v25 = v22;
    v23 = a1[2];
    a1[2] = v16;
    v26 = v23;
    v24 = v22.i64[0];
    result = std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 16) = a2[2];
    a2[2] = 0;
    v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
  return result;
}

void realityio::mtlx::NeoShadeNodeGraph::GetOutputs(realityio::mtlx::NeoShadeNodeGraph *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;
  int v12;
  uint64_t v13;
  _QWORD v14[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 136))(v14, *(_QWORD *)this, *((unsigned int *)this + 2), 0);
  v3 = v14[0];
  v4 = v14[1];
  while (v3 != v4)
  {
    v5 = *(void ***)v3;
    v12 = *(_DWORD *)(v3 + 8);
    v11 = v5;
    v6 = *(_QWORD *)(v3 + 16);
    v13 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v11);
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    v3 += 24;
  }
  v11 = (void **)v14;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_22FF2A1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void realityio::mtlx::NeoShadeConnectable::GetInputs(realityio::mtlx::NeoShadeConnectable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;
  int v12;
  uint64_t v13;
  _QWORD v14[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)this + 136))(v14, *(_QWORD *)this, *((unsigned int *)this + 2), 1);
  v3 = v14[0];
  v4 = v14[1];
  while (v3 != v4)
  {
    v5 = *(void ***)v3;
    v12 = *(_DWORD *)(v3 + 8);
    v11 = v5;
    v6 = *(_QWORD *)(v3 + 16);
    v13 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a2, (uint64_t *)&v11);
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    v3 += 24;
  }
  v11 = (void **)v14;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_22FF2A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void realityio::mtlx::NeoShadeOutput::GetValueProducingAttributes(realityio::mtlx::NeoShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  realityio *v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *NameToken;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  unsigned int *v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t String;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  char **v24;
  void **v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE buf[12];
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *))(**(_QWORD **)this + 24))(&v23, *(_QWORD *)this, *((unsigned int *)this + 2), (char *)this + 16);
  while (1)
  {
    v4 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    if (!(_DWORD)v4)
      break;
    v5 = (void **)v24;
    v6 = v25;
    if (v24 != (char **)v25)
    {
      while (*v5 != v23)
      {
        if (++v5 == v25)
        {
          v5 = v25;
          break;
        }
      }
    }
    if (v5 != v25)
    {
      v18 = *(id *)(realityio::logObjects(v4) + 48);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        if (*(char *)(String + 23) >= 0)
          v20 = String;
        else
          v20 = *(_QWORD *)String;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_22FF26000, v18, OS_LOG_TYPE_DEFAULT, "Loop detected in shader: '%s'", buf, 0xCu);
      }

      break;
    }
    if ((unint64_t)v25 >= v26)
    {
      v7 = (void **)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v24, &v23);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v25, &v23);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 1, (_DWORD *)&v23 + 1);
      v7 = v6 + 1;
    }
    v25 = v7;
    v8 = *(_QWORD *)this;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    realityio::mtlx::NeoDataSource::primFromPath(v8, &v22);
    v10 = v9;
    NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    *(_QWORD *)buf = v8;
    *(_DWORD *)&buf[8] = v10;
    v12 = *NameToken;
    v31[0] = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v31[0] = v13;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD *, char **))(**(_QWORD **)buf + 88))(*(_QWORD *)buf, *(unsigned int *)&buf[8], v31, &v27)|| (v15 = v27, v27 == v28))
    {
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v23, (int *)&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v23 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    }
    else
    {
      if (&v27 != (char **)a2)
      {
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(a2, v27, v28, (v28 - v27) >> 3);
        v15 = v27;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v23, v15);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v23 + 4, (_DWORD *)v15 + 1);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize((uint64_t *)&v27, 0);
    }
    if ((v31[0] & 7) != 0)
    {
      v16 = (unsigned int *)(v31[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  *(_QWORD *)buf = &v24;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v24 = &v27;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_22FF2A654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void ***a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void ***a19)
{
  void *v19;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  a19 = (void ***)&a13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a13 = &a16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 3;
  if (a2 > v4)
    return (uint64_t *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    for (i = *result + 8 * a2;
          v3 != i;
          result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v3))
    {
      v3 -= 8;
    }
    v2[1] = i;
  }
  return result;
}

realityio::mtlx::USDDataSource *realityio::mtlx::USDDataSource::USDDataSource(realityio::mtlx::USDDataSource *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  *(_QWORD *)this = &off_24FDE1AF0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  realityio::mtlx::USDDataSource::findPrimIndex(this, a2);
  return this;
}

void sub_22FF2A7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD **v3;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(v2, *v3);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::mtlx::USDDataSource::findPrimIndex(realityio::mtlx::USDDataSource *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t **v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  int v14;
  int v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v14);
  v4 = (uint64_t **)((char *)this + 32);
  v5 = (unsigned int *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
  v6 = v5;
  if ((unsigned int *)((char *)this + 40) == v5)
  {
    v9 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    if (v8 >= *((_QWORD *)this + 3))
    {
      v10 = std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>((uint64_t *)this + 1, (uint64_t)a2);
    }
    else
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)this + 24, *((_QWORD *)this + 2), (uint64_t)a2);
      v10 = v8 + 32;
      *((_QWORD *)this + 2) = v8 + 32;
    }
    *((_QWORD *)this + 2) = v10;
    v11 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 32, &v18, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    v7 = (v8 - v9) >> 5;
    if (!*v11)
    {
      v12 = (uint64_t *)operator new(0x28uLL);
      v16[1] = v6;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v12 + 7, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v12 + 8, &v15);
      *((_DWORD *)v12 + 9) = v7;
      v17 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v4, v18, v11, v12);
      v16[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
    }
  }
  else
  {
    v7 = v5[9];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  return v7;
}

void sub_22FF2A958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 16) = v3;
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdObject::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)this == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v4);
      v5 = a2 + 1;
      v6 = (_DWORD *)((char *)this + 20);
      return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v5, v6);
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 24);
    v10 = v4;
  }
  else
  {
    v7 = *((_QWORD *)this + 1);
    if (!v7)
    {
      *(_QWORD *)a2 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    if (*(_DWORD *)this == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, (_DWORD *)(v7 + 16));
      v5 = a2 + 1;
      v6 = (_DWORD *)(v7 + 20);
      return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v5, v6);
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)this + 24);
    v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
  }
  return (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v9);
}

_DWORD *realityio::mtlx::USDDataSource::getPrim@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = *((_QWORD *)this + 1) + 32 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v4;
  v5 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 16), (_DWORD *)(v4 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a3 + 20), (_DWORD *)(v4 + 20));
  v9 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(a3 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t realityio::mtlx::USDDataSource::getAttr(realityio::mtlx::USDDataSource *this, realityio::mtlx::USDDataSource *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  realityio::mtlx::USDDataSource::getPrim(a2, a3, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, a4);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  result = v9;
  if (v9)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return result;
}

void sub_22FF2AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getPath@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, a3);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  result = v8;
  if (v8)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return result;
}

void sub_22FF2AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getPath@<X0>(realityio::mtlx::USDDataSource *this@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _DWORD *a4@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v8, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8, a4);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  result = v9;
  if (v9)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return result;
}

void sub_22FF2ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t realityio::mtlx::USDDataSource::hasValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t HasValue;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v7, this, a2, a3);
  HasValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return HasValue;
}

void sub_22FF2ADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getBaseName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v16, this, a2, a3);
  if (a4)
  {
    MEMORY[0x2348B1DA4](&v12, v16);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v12);
    if ((v15 & 7) != 0)
    {
      v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  else
  {
    MEMORY[0x2348B1E88](&v12, v16);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v12);
    if ((v15 & 7) != 0)
    {
      v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  if ((v19 & 7) != 0)
  {
    v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  result = v17;
  if (v17)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  return result;
}

void sub_22FF2AEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t realityio::mtlx::USDDataSource::getTypeName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t TypeName;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v17, this, a2, a3);
  if (a4)
  {
    MEMORY[0x2348B1DA4](&v13, v17);
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v13);
    if ((v16 & 7) != 0)
    {
      v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else
  {
    MEMORY[0x2348B1E88](&v13, v17);
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v13);
    if ((v16 & 7) != 0)
    {
      v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  return TypeName;
}

void sub_22FF2B110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v14, this, a2, a3);
  MEMORY[0x2348B1DA4](&v10, v14);
  v4 = pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get();
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  if (v15)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  return v4;
}

void sub_22FF2B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v14, this, a2, a3);
  MEMORY[0x2348B1DA4](&v10, v14);
  v4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v13 & 7) != 0)
  {
    v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  if (v15)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  return v4;
}

void sub_22FF2B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getInputValue(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v13, a1, a2, a3);
  MEMORY[0x2348B1DA4](&v9, v13);
  v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>();
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  if ((v16 & 7) != 0)
  {
    v6 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  return v3;
}

void sub_22FF2B450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getRawConnectedSourcePaths(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  int v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)v19, a1, a2, a3);
  if (a4)
  {
    MEMORY[0x2348B1DA4](&v15, v19);
    v5 = MEMORY[0x2348B37CC](&v15);
    v6 = v5;
    if (v5)
      LOBYTE(a4) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    if ((v18 & 7) != 0)
    {
      v7 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  else
  {
    MEMORY[0x2348B1E88](&v15, v19);
    v9 = MEMORY[0x2348B3904](&v15);
    v6 = v9;
    if (v9)
      LOBYTE(a4) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    if ((v18 & 7) != 0)
    {
      v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  if ((v6 & 1) == 0)
    LOBYTE(a4) = 0;
  if ((v22 & 7) != 0)
  {
    v12 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  return a4 & 1;
}

void sub_22FF2B5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttributeConnections(realityio::mtlx::USDDataSource *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t Connections;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v7, a1, a2, a3);
  Connections = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return Connections;
}

void sub_22FF2B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::surfaceOutput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  int PrimIndex;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t result;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;
  int v28;
  uint64_t v29;

  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)v21);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v25[0] = MEMORY[0x24BEE9D88] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v25, a2);
  MEMORY[0x2348B20B0](v25);
  if ((v24 & 7) != 0)
  {
    v7 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v21, &v27, &v28);
  PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v21);
  v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v26);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  *(_QWORD *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(_QWORD *)(a4 + 16) = v10;
  if ((v10 & 7) != 0)
  {
    v15 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)(a4 + 16) = v15;
    do
      v17 = __ldxr(v15);
    while (__stlxr(v17 - 2, v15));
  }
  if ((v29 & 7) != 0)
  {
    v18 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  result = v27;
  if (v27)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  return result;
}

void sub_22FF2B890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttrValue(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v8, this, a2, a3);
  v4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return v4;
}

void sub_22FF2B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttrToken(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v8, this, a2, a3);
  v4 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return v4;
}

void sub_22FF2BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttrRoleName(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v6, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  result = v7;
  if (v7)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return result;
}

void sub_22FF2BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::getAttrColorSpace(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v6, this, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  result = v7;
  if (v7)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return result;
}

void sub_22FF2BB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetList@<X0>(realityio::mtlx::USDDataSource *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t i;
  int PrimIndex;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  int64x2_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t j;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  int64x2_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  char v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  void **v67;
  int64x2_t v68;
  uint64_t v69;
  int64x2_t *v70;

  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v67);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v66[0] = MEMORY[0x24BEE9D98] + 16;
  if ((v69 & 7) != 0)
  {
    v7 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68.i64[1]);
  if (v68.i64[0])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v68.i64[0]);
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v66);
    v9 = v64;
    for (i = v65; v9 != i; v9 += 32)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v60, (uint64_t *)(v9 + 8), (_DWORD *)(v9 + 16));
      PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v60);
      v12 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v9);
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      v16 = a4->u64[1];
      v15 = a4[1].u64[0];
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a4->i64[0]) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - a4->i64[0]) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        v70 = a4 + 1;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v21);
        v24 = &v22[24 * v18];
        *(_QWORD *)v24 = this;
        *((_DWORD *)v24 + 2) = PrimIndex;
        *((_QWORD *)v24 + 2) = v12;
        v26 = a4->i64[0];
        v25 = a4->u64[1];
        if (v25 == a4->i64[0])
        {
          v30 = vdupq_n_s64(v25);
          v27 = &v22[24 * v18];
        }
        else
        {
          v27 = &v22[24 * v18];
          do
          {
            v28 = *(_QWORD *)(v25 - 24);
            v25 -= 24;
            v29 = *(_DWORD *)(v25 + 8);
            *((_QWORD *)v27 - 3) = v28;
            v27 -= 24;
            *((_DWORD *)v27 + 2) = v29;
            *((_QWORD *)v27 + 2) = *(_QWORD *)(v25 + 16);
            *(_QWORD *)(v25 + 16) = 0;
          }
          while (v25 != v26);
          v30 = *a4;
        }
        v17 = v24 + 24;
        a4->i64[0] = (uint64_t)v27;
        a4->i64[1] = (uint64_t)(v24 + 24);
        v68 = v30;
        v31 = a4[1].i64[0];
        a4[1].i64[0] = (uint64_t)&v22[24 * v23];
        v69 = v31;
        v67 = (void **)v30.i64[0];
        std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v67);
      }
      else
      {
        *(_QWORD *)v16 = this;
        *(_DWORD *)(v16 + 8) = PrimIndex;
        v17 = (char *)(v16 + 24);
        *(_QWORD *)(v16 + 16) = v12;
      }
      a4->i64[1] = (uint64_t)v17;
      if ((v63 & 7) != 0)
      {
        v32 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
      if (v61)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
    }
    v67 = (void **)&v64;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v67);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v66);
    v34 = v64;
    for (j = v65; v34 != j; v34 += 32)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v60, (uint64_t *)(v34 + 8), (_DWORD *)(v34 + 16));
      v36 = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v60);
      v37 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v34);
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 2, v38));
        if ((v39 & 1) == 0)
          v37 &= 0xFFFFFFFFFFFFFFF8;
      }
      v41 = a4->u64[1];
      v40 = a4[1].u64[0];
      if (v41 >= v40)
      {
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - a4->i64[0]) >> 3);
        v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - a4->i64[0]) >> 3);
        if (2 * v45 > v44)
          v44 = 2 * v45;
        if (v45 >= 0x555555555555555)
          v46 = 0xAAAAAAAAAAAAAAALL;
        else
          v46 = v44;
        v70 = a4 + 1;
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)a4[1].i64, v46);
        v49 = &v47[24 * v43];
        *(_QWORD *)v49 = this;
        *((_DWORD *)v49 + 2) = v36;
        *((_QWORD *)v49 + 2) = v37;
        v51 = a4->i64[0];
        v50 = a4->u64[1];
        if (v50 == a4->i64[0])
        {
          v55 = vdupq_n_s64(v50);
          v52 = &v47[24 * v43];
        }
        else
        {
          v52 = &v47[24 * v43];
          do
          {
            v53 = *(_QWORD *)(v50 - 24);
            v50 -= 24;
            v54 = *(_DWORD *)(v50 + 8);
            *((_QWORD *)v52 - 3) = v53;
            v52 -= 24;
            *((_DWORD *)v52 + 2) = v54;
            *((_QWORD *)v52 + 2) = *(_QWORD *)(v50 + 16);
            *(_QWORD *)(v50 + 16) = 0;
          }
          while (v50 != v51);
          v55 = *a4;
        }
        v42 = v49 + 24;
        a4->i64[0] = (uint64_t)v52;
        a4->i64[1] = (uint64_t)(v49 + 24);
        v68 = v55;
        v56 = a4[1].i64[0];
        a4[1].i64[0] = (uint64_t)&v47[24 * v48];
        v69 = v56;
        v67 = (void **)v55.i64[0];
        std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer((uint64_t)&v67);
      }
      else
      {
        *(_QWORD *)v41 = this;
        *(_DWORD *)(v41 + 8) = v36;
        v42 = (char *)(v41 + 24);
        *(_QWORD *)(v41 + 16) = v37;
      }
      a4->i64[1] = (uint64_t)v42;
      if ((v63 & 7) != 0)
      {
        v57 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
      if (v61)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v61);
    }
    v67 = (void **)&v64;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v67);
  }
  return MEMORY[0x2348B2170](v66);
}

void sub_22FF2C000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x2348B2170](va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetInput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  int PrimIndex;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD v29[3];

  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v29[0] = MEMORY[0x24BEE9D98] + 16;
  if ((v28 & 7) != 0)
  {
    v7 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v29, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v21, &v26, &v27);
  PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v21);
  v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v25);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  *(_QWORD *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(_QWORD *)(a4 + 16) = v10;
  if ((v10 & 7) != 0)
  {
    v15 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)(a4 + 16) = v15;
    do
      v17 = __ldxr(v15);
    while (__stlxr(v17 - 2, v15));
  }
  if ((v28 & 7) != 0)
  {
    v18 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  return MEMORY[0x2348B2170](v29);
}

void sub_22FF2C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  MEMORY[0x2348B2170](va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::nodeGraphGetOutput@<X0>(realityio::mtlx::USDDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  int PrimIndex;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD v29[3];

  realityio::mtlx::USDDataSource::getPrim(this, a3, (uint64_t)v25);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v29[0] = MEMORY[0x24BEE9D98] + 16;
  if ((v28 & 7) != 0)
  {
    v7 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v29, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v21, &v26, &v27);
  PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v21);
  v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v25);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v24 & 7) != 0)
  {
    v13 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  *(_QWORD *)a4 = this;
  *(_DWORD *)(a4 + 8) = PrimIndex;
  *(_QWORD *)(a4 + 16) = v10;
  if ((v10 & 7) != 0)
  {
    v15 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)(a4 + 16) = v15;
    do
      v17 = __ldxr(v15);
    while (__stlxr(v17 - 2, v15));
  }
  if ((v28 & 7) != 0)
  {
    v18 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  return MEMORY[0x2348B2170](v29);
}

void sub_22FF2C4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  MEMORY[0x2348B2170](va1);
  _Unwind_Resume(a1);
}

unint64_t realityio::mtlx::USDDataSource::getIndex(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject **v4;
  unint64_t PrimIndex;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdObject **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a1 + 4), a2);
  if (a1 + 5 != v4)
    return *((unsigned int *)v4 + 9);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1[1]);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v23);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, a2);
  if ((v29 & 7) != 0)
  {
    v7 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if (v27)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  v9 = v24;
  if (v24)
  {
    v10 = (unsigned int *)(v24 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1[1]);
  v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v21);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v13, a2);
  PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex((realityio::mtlx::USDDataSource *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v23);
  if ((v26 & 7) != 0)
  {
    v14 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  if (v24)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  v16 = v22;
  if (v22)
  {
    v17 = (unsigned int *)(v22 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return PrimIndex;
}

void sub_22FF2C69C(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if (a3)
  {
    v4 = a3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__ *realityio::mtlx::USDDataSource::gatherSources(realityio::mtlx::USDDataSource *a1, unsigned int a2, uint64_t *a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  _QWORD *v7;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  pxrInternal__aapl__pxrReserved__ *v9;
  _QWORD *v10;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  _QWORD *v13;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v14;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v15;
  unsigned int *v16;
  unsigned int v17;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__ *result;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int PrimIndex;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD v49[3];
  _BYTE v50[8];
  pxrInternal__aapl__pxrReserved__ *v51;
  uint64_t v52;
  uint64_t v53;

  realityio::mtlx::USDDataSource::getPrim(a1, a2, (uint64_t)v50);
  v6 = v51;
  if (!v51 || (*((_BYTE *)v51 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v51, v5);
  v7 = (_QWORD *)*((_QWORD *)v6 + 3);
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v45 = MEMORY[0x24BEE9D38] + 16;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v45);
    realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(&v41, a1, v35, v36);
    std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v41);
    std::__tree<unsigned int>::destroy((uint64_t)&v41, v42);
    v30 = (void **)&v35;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v30);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v45);
    realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(&v41, a1, v35, v36);
    std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v41);
    std::__tree<unsigned int>::destroy((uint64_t)&v41, v42);
    v30 = (void **)&v35;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v30);
    MEMORY[0x2348B1EC4](&v45);
  }
  else
  {
    v9 = v51;
    if (!v51 || (*((_BYTE *)v51 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v51, v5);
    v10 = (_QWORD *)*((_QWORD *)v9 + 3);
    v11 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v11)
      v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v45 = MEMORY[0x24BEE9D98] + 16;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v45);
      realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(&v41, a1, v35, v36);
      std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v41);
      std::__tree<unsigned int>::destroy((uint64_t)&v41, v42);
      v30 = (void **)&v35;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v30);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v45);
      realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(&v41, a1, v35, v36);
      std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(a3, &v41);
      std::__tree<unsigned int>::destroy((uint64_t)&v41, v42);
      v30 = (void **)&v35;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v30);
      MEMORY[0x2348B2170](&v45);
    }
    else
    {
      v12 = v51;
      if (!v51 || (*((_BYTE *)v51 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v51, v5);
      v13 = (_QWORD *)*((_QWORD *)v12 + 3);
      v14 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v14)
        v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((*v13 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v49[0] = MEMORY[0x24BEE9D88] + 16;
        LODWORD(v41) = 1;
        v42 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v44 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v48 = 0;
        v45 = MEMORY[0x24BEE9DC0] + 16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
        v40 = 0;
        v39 = 0;
        v15 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v15)
          v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v49, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)v15 + 96));
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v41)
          && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v35, &v46, &v47);
          LODWORD(v30) = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v35);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)a3, (unsigned int *)&v30, &v30);
          if ((v38 & 7) != 0)
          {
            v16 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
          if (v36)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
        }
        v18 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v18)
          v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v49, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)v18 + 24));
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35)
          && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v30, &v46, &v47);
          PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v30);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)a3, &PrimIndex, &PrimIndex);
          if ((v33 & 7) != 0)
          {
            v19 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
            do
              v20 = __ldxr(v19);
            while (__stlxr(v20 - 2, v19));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
          if (v31)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
        }
        if ((v38 & 7) != 0)
        {
          v21 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
        if (v36)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
        if ((v44 & 7) != 0)
        {
          v23 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
        if (v42)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v42);
        if ((v40 & 7) != 0)
        {
          v25 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        MEMORY[0x2348B2350](&v45);
        MEMORY[0x2348B20B0](v49);
      }
    }
  }
  if ((v53 & 7) != 0)
  {
    v27 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  result = v51;
  if (v51)
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
  return result;
}

void sub_22FF2CD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)va1);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  MEMORY[0x2348B2350](va2);
  MEMORY[0x2348B20B0](v6 - 104);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v6 - 80));
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeInput>(uint64_t **result, realityio::mtlx::USDDataSource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  unsigned int PrimIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v18 = result;
  result[2] = 0;
  result[1] = 0;
  *result = (uint64_t *)(result + 1);
  if (a3 != a4)
  {
    v5 = a3;
    v6 = MEMORY[0x24BEE9DC0] + 16;
    do
    {
      v28 = 1;
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v31 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v35 = 0;
      v32 = v6;
      if ((v31 & 7) != 0)
      {
        v7 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v29)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      v27 = 0;
      v26 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v28, &v33, &v34);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28, &v25);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&PrimIndex, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&PrimIndex, &v23);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        v10 = v24;
        v9 = v25;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
        if ((v22 & 7) != 0)
        {
          v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
        if (v9 != v10)
        {
          PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v18, &PrimIndex, &PrimIndex);
        }
        if ((v31 & 7) != 0)
        {
          v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        if (v29)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      }
      if ((v27 & 7) != 0)
      {
        v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      result = (uint64_t **)MEMORY[0x2348B2350](&v32);
      v5 += 32;
    }
    while (v5 != a4);
  }
  return result;
}

void sub_22FF2D158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  va_list va;

  va_start(va, a16);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if ((a16 & 7) != 0)
  {
    v18 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  MEMORY[0x2348B2350](v16 - 120);
  std::__tree<unsigned int>::destroy(a3, *(_QWORD **)(a3 + 8));
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::USDDataSource::getSourcePrims<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t **result, realityio::mtlx::USDDataSource *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  unsigned int PrimIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v18 = result;
  result[2] = 0;
  result[1] = 0;
  *result = (uint64_t *)(result + 1);
  if (a3 != a4)
  {
    v5 = a3;
    v6 = MEMORY[0x24BEE9DC0] + 16;
    do
    {
      v28 = 1;
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v31 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v35 = 0;
      v32 = v6;
      if ((v31 & 7) != 0)
      {
        v7 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v29)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      v27 = 0;
      v26 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v28, &v33, &v34);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28, &v25);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&PrimIndex, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&PrimIndex, &v23);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
        v10 = v24;
        v9 = v25;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
        if ((v22 & 7) != 0)
        {
          v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
        if (v9 != v10)
        {
          PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v18, &PrimIndex, &PrimIndex);
        }
        if ((v31 & 7) != 0)
        {
          v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        if (v29)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      }
      if ((v27 & 7) != 0)
      {
        v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
      result = (uint64_t **)MEMORY[0x2348B2350](&v32);
      v5 += 32;
    }
    while (v5 != a4);
  }
  return result;
}

void sub_22FF2D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  va_list va;

  va_start(va, a16);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  if ((a16 & 7) != 0)
  {
    v18 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  MEMORY[0x2348B2350](v16 - 120);
  std::__tree<unsigned int>::destroy(a3, *(_QWORD **)(a3 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::shaderUsesSecondUV(realityio::mtlx::USDDataSource *a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  pxrInternal__aapl__pxrReserved__::TfToken *IsValid;
  uint64_t EmptyString;
  unint64_t v6;
  int v7;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];

  realityio::mtlx::USDDataSource::getPrim(a1, *(_DWORD *)(a2 + 8), (uint64_t)v34);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v38[0] = MEMORY[0x24BEE9D38] + 16;
  if ((v37 & 7) != 0)
  {
    v2 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if (v35)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  v33 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v38);
  IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v34);
  if ((_DWORD)IsValid)
    IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  v6 = *(unsigned __int8 *)(EmptyString + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(EmptyString + 8);
  if (v6 < 0xB)
    goto LABEL_37;
  if (v7 < 0)
    EmptyString = *(_QWORD *)EmptyString;
  if (strncmp((const char *)EmptyString, "ND_texcoord", 0xBuLL))
    goto LABEL_37;
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v38, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)Data + 56));
  v27 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v28)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    v23 = v29;
    if (v29)
    {
      v9 = (unint64_t *)(v29 + 48);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v30);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, &v31);
    v26 = v32;
    if ((v32 & 7) != 0)
    {
      v11 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
    if ((v26 & 7) != 0)
    {
      v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    if (v23)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  }
  v15 = v27;
  if ((v32 & 7) != 0)
  {
    v16 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  if ((_DWORD)v15 != 1)
LABEL_37:
    v15 = 0;
  if ((v37 & 7) != 0)
  {
    v18 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if (v35)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  if ((v33 & 7) != 0)
  {
    v20 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  MEMORY[0x2348B1EC4](v38);
  return v15;
}

void sub_22FF2D840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va2);
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  MEMORY[0x2348B1EC4](v2 - 56);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::primIsValid(realityio::mtlx::USDDataSource *this, unsigned int a2)
{
  uint64_t IsValid;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v6);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return IsValid;
}

void sub_22FF2D940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::attrIsValid(realityio::mtlx::USDDataSource *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t IsValid;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v7, this, a2, a3);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return IsValid;
}

void sub_22FF2D9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::primType(realityio::mtlx::USDDataSource *this, unsigned int a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unsigned int *v10;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v11;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  uint64_t v17;
  uint64_t v18;

  realityio::mtlx::USDDataSource::getPrim(this, a2, (uint64_t)&v15);
  v3 = v16;
  if (!v16 || (*((_BYTE *)v16 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v16, v2);
  v4 = **((_QWORD **)v3 + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v18 & 7) != 0)
  {
    v7 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  if (v16)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v16);
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  v10 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8))
  {
    result = 0;
  }
  else
  {
    v11 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v11)
      v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if (v10 == (unsigned int *)(*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      result = 1;
    }
    else
    {
      v12 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v12)
        v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if (v10 == (unsigned int *)(*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF8))
        result = 2;
      else
        result = 3;
    }
  }
  if ((v4 & 7) != 0)
  {
    do
      v14 = __ldxr(v10);
    while (__stlxr(v14 - 2, v10));
  }
  return result;
}

void sub_22FF2DB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::USDDataSource::getShadeInputs(realityio::mtlx::USDDataSource *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int PrimIndex;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  realityio::mtlx::USDDataSource *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  realityio::mtlx::USDDataSource::getPrim(a1, a2[2], (uint64_t)&v35);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 192))(*(_QWORD *)a2, a2[2]);
  if (v5 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v31 = (realityio::mtlx::USDDataSource *)(MEMORY[0x24BEE9D98] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v31);
    MEMORY[0x2348B2170](&v31);
  }
  else if (v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v31 = (realityio::mtlx::USDDataSource *)(MEMORY[0x24BEE9D38] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v31);
    MEMORY[0x2348B1EC4](&v31);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v31 = (realityio::mtlx::USDDataSource *)(MEMORY[0x24BEE9D88] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v31);
    MEMORY[0x2348B20B0](&v31);
  }
  if ((v39 & 7) != 0)
  {
    v6 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  if (v36)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v40;
  for (i = v41; v8 != i; v8 += 32)
  {
    LODWORD(v35) = *(_DWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v36 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 48);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v37, (_DWORD *)(v8 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, (_DWORD *)(v8 + 20));
    v13 = *(_QWORD *)(v8 + 24);
    v39 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v31, &v36, &v37);
    PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v31);
    v17 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35);
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v34 & 7) != 0)
    {
      v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
    v31 = a1;
    LODWORD(v32) = PrimIndex;
    v33 = v17;
    if ((v17 & 7) != 0)
    {
      v22 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, (uint64_t *)&v31);
    if ((v33 & 7) != 0)
    {
      v24 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if ((v17 & 7) != 0)
    {
      v26 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if ((v39 & 7) != 0)
    {
      v28 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    if (v36)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  }
  v35 = (void **)&v40;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void realityio::mtlx::USDDataSource::getShadeOutputs(realityio::mtlx::USDDataSource *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unint64_t v7;
  uint64_t v8;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  int PrimIndex;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  realityio::mtlx::USDDataSource *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD v57[4];

  realityio::mtlx::USDDataSource::getPrim(a1, a2[2], (uint64_t)v41);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 192))(*(_QWORD *)a2, a2[2]);
  if (v5 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v52 = (void **)(MEMORY[0x24BEE9D98] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v52);
    MEMORY[0x2348B2170](&v52);
  }
  else if (v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v52 = (void **)(MEMORY[0x24BEE9D38] + 16);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v52);
    MEMORY[0x2348B1EC4](&v52);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v57[0] = MEMORY[0x24BEE9D88] + 16;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v57, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)Data + 96));
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      v7 = v46;
      if (v46 >= v47)
      {
        v8 = std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(&v45, (uint64_t)&v52);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v47, v46, (uint64_t)&v52);
        v8 = v7 + 32;
      }
      v46 = v8;
    }
    v9 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v9)
      v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v57, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)v9 + 24));
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      v10 = v46;
      if (v46 >= v47)
      {
        v11 = std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(&v45, (uint64_t)&v48);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v47, v46, (uint64_t)&v48);
        v11 = v10 + 32;
      }
      v46 = v11;
    }
    if ((v51 & 7) != 0)
    {
      v12 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    if (v49)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
    if ((v56 & 7) != 0)
    {
      v14 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    if (v53)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
    MEMORY[0x2348B20B0](v57);
  }
  if ((v44 & 7) != 0)
  {
    v16 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  if (v42)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v18 = v45;
  for (i = v46; v18 != i; v18 += 32)
  {
    LODWORD(v52) = *(_DWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v53 = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 48);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, (_DWORD *)(v18 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, (_DWORD *)(v18 + 20));
    v23 = *(_QWORD *)(v18 + 24);
    v56 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v56 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v48, &v53, &v54);
    PrimIndex = realityio::mtlx::USDDataSource::findPrimIndex(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48);
    v27 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v52);
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v30 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    if (v49)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
    v48 = a1;
    LODWORD(v49) = PrimIndex;
    v50 = v27;
    if ((v27 & 7) != 0)
    {
      v32 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 2, v32));
      if ((v33 & 1) == 0)
        v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::vector<realityio::mtlx::NeoShadeInput>::push_back[abi:ne180100]((char **)a3, (uint64_t *)&v48);
    if ((v50 & 7) != 0)
    {
      v34 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    if ((v27 & 7) != 0)
    {
      v36 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    if ((v56 & 7) != 0)
    {
      v38 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    if (v53)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  }
  v52 = (void **)&v45;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v52);
}

void sub_22FF2E488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a17);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a21);
  a21 = (void **)&a14;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&a21);
  MEMORY[0x2348B20B0](v21 - 112);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a10);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::USDDataSource::assignGamut(realityio::mtlx::USDDataSource *a1, const void **a2, _BYTE *a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  realityio::mtlx::USDDataSource::getAttr((realityio::mtlx::USDDataSource *)&v9, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)*(unsigned int *)(a4 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a4 + 16));
  realityio::assignGamutFromAttribute(a2, a3, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v9);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  result = v10;
  if (v10)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return result;
}

void sub_22FF2E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, _DWORD *a2)
{
  int v5;

  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, _DWORD *a2)
{
  int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1, int *a2)
{
  int v4;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a3 + 1);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && (*(_BYTE *)(v9 + 57) & 8) == 0 && *(_QWORD *)(v9 + 16) == *v8)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_22FF2E998(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  _Unwind_Resume(a1);
}

const char *FunctionLite::substringFromPreviousDelim(const char *this, const char *a2, const char *a3)
{
  const char *v3;

  if (a2)
  {
    if (a2 == this)
    {
      return a2 + 1;
    }
    else
    {
      v3 = a2 - 1;
      if (a2 - 1 > this)
      {
        while (*(unsigned __int8 *)v3 != a3)
        {
          if (--v3 == this)
            goto LABEL_10;
        }
        this = v3;
      }
LABEL_10:
      ++this;
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  char *PrimPath;

  if (*(_DWORD *)this != 1)
    return (uint64_t)this + 24;
  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
}

char *pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + 16;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((v3 & 1) != 0)
    return v2;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    return (char *)(v4 + 16);
  return (char *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(v3);
  }
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__emplace_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer(&v11);
  return v9;
}

void sub_22FF2EBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer(void **a1)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 32;
      result = std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v4, v1 - 32);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v13);
  return v11;
}

void sub_22FF2F184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      v7 = *((_QWORD *)&v15 + 1) - 8;
      *((_QWORD *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(void **a1)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 8;
      result = std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v4, v1 - 8);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::__tree<unsigned int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_22FF2F64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x18uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 4, a3);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 5, a3 + 1);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if ((v5 & 7) != 0)
        {
          v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<realityio::mtlx::NeoShadeInput>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v4 = v3 - 24;
    *(_QWORD *)(a1 + 16) = v3 - 24;
    v5 = *(_QWORD *)(v3 - 8);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v3 = v4;
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)a1);
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    result = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v8, v15, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 8;
      result = std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_22FF2FBC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22FF2FBCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 8;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, v6 + 1);
      v6 += 2;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 8;
      result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4, v5);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 + 4, v5 + 1);
    a4 += 8;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void **std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
    return (void **)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)a1, a2);
  v8 = v7 - *a1;
  v9 = a2 + (v8 >> 3);
  if (v9 >> 61)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v10 = v8 >> 3;
  v11 = v5 - *a1;
  if (v11 >> 2 > v9)
    v9 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v9;
  v19 = v4;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
  else
    v13 = 0;
  v15 = v13;
  v16 = &v13[8 * v10];
  v17 = v16;
  v18 = &v13[8 * v12];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end((uint64_t)&v15, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, &v15);
  return std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v15);
}

void sub_22FF2FEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  result = *(_QWORD **)(a1 + 8);
  if (a2)
  {
    v4 = 8 * a2;
    v5 = result;
    v6 = &result[a2];
    do
    {
      *v5++ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v4 -= 8;
    }
    while (v4);
    result = v6;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  result = *(_QWORD **)(a1 + 16);
  if (a2)
  {
    v4 = 8 * a2;
    v5 = result;
    v6 = &result[a2];
    do
    {
      *v5++ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v4 -= 8;
    }
    while (v4);
    result = v6;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

realityio::tokens::MaterialBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::MaterialBuilderTokens_StaticTokenType::~MaterialBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::MaterialBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::MaterialBuilderTokens_StaticTokenType::MaterialBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF300D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40EEEF142ELL);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28)))
  {
    return v2;
  }
  return v5;
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 32;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer(&v11);
  return v9;
}

void sub_22FF30244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(a1, v7 - 32, v9);
      v7 = *((_QWORD *)&v16 + 1) - 32;
      *((_QWORD *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::UsdPrim*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer(void **a1)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 32;
      result = std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>::destroy[abi:ne180100](v4, v1 - 32);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned int>,0>((uint64_t)v2 + 28);
    operator delete(v2);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<unsigned int>::__node_handle_merge_unique[abi:ne180100]<std::__tree<unsigned int>>(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;

  v3 = a2 + 1;
  v2 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = (uint64_t **)result;
    v6 = (uint64_t **)(result + 1);
    do
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *((_DWORD *)v2 + 7);
        v9 = v6;
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v7;
            v11 = *((_DWORD *)v7 + 7);
            if (v8 >= v11)
              break;
            v7 = *v10;
            v9 = v10;
            if (!*v10)
            {
              v12 = 0;
              v9 = v10;
              goto LABEL_13;
            }
          }
          if (v11 >= v8)
            break;
          v9 = v10 + 1;
          v7 = v10[1];
          if (!v7)
          {
            v12 = 0;
            goto LABEL_13;
          }
        }
        v12 = v10;
      }
      else
      {
        v12 = 0;
        v10 = v6;
        v9 = v6;
      }
LABEL_13:
      v13 = (_QWORD *)v2[1];
      v14 = v13;
      v15 = v2;
      if (v13)
      {
        do
        {
          v16 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v15[2];
          v17 = *v16 == (_QWORD)v15;
          v15 = v16;
        }
        while (!v17);
      }
      if (!v12)
      {
        v18 = v2;
        if (v13)
        {
          do
          {
            v19 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v18[2];
            v17 = *v19 == (_QWORD)v18;
            v18 = v19;
          }
          while (!v17);
        }
        if ((_QWORD *)*a2 == v2)
          *a2 = v19;
        v20 = (uint64_t *)a2[1];
        --a2[2];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, v2);
        result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, (uint64_t)v10, v9, v2);
      }
      v2 = v16;
    }
    while (v16 != v3);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputName(realityio::SkeletalAnimationAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeletal_animation_asset");
    realityio::SkeletalAnimationAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_22FF30CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(realityio::SkeletalAnimationAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeletal_animation_library_asset");
    realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName = (uint64_t)v3;
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName;
}

void sub_22FF30D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(realityio::SkeletalAnimationAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeletal_animation_blend_shape_asset");
    realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(void)::kOutputBlendShapeName = (uint64_t)v3;
  }
  return realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(void)::kOutputBlendShapeName;
}

void sub_22FF30E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SkeletalAnimationAssetBuilder *realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(realityio::SkeletalAnimationAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "SkeletalAnimationAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletalAnimationAssetBuilderIdentifier);
  realityio::generateSkeletalAnimationDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE1DB0;
  v21 = v20;
  v18[0] = &off_24FDE1E90;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE1C10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 18) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 63) = (char *)this + 512;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 62) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::SkeletalAnimationAssetBuilder *)((char *)this + 528));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_22FF31098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *v28;
  uint64_t v29;
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *v30;

  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v29, *((_QWORD **)v27 + 64));
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT(v28);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT(v30);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

realityio::Builder *realityio::DynamicBuilder::DynamicBuilder(realityio::Builder *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  realityio::Builder *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v13 = realityio::Builder::Builder(a1, a2);
  *(_QWORD *)v13 = off_24FDE1CA0;
  MEMORY[0x2348B2764]((char *)v13 + 184, a4);
  MEMORY[0x2348B2764]((char *)a1 + 192, a3);
  v14 = a5[1];
  *((_QWORD *)a1 + 25) = *a5;
  *((_QWORD *)a1 + 26) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)a1 + 216, a6);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)a1 + 248, a7);
  return a1;
}

void sub_22FF31228(_Unwind_Exception *a1)
{
  realityio::Builder *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = (_QWORD *)*((_QWORD *)v1 + 30);
  if (v7 == v5)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
    v5 = (_QWORD *)*((_QWORD *)v1 + 30);
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v8))(v5);
LABEL_6:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4);
  if ((*v3 & 7) != 0)
  {
    v9 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*v2 & 7) != 0)
  {
    v11 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(v1);
  _Unwind_Resume(a1);
}

void realityio::DynamicBuilder::~DynamicBuilder(realityio::DynamicBuilder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::DynamicBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (char *)this + 248;
  v3 = (char *)*((_QWORD *)this + 34);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::DynamicBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::DynamicBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::DynamicBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::run(realityio::SkeletalAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio *v5;
  NSObject *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  double v13;
  std::__shared_weak_count *v14;
  unsigned int **Data;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int **v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  realityio::SkeletalAnimationAssetBuilder *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  unint64_t *v42;
  unint64_t v43;
  realityio::SkeletalAnimationAssetBuilder *v44;
  uint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  double v56;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  _QWORD *v61;
  const char **v62;
  unint64_t v63;
  const char *v64;
  realityio *BlendShapeWeightTimeSamples;
  double v66;
  double v67;
  char *v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  NSObject *v76;
  uint64_t Text;
  const std::error_category *v78;
  uint64_t v79;
  uint64_t v80;
  realityio *v81;
  const void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  double *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  __int128 v94;
  int64x2_t v95;
  uint64_t v96;
  NSObject *v97;
  const std::error_category *v98;
  char *v99;
  realityio::SkeletalAnimationAssetBuilder *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  const void **v105;
  _QWORD *v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t result;
  int v126;
  __int128 v127[8];
  uint8_t buf[16];
  __int128 v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  _QWORD v141[4];
  double v142;
  unsigned int *v143;
  _BYTE v144[16];
  uint64_t v145;
  uint64_t v146;
  int v147;
  char v148[8];
  std::__shared_weak_count *v149;
  char v150[8];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  realityio::Inputs *v154;
  int v155;
  int v156;
  void *__p[2];
  double v158;
  double v159;
  double v160;
  __int128 v161;
  __int128 v162;
  _QWORD *v163;
  int64x2_t v164;
  uint64_t v165;
  int64x2_t v166;
  _QWORD v167[2];
  _QWORD v168[4];
  const void *v169;
  void *v170;
  double *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  _QWORD *v178;
  unsigned int *v179;
  uint8_t v180[32];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v154 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  MEMORY[0x2348B1C0C](v148);
  v5 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v145 = MEMORY[0x24BEE9D90] + 16;
  v6 = *(id *)(realityio::logObjects(v5) + 24);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_INFO, "Saving skeletal animation asset reference", buf, 2u);
  }

  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v144, 2030, (uint64_t)this);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v150) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v150);
    v7 = *(unsigned int **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf[8])
                    + 14))
        v7 = *(unsigned int **)buf;
      else
        v7 = 0;
    }
    v143 = v7;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v143);
    v8 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unsigned int *)(*(_QWORD *)&buf[8] + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v143);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v12);
    if (v13 == 0.0)
    {
LABEL_168:
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v143);
      goto LABEL_169;
    }
    v142 = 1.0 / v13;
    v14 = (std::__shared_weak_count *)((char *)this + 504);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 504, *((_QWORD **)this + 64));
    *((_QWORD *)this + 65) = 0;
    *((_QWORD *)this + 63) = (char *)this + 512;
    *((_QWORD *)this + 64) = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v141[3] = 0;
    v141[0] = MEMORY[0x24BEE9DB0] + 16;
    Data = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v141, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 1));
    v136 = *(_DWORD *)buf;
    v137 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 48);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v138, &v129);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v139, (_DWORD *)&v129 + 1);
    v140 = *((_QWORD *)&v129 + 1);
    if ((BYTE8(v129) & 7) != 0)
    {
      v18 = (unsigned int *)(*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v140 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v130 & 7) != 0)
    {
      v20 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((BYTE8(v129) & 7) != 0)
    {
      v22 = (unsigned int *)(*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
    if (*(_QWORD *)&buf[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
    v24 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v141, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 2));
    v131 = *(_DWORD *)buf;
    v132 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v133, &v129);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v134, (_DWORD *)&v129 + 1);
    v135 = *((_QWORD *)&v129 + 1);
    if ((BYTE8(v129) & 7) != 0)
    {
      v27 = (unsigned int *)(*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v135 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v130 & 7) != 0)
    {
      v29 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if ((BYTE8(v129) & 7) != 0)
    {
      v31 = (unsigned int *)(*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
    if (*(_QWORD *)&buf[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v136)
      || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v131))
    {
LABEL_67:
      if (buf[0])
      {
        v44 = (realityio::SkeletalAnimationAssetBuilder *)realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&buf[8]);
        v45 = *((_QWORD *)this + 2);
        v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        *(_QWORD *)v180 = v45;
        *(_QWORD *)&v180[8] = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v47 = __ldxr(p_shared_owners);
          while (__stxr(v47 + 1, p_shared_owners));
        }
        v48 = (void *)realityio::SkeletalAnimationAssetBuilder::kOutputName(v44);
        std::mutex::lock((std::mutex *)(v45 + 64));
        v49 = operator new(0x28uLL);
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = &off_24FDE2130;
        *v49 = &off_24FDE20E0;
        v49[4] = (char *)this + 280;
        *(_QWORD *)&v127[0] = v49 + 3;
        *((_QWORD *)&v127[0] + 1) = v49;
        __p[0] = v48;
        v50 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v45 + 40), (const void **)v48, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v50 + 7), v127);
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v127[0] + 1);
        if (*((_QWORD *)&v127[0] + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v127[0] + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v45, (unsigned __int8 *)v48, (uint64_t)v48);
        std::mutex::unlock((std::mutex *)(v45 + 64));
        if (v14)
        {
          v54 = (unint64_t *)&v14->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        memset(v127, 0, 120);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        memset((char *)v127 + 8, 0, 112);
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)v127);
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)v127);
      }
      v56 = v142;
      v57 = *((_DWORD *)this + 44);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v180, &v146, &v147);
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v148, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v180);
      if ((v180[24] & 7) != 0)
      {
        v58 = (unsigned int *)(*(_QWORD *)&v180[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v180[16]);
      if (*(_QWORD *)&v180[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v180[8]);
      v178 = 0;
      v176 = 0u;
      v177 = 0u;
      v174 = 0;
      v173 = 0;
      v175 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v179);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v176);
      v176 = *(_OWORD *)v180;
      v177 = *(_OWORD *)&v180[16];
      memset(v180, 0, sizeof(v180));
      v178 = (_QWORD *)v181;
      *(_QWORD *)&v181 = 0;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v180);
      std::vector<char const*>::resize((uint64_t)&v173, v176);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v176);
      v60 = v178;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v176);
      v61 = &v178[v176];
      if (v60 != v61)
      {
        v62 = (const char **)v173;
        do
        {
          v63 = *v60 & 0xFFFFFFFFFFFFFFF8;
          if (v63)
          {
            v64 = (const char *)(v63 + 16);
            if (*(char *)(v63 + 39) < 0)
              v64 = *(const char **)v64;
          }
          else
          {
            v64 = "";
          }
          *v62++ = v64;
          ++v60;
        }
        while (v60 != v61);
      }
      v171 = 0;
      v170 = 0;
      v172 = 0;
      BlendShapeWeightTimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples();
      if (v171 == v170)
      {
        v76 = *(id *)(realityio::logObjects(BlendShapeWeightTimeSamples) + 24);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v145, __p);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
          *(_DWORD *)v180 = 136315138;
          *(_QWORD *)&v180[4] = Text;
          _os_log_impl(&dword_22FF26000, v76, OS_LOG_TYPE_DEFAULT, "EntitySkeletalAnimationBuilder stopping operation to read animation because no animation found in %s.", v180, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        }

        v78 = std::system_category();
        LOBYTE(v127[0]) = 0;
        *((_QWORD *)&v127[0] + 1) = 0;
        *(_QWORD *)&v127[1] = v78;
      }
      else
      {
        v126 = v57;
        v66 = *(double *)v170;
        LODWORD(v14) = vcvtpd_u64_f64(*(v171 - 1) - *(double *)v170 + 1.0);
        if ((_DWORD)v14 == 1)
          v67 = *(double *)v170 + 1.0;
        else
          v67 = *(v171 - 1);
        v169 = 0;
        memset(v168, 0, sizeof(v168));
        v166 = 0uLL;
        v167[0] = 0;
        if ((_DWORD)v14)
        {
          *(_QWORD *)&v181 = v167;
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((unint64_t)v14);
          *(_QWORD *)v180 = v68;
          *(_QWORD *)&v180[8] = v68;
          v70 = &v68[24 * v69];
          *(_QWORD *)&v180[16] = v68;
          *(_QWORD *)&v180[24] = v70;
          v71 = (_QWORD *)v166.i64[1];
          v72 = (_QWORD *)v166.i64[0];
          if (v166.i64[1] == v166.i64[0])
          {
            v75 = vdupq_n_s64(v166.u64[1]);
            v73 = v68;
          }
          else
          {
            v73 = v68;
            do
            {
              *((_QWORD *)v73 - 3) = 0;
              *((_QWORD *)v73 - 2) = 0;
              v73 -= 24;
              *((_QWORD *)v73 + 2) = 0;
              v74 = *(_OWORD *)(v71 - 3);
              v71 -= 3;
              *(_OWORD *)v73 = v74;
              *((_QWORD *)v73 + 2) = v71[2];
              *v71 = 0;
              v71[1] = 0;
              v71[2] = 0;
            }
            while (v71 != v72);
            v75 = v166;
            v70 = *(char **)&v180[24];
            v68 = *(char **)&v180[16];
          }
          v166.i64[0] = (uint64_t)v73;
          v166.i64[1] = (uint64_t)v68;
          *(int64x2_t *)&v180[8] = v75;
          v79 = v167[0];
          v167[0] = v70;
          *(_QWORD *)&v180[24] = v79;
          *(_QWORD *)v180 = v75.i64[0];
          std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v180);
          v80 = 0;
          while (1)
          {
            v81 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights();
            if (!(_DWORD)v81)
              break;
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v168);
            v82 = v169;
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v168);
            v158 = 0.0;
            __p[0] = 0;
            __p[1] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v82, (uint64_t)v169 + 4 * v168[0], ((_BYTE *)v169 + 4 * v168[0] - (_BYTE *)v82) >> 2);
            v83 = v166.i64[1];
            if (v166.i64[1] >= v167[0])
            {
              v84 = 0xAAAAAAAAAAAAAAABLL * ((v166.i64[1] - v166.i64[0]) >> 3);
              v85 = v84 + 1;
              if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v167[0] - v166.i64[0]) >> 3) > v85)
                v85 = 0x5555555555555556 * ((v167[0] - v166.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v167[0] - v166.i64[0]) >> 3) >= 0x555555555555555)
                v86 = 0xAAAAAAAAAAAAAAALL;
              else
                v86 = v85;
              *(_QWORD *)&v181 = v167;
              v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v86);
              v88 = (double *)&v87[24 * v84];
              *(_QWORD *)v180 = v87;
              *(_QWORD *)&v180[8] = v88;
              *(_QWORD *)&v180[24] = &v87[24 * v89];
              *v88 = 0.0;
              v88[1] = 0.0;
              v88[2] = 0.0;
              *(_OWORD *)v88 = *(_OWORD *)__p;
              v88[2] = v158;
              __p[1] = 0;
              __p[0] = 0;
              v158 = 0.0;
              v90 = v88 + 3;
              *(_QWORD *)&v180[16] = v88 + 3;
              v91 = (_QWORD *)v166.i64[1];
              v92 = (_QWORD *)v166.i64[0];
              v93 = *(_QWORD *)&v180[8];
              if (v166.i64[1] == v166.i64[0])
              {
                v95 = vdupq_n_s64(v166.u64[1]);
              }
              else
              {
                do
                {
                  *(_QWORD *)(v93 - 24) = 0;
                  *(_QWORD *)(v93 - 16) = 0;
                  v93 -= 24;
                  *(_QWORD *)(v93 + 16) = 0;
                  v94 = *(_OWORD *)(v91 - 3);
                  v91 -= 3;
                  *(_OWORD *)v93 = v94;
                  *(_QWORD *)(v93 + 16) = v91[2];
                  *v91 = 0;
                  v91[1] = 0;
                  v91[2] = 0;
                }
                while (v91 != v92);
                v95 = v166;
                v90 = *(_QWORD **)&v180[16];
              }
              v166.i64[0] = v93;
              v166.i64[1] = (uint64_t)v90;
              *(int64x2_t *)&v180[8] = v95;
              v96 = v167[0];
              v167[0] = *(_QWORD *)&v180[24];
              *(_QWORD *)&v180[24] = v96;
              *(_QWORD *)v180 = v95.i64[0];
              std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v180);
              v166.i64[1] = (uint64_t)v90;
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(_QWORD *)v166.i64[1] = 0;
              *(_QWORD *)(v83 + 8) = 0;
              *(_QWORD *)(v83 + 16) = 0;
              *(_OWORD *)v83 = *(_OWORD *)__p;
              *(double *)(v83 + 16) = v158;
              v166.i64[1] = v83 + 24;
            }
            if ((std::__shared_weak_count *)++v80 == v14)
              goto LABEL_124;
          }
          v97 = *(NSObject **)(realityio::logObjects(v81) + 24);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v180 = 0;
            _os_log_impl(&dword_22FF26000, v97, OS_LOG_TYPE_DEFAULT, "EntityBlendShapesAnimationBuilder stopping operation to read animation because UsdSkelAnimQuery.ComputeBlendShapeWeights call failed.", v180, 2u);
          }
          v98 = std::system_category();
          LOBYTE(v127[0]) = 0;
          *((_QWORD *)&v127[0] + 1) = 0;
          *(_QWORD *)&v127[1] = v98;
        }
        else
        {
LABEL_124:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v145, &v155);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v155);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, &v156);
          LODWORD(__p[1]) = v126;
          v158 = v56 * v66;
          v159 = v56 * v67;
          v160 = v56;
          v161 = v176;
          v162 = v177;
          v176 = 0u;
          v177 = 0u;
          v163 = v178;
          v178 = 0;
          v164 = v166;
          v165 = v167[0];
          v166 = 0uLL;
          v167[0] = 0;
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT((uint64_t)v180, (uint64_t)__p);
          LOBYTE(v127[0]) = 1;
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT((uint64_t)v127 + 8, (uint64_t)v180);
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)v180);
          realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v155);
        }
        *(_QWORD *)v180 = &v166;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v180);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v168);
      }
      if (v170)
      {
        v171 = (double *)v170;
        operator delete(v170);
      }
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v176);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v179);
      if (LOBYTE(v127[0]))
      {
        v99 = (char *)this + 400;
        v100 = (realityio::SkeletalAnimationAssetBuilder *)realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=((uint64_t)this + 400, (uint64_t)v127 + 8);
        v102 = *((_QWORD *)this + 2);
        v101 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        __p[0] = (void *)v102;
        __p[1] = v101;
        if (v101)
        {
          v103 = (unint64_t *)&v101->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        v105 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v100);
        std::mutex::lock((std::mutex *)(v102 + 64));
        v106 = operator new(0x28uLL);
        v106[1] = 0;
        v106[2] = 0;
        v106[3] = &off_24FDE21B0;
        *v106 = &off_24FDE2160;
        v106[4] = v99;
        *(_QWORD *)v180 = v106 + 3;
        *(_QWORD *)&v180[8] = v106;
        *(_QWORD *)&v176 = v105;
        v107 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v102 + 40), v105, (uint64_t)&std::piecewise_construct, (__int128 **)&v176);
        *(_QWORD *)v180 = 0;
        *(_QWORD *)&v180[8] = 0;
        v108 = (std::__shared_weak_count *)v107[8];
        v107[7] = (uint64_t)(v106 + 3);
        v107[8] = (uint64_t)v106;
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v111 = *(std::__shared_weak_count **)&v180[8];
        if (*(_QWORD *)&v180[8])
        {
          v112 = (unint64_t *)(*(_QWORD *)&v180[8] + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v102, (unsigned __int8 *)v105, (uint64_t)v105);
        std::mutex::unlock((std::mutex *)(v102 + 64));
        if (v101)
        {
          v114 = (unint64_t *)&v101->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
      }
      else
      {
        v185 = 0;
        v183 = 0u;
        v184 = 0u;
        v181 = 0u;
        v182 = 0u;
        memset(v180, 0, sizeof(v180));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v185 = 0;
        v183 = 0u;
        v184 = 0u;
        v181 = 0u;
        v182 = 0u;
        *(_OWORD *)&v180[16] = 0u;
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=((uint64_t)this + 400, (uint64_t)v180);
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)v180);
      }
      if (LOBYTE(v127[0]))
        realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)((char *)v127 + 8));
      if (buf[0])
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)&buf[8]);
      if ((v135 & 7) != 0)
      {
        v116 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v133);
      if (v132)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v132);
      if ((v140 & 7) != 0)
      {
        v118 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v138);
      if (v137)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v137);
      MEMORY[0x2348B21DC](v141);
      goto LABEL_168;
    }
    v130 = 0;
    *(_OWORD *)buf = 0u;
    v129 = 0u;
    memset(v127, 0, 40);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
    v33 = (realityio::SkeletalAnimationAssetBuilder *)pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>();
    if (!(*(_QWORD *)buf >> 1))
    {
      v34 = *((_QWORD *)v154 + 6);
      v35 = operator new(0x48uLL);
      *v35 = &off_24FDE1FC0;
      v35[1] = v127;
      v35[2] = buf;
      v35[3] = &v154;
      v35[4] = v148;
      v35[5] = &v145;
      v35[6] = &v142;
      v35[7] = v150;
      v35[8] = this;
      *(_QWORD *)&v180[24] = v35;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v34 + 16))(v34, v180);
      v33 = *(realityio::SkeletalAnimationAssetBuilder **)&v180[24];
      if (*(uint8_t **)&v180[24] == v180)
      {
        v36 = 4;
        v33 = (realityio::SkeletalAnimationAssetBuilder *)v180;
        goto LABEL_57;
      }
      if (*(_QWORD *)&v180[24])
      {
        v36 = 5;
LABEL_57:
        v33 = (realityio::SkeletalAnimationAssetBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 8 * v36))();
      }
    }
    v38 = *((_QWORD *)this + 2);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)v180 = v38;
    *(_QWORD *)&v180[8] = v37;
    if (v37)
    {
      v39 = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (__int128 *)realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v33);
    __p[0] = (char *)this + 504;
    realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v38, v41, __p);
    if (v37)
    {
      v42 = (unint64_t *)&v37->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v127);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
    goto LABEL_67;
  }
LABEL_169:
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v144);
  MEMORY[0x2348B20C8](&v145);
  v120 = v149;
  if (v149)
  {
    v121 = (unint64_t *)&v149->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if ((v153 & 7) != 0)
  {
    v123 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
  result = v151;
  if (v151)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v151);
  return result;
}

void sub_22FF323D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unsigned int *a61,__int16 a62,uint64_t a63)
{
  char a64;
  char a67;
  char a69;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;

  v72 = *(_QWORD **)(v70 - 216);
  if (v72 == v69)
  {
    v73 = 4;
    v72 = (_QWORD *)(v70 - 240);
  }
  else
  {
    if (!v72)
      goto LABEL_6;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a15);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a31);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a48);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a52);
  MEMORY[0x2348B21DC](&a56);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a61);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a62);
  MEMORY[0x2348B20C8](&a64);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a69);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v3);
  }
  return result;
}

void realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE2050;
  v7[3] = &off_24FDE20A0;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_22FF3286C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unsigned int **`anonymous namespace'::makeSampledSkeletalPoseAnimationData(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdSkelCache *a2, const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *a3, double a4)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  const char **v10;
  unint64_t v11;
  const char *v12;
  realityio *JointTransformTimeSamples;
  NSObject *v14;
  uint64_t Text;
  const std::error_category *v16;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[6];
  _QWORD v30[6];
  void *v31[5];
  void *v32;
  void *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  unsigned int *v38;
  __int128 buf;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&buf, (uint64_t *)a3 + 1, (_DWORD *)a3 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&buf);
  if ((BYTE8(v40) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v40 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (*((_QWORD *)&buf + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v35);
  v35 = buf;
  v36 = v40;
  buf = 0u;
  v40 = 0u;
  v37 = v41;
  v41 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&buf);
  std::vector<char const*>::resize((uint64_t)&v32, v35);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
  v8 = v37;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
  v9 = &v37[v35];
  if (v8 != v9)
  {
    v10 = (const char **)v32;
    do
    {
      v11 = *v8 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(const char **)v12;
      }
      else
      {
        v12 = "";
      }
      *v10++ = v12;
      ++v8;
    }
    while (v8 != v9);
  }
  memset(v31, 0, sizeof(v31));
  memset(v30, 0, 40);
  memset(v29, 0, 40);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  JointTransformTimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples();
  v14 = *(id *)(realityio::logObjects(JointTransformTimeSamples) + 24);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, &v19);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = Text;
    _os_log_impl(&dword_22FF26000, v14, OS_LOG_TYPE_DEFAULT, "EntitySkeletalAnimationBuilder stopping operation to read animation because no animation found in %s.", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  }

  v16 = std::system_category();
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v16;
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v29);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v31);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v35);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v38);
}

void sub_22FF3305C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  void *v7;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)(a1 + 32));
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 104) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return a1;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void **v6;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)(a1 + 40));
    v5 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
  }
  v6 = (void **)(a1 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 80));
    operator delete(*v6);
    *v6 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void realityio::SkeletalAnimationAssetBuilder::clear(realityio::SkeletalAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  std::mutex *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void **v7;
  realityio::SkeletalAnimationAssetBuilder *v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  const void **v16;
  unint64_t *v17;
  unint64_t v18;
  std::mutex *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void **v23;
  realityio::SkeletalAnimationAssetBuilder *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  const void **v32;
  unint64_t *v33;
  unint64_t v34;
  std::mutex *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const void **v39;
  realityio::SkeletalAnimationAssetBuilder *v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  const void **v48;
  unint64_t *v49;
  unint64_t v50;
  std::string::pointer v51;
  std::string::pointer v52;
  std::string::pointer data;
  char v54;
  char v55;
  std::string v56[5];
  std::mutex *v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  std::string v60;

  v3 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v57 = v3;
  v58 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(v3, v7, (uint64_t)v56);
  v9 = v56[0].__r_.__value_.__s.__data_[0];
  if (!v56[0].__r_.__value_.__s.__data_[0])
  {
    v59 = *(_OWORD *)&v56[0].__r_.__value_.__r.__words[1];
    v8 = (realityio::SkeletalAnimationAssetBuilder *)&v60;
    if (SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, v56[1].__r_.__value_.__l.__data_, v56[1].__r_.__value_.__l.__size_);
      v55 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      data = (std::string::pointer)v60.__r_.__value_.__r.__words[0];
      if (!v56[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56[1].__r_.__value_.__l.__data_);
    }
    else
    {
      v60 = v56[1];
      data = v56[1].__r_.__value_.__l.__data_;
      v55 = HIBYTE(v56[1].__r_.__value_.__r.__words[2]);
    }
  }
  if (!v4)
    goto LABEL_14;
  v10 = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v9)
      goto LABEL_26;
  }
  else
  {
LABEL_14:
    if (!v9)
      goto LABEL_26;
  }
  v13 = *((_QWORD *)this + 2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v56[0].__r_.__value_.__r.__words[0] = v13;
  v56[0].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(v8);
  std::mutex::lock((std::mutex *)(v13 + 64));
  if (v13 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v13 + 40, v16))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v13 + 40), v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v13, (unsigned __int8 *)v16);
  std::mutex::unlock((std::mutex *)(v13 + 64));
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_26:
  v19 = (std::mutex *)*((_QWORD *)this + 2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v57 = v19;
  v58 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v8);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v19, v23, (uint64_t)v56);
  v25 = v56[0].__r_.__value_.__s.__data_[0];
  if (!v56[0].__r_.__value_.__s.__data_[0])
  {
    v59 = *(_OWORD *)&v56[0].__r_.__value_.__r.__words[1];
    v24 = (realityio::SkeletalAnimationAssetBuilder *)&v60;
    if (SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, v56[1].__r_.__value_.__l.__data_, v56[1].__r_.__value_.__l.__size_);
      v54 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      v52 = (std::string::pointer)v60.__r_.__value_.__r.__words[0];
      if (!v56[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56[1].__r_.__value_.__l.__data_);
    }
    else
    {
      v60 = v56[1];
      v52 = v56[1].__r_.__value_.__l.__data_;
      v54 = HIBYTE(v56[1].__r_.__value_.__r.__words[2]);
    }
  }
  if (!v20)
    goto LABEL_39;
  v26 = (unint64_t *)&v20->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!v25)
      goto LABEL_51;
  }
  else
  {
LABEL_39:
    if (!v25)
      goto LABEL_51;
  }
  v29 = *((_QWORD *)this + 2);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v56[0].__r_.__value_.__r.__words[0] = v29;
  v56[0].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v24);
  std::mutex::lock((std::mutex *)(v29 + 64));
  if (v29 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v29 + 40, v32))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v29 + 40), v32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v29, (unsigned __int8 *)v32);
  std::mutex::unlock((std::mutex *)(v29 + 64));
  if (v28)
  {
    v33 = (unint64_t *)&v28->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_51:
  v35 = (std::mutex *)*((_QWORD *)this + 2);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v57 = v35;
  v58 = v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v24);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v35, v39, (uint64_t)v56);
  v41 = v56[0].__r_.__value_.__s.__data_[0];
  if (!v56[0].__r_.__value_.__s.__data_[0])
  {
    v59 = *(_OWORD *)&v56[0].__r_.__value_.__r.__words[1];
    v40 = (realityio::SkeletalAnimationAssetBuilder *)&v60;
    if (SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, v56[1].__r_.__value_.__l.__data_, v56[1].__r_.__value_.__l.__size_);
      LOBYTE(v35) = *((_BYTE *)&v60.__r_.__value_.__s + 23);
      v51 = (std::string::pointer)v60.__r_.__value_.__r.__words[0];
      if (!v56[0].__r_.__value_.__s.__data_[0] && SHIBYTE(v56[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56[1].__r_.__value_.__l.__data_);
    }
    else
    {
      v60 = v56[1];
      v51 = v56[1].__r_.__value_.__l.__data_;
      LOBYTE(v35) = *((_BYTE *)&v56[1].__r_.__value_.__s + 23);
    }
  }
  if (!v36)
    goto LABEL_64;
  v42 = (unint64_t *)&v36->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v41)
      goto LABEL_76;
  }
  else
  {
LABEL_64:
    if (!v41)
      goto LABEL_76;
  }
  v45 = *((_QWORD *)this + 2);
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v56[0].__r_.__value_.__r.__words[0] = v45;
  v56[0].__r_.__value_.__l.__size_ = (std::string::size_type)v44;
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v40);
  std::mutex::lock((std::mutex *)(v45 + 64));
  if (v45 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v45 + 40, v48))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v45 + 40), v48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v45, (unsigned __int8 *)v48);
  std::mutex::unlock((std::mutex *)(v45 + 64));
  if (v44)
  {
    v49 = (unint64_t *)&v44->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_76:
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 504, *((_QWORD **)this + 64));
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 63) = (char *)this + 512;
  *((_QWORD *)this + 64) = 0;
  memset(v56, 0, sizeof(v56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v56[0].__r_.__value_.__r.__words[1], 0, 112);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::operator=((uint64_t)this + 280, (uint64_t)v56);
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)v56);
  if (!v41 && (v35 & 0x80) != 0)
    operator delete(v51);
  if (!v25 && v54 < 0)
    operator delete(v52);
  if (!v9 && v55 < 0)
    operator delete(data);
}

void sub_22FF338F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  int v22;
  int v23;
  uint64_t v24;

  if (!a14 && a22 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v24 - 144);
  if (!v22 && a12 < 0)
    operator delete(a10);
  if (!v23 && a13 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef(std::vector<std::string>::size_type *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::vector<std::string>::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  std::vector<std::string>::pointer end;
  __int128 v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  std::string::__raw *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  std::string::__raw **v39;
  char *v40;
  char *v41;
  std::string::__raw *v42;
  _QWORD *v43;
  const void **String;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  uint64_t SampledSkeletalPoseAnimation;
  std::string *v50;
  std::string v52;
  void *__p[2];
  std::string::size_type v54;
  void *v55;
  char v56;
  std::__split_buffer<std::string> __v;
  void *v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  int64_t v62;
  char *v63;
  char *v64;
  char *v65;
  std::vector<std::string> v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;

  if (!a1[4])
    return 0;
  v4 = a1[13] - a1[12];
  if (!v4)
    return 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  memset(&v66, 0, sizeof(v66));
  v63 = 0;
  v64 = 0;
  v65 = 0;
  std::vector<RESRT const*>::reserve((void **)&v67, v4 >> 3);
  v6 = (_QWORD *)a1[12];
  v7 = (_QWORD *)a1[13];
  if (v6 != v7)
  {
    v8 = v68;
    do
    {
      v9 = a1[9] + 48 * *v6;
      if (v8 >= v69)
      {
        v10 = v8 - v67;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v11 = ((char *)v69 - (char *)v67) >> 2;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        if ((unint64_t)((char *)v69 - (char *)v67) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v69, v12);
        else
          v13 = 0;
        v14 = (uint64_t *)&v13[8 * v10];
        *v14 = v9;
        v8 = v14 + 1;
        v16 = (char *)v67;
        v15 = (char *)v68;
        if (v68 != v67)
        {
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v14 = v17;
          }
          while (v15 != v16);
          v15 = (char *)v67;
        }
        v67 = v14;
        v68 = v8;
        v69 = (uint64_t *)&v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v8++ = v9;
      }
      v68 = v8;
      ++v6;
    }
    while (v6 != v7);
  }
  std::vector<std::string>::reserve(&v66, a1[4]);
  std::vector<RESRT const*>::reserve((void **)&v63, a1[4]);
  v18 = a1[4];
  if (v18)
  {
    v19 = (_QWORD *)a1[8];
    v20 = &v19[v18];
    do
    {
      v21 = *v19 & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        if (*(char *)(v21 + 39) < 0)
        {
          v22 = *(char **)(v21 + 16);
          if (*(_QWORD *)(v21 + 24) > 1uLL)
          {
LABEL_30:
            if (*v22 == 47)
              ++v22;
          }
        }
        else
        {
          v22 = (char *)(v21 + 16);
          if (*(unsigned __int8 *)(v21 + 39) >= 2u)
            goto LABEL_30;
        }
      }
      else
      {
        v22 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v61, v22);
      end = v66.__end_;
      if (v66.__end_ >= v66.__end_cap_.__value_)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) > v27)
          v27 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v27;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
        if (v28)
          v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v66.__end_cap_, v28);
        else
          v29 = 0;
        v30 = v29 + v26;
        __v.__first_ = v29;
        __v.__begin_ = v30;
        __v.__end_cap_.__value_ = &v29[v28];
        v31 = v61;
        v30->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        v62 = 0;
        v61 = 0uLL;
        __v.__end_ = v30 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v);
        v25 = v66.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v66.__end_ = v25;
        if (SHIBYTE(v62) < 0)
        {
          operator delete((void *)v61);
          v25 = v66.__end_;
        }
      }
      else
      {
        v24 = v61;
        v66.__end_->__r_.__value_.__r.__words[2] = v62;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
        v25 = end + 1;
        v66.__end_ = end + 1;
      }
      v32 = (std::string::__raw *)&v25[-1];
      if (SHIBYTE(v25[-1].__r_.__value_.__r.__words[2]) < 0)
        v32 = (std::string::__raw *)v32->__words[0];
      v33 = v64;
      if (v64 >= v65)
      {
        v35 = (v64 - v63) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v36 = (v65 - v63) >> 2;
        if (v36 <= v35 + 1)
          v36 = v35 + 1;
        if ((unint64_t)(v65 - v63) >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v65, v37);
        else
          v38 = 0;
        v39 = (std::string::__raw **)&v38[8 * v35];
        *v39 = v32;
        v34 = (char *)(v39 + 1);
        v41 = v63;
        v40 = v64;
        if (v64 != v63)
        {
          do
          {
            v42 = (std::string::__raw *)*((_QWORD *)v40 - 1);
            v40 -= 8;
            *--v39 = v42;
          }
          while (v40 != v41);
          v40 = v63;
        }
        v63 = (char *)v39;
        v64 = v34;
        v65 = &v38[8 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v64 = v32;
        v34 = v33 + 8;
      }
      v64 = v34;
      ++v19;
    }
    while (v19 != v20);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"[", 1);
  v43 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
  std::stringbuf::str();
  String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(String, (const void **)&v61, (uint64_t)&v55);
  std::string::basic_string[abi:ne180100]<0>(&v52, "SkeletalPose.SkeletalPoses");
  if (v62 >= 0)
    v45 = (const std::string::value_type *)&v61;
  else
    v45 = (const std::string::value_type *)v61;
  if (v62 >= 0)
    v46 = HIBYTE(v62);
  else
    v46 = *((_QWORD *)&v61 + 1);
  v47 = std::string::append(&v52, v45, v46);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v54 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  SampledSkeletalPoseAnimation = RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetAdditive();
  RETimelineDefinitionSetFrameInterval();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  if (a3)
    RETimelineDefinitionSetSkeleton();
  RETimelineDefinitionSetSkeletalPoses();
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (v56 < 0)
    operator delete(v55);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x24BEDB7F0];
  v50 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x24BEDB7F0] + 64);
  __v.__end_ = v50;
  __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x24BEDB848] + 16);
  if (v59 < 0)
    operator delete(v58);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v60);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  return SampledSkeletalPoseAnimation;
}

void sub_22FF3403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *__pa, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::__split_buffer<std::string> *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  v30 = *(void **)(v28 - 168);
  if (v30)
  {
    *(_QWORD *)(v28 - 160) = v30;
    operator delete(v30);
  }
  *(_QWORD *)(v28 - 168) = v28 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 168));
  v31 = *(void **)(v28 - 120);
  if (v31)
  {
    *(_QWORD *)(v28 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void std::vector<RESRT const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_22FF3425C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22FF34374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](a1 + 128);
  return a1;
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::createTimelineDefinitionRef(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *this)
{
  std::vector<std::string>::size_type v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  std::vector<std::string>::pointer end;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  unint64_t v17;
  uint64_t v18;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  std::vector<std::string>::pointer v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  std::vector<std::string>::pointer *v28;
  char *v29;
  char *v30;
  std::string *v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  const void **String;
  void **v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t SampledBlendShapeWeightsAnimation;
  std::string *v52;
  pxrInternal__aapl__pxrReserved__::SdfPath *v54;
  std::string v55;
  void *__p[2];
  std::string::size_type v57;
  void *v58;
  char v59;
  void *v60[2];
  unsigned __int8 v61;
  std::__split_buffer<std::string> __v;
  void *v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  std::string::size_type v67;
  std::vector<std::string> v68;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  memset(&v68, 0, sizeof(v68));
  std::vector<std::string>::reserve(&v68, v1);
  v3 = *((_QWORD *)this + 5);
  v54 = this;
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 9);
    v5 = 8 * v3;
    while (1)
    {
      v6 = *v4 & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        if (*(char *)(v6 + 39) < 0)
        {
          v7 = *(char **)(v6 + 16);
          if (*(_QWORD *)(v6 + 24) > 1uLL)
          {
LABEL_10:
            if (*v7 == 47)
              ++v7;
          }
        }
        else
        {
          v7 = (char *)(v6 + 16);
          if (*(unsigned __int8 *)(v6 + 39) >= 2u)
            goto LABEL_10;
        }
      }
      else
      {
        v7 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v66, v7);
      end = v68.__end_;
      if (v68.__end_ >= v68.__end_cap_.__value_)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_ - (char *)v68.__begin_) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) > v11)
          v11 = 0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v68.__end_cap_;
        if (v12)
          v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v68.__end_cap_, v12);
        else
          v13 = 0;
        v14 = v13 + v10;
        __v.__first_ = v13;
        __v.__begin_ = v14;
        __v.__end_cap_.__value_ = &v13[v12];
        v15 = v66;
        v14->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        v67 = 0;
        v66 = 0uLL;
        __v.__end_ = v14 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v68, &__v);
        v16 = v68.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v68.__end_ = v16;
        if (SHIBYTE(v67) < 0)
          operator delete((void *)v66);
      }
      else
      {
        v9 = v66;
        v68.__end_->__r_.__value_.__r.__words[2] = v67;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        v68.__end_ = end + 1;
      }
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v17 = *((_QWORD *)this + 5);
        goto LABEL_29;
      }
    }
  }
  v17 = 0;
LABEL_29:
  v66 = 0uLL;
  v67 = 0;
  std::vector<RESRT const*>::reserve((void **)&v66, v17);
  begin = v68.__begin_;
  for (i = v68.__end_; begin != i; ++begin)
  {
    v21 = begin;
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      v21 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    v22 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) >= v67)
    {
      v24 = (uint64_t)(*((_QWORD *)&v66 + 1) - v66) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<char const*>::__throw_length_error[abi:ne180100]();
      v25 = (uint64_t)(v67 - v66) >> 2;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if (v67 - (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v67, v26);
      else
        v27 = 0;
      v28 = (std::vector<std::string>::pointer *)&v27[8 * v24];
      *v28 = v21;
      v23 = v28 + 1;
      v29 = (char *)*((_QWORD *)&v66 + 1);
      v30 = (char *)v66;
      if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
      {
        do
        {
          v31 = (std::string *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v28 = v31;
        }
        while (v29 != v30);
        v29 = (char *)v66;
      }
      *(_QWORD *)&v66 = v28;
      *((_QWORD *)&v66 + 1) = v23;
      v67 = (std::string::size_type)&v27[8 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      **((_QWORD **)&v66 + 1) = v21;
      v23 = (_QWORD *)(v22 + 8);
    }
    *((_QWORD *)&v66 + 1) = v23;
  }
  v32 = (uint64_t *)*((_QWORD *)this + 10);
  v33 = (uint64_t *)*((_QWORD *)this + 11);
  if (v32 == v33)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    do
    {
      v37 = *v32;
      if (v35 >= v36)
      {
        v39 = (v35 - v34) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        if ((v36 - v34) >> 2 > v40)
          v40 = (v36 - v34) >> 2;
        if ((unint64_t)(v36 - v34) >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
        {
          if (v41 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v42 = (char *)operator new(8 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[8 * v39];
        *(_QWORD *)v43 = v37;
        v38 = v43 + 8;
        while (v35 != v34)
        {
          v44 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *((_QWORD *)v43 - 1) = v44;
          v43 -= 8;
        }
        v36 = &v42[8 * v41];
        if (v34)
          operator delete(v34);
        v34 = v43;
      }
      else
      {
        *(_QWORD *)v35 = v37;
        v38 = v35 + 8;
      }
      v32 += 3;
      v35 = v38;
    }
    while (v32 != v33);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__v);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v.__end_, (uint64_t)"[", 1);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"]", 1);
  std::stringbuf::str();
  String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v54);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(String, (const void **)v60, (uint64_t)&v58);
  std::string::basic_string[abi:ne180100]<0>(&v55, "BlendShapeWeights.blendWeights");
  if ((v61 & 0x80u) == 0)
    v47 = v60;
  else
    v47 = (void **)v60[0];
  if ((v61 & 0x80u) == 0)
    v48 = v61;
  else
    v48 = (std::string::size_type)v60[1];
  v49 = std::string::append(&v55, (const std::string::value_type *)v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v57 = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  SampledBlendShapeWeightsAnimation = RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetAdditive();
  RETimelineDefinitionSetFrameInterval();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  if (RETimelineDefinitionSetBlendShapeWeightsData())
    v18 = SampledBlendShapeWeightsAnimation;
  else
    v18 = 0;
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  if (v59 < 0)
    operator delete(v58);
  if ((char)v61 < 0)
    operator delete(v60[0]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x24BEDB7F0];
  v52 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x24BEDB7F0] + 64);
  __v.__end_ = v52;
  __v.__end_cap_.__value_ = (std::string *)(MEMORY[0x24BEDB848] + 16);
  if (v64 < 0)
    operator delete(v63);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v65);
  if (v34)
    operator delete(v34);
  if ((_QWORD)v66)
  {
    *((_QWORD *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v18;
}

void sub_22FF34AD8(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, void *a19, std::__split_buffer<std::string> *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  if (SHIBYTE(a12) < 0)
    operator delete(__pa);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  if (v31)
    operator delete(v31);
  v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(_QWORD *)(v32 - 136) = v34;
    operator delete(v34);
  }
  *(_QWORD *)(v32 - 144) = v32 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 144));
  _Unwind_Resume(a1);
}

void realityio::SkeletalAnimationAssetBuilder::~SkeletalAnimationAssetBuilder(void **this)
{
  realityio::SkeletalAnimationAssetBuilder::~SkeletalAnimationAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::SkeletalAnimationAssetBuilder *v2;
  uint64_t v3;
  realityio::SkeletalAnimationAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDE1C10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 72));
  if (*((char *)this + 575) < 0)
    operator delete(this[69]);
  if (*((char *)this + 551) < 0)
    operator delete(this[66]);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 63), this[64]);
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)(this + 50));
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)(this + 35));
  *this = off_24FDE1CA0;
  v2 = (realityio::SkeletalAnimationAssetBuilder *)this[34];
  if (v2 == (realityio::SkeletalAnimationAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::SkeletalAnimationAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::SkeletalAnimationAssetBuilder *)this[30];
  if (v4 == (realityio::SkeletalAnimationAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::SkeletalAnimationAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

const void **realityio::DynamicBuilder::description@<X0>(realityio::DynamicBuilder *this@<X0>, CFStringRef *a2@<X8>)
{
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  const char *v7;
  const void *v9;

  *a2 = 0;
  v4 = *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      v5 = *(const char **)v5;
  }
  else
  {
    v5 = "";
  }
  v6 = *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = "";
  }
  realityio::DirtyStageSubscription::description(*((realityio::DirtyStageSubscription **)this + 25), (CFStringRef *)&v9);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<%s: %p { identifier: %s, dirtyStageSubscription: %@ }>"), v5, this, v7, v9);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v9);
}

void sub_22FF34CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  va_list va;

  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  _Unwind_Resume(a1);
}

uint64_t realityio::DynamicBuilder::identifier@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(unsigned int **)(this + 184);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return this;
}

uint64_t realityio::DynamicBuilder::dirtyStageSubscription@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 208);
  *a2 = *(_QWORD *)(this + 200);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t realityio::DynamicBuilder::inputsDescriptor(realityio::DynamicBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 30);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, (char *)this + 8);
}

uint64_t realityio::DynamicBuilder::outputsDescriptor(realityio::DynamicBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 34);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, (char *)this + 8);
}

uint64_t realityio::Builder::supportsConcurrentExecution(realityio::Builder *this)
{
  return 0;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

realityio::Builder *realityio::Builder::Builder(realityio::Builder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _DWORD *v4;
  int v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;

  *(_QWORD *)this = off_24FDE1D00;
  v4 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)a2 + 1);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 21) = 0;
  v5 = realityio::Builder::sCreationOrderIndex;
  *((_DWORD *)this + 44) = realityio::Builder::sCreationOrderIndex;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 4) = 0u;
  realityio::Builder::sCreationOrderIndex = v5 + 1;
  v6 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24FDE1D60;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *((_DWORD *)v6 + 14) = 1065353216;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 8) = v6 + 72;
  *((_QWORD *)v6 + 10) = 0;
  *((_QWORD *)v6 + 11) = 850045863;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *(_QWORD *)&v12 = v6 + 24;
  *((_QWORD *)&v12 + 1) = v6;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)this + 16, &v12);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  do
    v10 = __ldaxr(&realityio::Builder::Builder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::sNextUniqueIdentifier);
  while (__stlxr(v10 + 1, &realityio::Builder::Builder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::sNextUniqueIdentifier));
  *((_QWORD *)this + 20) = v10;
  return this;
}

void sub_22FF34FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;

  v14 = v13;
  a9 = (void **)(v9 + 88);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = v14;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<unsigned int>::destroy(v12, *(_QWORD **)(v9 + 48));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v10);
  _Unwind_Resume(a1);
}

void realityio::Builder::~Builder(realityio::Builder *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = off_24FDE1D00;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 88);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<unsigned int>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

uint64_t std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<realityio::Outputs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::Outputs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::Outputs>::__on_zero_shared(uint64_t a1)
{
  realityio::Outputs::~Outputs((std::mutex *)(a1 + 24));
}

void realityio::Outputs::~Outputs(std::mutex *this)
{
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy((uint64_t)&this->__m_.__opaque[32], *(_QWORD **)&this->__m_.__opaque[40]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>(uint64_t a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *realityio::WrappedRERef<REAsset *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::~BlendShapeAnimationAssetDataT(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *this)
{
  void **v2;

  v2 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)this + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v3 = a1 + 3;
    v2 = (unint64_t *)a1[3];
    if (v2)
    {
      do
      {
        v11 = __ldxr(v2);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v2));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v3 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        v7 = (_QWORD *)a1[4];
        if (*a1)
        {
          v8 = &v7[*a1];
          do
          {
            if ((*v7 & 7) != 0)
            {
              v9 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stlxr(v10 - 2, v9));
            }
            ++v7;
          }
          while (v7 != v8);
          v7 = (_QWORD *)a1[4];
        }
        operator delete(v7 - 2);
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

void realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT(realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

realityio::internal::AriadneSignpostScopeGuard *realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard(realityio::internal::AriadneSignpostScopeGuard *this, int a2, uint64_t a3)
{
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (realityio::internal::enableSignposts(0, 0))
    kdebug_trace();
  return this;
}

void std::vector<char const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<char const*>::__append((void **)a1, a2 - v2);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v4 = (_DWORD *)((char *)this + 16);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)v5)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v4);
    v6 = a2 + 1;
    v7 = (_DWORD *)((char *)this + 20);
  }
  else
  {
    v8 = *((_QWORD *)this + 1);
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, (_DWORD *)(v8 + 16));
      v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, v9);
      v7 = v9 + 1;
    }
    v6 = a2 + 1;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6, v7);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<char const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<char const*>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *Copy;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)this, *((uint64_t **)this + 4), *(_QWORD *)this, *(_QWORD *)this);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(this);
      *((_QWORD *)this + 4) = Copy;
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  result = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(a1, a3);
  if (a4)
  {
    v7 = &a2[a4];
    v8 = result;
    do
    {
      v9 = *a2;
      *v8 = *a2;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
    }
    while (a2 != v7);
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF359C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto(pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *this)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      v3 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v3 - 1;
    }
    while (v3);
  }
  *(_QWORD *)this = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;

  v2 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v2 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(_QWORD *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v3 = 2;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3h]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 6 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          *((_WORD *)v9 + 2) = *((_WORD *)v4 + 2);
          *(_DWORD *)v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 6);
          v4 = (int *)((char *)v4 + 6);
          v8 -= 6;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(void);

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = (_QWORD *)(a1 + 24);
    v2 = *(unint64_t **)(a1 + 24);
    if (v2)
    {
      do
      {
        v7 = __ldxr(v2);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v2));
      if (!v8)
      {
        __dmb(9u);
        v9 = *(void (**)(void))(*v3 + 8);
        if (v9)
          v9();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x2AAAAAAAAAAAAAA7)
    v3 = -1;
  else
    v3 = 6 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF35C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF35DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 12 * v5;
        v9 = New;
        do
        {
          v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 12);
          v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF35F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::SkeletalAnimationAssetDataT(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return a1;
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(unsigned int **a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, *a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef(uint64_t a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (!a2)
    return;
  v3 = a2 + 2;
  v4 = a2[2];
  if ((v4 & 0x80000000) != 0)
  {
    if (v4 == -2)
      goto LABEL_15;
    v7 = __ldxr(v3);
    if (v7 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v8 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    v8 = 0;
LABEL_12:
    if (v8)
    {
      if (v4 != -1)
        return;
      goto LABEL_16;
    }
LABEL_15:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0)
      return;
LABEL_16:
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    return;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
    goto LABEL_16;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF36258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22FF362CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::BlendShapeAnimationAssetDataT(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard(realityio::internal::AriadneSignpostScopeGuard *this)
{
  if (realityio::internal::enableSignposts(0, 0))
    kdebug_trace();
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2348B4E1CLL);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(unsigned int **a1)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)a1, *a1);
  return a1;
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE1DB0;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE1DB0;
}

char *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputsDescriptor>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::~__hash_table(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v7 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v7);
      v4 = *((_QWORD *)v2 + 2);
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE1E90;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE1E90;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL8 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  std::string::size_type v41;
  std::__shared_weak_count *v42;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::SkeletalAnimationAssetBuilder::kOutputName((realityio::SkeletalAnimationAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v39) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 25, (int *)&v39, &v41);
  v6 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v41);
  v10 = v42;
  if (v42)
  {
    v11 = (unint64_t *)&v42->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName((realityio::SkeletalAnimationAssetBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v37) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 26, (int *)&v37, &v39);
  v15 = v40;
  if (v40)
  {
    v16 = (unint64_t *)&v40->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v39);
  v19 = v40;
  if (v40)
  {
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName((realityio::SkeletalAnimationAssetBuilder *)v18);
  v23 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v36 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v22, (std::string::size_type *)v23 + 30, &v36, &v37);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v37);
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v15)
  {
    v32 = (unint64_t *)&v15->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v34 = (unint64_t *)&v6->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF376A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 - 1, v19));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::OutputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::OutputsDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::OutputsDescriptor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(a1 + 64);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  std::string *v8;
  std::string *result;

  v8 = (std::string *)operator new(0x40uLL);
  result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_22FF37A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, uint64_t a2, std::string::size_type *a3, int *a4)
{
  char v6;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE1F60;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_22FF37AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE1F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::OutputDescriptor>::__on_zero_shared(uint64_t a1)
{
  realityio::OutputDescriptor::~OutputDescriptor((realityio::OutputDescriptor *)(a1 + 24));
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *this, uint64_t a3, std::string::size_type *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::OutputDescriptor::OutputDescriptor(this, (__int128 *)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF37BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *realityio::OutputDescriptor::OutputDescriptor(std::string *this, __int128 *a2, std::string::size_type *a3, int a4)
{
  __int128 v7;
  std::string::size_type v8;
  unsigned int *v9;
  unsigned int v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *a3;
  this[1].__r_.__value_.__r.__words[0] = *a3;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      this[1].__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a4;
  return this;
}

void realityio::OutputDescriptor::~OutputDescriptor(realityio::OutputDescriptor *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *((_QWORD *)this + 3);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

realityio::tokens::OutputIdentifiers_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::OutputIdentifiers_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::OutputIdentifiers_StaticTokenType::~OutputIdentifiers_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::OutputIdentifiers_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>::New()
{
  realityio::tokens::OutputIdentifiers_StaticTokenType *v0;

  v0 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)operator new();
  realityio::tokens::OutputIdentifiers_StaticTokenType::OutputIdentifiers_StaticTokenType(v0);
  return v0;
}

void sub_22FF37DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4083FACC52);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  char v6;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    v3 = *(_DWORD *)(result + 8);
    if ((v3 & 0x80000000) == 0)
    {
      do
        v4 = __ldxr(v2);
      while (__stxr(v4 + 1, v2));
      return result;
    }
    if (v3 == -1)
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
    v5 = __ldxr(v2);
    if (v5 == v3)
    {
      if (!__stxr(v3 - 1, v2))
      {
        v6 = 1;
        goto LABEL_12;
      }
    }
    else
    {
      __clrex();
    }
    v6 = 0;
LABEL_12:
    if ((v6 & 1) != 0)
      return result;
    return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType::~GeomSubsetBuilderTokens_StaticTokenType((realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::AnimationBuilderTokens_StaticTokenType::AnimationBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF37EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C408C7DC519);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            if (*(char *)(v8 + 23) < 0)
              operator delete(*(void **)v8);
            v8 += 24;
            v9 -= 24;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDE1FC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDE1FC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v6;
  double v7;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v8;
  const pxrInternal__aapl__pxrReserved__::UsdSkelCache *v9;
  const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v10;
  double v11;
  uint64_t ServiceLocator;
  uint64_t TimelineAsset;
  uint64_t String;
  char *v15;
  size_t v16;
  std::string *v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v19;
  uint64_t v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::string v31;
  void *__p[2];
  int64_t v33;

  if (**(_QWORD **)(a1 + 8))
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 64);
    do
    {
      v6 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 16);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(v6);
      v7 = *(double *)(*((_QWORD *)v6 + 4) + v2);
      v8 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 16);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(v8);
      if (*(double *)(*((_QWORD *)v8 + 4) + v2 + 8) >= v7)
      {
        v9 = *(const pxrInternal__aapl__pxrReserved__::UsdSkelCache **)(a1 + 32);
        v10 = *(const pxrInternal__aapl__pxrReserved__::UsdSkelAnimation **)(a1 + 40);
        v11 = **(double **)(a1 + 48);
        ServiceLocator = REEngineGetServiceLocator();
        MEMORY[0x2348B1264](ServiceLocator);
        if (LOBYTE(__p[0]))
        {
          realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef((std::vector<std::string>::size_type *)&__p[1], 0, 0);
          TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
          RERelease();
          if (LOBYTE(__p[0]))
            realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::~SkeletalAnimationAssetDataT((realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *)&__p[1]);
        }
        else
        {
          TimelineAsset = 0;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &v30);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
        v15 = (char *)String;
        if (*(char *)(String + 23) >= 0)
          v16 = *(unsigned __int8 *)(String + 23);
        else
          v16 = *(_QWORD *)(String + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v31, v16 + 10);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v31;
        else
          v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (v15[23] >= 0)
            v18 = v15;
          else
            v18 = *(char **)v15;
          memmove(v17, v18, v16);
        }
        strcpy((char *)v17 + v16, "_timeline_");
        v19 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(v19);
        v20 = *((_QWORD *)v19 + 4) + v3;
        v21 = *(char *)(v20 + 23);
        if (v21 >= 0)
          v22 = (const std::string::value_type *)(*((_QWORD *)v19 + 4) + v3);
        else
          v22 = *(const std::string::value_type **)v20;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(v20 + 23);
        else
          v23 = *(_QWORD *)(v20 + 8);
        v24 = std::string::append(&v31, v22, v23);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v33 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        if (v33 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        realityio::Builder::addAsset((uint64_t *)v5, TimelineAsset, (uint64_t)v26);
        v30 = TimelineAsset;
        if (TimelineAsset)
          RERetain();
        v27 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(v27);
        v31.__r_.__value_.__r.__words[0] = *((_QWORD *)v27 + 4) + v3;
        v28 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v5 + 504), (const void **)v31.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
        v29 = v28[7];
        if (v29 != v30)
        {
          v28[7] = v30;
          v30 = v29;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v30);
        RERelease();
        if (SHIBYTE(v33) < 0)
          operator delete(__p[0]);
      }
      ++v4;
      v3 += 24;
      v2 += 16;
    }
    while (**(_QWORD **)(a1 + 8) > v4);
  }
}

void sub_22FF3834C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *realityio::Builder::addAsset(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  if (a2)
  {
    v4 = result;
    v5 = a2;
    RERetain();
    realityio::Builder::addAsset(v4, &v5, a3);
    return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  }
  return result;
}

void sub_22FF38468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *New;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      v7 = New;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = New;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF38594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *New;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)this, *(_QWORD *)this);
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v4, v4 + 24 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(this);
      *((_QWORD *)this + 4) = New;
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF38748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (std::string *)(a3 + v6);
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22FF387DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_22FF38808(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FF389D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::WrappedRERef<REAsset *>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FF38BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_22FF38E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_22FF38F00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE20E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE20E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF390D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

_QWORD *realityio::DetailedError::DetailedError(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *a1 = a2;
  a1[1] = a3;
  v5 = (std::string *)(a1 + 2);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF39268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2348B4BD0](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2348B4BDC](v13);
  return a1;
}

void sub_22FF395B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2348B4BDC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22FF39590);
}

void sub_22FF395F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22FF3972C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t realityio::TextMeshAssetBuilder::kOutputName(realityio::TextMeshAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "text_mesh_asset");
    realityio::TextMeshAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::TextMeshAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_22FF3986C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextMeshAssetBuilder *realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(realityio::TextMeshAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TextMeshAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextMeshAssetBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE22C0;
  v21 = v20;
  v18[0] = &off_24FDE2340;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE2248;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TextMeshAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_22FF39A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  _QWORD *v28;
  _QWORD *v29;

  v29 = v28;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextMeshAssetBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  realityio::TextMeshAssetBuilder *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t result;
  _QWORD v32[2];
  uint64_t *v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  realityio::Inputs *v38;
  __int128 *v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = *((_QWORD *)a2 + 6);
  v7 = (uint64_t *)operator new(0x20uLL);
  *v7 = (uint64_t)&off_24FDE23C0;
  v7[1] = (uint64_t)v34;
  v7[2] = (uint64_t)&v38;
  v7[3] = (uint64_t)this;
  v42 = v7;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v6 + 16))(v6, &v40);
  v8 = (uint64_t **)v42;
  if (v42 == (uint64_t *)&v40)
  {
    v9 = 4;
    v8 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v9 = 5;
  }
  ((void (*)(void))(*v8)[v9])();
LABEL_6:
  v10 = *((_QWORD *)v38 + 5);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v34, v32);
  v40 = realityio::ImportSession::deduplicateMeshAsset(v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v32, this[35], 0);
  realityio::WrappedRERef<REAsset *>::operator=(this + 35, (uint64_t *)&v40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
  v33 = this[35];
  if (v33)
    RERetain();
  realityio::Builder::addAsset((uint64_t *)this, (uint64_t *)&v33, 0);
  v11 = (realityio::TextMeshAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v33);
  v13 = (uint64_t)this[2];
  v12 = (std::__shared_weak_count *)this[3];
  v32[0] = v13;
  v32[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (__int128 *)realityio::TextMeshAssetBuilder::kOutputName(v11);
  std::mutex::lock((std::mutex *)(v13 + 64));
  v17 = (__int128 *)this[35];
  v18 = operator new(0x28uLL);
  v19 = v18;
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_24FDE2440;
  v39 = v17;
  if (v17)
  {
    RERetain();
    v19[3] = &off_24FDE2490;
    v19[4] = v17;
    RERetain();
  }
  else
  {
    v18[3] = &off_24FDE2490;
    v18[4] = 0;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v39);
  v40 = v19 + 3;
  v41 = (std::__shared_weak_count *)v19;
  v39 = v16;
  v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v13 + 40), (const void **)v16, (uint64_t)&std::piecewise_construct, &v39);
  v40 = 0;
  v41 = 0;
  v21 = (std::__shared_weak_count *)v20[8];
  v20[7] = (uint64_t)(v19 + 3);
  v20[8] = (uint64_t)v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v41;
  if (v41)
  {
    v25 = (unint64_t *)&v41->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v13, (unsigned __int8 *)v16, (uint64_t)v16);
  std::mutex::unlock((std::mutex *)(v13 + 64));
  if (v12)
  {
    v27 = (unint64_t *)&v12->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if ((v37 & 7) != 0)
  {
    v29 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  result = v35;
  if (v35)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v35);
  return result;
}

void sub_22FF39E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::mutex::unlock(v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

uint64_t *realityio::WrappedRERef<REAsset *>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      RERelease();
      v4 = *a2;
    }
    *a1 = v4;
    if (v4)
      RERetain();
  }
  return a1;
}

uint64_t realityio::TextMeshAssetBuilder::clear(realityio::TextMeshAssetBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  unint64_t *v9;
  unint64_t v10;
  realityio::ImportSession *v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  unsigned int *v13;
  unsigned int v14;
  realityio::TextMeshAssetBuilder *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  std::mutex *v24;
  realityio::TextMeshAssetBuilder *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::string v29[2];

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v24 = v5;
  v25 = (realityio::TextMeshAssetBuilder *)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::TextMeshAssetBuilder::kOutputName(this);
  realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>(v5, v8, v29);
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v29[0].__r_.__value_.__s.__data_[0])
  {
    v11 = (realityio::ImportSession *)*((_QWORD *)a2 + 5);
    v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v12, (realityio::Inputs *)((char *)a2 + 32));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24, &v28);
    realityio::ImportSession::clearMeshAsset(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    if ((v27 & 7) != 0)
    {
      v13 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    v15 = v25;
    if (v25)
      v15 = (realityio::TextMeshAssetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v25);
    v17 = *((_QWORD *)this + 2);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v24 = (std::mutex *)v17;
    v25 = (realityio::TextMeshAssetBuilder *)v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = (const void **)realityio::TextMeshAssetBuilder::kOutputName(v15);
    std::mutex::lock((std::mutex *)(v17 + 64));
    if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, v20))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), v20);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v17, (unsigned __int8 *)v20);
    std::mutex::unlock((std::mutex *)(v17 + 64));
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v29);
}

void sub_22FF3A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex *v18;

  std::mutex::unlock(v18);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t realityio::Outputs::getValue<realityio::WrappedRERef<REAsset *>>@<X0>(std::mutex *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v4;
  uint64_t v6;
  __int128 v7;
  std::string v8;
  _BYTE v9[8];
  __int128 v10;
  std::string v11;

  realityio::Outputs::getRawValue<realityio::WrappedRERef<REAsset *>>(a1, a2, (uint64_t)v9);
  if (v9[0])
  {
    *(_QWORD *)&v7 = v10;
    if ((_QWORD)v10)
    {
      RERetain();
      v4 = v7;
      RERetain();
    }
    else
    {
      v4 = 0;
    }
    a3->__r_.__value_.__s.__data_[0] = 1;
    a3->__r_.__value_.__l.__size_ = v4;
    v6 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  }
  else
  {
    v7 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v8, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    else
      v8 = v11;
    a3->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[1] = v7;
    a3[1] = v8;
  }
  return realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_22FF3A2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::TextMeshAssetBuilder::~TextMeshAssetBuilder(void **this)
{
  realityio::TextMeshAssetBuilder::~TextMeshAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::TextMeshAssetBuilder *v2;
  uint64_t v3;
  realityio::TextMeshAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDE2248;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::TextMeshAssetBuilder *)this[34];
  if (v2 == (realityio::TextMeshAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::TextMeshAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::TextMeshAssetBuilder *)this[30];
  if (v4 == (realityio::TextMeshAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::TextMeshAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

_QWORD *realityio::WrappedRERef<REAsset *>::operator=(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 != *a1)
  {
    if (*a1)
    {
      RERelease();
      v3 = *a2;
    }
    *a1 = v3;
    if (v3)
      RERetain();
  }
  return a1;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE22C0;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE22C0;
}

char *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE2340;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE2340;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::TextMeshAssetBuilder::kOutputName((realityio::TextMeshAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 36, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF3A710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextMeshAssetBuilder::TextMeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE23C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE23C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  float32x2_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  double v22;
  float64x2_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  char v30;

  v2 = *(_QWORD *)(a1 + 24);
  realityio::textInformationFromPrim(*(realityio **)(a1 + 8), (uint64_t)&v18);
  realityio::Inputs::assetManager(**(realityio::Inputs ***)(a1 + 16));
  v14 = 0u;
  REStatic3DTextDefaultOptions();
  *(float *)&v3 = v22;
  *(float *)&v4 = v24;
  *(_QWORD *)&v14 = __PAIR64__(v4, v3);
  v15 = 0;
  v16 = vcvt_f32_f64(v23);
  v17 = v29;
  BYTE1(v17) = v28;
  BYTE2(v17) = v30;
  v5 = REAssetManagerMeshMemoryAssetCreate3DTextWithOptions();
  v13 = v5;
  if (v5)
    RERetain();
  v6 = *(_QWORD *)(v2 + 280);
  if (v6 != v5)
  {
    *(_QWORD *)(v2 + 280) = v5;
    v13 = v6;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v13);
  RERelease();
  REAssetDisableNetworkSyncing();
  if ((v27 & 7) != 0)
  {
    v7 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v26 & 7) != 0)
  {
    v9 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((v25 & 7) != 0)
  {
    v11 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if (v21 < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18);
}

void sub_22FF3AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;

  if ((a39 & 7) != 0)
  {
    v40 = (unsigned int *)(a39 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  if ((a38 & 7) != 0)
  {
    v42 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if ((a37 & 7) != 0)
  {
    v44 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextMeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDE2490;
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 32));
}

uint64_t realityio::InputOutputWrapperObject<realityio::WrappedRERef<REAsset *>>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::WrappedRERef<REAsset *>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    if (v8)
      RERetain();
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)&v15 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v15);
  }
  std::mutex::unlock(v6);
}

void sub_22FF3AC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::Result<realityio::WrappedRERef<REAsset *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType::~GeomSubsetBuilderTokens_StaticTokenType(realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

void realityio::generateGeomSubsetDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t Data;
  realityio::AnyValueDirtyPropertyDescriptor *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  unint64_t v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  unint64_t v16;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21[3];
  _QWORD *v22[3];
  __int128 v23;
  _QWORD *v24[3];
  _QWORD *v25[3];
  __int128 v26;
  _QWORD *v27[3];
  uint64_t v28;
  uint64_t v29;
  void **v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E544C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E544C0))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v25, 0, sizeof(v25));
    v9 = (_BYTE *)operator new();
    Data = atomic_load(&_MergedGlobals);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    memset(v22, 0, sizeof(v22));
    v11 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&_MergedGlobals);
    if (!v12)
      v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v11, v12);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v20, (uint64_t)v11);
    v31[0] = v20;
    v20 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v14 = atomic_load(&_MergedGlobals);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v19, (uint64_t)v13);
    v31[1] = v19;
    v19 = 0uLL;
    v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v16 = atomic_load(&_MergedGlobals);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v18, (uint64_t)v15);
    v31[2] = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v21, v31, 3uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, (uint64_t *)(Data + 16), v22, v21);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v23, (uint64_t)v9);
    v32 = v23;
    v23 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v24, &v32, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v25, v24);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v26, v8);
    v33 = v26;
    v26 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v27, &v33, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v27);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v28, v7);
    qword_255E544B0 = v28;
    *(_QWORD *)algn_255E544B8 = v29;
    v28 = 0;
    v29 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    v30 = (void **)v27;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v30);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
    v30 = (void **)v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v30);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    v30 = (void **)v21;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v30);
    for (i = 2; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v19);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v20);
    *(_QWORD *)&v31[0] = v22;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
    *(_QWORD *)&v31[0] = v25;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
    __cxa_guard_release(&qword_255E544C0);
  }
  v4 = *(_QWORD *)algn_255E544B8;
  *a1 = qword_255E544B0;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_22FF3B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  MEMORY[0x2348B4E1C](v27, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v29 - 176) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 176));
  MEMORY[0x2348B4E1C](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v28, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E544C0);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    v6 = &a2[2 * a3];
    v7 = (_QWORD *)a1[1];
    do
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    while (a2 != v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_22FF3B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    v6 = &a2[2 * a3];
    v7 = (_QWORD *)a1[1];
    do
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    while (a2 != v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_22FF3B568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    v6 = &a2[2 * a3];
    v7 = (_QWORD *)a1[1];
    do
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    while (a2 != v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_22FF3B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType *v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v0 = (realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType *)operator new();
  MEMORY[0x2348B2758](v0, "elementType", 0);
  MEMORY[0x2348B2758]((char *)v0 + 8, "familyName", 0);
  MEMORY[0x2348B2758]((char *)v0 + 16, "GeomSubset", 0);
  MEMORY[0x2348B2758]((char *)v0 + 24, "indices", 0);
  v1 = *(unsigned int **)v0;
  v25 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v25 = v2;
  }
  v4 = (unsigned int *)*((_QWORD *)v0 + 1);
  v26 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v26 = v5;
  }
  v7 = (unsigned int *)*((_QWORD *)v0 + 2);
  v27 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v27 = v8;
  }
  v10 = (unsigned int *)*((_QWORD *)v0 + 3);
  v28 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v28 = v11;
  }
  *((_QWORD *)v0 + 4) = 0;
  *((_QWORD *)v0 + 5) = 0;
  *((_QWORD *)v0 + 6) = 0;
  v13 = operator new(0x20uLL);
  v14 = 0;
  *((_QWORD *)v0 + 4) = v13;
  *((_QWORD *)v0 + 5) = v13;
  *((_QWORD *)v0 + 6) = v13 + 4;
  do
  {
    v15 = (&v25)[v14];
    *v13 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        *v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v14;
    ++v13;
  }
  while (v14 != 4);
  v18 = (unsigned int **)&v29;
  *((_QWORD *)v0 + 5) = v13;
  do
  {
    v20 = (uint64_t)*--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  while (v18 != &v25);
  while (!__ldaxr(&_MergedGlobals))
  {
    if (!__stlxr((unint64_t)v0, &_MergedGlobals))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::GeomSubsetBuilderTokens_StaticTokenType::~GeomSubsetBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&_MergedGlobals);
}

void sub_22FF3B898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      MEMORY[0x2348B4E1C](v16, 0x60C408C7DC519);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE24C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF3B9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueDirtyPropertyDescriptor,realityio::AnyValueDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueDirtyPropertyDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE2538;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF3BB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::TypeNameDirtyPrimDescriptor *,std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::TypeNameDirtyPrimDescriptor,realityio::TypeNameDirtyPrimDescriptor>,std::allocator<realityio::TypeNameDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE25B0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF3BC24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageDescriptor *,std::shared_ptr<realityio::DirtyStageDescriptor>::__shared_ptr_default_delete<realityio::DirtyStageDescriptor,realityio::DirtyStageDescriptor>,std::allocator<realityio::DirtyStageDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE2628;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF3BD18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyStageSubscription *,std::shared_ptr<realityio::DirtyStageSubscription>::__shared_ptr_default_delete<realityio::DirtyStageSubscription,realityio::DirtyStageSubscription>,std::allocator<realityio::DirtyStageSubscription>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

realityio::StageUpAxisBuilder *realityio::StageUpAxisBuilder::StageUpAxisBuilder(realityio::StageUpAxisBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  uint64_t v21[2];
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void **v26[3];
  uint64_t v27;
  __int128 v28;
  _QWORD *v29[3];
  __int128 v30;
  _QWORD *v31[3];
  uint64_t v32;
  uint64_t v33;
  void ***v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v24, "StageUpAxisBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageUpAxisBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E544D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E544D8))
  {
    v20 = a2;
    v11 = operator new();
    v12 = operator new();
    v13 = operator new();
    MEMORY[0x2348B274C](&v27, "upAxis");
    v14 = v27;
    *(_QWORD *)v13 = v27;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      v14 = *(_QWORD *)v13;
      if ((v16 & 1) == 0)
      {
        v14 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v14;
      }
    }
    *(_BYTE *)(v13 + 8) = v14 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v28, v13);
    v35 = v28;
    v28 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v29, &v35, 1uLL);
    memset(v26, 0, sizeof(v26));
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v12, v29, v26);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v30, v12);
    v36 = v30;
    v30 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v31, &v36, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v11, v31);
    v17 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v32, v11);
    _MergedGlobals_0 = v32;
    unk_255E544D0 = v33;
    v32 = 0;
    v33 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v17);
    v34 = (void ***)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    v34 = v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    v26[0] = (void **)v29;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v26);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    if ((v27 & 7) != 0)
    {
      v18 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    __cxa_guard_release(&qword_255E544D8);
    a2 = v20;
  }
  v5 = (std::__shared_weak_count *)unk_255E544D0;
  v21[0] = _MergedGlobals_0;
  v21[1] = unk_255E544D0;
  if (unk_255E544D0)
  {
    v6 = (unint64_t *)(unk_255E544D0 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v24, (uint64_t)__p, v21);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  *(_QWORD *)this = &off_24FDE26A0;
  return this;
}

void sub_22FF3C0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  unsigned int *v38;
  unsigned int v39;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v36 - 80);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v36 - 104) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 104));
  a25 = &a32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v36 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if ((a28 & 7) != 0)
  {
    v38 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  MEMORY[0x2348B4E1C](v35, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E544D8);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t realityio::StageUpAxisBuilder::run(realityio::StageUpAxisBuilder *this, realityio::Inputs *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int **v7;
  uint64_t v8;
  realityio *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  float v11;
  __float2 v12;
  float32x4_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t result;
  unsigned int *v21;
  unsigned int v22;
  float32x4_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint8_t buf[8];
  uint8_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v25, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
  v3 = v26;
  if (v26)
  {
    v4 = v26 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)buf);
  v8 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v7);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v8, (uint64_t)&v25);
  if (!(_BYTE)v25)
  {
    v24 = 0;
LABEL_16:
    v19 = *(NSObject **)(realityio::logObjects(v9) + 24);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v19, OS_LOG_TYPE_DEFAULT, "Stopping operation to set up axis transform because entity no longer exists", buf, 2u);
    }
    goto LABEL_20;
  }
  v9 = (realityio *)v26;
  v24 = v26;
  if (!v26)
    goto LABEL_16;
  RERetain();
  Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  v11 = -0.7854;
  if ((v27 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)Data + 169) & 0xFFFFFFFFFFFFFFF8))
    v11 = 0.0;
  v12 = __sincosf_stret(v11);
  v13 = vmulq_n_f32((float32x4_t)xmmword_2301FF8E0, v12.__sinval);
  v13.i32[3] = LODWORD(v12.__cosval);
  v23 = v13;
  v14 = *((_QWORD *)a2 + 6);
  v15 = (uint8_t *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_24FDE2790;
  *((_QWORD *)v15 + 1) = &v24;
  *((_QWORD *)v15 + 2) = &v23;
  *((_QWORD *)v15 + 3) = &v27;
  v29 = v15;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 16))(v14, buf);
  v17 = v29;
  if (v29 == buf)
  {
    v18 = 4;
    v17 = buf;
  }
  else
  {
    if (!v29)
      goto LABEL_20;
    v18 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v17 + 8 * v18))(v17, v16);
LABEL_20:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v24);
  result = realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v25);
  if ((v27 & 7) != 0)
  {
    v21 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  return result;
}

void sub_22FF3C4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v19;
  unsigned int v20;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a11);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a12);
  if ((a18 & 7) != 0)
  {
    v19 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::StageUpAxisBuilder::clear(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

void realityio::StageUpAxisBuilder::~StageUpAxisBuilder(realityio::StageUpAxisBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](a1, a3);
    v6 = &a2[2 * a3];
    v7 = (_QWORD *)a1[1];
    do
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    while (a2 != v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_22FF3C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE2718;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF3C6C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  unsigned int *v3;
  unsigned int v4;

  if (v1)
  {
    if ((*v1 & 7) != 0)
    {
      v3 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    MEMORY[0x2348B4E1C](v1, 0x1060C40E5A1EACFLL);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v2;
  unsigned int v3;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    if ((*result & 7) != 0)
    {
      v2 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::DirtyMetadataDescriptor *,std::shared_ptr<realityio::DirtyMetadataDescriptor>::__shared_ptr_default_delete<realityio::DirtyMetadataDescriptor,realityio::DirtyMetadataDescriptor>,std::allocator<realityio::DirtyMetadataDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_22FF3C8AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = atomic_load(a1);
  if (!result)
  {
    result = operator new();
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = MEMORY[0x24BEE9CD8] + 16;
    *(_WORD *)(result + 12) = 0;
    *(_BYTE *)(result + 14) = 1;
    while (1)
    {
      v5 = __ldaxr(a1);
      if (v5)
        break;
      if (!__stlxr(result, a1))
        goto LABEL_7;
    }
    __clrex();
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    result = v5;
  }
LABEL_7:
  *a2 = result;
  v6 = (unsigned int *)(result + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t String;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  std::string::size_type v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::mutex *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  const void **EmptyString;
  unint64_t *v36;
  unint64_t v37;
  std::string::size_type size;
  unsigned int *v39;
  unsigned int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *__p[2];
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v52 = std::__shared_weak_count::lock(v6);
    if (v52)
      v51 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v53, a2);
  v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v51);
  if (v7 == v8)
  {
    std::operator+<char>();
    v20 = std::string::append(&v48, ") at prim path (");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v23 = *(char *)(String + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)String;
    else
      v24 = *(const std::string::value_type **)String;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(String + 23);
    else
      v25 = *(_QWORD *)(String + 8);
    v26 = std::string::append(&v49, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v50, ")");
    goto LABEL_22;
  }
  v9 = 1;
  v10 = v7;
  do
  {
    v10 = (_QWORD *)*v10;
    --v9;
  }
  while (v10 != v8);
  if (v9)
  {
    std::operator+<char>();
    v11 = std::string::append(&v48, ") at prim path (");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v13;
    else
      v15 = *(const std::string::value_type **)v13;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(_QWORD *)(v13 + 8);
    v17 = std::string::append(&v49, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v50, ") because more than one connected builder produced the same output type");
LABEL_22:
    v28 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v46, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    v29 = v47.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a3 + 24) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
    *(_QWORD *)(a3 + 32) = v29;
    *(_QWORD *)(a3 + 39) = *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 7);
    LOBYTE(v29) = v47.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = 0uLL;
    v46.__r_.__value_.__r.__words[2] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v29;
    if (v45.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    goto LABEL_48;
  }
  v30 = v7[5];
  v32 = *(std::mutex **)(v30 + 16);
  v31 = *(std::__shared_weak_count **)(v30 + 24);
  __p[0] = v32;
  __p[1] = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
  realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v32, EmptyString, &v46);
  if (v31)
  {
    v36 = (unint64_t *)&v31->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v46.__r_.__value_.__s.__data_[0])
  {
    size = v46.__r_.__value_.__l.__size_;
    v46.__r_.__value_.__l.__size_ = 0;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = size;
    __p[0] = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v46.__r_.__value_.__r.__words[1];
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    else
      v45 = v47;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)__p;
    *(std::string *)(a3 + 24) = v45;
  }
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v46);
LABEL_48:
  if ((v53 & 7) != 0)
  {
    v39 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = v52;
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_22FF3CD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;

  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a14);
  v33 = *(_QWORD *)(v31 - 40);
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v31 - 56);
  _Unwind_Resume(a1);
}

uint64_t realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>@<X0>(std::mutex *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v4;
  uint64_t v6;
  __int128 v7;
  std::string v8;
  _BYTE v9[8];
  __int128 v10;
  std::string v11;

  realityio::Outputs::getRawValue<realityio::WrappedRERef<REEntity *>>(a1, a2, (uint64_t)v9);
  if (v9[0])
  {
    *(_QWORD *)&v7 = v10;
    if ((_QWORD)v10)
    {
      RERetain();
      v4 = v7;
      RERetain();
    }
    else
    {
      v4 = 0;
    }
    a3->__r_.__value_.__s.__data_[0] = 1;
    a3->__r_.__value_.__l.__size_ = v4;
    v6 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v6);
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  }
  else
  {
    v7 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v8, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    else
      v8 = v11;
    a3->__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&a3->__r_.__value_.__r.__words[1] = v7;
    a3[1] = v8;
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_22FF3CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::find<realityio::BuilderAndIOName>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2 && (v4[4] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8));
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::find<realityio::BuilderAndIOName>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *i;
  unint64_t v9;

  v4 = realityio::BuilderAndIOName::Hash::operator()((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(_QWORD **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
    {
      v9 = i[1];
      if (v4 == v9)
      {
        if (i[2] == *a2 && (i[4] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8))
          return i;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

unint64_t realityio::BuilderAndIOName::Hash::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2);
  return (bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8))
        + 0x77FA823ACE0B5A40 * (v3 ^ (v3 >> 47))
        + ((0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47))) >> 2)
        - 0x61C8864680B583E9) ^ (0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47)));
}

void realityio::Outputs::getRawValue<realityio::WrappedRERef<REEntity *>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    if (v8)
      RERetain();
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)&v15 = 0;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v15);
  }
  std::mutex::unlock(v6);
}

void sub_22FF3D22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

_QWORD *realityio::WrappedRERef<REEntity *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *result;

  result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::~UsdGeomTokensType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>::New()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2348B2104]();
  return v0;
}

void sub_22FF3D36C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40828F5A6DLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::~UsdGeomTokensType(pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  uint64_t v278;
  unsigned int *v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int *v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int *v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  uint64_t v332;
  unsigned int *v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  uint64_t v350;
  unsigned int *v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  uint64_t v359;
  unsigned int *v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int *v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int *v369;
  unsigned int v370;
  uint64_t v371;
  unsigned int *v372;
  unsigned int v373;
  uint64_t v374;
  unsigned int *v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int *v378;
  unsigned int v379;
  uint64_t v380;
  unsigned int *v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  uint64_t v386;
  unsigned int *v387;
  unsigned int v388;
  uint64_t v389;
  unsigned int *v390;
  unsigned int v391;
  uint64_t v392;
  unsigned int *v393;
  unsigned int v394;
  uint64_t v395;
  unsigned int *v396;
  unsigned int v397;
  uint64_t v398;
  unsigned int *v399;
  unsigned int v400;
  uint64_t v401;
  unsigned int *v402;
  unsigned int v403;
  uint64_t v404;
  unsigned int *v405;
  unsigned int v406;
  uint64_t v407;
  unsigned int *v408;
  unsigned int v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int *v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int *v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int *v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int *v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int *v426;
  unsigned int v427;
  uint64_t v428;
  unsigned int *v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  uint64_t v434;
  unsigned int *v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int *v438;
  unsigned int v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  uint64_t v443;
  unsigned int *v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int *v447;
  unsigned int v448;
  uint64_t v449;
  unsigned int *v450;
  unsigned int v451;
  uint64_t v452;
  unsigned int *v453;
  unsigned int v454;
  uint64_t v455;
  unsigned int *v456;
  unsigned int v457;
  uint64_t v458;
  unsigned int *v459;
  unsigned int v460;
  uint64_t v461;
  unsigned int *v462;
  unsigned int v463;
  uint64_t v464;
  unsigned int *v465;
  unsigned int v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int v469;
  uint64_t v470;
  unsigned int *v471;
  unsigned int v472;
  uint64_t v473;
  unsigned int *v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int *v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int *v480;
  unsigned int v481;
  uint64_t v482;
  unsigned int *v483;
  unsigned int v484;
  uint64_t v485;
  unsigned int *v486;
  unsigned int v487;
  uint64_t v488;
  unsigned int *v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int *v492;
  unsigned int v493;
  uint64_t v494;
  unsigned int *v495;
  unsigned int v496;
  uint64_t v497;
  unsigned int *v498;
  unsigned int v499;
  uint64_t v500;
  unsigned int *v501;
  unsigned int v502;
  uint64_t v503;
  unsigned int *v504;
  unsigned int v505;
  uint64_t v506;
  unsigned int *v507;
  unsigned int v508;
  uint64_t v509;
  unsigned int *v510;
  unsigned int v511;
  uint64_t v512;
  unsigned int *v513;
  unsigned int v514;
  uint64_t v515;
  unsigned int *v516;
  unsigned int v517;
  uint64_t v518;
  unsigned int *v519;
  unsigned int v520;
  uint64_t v521;
  unsigned int *v522;
  unsigned int v523;
  uint64_t v524;
  unsigned int *v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int *v528;
  unsigned int v529;
  uint64_t v530;
  unsigned int *v531;
  unsigned int v532;
  uint64_t v533;
  unsigned int *v534;
  unsigned int v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int *v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int *v543;
  unsigned int v544;
  uint64_t v545;
  unsigned int *v546;
  unsigned int v547;
  uint64_t v548;
  unsigned int *v549;
  unsigned int v550;
  uint64_t v551;
  unsigned int *v552;
  unsigned int v553;
  uint64_t v554;
  unsigned int *v555;
  unsigned int v556;
  uint64_t v557;
  unsigned int *v558;
  unsigned int v559;
  uint64_t v560;
  unsigned int *v561;
  unsigned int v562;
  uint64_t v563;
  unsigned int *v564;
  unsigned int v565;
  uint64_t v566;
  unsigned int *v567;
  unsigned int v568;
  uint64_t v569;
  unsigned int *v570;
  unsigned int v571;
  uint64_t v572;
  unsigned int *v573;
  unsigned int v574;
  uint64_t v575;
  unsigned int *v576;
  unsigned int v577;
  uint64_t v578;
  unsigned int *v579;
  unsigned int v580;
  uint64_t v581;
  unsigned int *v582;
  unsigned int v583;
  uint64_t v584;
  unsigned int *v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int *v588;
  unsigned int v589;
  uint64_t v590;
  unsigned int *v591;
  unsigned int v592;
  uint64_t v593;
  unsigned int *v594;
  unsigned int v595;
  uint64_t v596;
  unsigned int *v597;
  unsigned int v598;
  uint64_t v599;
  unsigned int *v600;
  unsigned int v601;
  unsigned int *v602;
  unsigned int v603;
  void **v604;

  v604 = (void **)((char *)this + 1608);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v604);
  v2 = *((_QWORD *)this + 200);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 199);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 198);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 197);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 196);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 195);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 194);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 193);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 192);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 191);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 190);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 189);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 188);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 187);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 186);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 185);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 184);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 183);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 182);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 181);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 180);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 179);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 178);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 177);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 176);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 175);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 174);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 173);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 172);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 171);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 170);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 169);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 168);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 167);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 166);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 165);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 164);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 163);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 162);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 161);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *((_QWORD *)this + 160);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *((_QWORD *)this + 159);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  v128 = *((_QWORD *)this + 158);
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  v131 = *((_QWORD *)this + 157);
  if ((v131 & 7) != 0)
  {
    v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  v134 = *((_QWORD *)this + 156);
  if ((v134 & 7) != 0)
  {
    v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  v137 = *((_QWORD *)this + 155);
  if ((v137 & 7) != 0)
  {
    v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = *((_QWORD *)this + 154);
  if ((v140 & 7) != 0)
  {
    v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
    do
      v142 = __ldxr(v141);
    while (__stlxr(v142 - 2, v141));
  }
  v143 = *((_QWORD *)this + 153);
  if ((v143 & 7) != 0)
  {
    v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  v146 = *((_QWORD *)this + 152);
  if ((v146 & 7) != 0)
  {
    v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  v149 = *((_QWORD *)this + 151);
  if ((v149 & 7) != 0)
  {
    v150 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
    do
      v151 = __ldxr(v150);
    while (__stlxr(v151 - 2, v150));
  }
  v152 = *((_QWORD *)this + 150);
  if ((v152 & 7) != 0)
  {
    v153 = (unsigned int *)(v152 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  v155 = *((_QWORD *)this + 149);
  if ((v155 & 7) != 0)
  {
    v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
    do
      v157 = __ldxr(v156);
    while (__stlxr(v157 - 2, v156));
  }
  v158 = *((_QWORD *)this + 148);
  if ((v158 & 7) != 0)
  {
    v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = *((_QWORD *)this + 147);
  if ((v161 & 7) != 0)
  {
    v162 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  v164 = *((_QWORD *)this + 146);
  if ((v164 & 7) != 0)
  {
    v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v166 = __ldxr(v165);
    while (__stlxr(v166 - 2, v165));
  }
  v167 = *((_QWORD *)this + 145);
  if ((v167 & 7) != 0)
  {
    v168 = (unsigned int *)(v167 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  v170 = *((_QWORD *)this + 144);
  if ((v170 & 7) != 0)
  {
    v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  v173 = *((_QWORD *)this + 143);
  if ((v173 & 7) != 0)
  {
    v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v175 = __ldxr(v174);
    while (__stlxr(v175 - 2, v174));
  }
  v176 = *((_QWORD *)this + 142);
  if ((v176 & 7) != 0)
  {
    v177 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  v179 = *((_QWORD *)this + 141);
  if ((v179 & 7) != 0)
  {
    v180 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = *((_QWORD *)this + 140);
  if ((v182 & 7) != 0)
  {
    v183 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  v185 = *((_QWORD *)this + 139);
  if ((v185 & 7) != 0)
  {
    v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v187 = __ldxr(v186);
    while (__stlxr(v187 - 2, v186));
  }
  v188 = *((_QWORD *)this + 138);
  if ((v188 & 7) != 0)
  {
    v189 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v190 = __ldxr(v189);
    while (__stlxr(v190 - 2, v189));
  }
  v191 = *((_QWORD *)this + 137);
  if ((v191 & 7) != 0)
  {
    v192 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  v194 = *((_QWORD *)this + 136);
  if ((v194 & 7) != 0)
  {
    v195 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v196 = __ldxr(v195);
    while (__stlxr(v196 - 2, v195));
  }
  v197 = *((_QWORD *)this + 135);
  if ((v197 & 7) != 0)
  {
    v198 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  v200 = *((_QWORD *)this + 134);
  if ((v200 & 7) != 0)
  {
    v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = *((_QWORD *)this + 133);
  if ((v203 & 7) != 0)
  {
    v204 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  v206 = *((_QWORD *)this + 132);
  if ((v206 & 7) != 0)
  {
    v207 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  v209 = *((_QWORD *)this + 131);
  if ((v209 & 7) != 0)
  {
    v210 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v211 = __ldxr(v210);
    while (__stlxr(v211 - 2, v210));
  }
  v212 = *((_QWORD *)this + 130);
  if ((v212 & 7) != 0)
  {
    v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  v215 = *((_QWORD *)this + 129);
  if ((v215 & 7) != 0)
  {
    v216 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stlxr(v217 - 2, v216));
  }
  v218 = *((_QWORD *)this + 128);
  if ((v218 & 7) != 0)
  {
    v219 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  v221 = *((_QWORD *)this + 127);
  if ((v221 & 7) != 0)
  {
    v222 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stlxr(v223 - 2, v222));
  }
  v224 = *((_QWORD *)this + 126);
  if ((v224 & 7) != 0)
  {
    v225 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stlxr(v226 - 2, v225));
  }
  v227 = *((_QWORD *)this + 125);
  if ((v227 & 7) != 0)
  {
    v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  v230 = *((_QWORD *)this + 124);
  if ((v230 & 7) != 0)
  {
    v231 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v232 = __ldxr(v231);
    while (__stlxr(v232 - 2, v231));
  }
  v233 = *((_QWORD *)this + 123);
  if ((v233 & 7) != 0)
  {
    v234 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  v236 = *((_QWORD *)this + 122);
  if ((v236 & 7) != 0)
  {
    v237 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stlxr(v238 - 2, v237));
  }
  v239 = *((_QWORD *)this + 121);
  if ((v239 & 7) != 0)
  {
    v240 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stlxr(v241 - 2, v240));
  }
  v242 = *((_QWORD *)this + 120);
  if ((v242 & 7) != 0)
  {
    v243 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  v245 = *((_QWORD *)this + 119);
  if ((v245 & 7) != 0)
  {
    v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  v248 = *((_QWORD *)this + 118);
  if ((v248 & 7) != 0)
  {
    v249 = (unsigned int *)(v248 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stlxr(v250 - 2, v249));
  }
  v251 = *((_QWORD *)this + 117);
  if ((v251 & 7) != 0)
  {
    v252 = (unsigned int *)(v251 & 0xFFFFFFFFFFFFFFF8);
    do
      v253 = __ldxr(v252);
    while (__stlxr(v253 - 2, v252));
  }
  v254 = *((_QWORD *)this + 116);
  if ((v254 & 7) != 0)
  {
    v255 = (unsigned int *)(v254 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stlxr(v256 - 2, v255));
  }
  v257 = *((_QWORD *)this + 115);
  if ((v257 & 7) != 0)
  {
    v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  v260 = *((_QWORD *)this + 114);
  if ((v260 & 7) != 0)
  {
    v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
    do
      v262 = __ldxr(v261);
    while (__stlxr(v262 - 2, v261));
  }
  v263 = *((_QWORD *)this + 113);
  if ((v263 & 7) != 0)
  {
    v264 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
    do
      v265 = __ldxr(v264);
    while (__stlxr(v265 - 2, v264));
  }
  v266 = *((_QWORD *)this + 112);
  if ((v266 & 7) != 0)
  {
    v267 = (unsigned int *)(v266 & 0xFFFFFFFFFFFFFFF8);
    do
      v268 = __ldxr(v267);
    while (__stlxr(v268 - 2, v267));
  }
  v269 = *((_QWORD *)this + 111);
  if ((v269 & 7) != 0)
  {
    v270 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
    do
      v271 = __ldxr(v270);
    while (__stlxr(v271 - 2, v270));
  }
  v272 = *((_QWORD *)this + 110);
  if ((v272 & 7) != 0)
  {
    v273 = (unsigned int *)(v272 & 0xFFFFFFFFFFFFFFF8);
    do
      v274 = __ldxr(v273);
    while (__stlxr(v274 - 2, v273));
  }
  v275 = *((_QWORD *)this + 109);
  if ((v275 & 7) != 0)
  {
    v276 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFF8);
    do
      v277 = __ldxr(v276);
    while (__stlxr(v277 - 2, v276));
  }
  v278 = *((_QWORD *)this + 108);
  if ((v278 & 7) != 0)
  {
    v279 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
    do
      v280 = __ldxr(v279);
    while (__stlxr(v280 - 2, v279));
  }
  v281 = *((_QWORD *)this + 107);
  if ((v281 & 7) != 0)
  {
    v282 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFFFF8);
    do
      v283 = __ldxr(v282);
    while (__stlxr(v283 - 2, v282));
  }
  v284 = *((_QWORD *)this + 106);
  if ((v284 & 7) != 0)
  {
    v285 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
    do
      v286 = __ldxr(v285);
    while (__stlxr(v286 - 2, v285));
  }
  v287 = *((_QWORD *)this + 105);
  if ((v287 & 7) != 0)
  {
    v288 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
    do
      v289 = __ldxr(v288);
    while (__stlxr(v289 - 2, v288));
  }
  v290 = *((_QWORD *)this + 104);
  if ((v290 & 7) != 0)
  {
    v291 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFFFF8);
    do
      v292 = __ldxr(v291);
    while (__stlxr(v292 - 2, v291));
  }
  v293 = *((_QWORD *)this + 103);
  if ((v293 & 7) != 0)
  {
    v294 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
    do
      v295 = __ldxr(v294);
    while (__stlxr(v295 - 2, v294));
  }
  v296 = *((_QWORD *)this + 102);
  if ((v296 & 7) != 0)
  {
    v297 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFFFF8);
    do
      v298 = __ldxr(v297);
    while (__stlxr(v298 - 2, v297));
  }
  v299 = *((_QWORD *)this + 101);
  if ((v299 & 7) != 0)
  {
    v300 = (unsigned int *)(v299 & 0xFFFFFFFFFFFFFFF8);
    do
      v301 = __ldxr(v300);
    while (__stlxr(v301 - 2, v300));
  }
  v302 = *((_QWORD *)this + 100);
  if ((v302 & 7) != 0)
  {
    v303 = (unsigned int *)(v302 & 0xFFFFFFFFFFFFFFF8);
    do
      v304 = __ldxr(v303);
    while (__stlxr(v304 - 2, v303));
  }
  v305 = *((_QWORD *)this + 99);
  if ((v305 & 7) != 0)
  {
    v306 = (unsigned int *)(v305 & 0xFFFFFFFFFFFFFFF8);
    do
      v307 = __ldxr(v306);
    while (__stlxr(v307 - 2, v306));
  }
  v308 = *((_QWORD *)this + 98);
  if ((v308 & 7) != 0)
  {
    v309 = (unsigned int *)(v308 & 0xFFFFFFFFFFFFFFF8);
    do
      v310 = __ldxr(v309);
    while (__stlxr(v310 - 2, v309));
  }
  v311 = *((_QWORD *)this + 97);
  if ((v311 & 7) != 0)
  {
    v312 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
    do
      v313 = __ldxr(v312);
    while (__stlxr(v313 - 2, v312));
  }
  v314 = *((_QWORD *)this + 96);
  if ((v314 & 7) != 0)
  {
    v315 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFFFF8);
    do
      v316 = __ldxr(v315);
    while (__stlxr(v316 - 2, v315));
  }
  v317 = *((_QWORD *)this + 95);
  if ((v317 & 7) != 0)
  {
    v318 = (unsigned int *)(v317 & 0xFFFFFFFFFFFFFFF8);
    do
      v319 = __ldxr(v318);
    while (__stlxr(v319 - 2, v318));
  }
  v320 = *((_QWORD *)this + 94);
  if ((v320 & 7) != 0)
  {
    v321 = (unsigned int *)(v320 & 0xFFFFFFFFFFFFFFF8);
    do
      v322 = __ldxr(v321);
    while (__stlxr(v322 - 2, v321));
  }
  v323 = *((_QWORD *)this + 93);
  if ((v323 & 7) != 0)
  {
    v324 = (unsigned int *)(v323 & 0xFFFFFFFFFFFFFFF8);
    do
      v325 = __ldxr(v324);
    while (__stlxr(v325 - 2, v324));
  }
  v326 = *((_QWORD *)this + 92);
  if ((v326 & 7) != 0)
  {
    v327 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFFFF8);
    do
      v328 = __ldxr(v327);
    while (__stlxr(v328 - 2, v327));
  }
  v329 = *((_QWORD *)this + 91);
  if ((v329 & 7) != 0)
  {
    v330 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
    do
      v331 = __ldxr(v330);
    while (__stlxr(v331 - 2, v330));
  }
  v332 = *((_QWORD *)this + 90);
  if ((v332 & 7) != 0)
  {
    v333 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFFFF8);
    do
      v334 = __ldxr(v333);
    while (__stlxr(v334 - 2, v333));
  }
  v335 = *((_QWORD *)this + 89);
  if ((v335 & 7) != 0)
  {
    v336 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v337 = __ldxr(v336);
    while (__stlxr(v337 - 2, v336));
  }
  v338 = *((_QWORD *)this + 88);
  if ((v338 & 7) != 0)
  {
    v339 = (unsigned int *)(v338 & 0xFFFFFFFFFFFFFFF8);
    do
      v340 = __ldxr(v339);
    while (__stlxr(v340 - 2, v339));
  }
  v341 = *((_QWORD *)this + 87);
  if ((v341 & 7) != 0)
  {
    v342 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
    do
      v343 = __ldxr(v342);
    while (__stlxr(v343 - 2, v342));
  }
  v344 = *((_QWORD *)this + 86);
  if ((v344 & 7) != 0)
  {
    v345 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
    do
      v346 = __ldxr(v345);
    while (__stlxr(v346 - 2, v345));
  }
  v347 = *((_QWORD *)this + 85);
  if ((v347 & 7) != 0)
  {
    v348 = (unsigned int *)(v347 & 0xFFFFFFFFFFFFFFF8);
    do
      v349 = __ldxr(v348);
    while (__stlxr(v349 - 2, v348));
  }
  v350 = *((_QWORD *)this + 84);
  if ((v350 & 7) != 0)
  {
    v351 = (unsigned int *)(v350 & 0xFFFFFFFFFFFFFFF8);
    do
      v352 = __ldxr(v351);
    while (__stlxr(v352 - 2, v351));
  }
  v353 = *((_QWORD *)this + 83);
  if ((v353 & 7) != 0)
  {
    v354 = (unsigned int *)(v353 & 0xFFFFFFFFFFFFFFF8);
    do
      v355 = __ldxr(v354);
    while (__stlxr(v355 - 2, v354));
  }
  v356 = *((_QWORD *)this + 82);
  if ((v356 & 7) != 0)
  {
    v357 = (unsigned int *)(v356 & 0xFFFFFFFFFFFFFFF8);
    do
      v358 = __ldxr(v357);
    while (__stlxr(v358 - 2, v357));
  }
  v359 = *((_QWORD *)this + 81);
  if ((v359 & 7) != 0)
  {
    v360 = (unsigned int *)(v359 & 0xFFFFFFFFFFFFFFF8);
    do
      v361 = __ldxr(v360);
    while (__stlxr(v361 - 2, v360));
  }
  v362 = *((_QWORD *)this + 80);
  if ((v362 & 7) != 0)
  {
    v363 = (unsigned int *)(v362 & 0xFFFFFFFFFFFFFFF8);
    do
      v364 = __ldxr(v363);
    while (__stlxr(v364 - 2, v363));
  }
  v365 = *((_QWORD *)this + 79);
  if ((v365 & 7) != 0)
  {
    v366 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFFFF8);
    do
      v367 = __ldxr(v366);
    while (__stlxr(v367 - 2, v366));
  }
  v368 = *((_QWORD *)this + 78);
  if ((v368 & 7) != 0)
  {
    v369 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
    do
      v370 = __ldxr(v369);
    while (__stlxr(v370 - 2, v369));
  }
  v371 = *((_QWORD *)this + 77);
  if ((v371 & 7) != 0)
  {
    v372 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
    do
      v373 = __ldxr(v372);
    while (__stlxr(v373 - 2, v372));
  }
  v374 = *((_QWORD *)this + 76);
  if ((v374 & 7) != 0)
  {
    v375 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
    do
      v376 = __ldxr(v375);
    while (__stlxr(v376 - 2, v375));
  }
  v377 = *((_QWORD *)this + 75);
  if ((v377 & 7) != 0)
  {
    v378 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFFFF8);
    do
      v379 = __ldxr(v378);
    while (__stlxr(v379 - 2, v378));
  }
  v380 = *((_QWORD *)this + 74);
  if ((v380 & 7) != 0)
  {
    v381 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
    do
      v382 = __ldxr(v381);
    while (__stlxr(v382 - 2, v381));
  }
  v383 = *((_QWORD *)this + 73);
  if ((v383 & 7) != 0)
  {
    v384 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
    do
      v385 = __ldxr(v384);
    while (__stlxr(v385 - 2, v384));
  }
  v386 = *((_QWORD *)this + 72);
  if ((v386 & 7) != 0)
  {
    v387 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
    do
      v388 = __ldxr(v387);
    while (__stlxr(v388 - 2, v387));
  }
  v389 = *((_QWORD *)this + 71);
  if ((v389 & 7) != 0)
  {
    v390 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
    do
      v391 = __ldxr(v390);
    while (__stlxr(v391 - 2, v390));
  }
  v392 = *((_QWORD *)this + 70);
  if ((v392 & 7) != 0)
  {
    v393 = (unsigned int *)(v392 & 0xFFFFFFFFFFFFFFF8);
    do
      v394 = __ldxr(v393);
    while (__stlxr(v394 - 2, v393));
  }
  v395 = *((_QWORD *)this + 69);
  if ((v395 & 7) != 0)
  {
    v396 = (unsigned int *)(v395 & 0xFFFFFFFFFFFFFFF8);
    do
      v397 = __ldxr(v396);
    while (__stlxr(v397 - 2, v396));
  }
  v398 = *((_QWORD *)this + 68);
  if ((v398 & 7) != 0)
  {
    v399 = (unsigned int *)(v398 & 0xFFFFFFFFFFFFFFF8);
    do
      v400 = __ldxr(v399);
    while (__stlxr(v400 - 2, v399));
  }
  v401 = *((_QWORD *)this + 67);
  if ((v401 & 7) != 0)
  {
    v402 = (unsigned int *)(v401 & 0xFFFFFFFFFFFFFFF8);
    do
      v403 = __ldxr(v402);
    while (__stlxr(v403 - 2, v402));
  }
  v404 = *((_QWORD *)this + 66);
  if ((v404 & 7) != 0)
  {
    v405 = (unsigned int *)(v404 & 0xFFFFFFFFFFFFFFF8);
    do
      v406 = __ldxr(v405);
    while (__stlxr(v406 - 2, v405));
  }
  v407 = *((_QWORD *)this + 65);
  if ((v407 & 7) != 0)
  {
    v408 = (unsigned int *)(v407 & 0xFFFFFFFFFFFFFFF8);
    do
      v409 = __ldxr(v408);
    while (__stlxr(v409 - 2, v408));
  }
  v410 = *((_QWORD *)this + 64);
  if ((v410 & 7) != 0)
  {
    v411 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
    do
      v412 = __ldxr(v411);
    while (__stlxr(v412 - 2, v411));
  }
  v413 = *((_QWORD *)this + 63);
  if ((v413 & 7) != 0)
  {
    v414 = (unsigned int *)(v413 & 0xFFFFFFFFFFFFFFF8);
    do
      v415 = __ldxr(v414);
    while (__stlxr(v415 - 2, v414));
  }
  v416 = *((_QWORD *)this + 62);
  if ((v416 & 7) != 0)
  {
    v417 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
    do
      v418 = __ldxr(v417);
    while (__stlxr(v418 - 2, v417));
  }
  v419 = *((_QWORD *)this + 61);
  if ((v419 & 7) != 0)
  {
    v420 = (unsigned int *)(v419 & 0xFFFFFFFFFFFFFFF8);
    do
      v421 = __ldxr(v420);
    while (__stlxr(v421 - 2, v420));
  }
  v422 = *((_QWORD *)this + 60);
  if ((v422 & 7) != 0)
  {
    v423 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
    do
      v424 = __ldxr(v423);
    while (__stlxr(v424 - 2, v423));
  }
  v425 = *((_QWORD *)this + 59);
  if ((v425 & 7) != 0)
  {
    v426 = (unsigned int *)(v425 & 0xFFFFFFFFFFFFFFF8);
    do
      v427 = __ldxr(v426);
    while (__stlxr(v427 - 2, v426));
  }
  v428 = *((_QWORD *)this + 58);
  if ((v428 & 7) != 0)
  {
    v429 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
    do
      v430 = __ldxr(v429);
    while (__stlxr(v430 - 2, v429));
  }
  v431 = *((_QWORD *)this + 57);
  if ((v431 & 7) != 0)
  {
    v432 = (unsigned int *)(v431 & 0xFFFFFFFFFFFFFFF8);
    do
      v433 = __ldxr(v432);
    while (__stlxr(v433 - 2, v432));
  }
  v434 = *((_QWORD *)this + 56);
  if ((v434 & 7) != 0)
  {
    v435 = (unsigned int *)(v434 & 0xFFFFFFFFFFFFFFF8);
    do
      v436 = __ldxr(v435);
    while (__stlxr(v436 - 2, v435));
  }
  v437 = *((_QWORD *)this + 55);
  if ((v437 & 7) != 0)
  {
    v438 = (unsigned int *)(v437 & 0xFFFFFFFFFFFFFFF8);
    do
      v439 = __ldxr(v438);
    while (__stlxr(v439 - 2, v438));
  }
  v440 = *((_QWORD *)this + 54);
  if ((v440 & 7) != 0)
  {
    v441 = (unsigned int *)(v440 & 0xFFFFFFFFFFFFFFF8);
    do
      v442 = __ldxr(v441);
    while (__stlxr(v442 - 2, v441));
  }
  v443 = *((_QWORD *)this + 53);
  if ((v443 & 7) != 0)
  {
    v444 = (unsigned int *)(v443 & 0xFFFFFFFFFFFFFFF8);
    do
      v445 = __ldxr(v444);
    while (__stlxr(v445 - 2, v444));
  }
  v446 = *((_QWORD *)this + 52);
  if ((v446 & 7) != 0)
  {
    v447 = (unsigned int *)(v446 & 0xFFFFFFFFFFFFFFF8);
    do
      v448 = __ldxr(v447);
    while (__stlxr(v448 - 2, v447));
  }
  v449 = *((_QWORD *)this + 51);
  if ((v449 & 7) != 0)
  {
    v450 = (unsigned int *)(v449 & 0xFFFFFFFFFFFFFFF8);
    do
      v451 = __ldxr(v450);
    while (__stlxr(v451 - 2, v450));
  }
  v452 = *((_QWORD *)this + 50);
  if ((v452 & 7) != 0)
  {
    v453 = (unsigned int *)(v452 & 0xFFFFFFFFFFFFFFF8);
    do
      v454 = __ldxr(v453);
    while (__stlxr(v454 - 2, v453));
  }
  v455 = *((_QWORD *)this + 49);
  if ((v455 & 7) != 0)
  {
    v456 = (unsigned int *)(v455 & 0xFFFFFFFFFFFFFFF8);
    do
      v457 = __ldxr(v456);
    while (__stlxr(v457 - 2, v456));
  }
  v458 = *((_QWORD *)this + 48);
  if ((v458 & 7) != 0)
  {
    v459 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFFFF8);
    do
      v460 = __ldxr(v459);
    while (__stlxr(v460 - 2, v459));
  }
  v461 = *((_QWORD *)this + 47);
  if ((v461 & 7) != 0)
  {
    v462 = (unsigned int *)(v461 & 0xFFFFFFFFFFFFFFF8);
    do
      v463 = __ldxr(v462);
    while (__stlxr(v463 - 2, v462));
  }
  v464 = *((_QWORD *)this + 46);
  if ((v464 & 7) != 0)
  {
    v465 = (unsigned int *)(v464 & 0xFFFFFFFFFFFFFFF8);
    do
      v466 = __ldxr(v465);
    while (__stlxr(v466 - 2, v465));
  }
  v467 = *((_QWORD *)this + 45);
  if ((v467 & 7) != 0)
  {
    v468 = (unsigned int *)(v467 & 0xFFFFFFFFFFFFFFF8);
    do
      v469 = __ldxr(v468);
    while (__stlxr(v469 - 2, v468));
  }
  v470 = *((_QWORD *)this + 44);
  if ((v470 & 7) != 0)
  {
    v471 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
    do
      v472 = __ldxr(v471);
    while (__stlxr(v472 - 2, v471));
  }
  v473 = *((_QWORD *)this + 43);
  if ((v473 & 7) != 0)
  {
    v474 = (unsigned int *)(v473 & 0xFFFFFFFFFFFFFFF8);
    do
      v475 = __ldxr(v474);
    while (__stlxr(v475 - 2, v474));
  }
  v476 = *((_QWORD *)this + 42);
  if ((v476 & 7) != 0)
  {
    v477 = (unsigned int *)(v476 & 0xFFFFFFFFFFFFFFF8);
    do
      v478 = __ldxr(v477);
    while (__stlxr(v478 - 2, v477));
  }
  v479 = *((_QWORD *)this + 41);
  if ((v479 & 7) != 0)
  {
    v480 = (unsigned int *)(v479 & 0xFFFFFFFFFFFFFFF8);
    do
      v481 = __ldxr(v480);
    while (__stlxr(v481 - 2, v480));
  }
  v482 = *((_QWORD *)this + 40);
  if ((v482 & 7) != 0)
  {
    v483 = (unsigned int *)(v482 & 0xFFFFFFFFFFFFFFF8);
    do
      v484 = __ldxr(v483);
    while (__stlxr(v484 - 2, v483));
  }
  v485 = *((_QWORD *)this + 39);
  if ((v485 & 7) != 0)
  {
    v486 = (unsigned int *)(v485 & 0xFFFFFFFFFFFFFFF8);
    do
      v487 = __ldxr(v486);
    while (__stlxr(v487 - 2, v486));
  }
  v488 = *((_QWORD *)this + 38);
  if ((v488 & 7) != 0)
  {
    v489 = (unsigned int *)(v488 & 0xFFFFFFFFFFFFFFF8);
    do
      v490 = __ldxr(v489);
    while (__stlxr(v490 - 2, v489));
  }
  v491 = *((_QWORD *)this + 37);
  if ((v491 & 7) != 0)
  {
    v492 = (unsigned int *)(v491 & 0xFFFFFFFFFFFFFFF8);
    do
      v493 = __ldxr(v492);
    while (__stlxr(v493 - 2, v492));
  }
  v494 = *((_QWORD *)this + 36);
  if ((v494 & 7) != 0)
  {
    v495 = (unsigned int *)(v494 & 0xFFFFFFFFFFFFFFF8);
    do
      v496 = __ldxr(v495);
    while (__stlxr(v496 - 2, v495));
  }
  v497 = *((_QWORD *)this + 35);
  if ((v497 & 7) != 0)
  {
    v498 = (unsigned int *)(v497 & 0xFFFFFFFFFFFFFFF8);
    do
      v499 = __ldxr(v498);
    while (__stlxr(v499 - 2, v498));
  }
  v500 = *((_QWORD *)this + 34);
  if ((v500 & 7) != 0)
  {
    v501 = (unsigned int *)(v500 & 0xFFFFFFFFFFFFFFF8);
    do
      v502 = __ldxr(v501);
    while (__stlxr(v502 - 2, v501));
  }
  v503 = *((_QWORD *)this + 33);
  if ((v503 & 7) != 0)
  {
    v504 = (unsigned int *)(v503 & 0xFFFFFFFFFFFFFFF8);
    do
      v505 = __ldxr(v504);
    while (__stlxr(v505 - 2, v504));
  }
  v506 = *((_QWORD *)this + 32);
  if ((v506 & 7) != 0)
  {
    v507 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
    do
      v508 = __ldxr(v507);
    while (__stlxr(v508 - 2, v507));
  }
  v509 = *((_QWORD *)this + 31);
  if ((v509 & 7) != 0)
  {
    v510 = (unsigned int *)(v509 & 0xFFFFFFFFFFFFFFF8);
    do
      v511 = __ldxr(v510);
    while (__stlxr(v511 - 2, v510));
  }
  v512 = *((_QWORD *)this + 30);
  if ((v512 & 7) != 0)
  {
    v513 = (unsigned int *)(v512 & 0xFFFFFFFFFFFFFFF8);
    do
      v514 = __ldxr(v513);
    while (__stlxr(v514 - 2, v513));
  }
  v515 = *((_QWORD *)this + 29);
  if ((v515 & 7) != 0)
  {
    v516 = (unsigned int *)(v515 & 0xFFFFFFFFFFFFFFF8);
    do
      v517 = __ldxr(v516);
    while (__stlxr(v517 - 2, v516));
  }
  v518 = *((_QWORD *)this + 28);
  if ((v518 & 7) != 0)
  {
    v519 = (unsigned int *)(v518 & 0xFFFFFFFFFFFFFFF8);
    do
      v520 = __ldxr(v519);
    while (__stlxr(v520 - 2, v519));
  }
  v521 = *((_QWORD *)this + 27);
  if ((v521 & 7) != 0)
  {
    v522 = (unsigned int *)(v521 & 0xFFFFFFFFFFFFFFF8);
    do
      v523 = __ldxr(v522);
    while (__stlxr(v523 - 2, v522));
  }
  v524 = *((_QWORD *)this + 26);
  if ((v524 & 7) != 0)
  {
    v525 = (unsigned int *)(v524 & 0xFFFFFFFFFFFFFFF8);
    do
      v526 = __ldxr(v525);
    while (__stlxr(v526 - 2, v525));
  }
  v527 = *((_QWORD *)this + 25);
  if ((v527 & 7) != 0)
  {
    v528 = (unsigned int *)(v527 & 0xFFFFFFFFFFFFFFF8);
    do
      v529 = __ldxr(v528);
    while (__stlxr(v529 - 2, v528));
  }
  v530 = *((_QWORD *)this + 24);
  if ((v530 & 7) != 0)
  {
    v531 = (unsigned int *)(v530 & 0xFFFFFFFFFFFFFFF8);
    do
      v532 = __ldxr(v531);
    while (__stlxr(v532 - 2, v531));
  }
  v533 = *((_QWORD *)this + 23);
  if ((v533 & 7) != 0)
  {
    v534 = (unsigned int *)(v533 & 0xFFFFFFFFFFFFFFF8);
    do
      v535 = __ldxr(v534);
    while (__stlxr(v535 - 2, v534));
  }
  v536 = *((_QWORD *)this + 22);
  if ((v536 & 7) != 0)
  {
    v537 = (unsigned int *)(v536 & 0xFFFFFFFFFFFFFFF8);
    do
      v538 = __ldxr(v537);
    while (__stlxr(v538 - 2, v537));
  }
  v539 = *((_QWORD *)this + 21);
  if ((v539 & 7) != 0)
  {
    v540 = (unsigned int *)(v539 & 0xFFFFFFFFFFFFFFF8);
    do
      v541 = __ldxr(v540);
    while (__stlxr(v541 - 2, v540));
  }
  v542 = *((_QWORD *)this + 20);
  if ((v542 & 7) != 0)
  {
    v543 = (unsigned int *)(v542 & 0xFFFFFFFFFFFFFFF8);
    do
      v544 = __ldxr(v543);
    while (__stlxr(v544 - 2, v543));
  }
  v545 = *((_QWORD *)this + 19);
  if ((v545 & 7) != 0)
  {
    v546 = (unsigned int *)(v545 & 0xFFFFFFFFFFFFFFF8);
    do
      v547 = __ldxr(v546);
    while (__stlxr(v547 - 2, v546));
  }
  v548 = *((_QWORD *)this + 18);
  if ((v548 & 7) != 0)
  {
    v549 = (unsigned int *)(v548 & 0xFFFFFFFFFFFFFFF8);
    do
      v550 = __ldxr(v549);
    while (__stlxr(v550 - 2, v549));
  }
  v551 = *((_QWORD *)this + 17);
  if ((v551 & 7) != 0)
  {
    v552 = (unsigned int *)(v551 & 0xFFFFFFFFFFFFFFF8);
    do
      v553 = __ldxr(v552);
    while (__stlxr(v553 - 2, v552));
  }
  v554 = *((_QWORD *)this + 16);
  if ((v554 & 7) != 0)
  {
    v555 = (unsigned int *)(v554 & 0xFFFFFFFFFFFFFFF8);
    do
      v556 = __ldxr(v555);
    while (__stlxr(v556 - 2, v555));
  }
  v557 = *((_QWORD *)this + 15);
  if ((v557 & 7) != 0)
  {
    v558 = (unsigned int *)(v557 & 0xFFFFFFFFFFFFFFF8);
    do
      v559 = __ldxr(v558);
    while (__stlxr(v559 - 2, v558));
  }
  v560 = *((_QWORD *)this + 14);
  if ((v560 & 7) != 0)
  {
    v561 = (unsigned int *)(v560 & 0xFFFFFFFFFFFFFFF8);
    do
      v562 = __ldxr(v561);
    while (__stlxr(v562 - 2, v561));
  }
  v563 = *((_QWORD *)this + 13);
  if ((v563 & 7) != 0)
  {
    v564 = (unsigned int *)(v563 & 0xFFFFFFFFFFFFFFF8);
    do
      v565 = __ldxr(v564);
    while (__stlxr(v565 - 2, v564));
  }
  v566 = *((_QWORD *)this + 12);
  if ((v566 & 7) != 0)
  {
    v567 = (unsigned int *)(v566 & 0xFFFFFFFFFFFFFFF8);
    do
      v568 = __ldxr(v567);
    while (__stlxr(v568 - 2, v567));
  }
  v569 = *((_QWORD *)this + 11);
  if ((v569 & 7) != 0)
  {
    v570 = (unsigned int *)(v569 & 0xFFFFFFFFFFFFFFF8);
    do
      v571 = __ldxr(v570);
    while (__stlxr(v571 - 2, v570));
  }
  v572 = *((_QWORD *)this + 10);
  if ((v572 & 7) != 0)
  {
    v573 = (unsigned int *)(v572 & 0xFFFFFFFFFFFFFFF8);
    do
      v574 = __ldxr(v573);
    while (__stlxr(v574 - 2, v573));
  }
  v575 = *((_QWORD *)this + 9);
  if ((v575 & 7) != 0)
  {
    v576 = (unsigned int *)(v575 & 0xFFFFFFFFFFFFFFF8);
    do
      v577 = __ldxr(v576);
    while (__stlxr(v577 - 2, v576));
  }
  v578 = *((_QWORD *)this + 8);
  if ((v578 & 7) != 0)
  {
    v579 = (unsigned int *)(v578 & 0xFFFFFFFFFFFFFFF8);
    do
      v580 = __ldxr(v579);
    while (__stlxr(v580 - 2, v579));
  }
  v581 = *((_QWORD *)this + 7);
  if ((v581 & 7) != 0)
  {
    v582 = (unsigned int *)(v581 & 0xFFFFFFFFFFFFFFF8);
    do
      v583 = __ldxr(v582);
    while (__stlxr(v583 - 2, v582));
  }
  v584 = *((_QWORD *)this + 6);
  if ((v584 & 7) != 0)
  {
    v585 = (unsigned int *)(v584 & 0xFFFFFFFFFFFFFFF8);
    do
      v586 = __ldxr(v585);
    while (__stlxr(v586 - 2, v585));
  }
  v587 = *((_QWORD *)this + 5);
  if ((v587 & 7) != 0)
  {
    v588 = (unsigned int *)(v587 & 0xFFFFFFFFFFFFFFF8);
    do
      v589 = __ldxr(v588);
    while (__stlxr(v589 - 2, v588));
  }
  v590 = *((_QWORD *)this + 4);
  if ((v590 & 7) != 0)
  {
    v591 = (unsigned int *)(v590 & 0xFFFFFFFFFFFFFFF8);
    do
      v592 = __ldxr(v591);
    while (__stlxr(v592 - 2, v591));
  }
  v593 = *((_QWORD *)this + 3);
  if ((v593 & 7) != 0)
  {
    v594 = (unsigned int *)(v593 & 0xFFFFFFFFFFFFFFF8);
    do
      v595 = __ldxr(v594);
    while (__stlxr(v595 - 2, v594));
  }
  v596 = *((_QWORD *)this + 2);
  if ((v596 & 7) != 0)
  {
    v597 = (unsigned int *)(v596 & 0xFFFFFFFFFFFFFFF8);
    do
      v598 = __ldxr(v597);
    while (__stlxr(v598 - 2, v597));
  }
  v599 = *((_QWORD *)this + 1);
  if ((v599 & 7) != 0)
  {
    v600 = (unsigned int *)(v599 & 0xFFFFFFFFFFFFFFF8);
    do
      v601 = __ldxr(v600);
    while (__stlxr(v601 - 2, v600));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v602 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v603 = __ldxr(v602);
    while (__stlxr(v603 - 2, v602));
  }
}

void std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE2790;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE2790;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  realityio *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint8_t v8[24];
  _QWORD v9[3];
  realityio *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  RETransformComponentGetComponentType();
  v2 = *(_QWORD *)(a1 + 16);
  v9[0] = &off_24FDE2800;
  v9[1] = v2;
  v10 = (realityio *)v9;
  *(_QWORD *)v8 = REEntityGetOrAddComponentByClass();
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(realityio *, uint8_t *))(*(_QWORD *)v10 + 48))(v10, v8);
  RENetworkMarkComponentDirty();
  v3 = v10;
  if (v10 == (realityio *)v9)
  {
    v4 = 4;
    v3 = (realityio *)v9;
  }
  else
  {
    if (!v10)
      goto LABEL_7;
    v4 = 5;
  }
  v3 = (realityio *)(*(uint64_t (**)(realityio *))(*(_QWORD *)v3 + 8 * v4))(v3);
LABEL_7:
  v5 = *(NSObject **)(realityio::logObjects(v3) + 24);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = **(_QWORD **)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v6)
    {
      v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0)
        v7 = *(const char **)v7;
    }
    else
    {
      v7 = "";
    }
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)&v8[4] = v7;
    _os_log_impl(&dword_22FF26000, v5, OS_LOG_TYPE_INFO, "Updating root entity orientation based on upAxis: %s", v8, 0xCu);
  }
}

void sub_22FF3EEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageUpAxisBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE2800;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE2800;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return RETransformComponentSetLocalOrientation();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio18StageUpAxisBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio18StageUpAxisBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio18StageUpAxisBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

uint64_t realityio::SpatialAudioComponentBuilder::kOutputName(realityio::SpatialAudioComponentBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "audio_animation_scene_data");
    realityio::SpatialAudioComponentBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SpatialAudioComponentBuilder::kOutputName(void)::kOutputName;
}

void sub_22FF3F090(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SpatialAudioComponentBuilder *realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(realityio::SpatialAudioComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  void *__src[2];
  uint64_t ComponentType;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__src, "SpatialAudioComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpatialAudioComponentBuilderIdentifier);
  realityio::generateSpatialAudioDirtyStageSubscription(&v12);
  v19 = v18;
  v16[0] = &off_24FDE2AC0;
  v17 = v16;
  v18[0] = &off_24FDE29B0;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)__src, (uint64_t)__p, &v12, (uint64_t)v18, (uint64_t)v16);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(ComponentType) < 0)
    operator delete(__src[0]);
  *(_QWORD *)this = &off_24FDE28B8;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  __src[0] = (void *)REAudioPlayerComponentGetComponentType();
  __src[1] = (void *)REAudioAnimationComponentGetComponentType();
  ComponentType = REAnimationComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 288, (char *)__src, (uint64_t)&v22, 3uLL);
  return this;
}

void sub_22FF3F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v28 = a21;
  if (a21 == v25)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a25;
  if (a25 == &a22)
  {
    v31 = 4;
    v30 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t realityio::SpatialAudioComponentBuilder::run(realityio::SpatialAudioComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  double v14;
  pxrInternal__aapl__pxrReserved__::UsdStage *v15;
  char *PrimPath;
  unsigned int *v17;
  unsigned int v18;
  realityio *v19;
  NSObject *v20;
  uint64_t Text;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v23;
  realityio::SpatialAudioFileAssetBuilder *v24;
  double v25;
  uint64_t v26;
  _BOOL8 hasValueForKey;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  realityio *v31;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v32;
  unsigned int *v33;
  unsigned int v34;
  double v35;
  double v36;
  unint64_t *v37;
  unint64_t v38;
  double v39;
  double v40;
  float v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  NSObject *v48;
  double v49;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v50;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v51;
  unint64_t v52;
  unint64_t i;
  float v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  realityio::SpatialAudioComponentBuilder *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  __int128 *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  double v81;
  void *__p;
  void *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[8];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[8];
  uint64_t v105;
  uint8_t v106[8];
  uint64_t v107;
  uint64_t v108;
  uint8_t *v109;
  char v110;
  __int128 buf;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v4 = realityio::EntityBuilder::kInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v4, (uint64_t)v104);
  if (v104[0])
  {
    v103 = v105;
    if (v105)
    {
      RERetain();
      v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, (realityio::Inputs *)((char *)a2 + 32));
      v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v6);
      v8 = v7;
      if (v7 == 0.0)
      {
LABEL_125:
        if ((v102 & 7) != 0)
        {
          v79 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
          do
            v80 = __ldxr(v79);
          while (__stlxr(v80 - 2, v79));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
        if (v100)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v100);
        goto LABEL_17;
      }
      pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v6);
      v10 = v9;
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v6);
      v12 = v11;
      Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)v99, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 128), (uint64_t)&buf);
      if ((_BYTE)buf)
      {
        v14 = *((double *)&buf + 1);
      }
      else
      {
        v14 = 0.0;
        if (v114 < 0)
          operator delete((void *)v113);
      }
      v23 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
      if (!v23)
        v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)v99, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v23 + 8), (uint64_t)&buf);
      if ((_BYTE)buf)
      {
        v25 = *((double *)&buf + 1);
      }
      else
      {
        v25 = 0.0;
        if (v114 < 0)
          operator delete((void *)v113);
      }
      v26 = realityio::SpatialAudioFileAssetBuilder::kOutputName(v24);
      MEMORY[0x2348B2764](&buf, v26);
      hasValueForKey = realityio::Inputs::hasValueForKey((uint64_t)a2, (unsigned int **)&buf);
      if ((buf & 7) != 0)
      {
        v28 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if (!hasValueForKey)
      {
        v47 = *(NSObject **)(realityio::logObjects((realityio *)hasValueForKey) + 24);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_22FF26000, v47, OS_LOG_TYPE_ERROR, "Stopping operation to set spatial audio component because audio file asset does not exist", (uint8_t *)&buf, 2u);
        }
        goto LABEL_125;
      }
      v30 = realityio::SpatialAudioFileAssetBuilder::kOutputName((realityio::SpatialAudioFileAssetBuilder *)hasValueForKey);
      realityio::Inputs::_getValue<REAsset *>((uint64_t)a2, v30, (uint64_t)&buf);
      if ((_BYTE)buf)
      {
        v98 = *((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          realityio::Inputs::prim((uint64_t *)v106, a2);
          v32 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
          if (!v32)
            v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v106, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v32 + 104));
          if ((v109 & 7) != 0)
          {
            v33 = (unsigned int *)((unint64_t)v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v34 = __ldxr(v33);
            while (__stlxr(v34 - 2, v33));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
          if (*(double *)&v107 != 0.0)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
          v94 = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          REAudioFileAssetGetLengthInSeconds();
          v36 = v35;
          v37 = (unint64_t *)MEMORY[0x24BEE80D8];
          v38 = atomic_load(MEMORY[0x24BEE80D8]);
          if (!v38)
            v38 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData();
          v39 = 1.0 / v8;
          v40 = v39 * v14;
          v41 = v36;
          if ((v94 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v38 + 80) & 0xFFFFFFFFFFFFFFF8))
          {
            v43 = v40 + v41;
          }
          else
          {
            v42 = atomic_load(v37);
            if (!v42)
              v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData();
            v43 = v39 * v10;
            if ((v94 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v42 + 88) & 0xFFFFFFFFFFFFFFF8))
            {
              if (v39 * v25 <= v40)
              {
                if (v43 >= v40 + v41)
                  v49 = v40 + v41;
                else
                  v49 = v43;
                if (v43 == 0.0)
                  v43 = v40 + v41;
                else
                  v43 = v49;
              }
              else
              {
                v43 = v39 * v25;
              }
            }
            else
            {
              v44 = atomic_load(v37);
              if (!v44)
                v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData();
              if ((v94 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF8))
              {
                v45 = atomic_load(v37);
                if (!v45)
                  v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData();
                if ((v94 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v45 + 56) & 0xFFFFFFFFFFFFFFF8))
                {
                  v46 = atomic_load(v37);
                  if (!v46)
                    v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData();
                  if ((v94 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v46 + 40) & 0xFFFFFFFFFFFFFFF8))
                    v40 = v39 * v12;
                  else
                    v43 = v39 * v25;
                }
              }
            }
          }
          v50 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
          if (!v50)
            v50 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v99, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v50 + 72));
          v90 = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
          v51 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
          if (!v51)
            v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v99, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v51 + 32));
          v85 = 1065353216;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
          __p = 0;
          v83 = 0;
          v84 = 0;
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::GetNumTimeSamples((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v86))
          {
            v52 = (unint64_t)((v43 - v40) / v39 + 1.0 + 0.5);
            std::vector<float>::resize((uint64_t)&__p, v52);
            if (v52)
            {
              for (i = 0; i != v52; ++i)
              {
                v81 = (double)i;
                realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)v86, &v81, (uint64_t)v106);
                v54 = *(double *)&v107;
                *((float *)__p + i) = v54;
                if (!v106[0] && v110 < 0)
                  operator delete(v109);
              }
            }
          }
          v55 = v83;
          if (v83 == __p)
          {
            v56 = 0;
          }
          else
          {
            v56 = createSampledAttributeAnimationTimelineAsset((uint64_t)a2, &__p);
            v55 = __p;
          }
          v83 = v55;
          v57 = createSampledAttributeAnimationTimelineAsset((uint64_t)a2, &__p);
          realityio::SpatialAudioComponentBuilder::deleteAnimationData((uint64_t)this);
          if (v56 | v57)
          {
            v58 = operator new();
            v59 = (realityio::SpatialAudioComponentBuilder *)realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT::SpatialAudioComponentDataT(v58, v103, v56, v57, v40, v43, v39);
            *((_QWORD *)this + 35) = v58;
            if (v56)
            {
              realityio::Builder::addAsset((uint64_t *)this, v56, 0);
              v59 = (realityio::SpatialAudioComponentBuilder *)RERelease();
            }
            if (v57)
            {
              realityio::Builder::addAsset((uint64_t *)this, v57, 0);
              v59 = (realityio::SpatialAudioComponentBuilder *)RERelease();
            }
            v61 = *((_QWORD *)this + 2);
            v60 = *((std::__shared_weak_count **)this + 3);
            *(_QWORD *)v106 = v61;
            v107 = (uint64_t)v60;
            if (*(double *)&v60 != 0.0)
            {
              p_shared_owners = (unint64_t *)&v60->__shared_owners_;
              do
                v63 = __ldxr(p_shared_owners);
              while (__stxr(v63 + 1, p_shared_owners));
            }
            v64 = (__int128 *)realityio::SpatialAudioComponentBuilder::kOutputName(v59);
            realityio::Outputs::storeValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *&>(v61, v64, (_QWORD *)this + 35);
            if (*(double *)&v60 != 0.0)
            {
              v65 = (unint64_t *)&v60->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
          }
          v67 = *((_QWORD *)a2 + 6);
          v68 = (uint8_t *)operator new(0x30uLL);
          *(_QWORD *)v68 = &off_24FDE2BC0;
          *((_QWORD *)v68 + 1) = &v103;
          *((_QWORD *)v68 + 2) = this;
          *((_QWORD *)v68 + 3) = &v98;
          *((_QWORD *)v68 + 4) = &v90;
          *((_QWORD *)v68 + 5) = &v85;
          v109 = v68;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v67 + 16))(v67, v106);
          v69 = v109;
          if (v109 == v106)
          {
            v70 = 4;
            v69 = v106;
          }
          else
          {
            if (!v109)
            {
LABEL_102:
              if (__p)
              {
                v83 = __p;
                operator delete(__p);
              }
              if ((v89 & 7) != 0)
              {
                v71 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
                do
                  v72 = __ldxr(v71);
                while (__stlxr(v72 - 2, v71));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
              if (v87)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v87);
              if ((v93 & 7) != 0)
              {
                v73 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
                do
                  v74 = __ldxr(v73);
                while (__stlxr(v74 - 2, v73));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
              if (v91)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v91);
              if ((v94 & 7) != 0)
              {
                v75 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
                do
                  v76 = __ldxr(v75);
                while (__stlxr(v76 - 2, v75));
              }
              if ((v97 & 7) != 0)
              {
                v77 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
                do
                  v78 = __ldxr(v77);
                while (__stlxr(v78 - 2, v77));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
              if (v95)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
LABEL_122:
              if (!(_BYTE)buf && v114 < 0)
                operator delete((void *)v113);
              goto LABEL_125;
            }
            v70 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
          goto LABEL_102;
        }
      }
      else
      {
        v98 = 0;
      }
      v48 = *(NSObject **)(realityio::logObjects(v31) + 24);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v106 = 0;
        _os_log_error_impl(&dword_22FF26000, v48, OS_LOG_TYPE_ERROR, "Stopping operation to set spatial audio component because audio file asset does not exist", v106, 2u);
      }
      goto LABEL_122;
    }
  }
  else
  {
    v103 = 0;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v15, (realityio::Inputs *)((char *)a2 + 32));
  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf);
  if ((v113 & 7) != 0)
  {
    v17 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
  v19 = (realityio *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
    v19 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  v20 = *(id *)(realityio::logObjects(v19) + 24);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = Text;
    _os_log_error_impl(&dword_22FF26000, v20, OS_LOG_TYPE_ERROR, "Unable to create audio entity at path (%s) because the parent entity does not exist.\n", (uint8_t *)&buf, 0xCu);
  }

LABEL_17:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v103);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v104);
}

void sub_22FF3FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int16 a35,char a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a30);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a34);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB780], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(v13);
          *(_BYTE *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_22FF402A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t createSampledAttributeAnimationTimelineAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t AudioAnimation;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = a1;
  if (a2[1] == *a2)
  {
    AudioAnimation = RETimelineDefinitionCreateAudioAnimation();
  }
  else
  {
    AudioAnimation = RETimelineDefinitionCreateSampledFloatAnimation();
    RETimelineDefinitionSetFloatValues();
    RETimelineDefinitionSetFrameInterval();
  }
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetStartTime();
  RETimelineDefinitionSetEndTime();
  RETimelineDefinitionSetTargetPath();
  v3 = *(_QWORD *)(a1 + 48);
  v4 = operator new(0x20uLL);
  *v4 = &off_24FDE2930;
  v4[1] = &v10;
  v4[2] = &v9;
  v4[3] = &AudioAnimation;
  v12 = v4;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
    goto LABEL_8;
  }
  if (v12)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
  }
  RERelease();
  return v9;
}

void sub_22FF404A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t realityio::SpatialAudioComponentBuilder::deleteAnimationData(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD **)(this + 280);
  if (v1)
  {
    v2 = this;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 2);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 1);
    v3 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
    this = MEMORY[0x2348B4E1C](v3, 0x1020C403044AE7CLL);
    *(_QWORD *)(v2 + 280) = 0;
  }
  return this;
}

void realityio::Outputs::storeValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *&>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE2B40;
  v7[3] = &off_24FDE2B90;
  v7[4] = *a3;
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  v9 = (std::__shared_weak_count *)v8[8];
  v8[7] = (uint64_t)(v7 + 3);
  v8[8] = (uint64_t)v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_22FF40678(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::SpatialAudioComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 48);
  v5 = a2;
  v6[0] = &off_24FDE2D40;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_22FF4074C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::SpatialAudioComponentBuilder::~SpatialAudioComponentBuilder(realityio::SpatialAudioComponentBuilder *this)
{
  realityio::SpatialAudioComponentBuilder::~SpatialAudioComponentBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void *v2;
  realityio::SpatialAudioComponentBuilder *v3;
  uint64_t v4;
  realityio::SpatialAudioComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDE28B8;
  realityio::SpatialAudioComponentBuilder::deleteAnimationData((uint64_t)this);
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::SpatialAudioComponentBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::SpatialAudioComponentBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::SpatialAudioComponentBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::SpatialAudioComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::SpatialAudioComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::SpatialAudioComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

BOOL realityio::Inputs::hasValueForKey(uint64_t a1, unsigned int **a2)
{
  std::__shared_weak_count *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unsigned int *v19;

  v17 = 0;
  v18 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    v18 = std::__shared_weak_count::lock(v4);
    if (v18)
      v17 = *(_QWORD *)(a1 + 16);
  }
  v5 = *a2;
  v19 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v19 = v6;
  }
  v8 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v17);
  v10 = v9;
  if ((v19 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v8 != v10;
}

void sub_22FF408A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE2930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE2930;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  uint64_t result;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  result = RETimelineDefinitionCreateTimelineAsset();
  **(_QWORD **)(a1 + 16) = result;
  return result;
}

uint64_t std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0,std::allocator<createSampledAttributeAnimationTimelineAsset(realityio::Inputs *,std::vector<float> &,double,double,double,char const*,char const*)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT::SpatialAudioComponentDataT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  *(_QWORD *)a1 = a2;
  if (a2)
    RERetain();
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
    RERetain();
  *(_QWORD *)(a1 + 16) = a4;
  if (a4)
    RERetain();
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  return a1;
}

void sub_22FF40A74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE29B0;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE29B0;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::SpatialAudioFileAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::SpatialAudioFileAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::SpatialAudioFileAssetBuilder::kOutputName(v9);
  v14 = (uint64_t *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, v14, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF40E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CurrentPrimInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_22FF40FE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CurrentPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE2A20;
  std::allocator<realityio::CurrentPrimInputDescriptor>::construct[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_22FF41048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::CurrentPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::CurrentPrimInputDescriptor>::construct[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF4112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE2A70;
  return a1;
}

void sub_22FF411DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::InputDescriptor::InputDescriptor(uint64_t a1, __int128 *a2, uint64_t *a3, int a4)
{
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)a1 = &off_24FDE2DD0;
  v7 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *a3;
  *(_QWORD *)(a1 + 32) = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void realityio::CurrentPrimInputDescriptor::~CurrentPrimInputDescriptor(realityio::CurrentPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *realityio::CurrentPrimInputDescriptor::resolvedPrimPaths@<X0>(unsigned int *a1@<X2>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, a1, a1);
}

void sub_22FF412F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void realityio::InputDescriptor::~InputDescriptor(realityio::InputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDE2DD0;
  v1 = *((_QWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

double realityio::InputDescriptor::resolvedPrimPaths@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v20, 0);
  return v9;
}

void sub_22FF41668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::SdfPath const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x18uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 4, a3);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v8 + 5, a3 + 1);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE2AC0;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE2AC0;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::SpatialAudioComponentBuilder::kOutputName((realityio::SpatialAudioComponentBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 41, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF41898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

char *std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

realityio::tokens::LightBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::LightBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::LightBuilderTokens_StaticTokenType::~LightBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType::SpatialAudioBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF41B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40D3CE914ALL);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_22FF41D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (!*(_BYTE *)v5 && *(char *)(v5 + 47) < 0)
    operator delete(*(void **)(v5 + 24));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<double>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_22FF41F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::Inputs::_getValue<REAsset *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  char v4;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t String;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::mutex *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::mutex *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const void **EmptyString;
  __int128 v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *__p[2];
  std::string v59;
  _BYTE v60[48];

  v55 = 0;
  v56 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    v56 = std::__shared_weak_count::lock(v8);
    if (v56)
      v55 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v57, a2);
  v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v55);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v52, ") at prim path (");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v25 = *(char *)(String + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)String;
    else
      v26 = *(const std::string::value_type **)String;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(String + 23);
    else
      v27 = *(_QWORD *)(String + 8);
    v28 = std::string::append(&v53, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ")");
LABEL_22:
    v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v60, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    v31 = *(_QWORD *)&v60[24];
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&v60[16];
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)&v60[31];
    LOBYTE(v31) = v60[39];
    memset(&v60[16], 0, 24);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v31;
    if (v59.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (std::mutex *)v52.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v11 = 1;
  v12 = v9;
  do
  {
    v12 = (_QWORD *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    v13 = std::string::append(&v52, ") at prim path (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v53, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v33 = v9[5];
  v35 = *(std::mutex **)(v33 + 16);
  v34 = *(std::__shared_weak_count **)(v33 + 24);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  realityio::Outputs::getRawValue<REAsset *>(v35, EmptyString, (uint64_t)v60);
  v40 = v60[0];
  if (v60[0])
  {
    *(_QWORD *)&v39 = *(_QWORD *)&v60[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v60[8];
    if ((v60[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)&v60[24], *(std::string::size_type *)&v60[32]);
      if (v60[0])
        v42 = 0;
      else
        v42 = v60[47] < 0;
      v41 = v42;
    }
    else
    {
      v41 = 0;
      v59 = *(std::string *)&v60[24];
    }
    v39 = *(_OWORD *)__p;
    size = v59.__r_.__value_.__l.__size_;
    v35 = (std::mutex *)v59.__r_.__value_.__r.__words[0];
    LODWORD(v53.__r_.__value_.__l.__data_) = v59.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v59.__r_.__value_.__r.__words[2] + 3);
    v4 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if (v41)
    {
      v50 = *(_OWORD *)__p;
      operator delete(*(void **)&v60[24]);
      v39 = v50;
    }
  }
  if (!v34)
    goto LABEL_53;
  v43 = (unint64_t *)&v34->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    v51 = v39;
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v39 = v51;
    if (v40)
      goto LABEL_54;
  }
  else
  {
LABEL_53:
    if (v40)
    {
LABEL_54:
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v39;
      goto LABEL_58;
    }
  }
  *(_OWORD *)v60 = v39;
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v60[16], (const std::string::value_type *)v35, size);
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
    *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
    v32 = v35;
    goto LABEL_30;
  }
  *(_QWORD *)&v60[16] = v35;
  *(_QWORD *)&v60[24] = size;
  *(_DWORD *)&v60[32] = v53.__r_.__value_.__l.__data_;
  *(_DWORD *)&v60[35] = *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3);
  v60[39] = v4;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
LABEL_58:
  if ((v57 & 7) != 0)
  {
    v45 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_22FF42414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<REAsset *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF42600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdMediaTokensType>>::_TryToCreateData()
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v0;
  unint64_t *v1;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)operator new();
  MEMORY[0x2348B21E8]();
  v1 = (unint64_t *)MEMORY[0x24BEE80D8];
  while (!__ldaxr(v1))
  {
    if (!__stlxr((unint64_t)v0, v1))
      return (unint64_t)v0;
  }
  __clrex();
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::~UsdMediaTokensType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(v1);
}

void sub_22FF426AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4095517265);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::~UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  void **v64;

  v64 = (void **)((char *)this + 168);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v64);
  v2 = *((_QWORD *)this + 20);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 19);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 18);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 17);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 16);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 15);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 14);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 13);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 12);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 11);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 10);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 9);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 8);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 7);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 6);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 5);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 4);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 3);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 2);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 1);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v62 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stlxr(v63 - 2, v62));
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB780]);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<double>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB780], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<double>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<double>;
  a1[2] = MEMORY[0x24BEDB780];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<double>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      else
        *a1 = *a2;
      a2[1] = 0;
      if (v9)
        (*(void (**)(_BYTE *))(v9 + 32))(v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      else
        *a1 = *a2;
      if (v9)
        (*(void (**)(_BYTE *))(v9 + 32))(v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_22FF42D34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = (~(_BYTE)v3 & 3) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v5;
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::VtValue(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v6, (uint64_t)this);
    v4 = *((_QWORD *)a2 + 1);
    *((_QWORD *)this + 1) = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, this);
    else
      *(_QWORD *)this = *(_QWORD *)a2;
    if (v7)
      (*(void (**)(_BYTE *))(v7 + 32))(v6);
  }
  return this;
}

void sub_22FF42E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v2;
  BOOL v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = (*((_QWORD *)this + 1) & 3) == 3;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(this);
  *((_QWORD *)this + 1) = 0;
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDE2BC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDE2BC0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  REAudioAnimationComponentGetComponentType();
  v3 = *(_QWORD *)(a1 + 40);
  v4 = operator new(0x28uLL);
  *v4 = &off_24FDE2C30;
  v4[1] = v2;
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 24);
  v4[4] = v3;
  v14 = v4;
  v11[0] = REEntityGetOrAddComponentByClass();
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v11);
  RENetworkMarkComponentDirty();
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_7;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
  REAudioPlayerComponentGetComponentType();
  v7 = *(_QWORD *)(a1 + 24);
  v11[0] = &off_24FDE2CB0;
  v11[1] = v2;
  v11[2] = v7;
  v12 = v11;
  v10 = REEntityGetOrAddComponentByClass();
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v12 + 48))(v12, &v10);
  RENetworkMarkComponentDirty();
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v9))(result);
}

void sub_22FF43164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE2C30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE2C30;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAudioAnimationComponentSetAudioAsset();
  REAudioAnimationComponentSetMediaOffset();
  return REAudioAnimationComponentSetAnimationGain();
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

uint64_t *realityio::Builder::addComponent(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t Class;

  if (a2)
  {
    v2 = result;
    Class = REComponentGetClass();
    return std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)v2 + 5, (unint64_t *)&Class, &Class);
  }
  return result;
}

uint64_t *std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDE2CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE2CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  return REAudioPlayerComponentRegisterAsset();
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SpatialAudioComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDE2D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE2D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::string::size_type size;
  std::string::value_type v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  uint64_t String;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  realityio::SpatialAudioComponentBuilder *v30;
  std::mutex *v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  const void **v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  const void **EmptyString;
  realityio::EntityBuilder *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  int v57;
  int v58;
  BOOL v59;
  unint64_t *v60;
  unint64_t v61;
  std::mutex *v62;
  __int128 v63;
  __int128 v64;
  std::string v65;
  std::string v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  void *__p[2];
  std::string v72;
  _BYTE v73[24];
  std::string v74;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = realityio::SpatialAudioComponentBuilder::kOutputName((realityio::SpatialAudioComponentBuilder *)a1);
  v68 = 0;
  v69 = 0;
  v7 = *(std::__shared_weak_count **)(v5 + 24);
  if (v7)
  {
    v69 = std::__shared_weak_count::lock(v7);
    if (v69)
      v68 = *(_QWORD *)(v5 + 16);
  }
  MEMORY[0x2348B2764](&v70, v6);
  v8 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(v5 + 8), &v68);
  if (v8 == v9)
  {
    std::operator+<char>();
    v21 = std::string::append(&v65, ") at prim path (");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
    v24 = *(char *)(String + 23);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)String;
    else
      v25 = *(const std::string::value_type **)String;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(String + 23);
    else
      v26 = *(_QWORD *)(String + 8);
    v27 = std::string::append(&v66, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v67, ")");
    goto LABEL_22;
  }
  v10 = 1;
  v11 = v8;
  do
  {
    v11 = (_QWORD *)*v11;
    --v10;
  }
  while (v11 != v9);
  if (v10)
  {
    std::operator+<char>();
    v12 = std::string::append(&v65, ") at prim path (");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32));
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v66, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v67, ") because more than one connected builder produced the same output type");
LABEL_22:
    v29 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v30 = (realityio::SpatialAudioComponentBuilder *)realityio::DetailedError::DetailedError(v73, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v31 = *(std::mutex **)&v73[16];
    v2 = v74.__r_.__value_.__s.__data_[15];
    *(_QWORD *)&v73[16] = 0;
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0uLL;
    if (v72.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  v45 = v8[5];
  v31 = *(std::mutex **)(v45 + 16);
  v46 = *(std::__shared_weak_count **)(v45 + 24);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
  }
  if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(v31, EmptyString, (uint64_t)v73);
  v57 = v73[0];
  if (v73[0])
  {
    *(_QWORD *)&v56 = *(_QWORD *)&v73[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v73[8];
    v30 = (realityio::SpatialAudioComponentBuilder *)&v72;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
      if (v73[0])
        v59 = 0;
      else
        v59 = (v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v58 = v59;
    }
    else
    {
      v58 = 0;
      v72 = v74;
    }
    v56 = *(_OWORD *)__p;
    size = v72.__r_.__value_.__l.__size_;
    v31 = (std::mutex *)v72.__r_.__value_.__r.__words[0];
    v2 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if (v58)
    {
      v63 = *(_OWORD *)__p;
      operator delete(v74.__r_.__value_.__l.__data_);
      v56 = v63;
    }
  }
  if (!v46)
    goto LABEL_85;
  v60 = (unint64_t *)&v46->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    v64 = v56;
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v56 = v64;
    if (v57)
      goto LABEL_86;
  }
  else
  {
LABEL_85:
    if (v57)
    {
LABEL_86:
      v32 = 0;
      goto LABEL_31;
    }
  }
  *(_OWORD *)v73 = v56;
  if ((v2 & 0x80) == 0)
  {
LABEL_30:
    v32 = 1;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external((std::string *)&v73[16], (const std::string::value_type *)v31, size);
  v62 = *(std::mutex **)&v73[16];
  v2 = v74.__r_.__value_.__s.__data_[15];
  operator delete(v31);
  v32 = 1;
  v31 = v62;
LABEL_31:
  if ((v70 & 7) != 0)
  {
    v33 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = v69;
  if (!v69)
    goto LABEL_38;
  v36 = (unint64_t *)&v69->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if ((v32 & 1) != 0)
      goto LABEL_55;
  }
  else
  {
LABEL_38:
    if ((v32 & 1) != 0)
      goto LABEL_55;
  }
  v39 = v4[2];
  v38 = (std::__shared_weak_count *)v4[3];
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (const void **)realityio::SpatialAudioComponentBuilder::kOutputName(v30);
  std::mutex::lock((std::mutex *)(v39 + 64));
  if (v39 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v39 + 40, v42))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v39 + 40), v42);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v39, (unsigned __int8 *)v42);
  std::mutex::unlock((std::mutex *)(v39 + 64));
  if (v38)
  {
    v43 = (unint64_t *)&v38->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_55:
  v50 = (realityio::EntityBuilder *)realityio::SpatialAudioComponentBuilder::deleteAnimationData((uint64_t)v4);
  v51 = **(_QWORD **)(a1 + 8);
  v52 = realityio::EntityBuilder::kInputName(v50);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v51, v52, (uint64_t)v73);
  if (v73[0])
  {
    __p[0] = *(void **)&v73[8];
    if (*(_QWORD *)&v73[8])
    {
      RERetain();
      if (__p[0])
      {
        v54 = v4[36];
        v53 = v4[37];
        while (v54 != v53)
        {
          REEntityRemoveComponentByClass();
          v54 += 8;
        }
      }
    }
  }
  else
  {
    __p[0] = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v73);
  if (v2 < 0)
    v55 = v32;
  else
    v55 = 0;
  if (v55 == 1)
    operator delete(v31);
}

void sub_22FF43ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  unsigned int *v36;
  unsigned int v37;

  operator delete(v34);
  if ((a33 & 7) != 0)
  {
    v36 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF43D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::asA<RIO_MTLX::Element>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v9, (_QWORD *)(a1 + 8));
  if (v9)
  {
    v3 = v10;
    *a2 = v9;
    a2[1] = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::PortElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TypedElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Collection>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Document>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomProp>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::GeomPropDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Input>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Look>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::MaterialAssign>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Node>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::NodeDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Output>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TargetDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Token>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::TypeDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::Unit>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::UnitDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void RIO_MTLX::Element::asA<RIO_MTLX::UnitTypeDef>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&lpsrc, (_QWORD *)(a1 + 8));
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

_QWORD *RIO_MTLX::Element::NAME_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::NAME_ATTRIBUTE(void)::v, "name");
  }
  return RIO_MTLX::Element::NAME_ATTRIBUTE(void)::v;
}

void sub_22FF44FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v, "fileprefix");
  }
  return RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v;
}

void sub_22FF4501C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v, "geomprefix");
  }
  return RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v;
}

void sub_22FF45098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(void)::v, "colorspace");
  }
  return RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(void)::v;
}

void sub_22FF45114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::INHERIT_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v, "inherit");
  }
  return RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v;
}

void sub_22FF45190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v, "namespace");
  }
  return RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v;
}

void sub_22FF4520C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Element::DOC_ATTRIBUTE(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Element::DOC_ATTRIBUTE(void)::v, "doc");
  }
  return RIO_MTLX::Element::DOC_ATTRIBUTE(void)::v;
}

void sub_22FF45288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(RIO_MTLX::TypedElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v, "type");
  }
  return RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v;
}

void sub_22FF45304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v, "value");
  }
  return RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v;
}

void sub_22FF45380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v, "interfacename");
  }
  return RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v;
}

void sub_22FF453FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::UNIT_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_1))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_255E544F0, "unit");
    __cxa_guard_release(&_MergedGlobals_1);
  }
  return qword_255E544F0;
}

void sub_22FF45478(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255E544E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E544E8))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_255E54508, "unittype");
    __cxa_guard_release(&qword_255E544E8);
  }
  return qword_255E54508;
}

void sub_22FF454F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255E544E8);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(void)::v, "uniform");
  }
  return RIO_MTLX::ValueElement::UNIFORM_ATTRIBUTE(void)::v;
}

void sub_22FF45570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *RIO_MTLX::Element::_creatorMap(RIO_MTLX::Element *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::Element::_creatorMap(void)::vv = 0u;
    unk_255E52FD8 = 0u;
    dword_255E52FE8 = 1065353216;
  }
  return &RIO_MTLX::Element::_creatorMap(void)::vv;
}

void RIO_MTLX::Element::setName(std::string *this, std::string *a2)
{
  std::__shared_weak_count *v4;
  std::string::size_type size;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  std::string *v20;

  v18 = 0;
  v19 = 0;
  v4 = (std::__shared_weak_count *)this[9].__r_.__value_.__r.__words[2];
  if (v4)
  {
    v19 = std::__shared_weak_count::lock(v4);
    if (v19)
    {
      size = this[9].__r_.__value_.__l.__size_;
      v18 = size;
      if (size)
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(size + 96), (unsigned __int8 *)a2);
    }
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)this, &v17);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  *(_BYTE *)(*(_QWORD *)(v17 + 272) + 80) = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v18)
  {
    v9 = v18 + 96;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>((_QWORD *)(v18 + 96), (unsigned __int8 *)&this[2]);
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v17, &this->__r_.__value_.__l.__size_);
    v20 = a2;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v10 + 40), &v17);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  std::string::operator=(this + 2, a2);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22FF45760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getDocument(RIO_MTLX::Element *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v5 = v4;
    if (v4)
      v4 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  }
  else
  {
    v5 = 0;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Document>((uint64_t)v4, a2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v5 = v4;
    if (v4)
      v4 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  }
  else
  {
    v5 = 0;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Document>((uint64_t)v4, a2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_22FF45834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getNamePath(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::string v29;
  std::string __str;
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (!*(_QWORD *)a2)
  {
    RIO_MTLX::Element::getDocument(this, &__str);
    v22 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v23 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = (std::__shared_weak_count *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v31, (_QWORD *)this + 1);
  v7 = v31;
  while (v7)
  {
    if (v7 == *(_QWORD *)a2)
      break;
    if (*(char *)(a3 + 23) >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    if (v8)
    {
      v9 = (const void **)RIO_MTLX::NAME_PATH_SEPARATOR((RIO_MTLX *)v6);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v7 + 48), v9, (uint64_t)&v29);
      v10 = *(char *)(a3 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)a3;
      else
        v11 = *(const std::string::value_type **)a3;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a3 + 23);
      else
        v12 = *(_QWORD *)(a3 + 8);
      v13 = std::string::append(&v29, v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
    }
    else if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      __str = *(std::string *)(v7 + 48);
    }
    std::string::operator=((std::string *)a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v8)
      {
LABEL_22:
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
      }
    }
    else if (v8)
    {
      goto LABEL_22;
    }
    v15 = v31;
    v6 = *(std::__shared_weak_count **)(v31 + 232);
    if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
      v7 = *(_QWORD *)(v15 + 224);
    else
      v7 = 0;
    v16 = v32;
    v31 = v7;
    v32 = v6;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v7 = v31;
    }
  }
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22FF45AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_22FF45BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getSelfNonConst(RIO_MTLX::Element *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v9, (_QWORD *)this + 1);
  v3 = v10;
  *a2 = v9;
  a2[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t RIO_MTLX::Element::registerChildElement(char **a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned __int8 *v7;
  __int128 *v9[2];

  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v9);
  v4 = (std::__shared_weak_count *)v9[1];
  *(_BYTE *)(*((_QWORD *)v9[0] + 34) + 80) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9[0] = (__int128 *)(*a2 + 48);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 12), (unsigned __int8 *)v9[0], (uint64_t)&std::piecewise_construct, v9);
  std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)v7 + 5, a2);
  return std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](a1 + 17, (__int128 *)a2);
}

_QWORD *std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t RIO_MTLX::Element::unregisterChildElement(RIO_MTLX::Element *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  RIO_MTLX::Element::getDocument(a1, v12);
  v4 = (std::__shared_weak_count *)v12[1];
  *(_BYTE *)(*(_QWORD *)(v12[0] + 272) + 80) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>((_QWORD *)a1 + 12, (unsigned __int8 *)(*(_QWORD *)a2 + 48));
  v9 = (_QWORD *)*((_QWORD *)a1 + 17);
  v8 = *((_QWORD *)a1 + 18);
  if (v9 != (_QWORD *)v8)
  {
    while (*v9 != *(_QWORD *)a2)
    {
      v9 += 2;
      if (v9 == (_QWORD *)v8)
      {
        v9 = (_QWORD *)*((_QWORD *)a1 + 18);
        break;
      }
    }
  }
  if (v9 + 2 != (_QWORD *)v8)
  {
    v10 = (uint64_t)v9;
    do
    {
      result = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v10, (__int128 *)(v10 + 16));
      v9 += 2;
      v11 = v10 + 32;
      v10 += 16;
    }
    while (v11 != v8);
    v8 = *((_QWORD *)a1 + 18);
  }
  while ((_QWORD *)v8 != v9)
  {
    v8 -= 16;
    result = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v8);
  }
  *((_QWORD *)a1 + 18) = v9;
  return result;
}

uint64_t RIO_MTLX::Element::getChildIndex(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 12, a2);
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 5);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 6);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v9 = (char *)a1[17];
  v8 = (char *)a1[18];
  v10 = v9;
  if (v9 != v8)
  {
    while (*(_QWORD *)v10 != v4)
    {
      v10 += 16;
      if (v10 == v8)
      {
        v10 = v8;
        break;
      }
    }
  }
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v10 == v8)
    return 0xFFFFFFFFLL;
  else
    return ((unint64_t)(v10 - v9) >> 4);
}

void RIO_MTLX::Element::setChildIndex(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int64x2_t v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  char *v65;
  __int128 v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  int64x2_t v70;
  char *v71;
  _QWORD *v72;

  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 12, a2);
  if (v5)
  {
    v7 = *((_QWORD *)v5 + 5);
    v6 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
    v63 = v7;
    v64 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v63 = 0;
    v64 = 0;
  }
  v12 = (char *)a1[17];
  v11 = a1[18];
  v10 = (char **)(a1 + 17);
  v13 = v12;
  if (v12 != (char *)v11)
  {
    while (*(_QWORD *)v13 != v7)
    {
      v13 += 16;
      if (v13 == (char *)v11)
      {
        v13 = (char *)a1[18];
        break;
      }
    }
  }
  if (v13 != (char *)v11)
  {
    v14 = v13;
    if (v13 + 16 != (char *)v11)
    {
      v15 = (uint64_t)v13;
      do
      {
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v15, (__int128 *)(v15 + 16));
        v14 += 16;
        v16 = v15 + 32;
        v15 += 16;
      }
      while (v16 != v11);
      v11 = a1[18];
    }
    while ((char *)v11 != v14)
    {
      v11 -= 16;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v11);
    }
    v17 = a1[19];
    a1[18] = v14;
    v18 = a1[17];
    v19 = a3;
    v20 = (char *)(v18 + 16 * a3);
    if ((unint64_t)v14 >= v17)
    {
      v24 = ((uint64_t)&v14[-v18] >> 4) + 1;
      if (v24 >> 60)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v25 = v17 - v18;
      v26 = v25 >> 3;
      if (v25 >> 3 <= v24)
        v26 = v24;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v68 = a1 + 19;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 19), v27);
      else
        v28 = 0;
      v37 = &v28[16 * a3];
      v65 = v28;
      *(_QWORD *)&v66 = v37;
      *((_QWORD *)&v66 + 1) = v37;
      v67 = &v28[16 * v27];
      if (v27 == a3)
      {
        if (a3 < 1)
        {
          if (a3)
            v39 = 2 * a3;
          else
            v39 = 1;
          v72 = a1 + 19;
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 19), v39);
          v42 = v66;
          v43 = *((_QWORD *)&v66 + 1) - v66;
          if (*((_QWORD *)&v66 + 1) == (_QWORD)v66)
          {
            v48 = vdupq_n_s64(v66);
            v45 = (unint64_t)&v40[16 * (v39 >> 2)];
          }
          else
          {
            v44 = v43 >> 4;
            v45 = (unint64_t)&v40[16 * (v39 >> 2) + (v43 & 0xFFFFFFFFFFFFFFF0)];
            v46 = 16 * v44;
            v47 = &v40[16 * (v39 >> 2)];
            do
            {
              *(_OWORD *)v47 = *(_OWORD *)v42;
              v47 += 16;
              *(_QWORD *)v42 = 0;
              *(_QWORD *)(v42 + 8) = 0;
              v42 += 16;
              v46 -= 16;
            }
            while (v46);
            v48 = (int64x2_t)v66;
          }
          v49 = v67;
          v69 = v65;
          v65 = v40;
          *(_QWORD *)&v66 = &v40[16 * (v39 >> 2)];
          v70 = v48;
          *((_QWORD *)&v66 + 1) = v45;
          v67 = &v40[16 * v41];
          v71 = v49;
          std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v69);
          v37 = (char *)*((_QWORD *)&v66 + 1);
        }
        else
        {
          v38 = a3 + 2;
          if (a3 >= -1)
            v38 = a3 + 1;
          v37 -= 16 * (v38 >> 1);
          *(_QWORD *)&v66 = v37;
          *((_QWORD *)&v66 + 1) = v37;
        }
      }
      *(_QWORD *)v37 = v63;
      v50 = v64;
      *((_QWORD *)v37 + 1) = v64;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        v37 = (char *)*((_QWORD *)&v66 + 1);
      }
      v53 = v37 + 16;
      *((_QWORD *)&v66 + 1) = v53;
      v54 = v66;
      v55 = *v10;
      if (*v10 != v20)
      {
        v56 = v20;
        do
        {
          v57 = *((_OWORD *)v56 - 1);
          v56 -= 16;
          *(_OWORD *)(v54 - 16) = v57;
          v54 -= 16;
          *(_QWORD *)v56 = 0;
          *((_QWORD *)v56 + 1) = 0;
        }
        while (v56 != v55);
        v53 = (_OWORD *)*((_QWORD *)&v66 + 1);
      }
      *(_QWORD *)&v66 = v54;
      v58 = (char *)a1[18];
      if (v58 != v20)
      {
        do
        {
          *v53++ = *(_OWORD *)v20;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
          v20 += 16;
        }
        while (v20 != v58);
        v54 = v66;
        v20 = (char *)a1[18];
      }
      v59 = (char *)a1[17];
      a1[17] = v54;
      a1[18] = v53;
      v60 = (char *)a1[19];
      a1[19] = v67;
      *((_QWORD *)&v66 + 1) = v20;
      v67 = v60;
      v65 = v59;
      *(_QWORD *)&v66 = v59;
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v65);
    }
    else if (v20 == v14)
    {
      *(_QWORD *)v14 = v7;
      v33 = v18 + 16 * a3;
      v34 = v64;
      *(_QWORD *)(v33 + 8) = v64;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      a1[18] = v14 + 16;
    }
    else
    {
      v21 = v20 + 16;
      v22 = v14 - 16;
      v23 = v14;
      while (v22 < v14)
      {
        *(_OWORD *)v23 = *(_OWORD *)v22;
        v23 += 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        v22 += 16;
      }
      a1[18] = v23;
      if (v14 != v21)
      {
        v29 = (uint64_t)&v12[16 * ((v14 - v13) >> 4) - 16 + 16 * ((v13 - v12) >> 4)];
        v30 = 16 * ((v14 - v21) >> 4);
        v31 = v18 + 16 * v19 - 16;
        do
        {
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v29, (__int128 *)(v31 + v30));
          v29 -= 16;
          v30 -= 16;
        }
        while (v30);
      }
      v32 = &v63;
      if (v20 <= (char *)&v63)
        v32 = &v63 + 2 * (a1[18] > (unint64_t)&v63);
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v20, v32);
    }
    v6 = v64;
  }
  if (v6)
  {
    v61 = (unint64_t *)&v6->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF464A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&a11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::removeChild(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 12, a2);
  if (v3)
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)v3 + 6);
    v10 = *((_QWORD *)v3 + 5);
    v11 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 48))(a1, &v10);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_22FF46564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *RIO_MTLX::Element::setAttribute(uint64_t *a1, __int128 *a2, const std::string *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 *v14[2];

  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v14);
  v6 = (std::__shared_weak_count *)v14[1];
  *(_BYTE *)(*((_QWORD *)v14[0] + 34) + 80) = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1 + 20, (unsigned __int8 *)a2))
  {
    v9 = a1 + 25;
    v10 = a1[26];
    if (v10 >= a1[27])
    {
      v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v9, a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v9, a2);
      v11 = v10 + 24;
    }
    a1[26] = v11;
  }
  v14[0] = a2;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 20), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v14);
  return std::string::operator=((std::string *)(v12 + 40), a3);
}

void RIO_MTLX::Element::removeAttribute(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v4 = a1 + 20;
  v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 20, a2);
  if (v5)
  {
    v6 = v5;
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, v14);
    v7 = (std::__shared_weak_count *)v14[1];
    *(_BYTE *)(*(_QWORD *)(v14[0] + 272) + 80) = 0;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(v4, v6, (uint64_t)v14);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    v10 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1[25], a1[26], (unsigned __int8 **)a2);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)v14, (__int128 *)(v10 + 24), (__int128 *)a1[26], v10);
    v12 = v11;
    v13 = a1[26];
    if (v13 != v11)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
    }
    a1[26] = v12;
  }
}

void RIO_MTLX::Element::addChildOfCategory(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v8;
  void **v9;
  const void *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unint64_t v21;
  std::string *v22;
  uint64_t *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  unsigned __int8 *v32;
  void (*v33)(__int128 *__return_ptr, uint64_t *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  RIO_MTLX *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::string *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  char v72;
  __int128 v73;
  uint64_t v74;

  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_20;
  }
  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
  if (v72 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const void *)a2;
    else
      v10 = *(const void **)a2;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)v9 + v8) = 49;
  RIO_MTLX::Element::createValidChildName(a1, (uint64_t)__p, (uint64_t)&v73);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v73;
  *(_QWORD *)(a3 + 16) = v74;
  HIBYTE(v74) = 0;
  LOBYTE(v73) = 0;
  if (v72 < 0)
    operator delete(__p[0]);
LABEL_20:
  v11 = a1;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), (unsigned __int8 *)a3);
  *a4 = 0;
  a4[1] = 0;
  v61 = (uint64_t)a4;
  RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v12);
  v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&unk_255E52FE0, a2);
  v14 = *((_QWORD *)&RIO_MTLX::Element::_creatorMap(void)::vv + 1);
  if (!*((_QWORD *)&RIO_MTLX::Element::_creatorMap(void)::vv + 1))
    goto LABEL_36;
  v15 = v13;
  v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::Element::_creatorMap(void)::vv + 8));
  v16.i16[0] = vaddlv_u8(v16);
  v17 = v16.u32[0];
  if (v16.u32[0] > 1uLL)
  {
    v18 = v13;
    if (v13 >= *((_QWORD *)&RIO_MTLX::Element::_creatorMap(void)::vv + 1))
      v18 = v13 % *((_QWORD *)&RIO_MTLX::Element::_creatorMap(void)::vv + 1);
  }
  else
  {
    v18 = (*((_QWORD *)&RIO_MTLX::Element::_creatorMap(void)::vv + 1) - 1) & v13;
  }
  v19 = *(unsigned __int8 ***)(RIO_MTLX::Element::_creatorMap(void)::vv + 8 * v18);
  if (!v19 || (v20 = *v19) == 0)
  {
LABEL_36:
    v36 = (RIO_MTLX *)RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v13);
    v34 = v11;
    v35 = v61;
    goto LABEL_37;
  }
  while (1)
  {
    v21 = *((_QWORD *)v20 + 1);
    if (v21 == v15)
      break;
    if (v17 > 1)
    {
      if (v21 >= v14)
        v21 %= v14;
    }
    else
    {
      v21 &= v14 - 1;
    }
    if (v21 != v18)
      goto LABEL_36;
LABEL_35:
    v20 = *(unsigned __int8 **)v20;
    if (!v20)
      goto LABEL_36;
  }
  v13 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_255E52FE8, v20 + 16, (unsigned __int8 *)a2);
  if ((v13 & 1) == 0)
    goto LABEL_35;
  RIO_MTLX::Element::_creatorMap((RIO_MTLX::Element *)v13);
  v33 = (void (*)(__int128 *__return_ptr, uint64_t *, uint64_t))*((_QWORD *)v20 + 5);
  v34 = v11;
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v69, (_QWORD *)(v11 + 8));
  v35 = v61;
  v33(&v73, &v69, a3);
  v36 = (RIO_MTLX *)std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v61, &v73);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_37:
  v22 = *(std::string **)v35;
  if (!*(_QWORD *)v35)
  {
    v23 = RIO_MTLX::EMPTY_STRING(v36);
    RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>(v34, &v73);
    v24 = v73;
    if (*((_QWORD *)&v73 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
        if (!(_QWORD)v24)
          goto LABEL_82;
LABEL_43:
        v27 = *((char *)v23 + 23);
        v28 = v23[1];
        if (v27 >= 0)
          v28 = *((unsigned __int8 *)v23 + 23);
        if (v28)
        {
          v29 = *(unsigned __int8 *)(v34 + 47);
          if ((v29 & 0x80u) == 0)
            v30 = *(unsigned __int8 *)(v34 + 47);
          else
            v30 = *(_QWORD *)(v34 + 32);
          if (v30 != v28)
            goto LABEL_82;
          v31 = (const void **)(v34 + 24);
          if (v27 >= 0)
            v32 = (unsigned __int8 *)v23;
          else
            v32 = (unsigned __int8 *)*v23;
          if ((v29 & 0x80) != 0)
          {
            if (memcmp(*v31, v32, *(_QWORD *)(v34 + 32)))
              goto LABEL_82;
          }
          else if (*(_BYTE *)(v34 + 47))
          {
            while (*(unsigned __int8 *)v31 == *v32)
            {
              v31 = (const void **)((char *)v31 + 1);
              ++v32;
              if (!--v29)
                goto LABEL_71;
            }
            goto LABEL_82;
          }
        }
LABEL_71:
        std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v66, (_QWORD *)(v34 + 8));
        std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>((uint64_t *)&v73, v66, v67, a3);
        v68 = v73;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v35, &v68);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
        if (*((_QWORD *)&v68 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = v67;
        if (v67)
        {
          v47 = &v67->__shared_owners_;
          do
            v48 = __ldaxr((unint64_t *)v47);
          while (__stlxr(v48 - 1, (unint64_t *)v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        std::string::operator=((std::string *)(*(_QWORD *)v35 + 24), (const std::string *)a2);
        goto LABEL_82;
      }
    }
    if ((_QWORD)v24)
      goto LABEL_43;
LABEL_82:
    v22 = *(std::string **)v35;
    if (!*(_QWORD *)v35)
    {
      std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v64, (_QWORD *)(v34 + 8));
      std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(&v73, v64, v65, a3);
      v68 = v73;
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v35, &v68);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v65;
      if (v65)
      {
        v53 = &v65->__shared_owners_;
        do
          v54 = __ldaxr((unint64_t *)v53);
        while (__stlxr(v54 - 1, (unint64_t *)v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      std::string::operator=((std::string *)(*(_QWORD *)v35 + 24), (const std::string *)a2);
      v22 = *(std::string **)v35;
    }
  }
  v55 = *(std::__shared_weak_count **)(v35 + 8);
  v62 = v22;
  v63 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  (*(void (**)(uint64_t, std::string **))(*(_QWORD *)v34 + 40))(v34, &v62);
  v58 = v63;
  if (v63)
  {
    v59 = (unint64_t *)&v63->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_22FF46CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

__n128 RIO_MTLX::Element::createValidChildName@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  std::string::value_type v7;
  std::string *p_p;
  std::string::size_type size;
  int v10;
  _QWORD *v11;
  unsigned __int8 *i;
  __n128 result;
  std::string __p;
  _BYTE v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = __p.__r_.__value_.__s.__data_[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    do
    {
        p_p->__r_.__value_.__s.__data_[0] = 95;
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    v7 = __p.__r_.__value_.__s.__data_[0];
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *(_OWORD *)v15 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
  *(_QWORD *)&v15[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_BYTE *)a2 = v7;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)&v15[14];
    *(_BYTE *)(a2 + 23) = v6;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = v7;
    *(_OWORD *)(a2 + 1) = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)&v15[14];
    *(_BYTE *)(a2 + 23) = v6;
  }
  v11 = (_QWORD *)(a1 + 96);
  for (i = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v11, (unsigned __int8 *)a2);
        i;
        i = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v11, (unsigned __int8 *)a2))
  {
    RIO_MTLX::incrementName((std::string *)a2, v15);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v15[16];
  }
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return result;
}

void sub_22FF46EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Node>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>((uint64_t *)&v5, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8), a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GenericElement>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(&v5, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8), a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void RIO_MTLX::Element::changeChildCategory(_QWORD *a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int ChildIndex;
  int v9;
  std::string *v10;
  uint64_t v11;
  const std::string *v12;
  std::string *v13;
  unint64_t *p_size;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const std::string *v18[2];
  std::string v19;

  ChildIndex = RIO_MTLX::Element::getChildIndex(a1, (unsigned __int8 *)&(*a2)[2]);
  if (ChildIndex == -1)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    v9 = ChildIndex;
    RIO_MTLX::Element::removeChild(a1, (unsigned __int8 *)&(*a2)[2]);
    v10 = *a2;
    if (SHIBYTE((*a2)[2].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v19, v10[2].__r_.__value_.__l.__data_, v10[2].__r_.__value_.__l.__size_);
    else
      v19 = v10[2];
    RIO_MTLX::Element::addChildOfCategory((uint64_t)a1, a3, (uint64_t)&v19, a4);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    RIO_MTLX::Element::setChildIndex(a1, (unsigned __int8 *)&(*a2)[2], v9);
    v11 = *a4;
    v12 = *a2;
    v13 = a2[1];
    v18[0] = v12;
    v18[1] = v13;
    if (v13)
    {
      p_size = &v13->__r_.__value_.__l.__size_;
      do
        v15 = __ldxr(p_size);
      while (__stxr(v15 + 1, p_size));
    }
    RIO_MTLX::Element::copyContentFrom(v11, v18);
    if (v13)
    {
      v16 = &v13->__r_.__value_.__l.__size_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(std::string *))(v13->__r_.__value_.__r.__words[0] + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }
  }
}

void sub_22FF470C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::copyContentFrom(uint64_t a1, const std::string **a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const std::string *v7;
  const std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  char *v15;
  uint64_t *v16;
  std::string::pointer data;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v40[2];
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  char v48;

  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v46);
  v4 = v47;
  *(_BYTE *)(v46[34] + 80) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::string::operator=((std::string *)(a1 + 72), *a2 + 3);
  v7 = *a2;
  v8 = (const std::string *)a1;
  if (*a2 != (const std::string *)a1)
  {
    *(_DWORD *)(a1 + 192) = v7[8].__r_.__value_.__l.__data_;
    size = v7[7].__r_.__value_.__l.__size_;
    v10 = *(_QWORD *)(a1 + 168);
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * i) = 0;
      v12 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      if (v12)
        v13 = size == 0;
      else
        v13 = 1;
      if (v13)
      {
        v14 = (_QWORD *)v12;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v12 + 16), (const std::string *)(size + 16));
          std::string::operator=((std::string *)(v12 + 40), (const std::string *)(size + 40));
          v14 = *(_QWORD **)v12;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 160, v12);
          size = *(_QWORD *)size;
          if (!v14)
            break;
          v12 = (uint64_t)v14;
        }
        while (size);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1 + 160, v14);
    }
    for (; size; size = *(_QWORD *)size)
    {
      v15 = (char *)operator new(0x40uLL);
      v46 = v15;
      v47 = (std::__shared_weak_count *)(a1 + 176);
      v48 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v15 + 16), (__int128 *)(size + 16));
      v48 = 1;
      *((_QWORD *)v15 + 1) = std::__string_hash<char>::operator()[abi:ne180100](a1 + 184, (uint64_t)(v15 + 16));
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1 + 160, (uint64_t)v46);
      v46 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46, 0);
    }
    v8 = (const std::string *)a1;
    if (*a2 != (const std::string *)a1)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 200), (std::string *)(*a2)[8].__r_.__value_.__l.__size_, (__int128 *)(*a2)[8].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)((*a2)[8].__r_.__value_.__r.__words[2] - (*a2)[8].__r_.__value_.__l.__size_) >> 3));
      v8 = *a2;
    }
  }
  v16 = (uint64_t *)v8[5].__r_.__value_.__r.__words[2];
  data = v8[6].__r_.__value_.__l.__data_;
  if (v16 != (uint64_t *)data)
  {
    while (1)
    {
      v19 = *v16;
      v18 = (std::__shared_weak_count *)v16[1];
      v46 = (_QWORD *)*v16;
      v47 = v18;
      if (v18)
      {
        v20 = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), (unsigned __int8 *)(v19 + 48));
      if (!v22)
        break;
      v23 = *((_QWORD *)v22 + 5);
      v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v44 = v23;
      v45 = v24;
      if (!v23)
        goto LABEL_35;
      if (v24)
        goto LABEL_54;
LABEL_58:
      v37 = v47;
      if (v47)
      {
        v38 = (unint64_t *)&v47->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v16 += 2;
      if (v16 == (uint64_t *)data)
        return;
    }
    v44 = 0;
    v45 = 0;
LABEL_35:
    if (*(char *)(v19 + 71) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v19 + 48), *(_QWORD *)(v19 + 56));
    else
      v41 = *(std::string *)(v19 + 48);
    RIO_MTLX::Element::addChildOfCategory(a1, v19 + 24, (uint64_t)&v41, &v42);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v27 = v42;
    v40[0] = v19;
    v40[1] = v18;
    if (v18)
    {
      v28 = (unint64_t *)&v18->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    RIO_MTLX::Element::copyContentFrom(v27, v40);
    if (v18)
    {
      v30 = (unint64_t *)&v18->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v32 = v43;
    if (v43)
    {
      v33 = (unint64_t *)&v43->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v24 = v45;
    if (!v45)
      goto LABEL_58;
LABEL_54:
    v35 = (unint64_t *)&v24->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_58;
  }
}

void sub_22FF474BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::traverseInheritance(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v6, (_QWORD *)this + 1);
  RIO_MTLX::InheritanceIterator::InheritanceIterator(a2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22FF475C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InheritanceIterator::~InheritanceIterator(RIO_MTLX::InheritanceIterator *this)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void RIO_MTLX::Element::traverseTree(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  RIO_MTLX::Element::getSelfNonConst(this, &v9);
  v3 = v10;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v10;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 40) = 0;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
}

void RIO_MTLX::Element::traverseGraph(RIO_MTLX::Element *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  RIO_MTLX::Element::getSelfNonConst(this, &v6);
  RIO_MTLX::GraphIterator::GraphIterator(a2, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22FF47720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *RIO_MTLX::Element::getUpstreamEdge@<X0>(RIO_MTLX::Element *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *result;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = RIO_MTLX::NULL_EDGE(this);
  v4 = *((_QWORD *)result + 1);
  *a2 = *(_QWORD *)result;
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *((_QWORD *)result + 3);
  a2[2] = *((_QWORD *)result + 2);
  a2[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)result + 5);
  a2[4] = *((_QWORD *)result + 4);
  a2[5] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

uint64_t RIO_MTLX::Element::clearContent(RIO_MTLX::Element *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  RIO_MTLX::Element::getDocument(this, v7);
  v2 = (std::__shared_weak_count *)v7[1];
  *(_BYTE *)(*(_QWORD *)(v7[0] + 272) + 80) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*((char *)this + 95) < 0)
  {
    **((_BYTE **)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
    *((_BYTE *)this + 95) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 160);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 25);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::clear((uint64_t)this + 96);
  v6 = *((_QWORD *)this + 17);
  for (result = *((_QWORD *)this + 18);
        result != v6;
  *((_QWORD *)this + 18) = v6;
  return result;
}

uint64_t RIO_MTLX::Element::validate(uint64_t a1, std::string *a2)
{
  char isValidName;
  RIO_MTLX::Element *v5;
  std::string *InheritString;
  std::string *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v57;
  char v58;
  void *v59[2];
  char v60;
  void *__p[2];
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66[4];
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69[4];
  uint64_t v70;
  std::__shared_weak_count *v71;
  _QWORD *v72[3];
  uint64_t v73;

  v63 = 1;
  isValidName = RIO_MTLX::isValidName((char *)(a1 + 48));
  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid element name");
  RIO_MTLX::Element::validateRequire(a1, isValidName, &v63, a2, (const void **)__p);
  if (v62 < 0)
    operator delete(__p[0]);
  RIO_MTLX::Element::INHERIT_ATTRIBUTE(v5);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v))
  {
    InheritString = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(a1, InheritString, &v70);
    if (v70)
    {
      v7 = (std::string *)RIO_MTLX::Element::getInheritString((RIO_MTLX::Element *)a1);
      RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(a1, v7, &v67);
      v9 = *(unsigned __int8 *)(v67 + 47);
      if ((v9 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v67 + 47);
      else
        v10 = *(_QWORD *)(v67 + 32);
      v11 = *(unsigned __int8 *)(a1 + 47);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a1 + 32);
      if (v10 == v11)
      {
        v13 = (const void **)(v67 + 24);
        if (v12 >= 0)
          v8 = (unsigned __int8 *)(a1 + 24);
        else
          v8 = *(unsigned __int8 **)(a1 + 24);
        if ((v9 & 0x80) != 0)
        {
          v21 = memcmp(*v13, v8, *(_QWORD *)(v67 + 32)) == 0;
        }
        else if (*(_BYTE *)(v67 + 47))
        {
          v14 = v9 - 1;
          do
          {
            v16 = *(unsigned __int8 *)v13;
            v13 = (const void **)((char *)v13 + 1);
            v15 = v16;
            v18 = *v8++;
            v17 = v18;
            v20 = v14-- != 0;
            v21 = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        else
        {
          v21 = 1;
        }
      }
      else
      {
        v21 = 0;
      }
      v22 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v22->__on_zero_shared)(v22, v8);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      v21 = 0;
    }
    v25 = v71;
    if (v71)
    {
      v26 = (unint64_t *)&v71->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "Invalid element inheritance");
    RIO_MTLX::Element::validateRequire(a1, v21, &v63, a2, (const void **)v59);
    if (v60 < 0)
      operator delete(v59[0]);
  }
  v28 = *(uint64_t **)(a1 + 136);
  v29 = *(uint64_t **)(a1 + 144);
  while (v28 != v29)
  {
    v30 = *v28;
    v31 = (std::__shared_weak_count *)v28[1];
    v70 = *v28;
    v71 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 32))(v30, a2);
    if (v63)
      v35 = v34;
    else
      v35 = 0;
    v63 = v35;
    if (v31)
    {
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v28 += 2;
  }
  RIO_MTLX::Element::traverseInheritance((RIO_MTLX::Element *)a1, (uint64_t)&v70);
  v73 = 0;
  v67 = v70;
  v68 = v71;
  if (v71)
  {
    v38 = (unint64_t *)&v71->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v69, (uint64_t)v72);
  v69[3] = v73;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v40);
  v64 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v65 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v41 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v66, (uint64_t)&unk_255E542C0);
  v66[3] = qword_255E542D8;
  while (v67 != v64)
  {
    v43 = v68;
    if (v68)
    {
      v44 = (unint64_t *)&v68->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v67);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v66, (_QWORD *)v66[1]);
  v47 = v65;
  if (v65)
  {
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v69, (_QWORD *)v69[1]);
  v50 = v68;
  if (v68)
  {
    v51 = (unint64_t *)&v68->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v72, v72[1]);
  v53 = v71;
  if (v71)
  {
    v54 = (unint64_t *)&v71->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "Cycle in element inheritance chain");
  if (v58 < 0)
    operator delete(v57);
  return v63;
}

void sub_22FF47D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::validateRequire(uint64_t a1, char a2, _BYTE *a3, std::string *a4, const void **a5)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  RIO_MTLX *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  std::string *v26;
  __int128 v27;
  unsigned __int8 *v28;
  uint64_t *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type size;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  int64_t v51;
  std::string v52;
  std::string v53;
  std::string v54;
  __int128 v55;
  int64_t v56;

  if ((a2 & 1) != 0)
    return;
  *a3 = 0;
  if (!a4)
    return;
  if (*((char *)a5 + 23) >= 0)
    v8 = *((unsigned __int8 *)a5 + 23);
  else
    v8 = (size_t)a5[1];
  v9 = &v48;
  std::string::basic_string[abi:ne180100]((uint64_t)&v48, v8 + 2);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a5 + 23) >= 0)
      v10 = a5;
    else
      v10 = *a5;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ": ");
  v11 = (RIO_MTLX *)std::operator+<char>();
  v12 = RIO_MTLX::EMPTY_STRING(v11);
  v13 = *(unsigned __int8 *)(a1 + 71);
  if ((v13 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(a1 + 71);
  else
    v14 = *(_QWORD *)(a1 + 56);
  v15 = *((unsigned __int8 *)v12 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = v12[1];
  if (v14 != v15)
    goto LABEL_29;
  if (v16 >= 0)
    v17 = (unsigned __int8 *)v12;
  else
    v17 = (unsigned __int8 *)*v12;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a1 + 48), v17, *(_QWORD *)(a1 + 56)))
    {
LABEL_29:
      std::operator+<char>();
      v19 = std::string::append(&v54, "\"");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v56 = v19->__r_.__value_.__r.__words[2];
      v55 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v56 >= 0)
        v21 = (const std::string::value_type *)&v55;
      else
        v21 = (const std::string::value_type *)v55;
      if (v56 >= 0)
        v22 = HIBYTE(v56);
      else
        v22 = *((_QWORD *)&v55 + 1);
      std::string::append(&v47, v21, v22);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
    }
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    v18 = (unsigned __int8 *)(a1 + 48);
    while (*v18 == *v17)
    {
      ++v18;
      ++v17;
      if (!--v13)
        goto LABEL_39;
    }
    goto LABEL_29;
  }
LABEL_39:
  v23 = *(unsigned __int8 **)(a1 + 200);
  v24 = *(unsigned __int8 **)(a1 + 208);
  if (v23 != v24)
  {
    v25 = (_QWORD *)(a1 + 160);
    do
    {
      std::operator+<char>();
      v26 = std::string::append(&v52, "=\"");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v25, v23);
      if (v28)
        v29 = (uint64_t *)(v28 + 40);
      else
        v29 = RIO_MTLX::EMPTY_STRING(0);
      v30 = *((char *)v29 + 23);
      if (v30 >= 0)
        v31 = (const std::string::value_type *)v29;
      else
        v31 = (const std::string::value_type *)*v29;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)v29 + 23);
      else
        v32 = v29[1];
      v33 = std::string::append(&v53, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v54, "\"");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v56 = v35->__r_.__value_.__r.__words[2];
      v55 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (v56 >= 0)
        v37 = (const std::string::value_type *)&v55;
      else
        v37 = (const std::string::value_type *)v55;
      if (v56 >= 0)
        v38 = HIBYTE(v56);
      else
        v38 = *((_QWORD *)&v55 + 1);
      std::string::append(&v47, v37, v38);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      v23 += 24;
    }
    while (v23 != v24);
  }
  std::string::append(&v47, ">");
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v47;
  else
    v39 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    size = v47.__r_.__value_.__l.__size_;
  v41 = std::string::append(&v48, (const std::string::value_type *)v39, size);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v49, "\n");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v51 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (v51 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if (v51 >= 0)
    v46 = HIBYTE(v51);
  else
    v46 = (std::string::size_type)__p[1];
  std::string::append(a4, (const std::string::value_type *)v45, v46);
  if (SHIBYTE(v51) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
}

void sub_22FF4818C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::Element::createStringResolver(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const std::string *v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  RIO_MTLX::Element *shared_weak_owners;
  std::__shared_weak_count *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const std::string *ActiveGeomPrefix;
  uint64_t v22;
  uint64_t v23;
  RIO_MTLX *v24;
  uint64_t *v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  RIO_MTLX::GeomElement **v29;
  RIO_MTLX::GeomElement **v30;
  std::__shared_weak_count *v31;
  RIO_MTLX::GeomElement *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  RIO_MTLX::ValueElement *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  _QWORD *v61;
  const void ***v62;
  const void ***v63;
  std::__shared_weak_count *v64;
  const void **v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned __int8 *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string v100;
  std::string __str;
  const void **v102;
  std::__shared_weak_count *v103;
  void *__p[2];
  std::string::size_type v105;
  RIO_MTLX::InterfaceElement *v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::string v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  char v113;
  std::string *p_str;

  v6 = operator new();
  *(_QWORD *)v6 = &off_24FDE2E08;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_DWORD *)(v6 + 88) = 1065353216;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 128) = 1065353216;
  *a3 = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24FDE2E40;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a3[1] = (uint64_t)v7;
  v8 = a1 + 1;
  shared_weak_owners = (RIO_MTLX::Element *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v111, a1 + 1);
  v10 = v111;
  if (v111)
  {
    v3 = (const std::string *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v;
    while (1)
    {
      RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(shared_weak_owners);
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v10[6].__shared_weak_owners_, (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v);
      v12 = &v111->__vftable;
      if (v11)
        break;
      shared_weak_owners = (RIO_MTLX::Element *)v111[9].__shared_weak_owners_;
      if (shared_weak_owners
        && (shared_weak_owners = (RIO_MTLX::Element *)std::__shared_weak_count::lock((std::__shared_weak_count *)shared_weak_owners)) != 0)
      {
        v10 = (std::__shared_weak_count *)v12[28];
      }
      else
      {
        v10 = 0;
      }
      v13 = v112;
      v111 = v10;
      v112 = (std::__shared_weak_count *)shared_weak_owners;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v10 = v111;
      }
      if (!v10)
        goto LABEL_15;
    }
    shared_weak_owners = (RIO_MTLX::Element *)RIO_MTLX::Element::getFilePrefix((RIO_MTLX::Element *)v111);
    v3 = (const std::string *)shared_weak_owners;
    v16 = 0;
  }
  else
  {
LABEL_15:
    v16 = 1;
  }
  v17 = v112;
  if (!v112)
    goto LABEL_21;
  v18 = (unint64_t *)&v112->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_21:
    if (!v16)
      goto LABEL_23;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (v16)
LABEL_22:
    v3 = (const std::string *)RIO_MTLX::EMPTY_STRING(shared_weak_owners);
LABEL_23:
  std::string::operator=((std::string *)(v6 + 8), v3);
  v20 = *a3;
  ActiveGeomPrefix = (const std::string *)RIO_MTLX::Element::getActiveGeomPrefix((RIO_MTLX::Element *)a1);
  std::string::operator=((std::string *)(v20 + 32), ActiveGeomPrefix);
  v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 8);
  if (v22)
  {
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v110);
    v23 = v110.__r_.__value_.__r.__words[0];
    v25 = RIO_MTLX::EMPTY_STRING(v24);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>(v23, (unsigned __int8 *)v25, (uint64_t)&v111);
    v92 = v8;
    size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
    if (v110.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v30 = (RIO_MTLX::GeomElement **)v111;
    v29 = (RIO_MTLX::GeomElement **)v112;
    if (v111 != v112)
    {
      do
      {
        v32 = *v30;
        v31 = (std::__shared_weak_count *)v30[1];
        v100.__r_.__value_.__r.__words[0] = (std::string::size_type)*v30;
        v100.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
        if (v31)
        {
          v33 = (unint64_t *)&v31->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        RIO_MTLX::GeomElement::getActiveGeom((uint64_t *)&v110, v32);
        v35 = RIO_MTLX::geomStringsMatch((RIO_MTLX *)a2, &v110, 0);
        v36 = v35;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v110.__r_.__value_.__l.__data_);
          if ((v36 & 1) != 0)
          {
LABEL_37:
            v37 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v35);
            RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Token>((uint64_t)v32, (unsigned __int8 *)v37, (uint64_t)&v110);
            v39 = v110.__r_.__value_.__l.__size_;
            v38 = v110.__r_.__value_.__r.__words[0];
            if (v110.__r_.__value_.__r.__words[0] != v110.__r_.__value_.__l.__size_)
            {
              do
              {
                v41 = *(RIO_MTLX::ValueElement **)v38;
                v40 = *(std::__shared_weak_count **)(v38 + 8);
                v108 = *(_QWORD *)v38;
                v109 = v40;
                if (v40)
                {
                  v42 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v43 = __ldxr(v42);
                  while (__stxr(v43 + 1, v42));
                }
                std::operator+<char>();
                v44 = std::string::append(&__str, ">");
                v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
                v105 = v44->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = v45;
                v44->__r_.__value_.__l.__size_ = 0;
                v44->__r_.__value_.__r.__words[2] = 0;
                v44->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v96 = 0;
                v97 = 0;
                RIO_MTLX::ValueElement::getResolvedValueString(v41, &v96, &__str);
                v46 = v97;
                if (v97)
                {
                  v47 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v49 = *a3 + 56;
                v106 = (RIO_MTLX::InterfaceElement *)__p;
                v50 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v106);
                std::string::operator=((std::string *)(v50 + 40), &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v105) < 0)
                  operator delete(__p[0]);
                v51 = v109;
                if (v109)
                {
                  v52 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v38 += 16;
              }
              while (v38 != v39);
              v31 = (std::__shared_weak_count *)v100.__r_.__value_.__l.__size_;
            }
            __p[0] = &v110;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (!v31)
              goto LABEL_67;
LABEL_63:
            v54 = (unint64_t *)&v31->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
            goto LABEL_67;
          }
        }
        else if ((v35 & 1) != 0)
        {
          goto LABEL_37;
        }
        if (v31)
          goto LABEL_63;
LABEL_67:
        v30 += 2;
      }
      while (v30 != v29);
    }
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
    v20 = *a3;
    v8 = v92;
  }
  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v94, v8);
  std::string::basic_string[abi:ne180100]<0>(&v111, "[");
  std::string::basic_string[abi:ne180100]<0>(&v110, "]");
  v56 = v94;
  v57 = *(std::__shared_weak_count **)(v94 + 232);
  if (v57)
  {
    v58 = std::__shared_weak_count::lock(v57);
    if (v58)
    {
      v59 = v58;
      v60 = *(_QWORD *)(v56 + 224);
      v108 = v60;
      v109 = v58;
      if (!v60)
        goto LABEL_121;
      v61 = (_QWORD *)(v20 + 56);
      do
      {
        RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v60, &v106);
        if (v106)
        {
          RIO_MTLX::InterfaceElement::getActiveTokens(v106, (void ***)__p);
          v62 = (const void ***)__p[0];
          v63 = (const void ***)__p[1];
          if (__p[0] != __p[1])
          {
            do
            {
              v65 = *v62;
              v64 = (std::__shared_weak_count *)v62[1];
              v102 = *v62;
              v103 = v64;
              if (v64)
              {
                v66 = (unint64_t *)&v64->__shared_owners_;
                do
                  v67 = __ldxr(v66);
                while (__stxr(v67 + 1, v66));
              }
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v111, v65 + 6, (uint64_t)&v100);
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v68 = &v110;
              else
                v68 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v69 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              else
                v69 = v110.__r_.__value_.__l.__size_;
              v70 = std::string::append(&v100, (const std::string::value_type *)v68, v69);
              v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v71;
              v70->__r_.__value_.__l.__size_ = 0;
              v70->__r_.__value_.__r.__words[2] = 0;
              v70->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              v98 = 0;
              v99 = 0;
              RIO_MTLX::ValueElement::getResolvedValueString((RIO_MTLX::ValueElement *)v65, &v98, &v100);
              v72 = v99;
              if (v99)
              {
                v73 = (unint64_t *)&v99->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v61, (unsigned __int8 *)&__str))
              {
                p_str = &__str;
                v75 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v61, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
                std::string::operator=((std::string *)(v75 + 40), &v100);
              }
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v76 = v103;
              if (v103)
              {
                v77 = (unint64_t *)&v103->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v62 += 2;
            }
            while (v62 != v63);
            v60 = v108;
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        }
        v79 = *(std::__shared_weak_count **)(v60 + 232);
        if (v79 && (v79 = std::__shared_weak_count::lock(v79)) != 0)
          v80 = *(_QWORD *)(v60 + 224);
        else
          v80 = 0;
        v81 = v109;
        v108 = v80;
        v109 = v79;
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v84 = v107;
        if (v107)
        {
          v85 = (unint64_t *)&v107->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v60 = v108;
      }
      while (v108);
      v59 = v109;
      if (v109)
      {
LABEL_121:
        v87 = (unint64_t *)&v59->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
    }
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (v113 < 0)
    operator delete(v111);
  v89 = v95;
  if (v95)
  {
    v90 = (unint64_t *)&v95->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_22FF48A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v40 - 128);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v39);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::Element::getActiveGeomPrefix(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element *v1;
  RIO_MTLX::Element *GeomPrefix;
  RIO_MTLX::Element *v3;
  unsigned __int8 *v4;
  RIO_MTLX::Element *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  RIO_MTLX::Element *v14;
  std::__shared_weak_count *v15;

  GeomPrefix = (RIO_MTLX::Element *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v14, (_QWORD *)this + 1);
  v3 = v14;
  if (v14)
  {
    v1 = (RIO_MTLX::Element *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v;
    while (1)
    {
      RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(GeomPrefix);
      v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v3 + 20, (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v);
      v5 = v14;
      if (v4)
        break;
      GeomPrefix = (RIO_MTLX::Element *)*((_QWORD *)v14 + 29);
      if (GeomPrefix
        && (GeomPrefix = (RIO_MTLX::Element *)std::__shared_weak_count::lock((std::__shared_weak_count *)GeomPrefix)) != 0)
      {
        v3 = (RIO_MTLX::Element *)*((_QWORD *)v5 + 28);
      }
      else
      {
        v3 = 0;
      }
      v6 = v15;
      v14 = v3;
      v15 = (std::__shared_weak_count *)GeomPrefix;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v3 = v14;
      }
      if (!v3)
        goto LABEL_15;
    }
    GeomPrefix = (RIO_MTLX::Element *)RIO_MTLX::Element::getGeomPrefix(v14);
    v1 = GeomPrefix;
    v9 = 0;
  }
  else
  {
LABEL_15:
    v9 = 1;
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v9)
        return (uint64_t *)v1;
      return RIO_MTLX::EMPTY_STRING(GeomPrefix);
    }
  }
  if (v9)
    return RIO_MTLX::EMPTY_STRING(GeomPrefix);
  return (uint64_t *)v1;
}

void sub_22FF48D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GeomElement::getActiveGeom(std::string *__return_ptr a1@<X8>, RIO_MTLX::GeomElement *this@<X0>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *Geom;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = (unsigned __int8 *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(this);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v4);
  if (v5)
  {
    v6 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v5);
    RIO_MTLX::Element::createStringResolver(this, (uint64_t)v6, &v15);
    v7 = v15;
    Geom = RIO_MTLX::GeomElement::getGeom(this);
    v9 = RIO_MTLX::GEOMNAME_TYPE_STRING((RIO_MTLX *)Geom);
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 16))(v7, Geom, v9);
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v13 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v13, v13[1]);
    }
    else
    {
      v14 = *(_OWORD *)v13;
      a1->__r_.__value_.__r.__words[2] = v13[2];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v14;
    }
  }
}

void sub_22FF48E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::ValueElement::getResolvedValueString(RIO_MTLX::ValueElement *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  RIO_MTLX *v6;
  _BOOL8 isResolvedType;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *ValueString;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;

  v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(_QWORD *)a1 + 56))(a1);
  isResolvedType = RIO_MTLX::StringResolver::isResolvedType(v6);
  if (isResolvedType)
  {
    v8 = *a2;
    if (!*a2)
    {
      v9 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)isResolvedType);
      RIO_MTLX::Element::createStringResolver(&v21, a1, v9);
      v10 = v21;
      v21 = 0uLL;
      v11 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v8 = *a2;
    }
    ValueString = RIO_MTLX::ValueElement::getValueString(a1);
    v18 = (*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v8 + 16))(v8, ValueString, v18);
  }
  else
  {
    v19 = RIO_MTLX::ValueElement::getValueString(a1);
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)*v19, v19[1]);
    }
    else
    {
      v20 = *(_OWORD *)v19;
      a3->__r_.__value_.__r.__words[2] = v19[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v20;
    }
  }
}

BOOL RIO_MTLX::StringResolver::isResolvedType(RIO_MTLX *a1)
{
  RIO_MTLX *v1;
  RIO_MTLX *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  RIO_MTLX *i;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 result;

  v1 = a1;
  v2 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(a1);
  v3 = *((unsigned __int8 *)v1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)v1 + 23);
  else
    v4 = *((_QWORD *)v1 + 1);
  v5 = *((unsigned __int8 *)v2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)v2 + 1);
  if (v4 == v5)
  {
    if (v6 >= 0)
      v7 = (unsigned __int8 *)v2;
    else
      v7 = *(unsigned __int8 **)v2;
    if ((v3 & 0x80) != 0)
    {
      v2 = (RIO_MTLX *)memcmp(*(const void **)v1, v7, *((_QWORD *)v1 + 1));
      if (!(_DWORD)v2)
        return 1;
    }
    else
    {
      if (!*((_BYTE *)v1 + 23))
        return 1;
      for (i = v1; *(unsigned __int8 *)i == *v7; i = (RIO_MTLX *)((char *)i + 1))
      {
        ++v7;
        if (!--v3)
          return 1;
      }
    }
  }
  v9 = (unsigned __int8 *)RIO_MTLX::GEOMNAME_TYPE_STRING(v2);
  v10 = *((unsigned __int8 *)v1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = *((unsigned __int8 *)v1 + 23);
  else
    v11 = *((_QWORD *)v1 + 1);
  v12 = v9[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)v9 + 1);
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = v9;
  else
    v14 = *(unsigned __int8 **)v9;
  if ((v10 & 0x80) != 0)
    return memcmp(*(const void **)v1, v14, *((_QWORD *)v1 + 1)) == 0;
  if (!*((_BYTE *)v1 + 23))
    return 1;
  v15 = v10 - 1;
  do
  {
    v17 = *(unsigned __int8 *)v1;
    v1 = (RIO_MTLX *)((char *)v1 + 1);
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t *RIO_MTLX::ValueElement::getValueString(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::ValueElement::getValue(RIO_MTLX::ValueElement *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *ValueString;
  unsigned __int8 *v5;

  RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(this);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v))
  {
    ValueString = RIO_MTLX::ValueElement::getValueString(this);
    v5 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::ValueElement *))(*(_QWORD *)this + 56))(this);
    RIO_MTLX::Value::createValueFromStrings((RIO_MTLX::Value *)ValueString, v5, (_OWORD *)a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t RIO_MTLX::ValueElement::validate(uint64_t a1, std::string *a2)
{
  unsigned __int8 *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  uint64_t *v10;
  _BOOL8 v11;
  char v12;
  uint64_t *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *v28;
  RIO_MTLX::Element *v29;
  uint64_t *InterfaceName;
  uint64_t v31;
  RIO_MTLX::PortElement *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  RIO_MTLX::PortElement *v38;
  unsigned __int8 *v39;
  uint64_t *Channels;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  const void **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  BOOL v57;
  char v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  RIO_MTLX::ValueElement *v71;
  RIO_MTLX::ValueElement *v72;
  uint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  RIO_MTLX::UnitTypeDef *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  void **v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  RIO_MTLX::PortElement *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v109[2];
  char v110;
  void *lpsrc[2];
  void *v112[2];
  char v113;
  const void *v114[2];
  char v115;
  const void *v116[2];
  char v117;
  RIO_MTLX::PortElement *v118;
  std::__shared_weak_count *v119;
  void *__p[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  const void *v125[2];
  char v126;
  const void *v127[2];
  char v128;
  unsigned __int8 v129;
  std::string *v130;
  std::__shared_weak_count *v131;

  v129 = 1;
  RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)a1);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v);
  if (v4)
  {
    RIO_MTLX::ValueElement::VALUE_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(void)::v);
    if (v4)
    {
      RIO_MTLX::ValueElement::getValue((RIO_MTLX::ValueElement *)a1, (uint64_t)lpsrc);
      v5 = lpsrc[0];
      std::string::basic_string[abi:ne180100]<0>(v127, "Invalid value");
      RIO_MTLX::Element::validateRequire(a1, v5 != 0, &v129, a2, v127);
      if (v128 < 0)
        operator delete((void *)v127[0]);
      v6 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v7 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
  v9 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v);
  if (v9)
  {
    v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v9);
    v11 = RIO_MTLX::Element::isA<RIO_MTLX::Input>(a1, (unsigned __int8 *)v10);
    if (v11)
    {
LABEL_12:
      v12 = 1;
      goto LABEL_51;
    }
    v13 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v11);
    std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(lpsrc, (_QWORD *)(a1 + 8));
    if (lpsrc[0])
    {
      if (v14)
      {
        v15 = (std::__shared_weak_count *)lpsrc[1];
        if (lpsrc[1])
        {
          v16 = (unint64_t *)((char *)lpsrc[1] + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
LABEL_21:
        v18 = (std::__shared_weak_count *)lpsrc[1];
        if (!lpsrc[1])
          goto LABEL_25;
        v19 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if (!v15)
            goto LABEL_29;
        }
        else
        {
LABEL_25:
          if (!v15)
            goto LABEL_29;
        }
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if (!v14)
            goto LABEL_50;
LABEL_30:
          v23 = *((char *)v13 + 23);
          v24 = v13[1];
          if (v23 >= 0)
            v24 = *((unsigned __int8 *)v13 + 23);
          if (!v24)
            goto LABEL_12;
          v25 = *(unsigned __int8 *)(a1 + 47);
          if ((v25 & 0x80u) == 0)
            v26 = *(unsigned __int8 *)(a1 + 47);
          else
            v26 = *(_QWORD *)(a1 + 32);
          if (v26 == v24)
          {
            v27 = (const void **)(a1 + 24);
            if (v23 >= 0)
              v28 = (unsigned __int8 *)v13;
            else
              v28 = (unsigned __int8 *)*v13;
            if ((v25 & 0x80) != 0)
            {
              if (!memcmp(*v27, v28, *(_QWORD *)(a1 + 32)))
                goto LABEL_12;
            }
            else
            {
              if (!*(_BYTE *)(a1 + 47))
                goto LABEL_12;
              while (*(unsigned __int8 *)v27 == *v28)
              {
                v27 = (const void **)((char *)v27 + 1);
                ++v28;
                if (!--v25)
                  goto LABEL_12;
              }
            }
          }
LABEL_50:
          v12 = 0;
LABEL_51:
          std::string::basic_string[abi:ne180100]<0>(v125, "Only input and token elements support interface names");
          RIO_MTLX::Element::validateRequire(a1, v12, &v129, a2, v125);
          if (v126 < 0)
            operator delete((void *)v125[0]);
          RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>(a1, &v130);
          v9 = v130;
          if (v130)
          {
            RIO_MTLX::NodeGraph::getNodeDef(v130, &v124);
            v29 = (RIO_MTLX::Element *)v124;
            if ((_QWORD)v124)
            {
              InterfaceName = RIO_MTLX::ValueElement::getInterfaceName((RIO_MTLX::ValueElement *)a1);
              RIO_MTLX::InterfaceElement::getActiveValueElement(v29, (unsigned __int8 *)InterfaceName, &v122);
              v31 = v122;
              std::string::basic_string[abi:ne180100]<0>(__p, "Interface name not found in referenced NodeDef");
              RIO_MTLX::Element::validateRequire(a1, v31 != 0, &v129, a2, (const void **)__p);
              if (v121 < 0)
                operator delete(__p[0]);
              if (!v122)
                goto LABEL_104;
              std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(lpsrc, (_QWORD *)(a1 + 8));
              v32 = (RIO_MTLX::PortElement *)lpsrc[0];
              if (lpsrc[0]
              {
                v118 = v32;
                v119 = (std::__shared_weak_count *)lpsrc[1];
                if (lpsrc[1])
                {
                  v33 = (unint64_t *)((char *)lpsrc[1] + 8);
                  do
                    v34 = __ldxr(v33);
                  while (__stxr(v34 + 1, v33));
                }
              }
              else
              {
                v118 = 0;
                v119 = 0;
              }
              v35 = (std::__shared_weak_count *)lpsrc[1];
              if (lpsrc[1])
              {
                v36 = (unint64_t *)((char *)lpsrc[1] + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              v38 = v118;
              if (v118
                && (v39 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v32),
                    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v38 + 20, v39)))
              {
                Channels = RIO_MTLX::PortElement::getChannels(v38);
                v41 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 56))(v122);
                v42 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
                LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v41, v42);
                std::string::basic_string[abi:ne180100]<0>(v116, "Invalid channels string for interface name");
                RIO_MTLX::Element::validateRequire(a1, (char)Channels, &v129, a2, v116);
                if ((v117 & 0x80000000) == 0)
                {
LABEL_99:
                  v59 = v119;
                  if (v119)
                  {
                    v60 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v61 = __ldaxr(v60);
                    while (__stlxr(v61 - 1, v60));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v59);
                    }
                  }
LABEL_104:
                  v62 = v123;
                  if (v123)
                  {
                    v63 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
                  goto LABEL_109;
                }
                v43 = v116;
              }
              else
              {
                v44 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
                v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 56))(v122);
                v46 = v44[23];
                if ((v46 & 0x80u) == 0)
                  v47 = v44[23];
                else
                  v47 = *((_QWORD *)v44 + 1);
                v48 = *(unsigned __int8 *)(v45 + 23);
                v49 = (char)v48;
                if ((v48 & 0x80u) != 0)
                  v48 = *(_QWORD *)(v45 + 8);
                if (v47 == v48)
                {
                  if (v49 >= 0)
                    v50 = (unsigned __int8 *)v45;
                  else
                    v50 = *(unsigned __int8 **)v45;
                  if ((v46 & 0x80) != 0)
                  {
                    v58 = memcmp(*(const void **)v44, v50, *((_QWORD *)v44 + 1)) == 0;
                  }
                  else if (v44[23])
                  {
                    v51 = v46 - 1;
                    do
                    {
                      v53 = *v44++;
                      v52 = v53;
                      v55 = *v50++;
                      v54 = v55;
                      v57 = v51-- != 0;
                      v58 = v52 == v54;
                    }
                    while (v52 == v54 && v57);
                  }
                  else
                  {
                    v58 = 1;
                  }
                }
                else
                {
                  v58 = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(v114, "Interface name refers to value element of a different type");
                RIO_MTLX::Element::validateRequire(a1, v58, &v129, a2, v114);
                if ((v115 & 0x80000000) == 0)
                  goto LABEL_99;
                v43 = v114;
              }
              operator delete((void *)*v43);
              goto LABEL_99;
            }
          }
          else
          {
            v124 = 0uLL;
          }
LABEL_109:
          v65 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
          if (*((_QWORD *)&v124 + 1))
          {
            v66 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = v131;
          if (v131)
          {
            v69 = (unint64_t *)&v131->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          goto LABEL_119;
        }
LABEL_29:
        if (!v14)
          goto LABEL_50;
        goto LABEL_30;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
    goto LABEL_21;
  }
LABEL_119:
  v124 = 0uLL;
  RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE((RIO_MTLX::ValueElement *)v9);
  v71 = (RIO_MTLX::ValueElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)qword_255E54508);
  if (!v71)
    goto LABEL_133;
  RIO_MTLX::ValueElement::UNITTYPE_ATTRIBUTE(v71);
  v71 = (RIO_MTLX::ValueElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)qword_255E54508);
  if (v71)
  {
    v72 = (RIO_MTLX::ValueElement *)((char *)v71 + 40);
  }
  else
  {
    v71 = (RIO_MTLX::ValueElement *)RIO_MTLX::EMPTY_STRING(0);
    v72 = v71;
  }
  v73 = *((unsigned __int8 *)v72 + 23);
  if ((v73 & 0x80u) != 0)
    v73 = *((_QWORD *)v72 + 1);
  if (v73)
  {
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &v130);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::UnitTypeDef>((uint64_t)v130, (unsigned __int8 *)v72, lpsrc);
    v74 = *(_OWORD *)lpsrc;
    lpsrc[0] = 0;
    lpsrc[1] = 0;
    v124 = v74;
    v75 = v131;
    if (v131)
    {
      v76 = (unint64_t *)&v131->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (RIO_MTLX::UnitTypeDef *)v124;
    std::string::basic_string[abi:ne180100]<0>(v112, "Unit type definition does not exist in document");
    RIO_MTLX::Element::validateRequire(a1, v78 != 0, &v129, a2, (const void **)v112);
    if (v113 < 0)
      operator delete(v112[0]);
  }
  else
  {
LABEL_133:
    v78 = 0;
  }
  RIO_MTLX::ValueElement::UNIT_ATTRIBUTE(v71);
  v79 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)qword_255E544F0);
  if (v79)
  {
    if (v78)
    {
      RIO_MTLX::ValueElement::UNIT_ATTRIBUTE((RIO_MTLX::ValueElement *)v79);
      v80 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)qword_255E544F0);
      if (v80)
        v81 = (uint64_t *)(v80 + 40);
      else
        v81 = RIO_MTLX::EMPTY_STRING(0);
      RIO_MTLX::UnitTypeDef::getUnitDefs(v78, lpsrc);
      v82 = (uint64_t *)lpsrc[0];
      v83 = (uint64_t *)lpsrc[1];
      if (lpsrc[0] != lpsrc[1])
      {
        while (1)
        {
          v84 = *v82;
          v85 = (std::__shared_weak_count *)v82[1];
          v122 = *v82;
          v123 = v85;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v84 + 96), (unsigned __int8 *)v81);
          v89 = v88;
          if (v88)
          {
            v90 = (void **)*((_QWORD *)v88 + 5);
            v91 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
            v130 = (std::string *)v90;
            v131 = v91;
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            if (v90)
            {
              RIO_MTLX::Element::asA<RIO_MTLX::Unit>((uint64_t)v90, &v118);
              if (v91)
                goto LABEL_152;
              goto LABEL_156;
            }
          }
          else
          {
            v91 = 0;
            v130 = 0;
            v131 = 0;
          }
          v118 = 0;
          v119 = 0;
          if (v91)
          {
LABEL_152:
            v94 = (unint64_t *)&v91->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
LABEL_156:
          v97 = v118;
          v96 = v119;
          LOBYTE(v78) = v118 != 0;
          if (v119)
          {
            v98 = (unint64_t *)&v119->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v100 = v123;
          if (v123)
          {
            v101 = (unint64_t *)&v123->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          if (!v97)
          {
            v82 += 2;
            if (v82 != v83)
              continue;
          }
          goto LABEL_170;
        }
      }
      LOBYTE(v78) = 0;
LABEL_170:
      v130 = (std::string *)lpsrc;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    }
    std::string::basic_string[abi:ne180100]<0>(v109, "Unit definition does not exist in document");
    RIO_MTLX::Element::validateRequire(a1, (char)v78, &v129, a2, (const void **)v109);
    if (v110 < 0)
      operator delete(v109[0]);
  }
  v103 = RIO_MTLX::Element::validate(a1, a2);
  v104 = v129;
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v104)
    return v103;
  else
    return 0;
}

void sub_22FF49B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  uint64_t v46;

  if (a37 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v46 - 176);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v46 - 96);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::Element::isA<RIO_MTLX::Input>(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

void RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *shared_weak_owners;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v13, (_QWORD *)(a1 + 8));
  shared_weak_owners = v13;
  if (v13)
  {
    do
    {
      RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>((uint64_t)shared_weak_owners, a2);
      v4 = *a2 == 0;
      if (*a2)
        break;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a2);
      v5 = v13;
      shared_weak_owners = (std::__shared_weak_count *)v13[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        v6 = shared_weak_owners;
        if (shared_weak_owners)
          shared_weak_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
      }
      else
      {
        v6 = 0;
      }
      v7 = v14;
      v13 = shared_weak_owners;
      v14 = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        shared_weak_owners = v13;
      }
    }
    while (shared_weak_owners);
  }
  else
  {
    v4 = 1;
  }
  v10 = v14;
  if (!v14)
    goto LABEL_20;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v4)
      return;
  }
  else
  {
LABEL_20:
    if (!v4)
      return;
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_22FF49EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::ValueElement::getInterfaceName(RIO_MTLX::ValueElement *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::PortElement::getChannels(RIO_MTLX::PortElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::StringResolver::resolve(RIO_MTLX *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  RIO_MTLX *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  const std::string::value_type *v21;
  const std::string::value_type *v22;
  const std::string::value_type *v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  const std::string::value_type *v30;
  const std::string::value_type *v31;
  const std::string::value_type *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string __p;
  std::string v39;
  std::string v40;

  v8 = (RIO_MTLX *)RIO_MTLX::FILENAME_TYPE_STRING(a1);
  v9 = a3[23];
  if ((v9 & 0x80u) == 0)
    v10 = a3[23];
  else
    v10 = *((_QWORD *)a3 + 1);
  v11 = *((unsigned __int8 *)v8 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v8 + 1);
  if (v10 != v11)
    goto LABEL_17;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)v8;
  else
    v13 = *(unsigned __int8 **)v8;
  if ((v9 & 0x80) != 0)
  {
    v8 = (RIO_MTLX *)memcmp(*(const void **)a3, v13, *((_QWORD *)a3 + 1));
    if ((_DWORD)v8)
      goto LABEL_17;
  }
  else if (a3[23])
  {
    v14 = a3;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v9)
        goto LABEL_31;
    }
LABEL_17:
    v15 = (unsigned __int8 *)RIO_MTLX::GEOMNAME_TYPE_STRING(v8);
    v16 = a3[23];
    if ((v16 & 0x80u) == 0)
      v17 = a3[23];
    else
      v17 = *((_QWORD *)a3 + 1);
    v18 = v15[23];
    v19 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v18 = *((_QWORD *)v15 + 1);
    if (v17 == v18)
    {
      if (v19 >= 0)
        v20 = v15;
      else
        v20 = *(unsigned __int8 **)v15;
      if ((v16 & 0x80) == 0)
      {
        if (a3[23])
        {
          while (*a3 == *v20)
          {
            ++a3;
            ++v20;
            if (!--v16)
              goto LABEL_36;
          }
          goto LABEL_34;
        }
LABEL_36:
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        RIO_MTLX::replaceSubstrings(&__p, (uint64_t)a1 + 96, (uint64_t)&v40);
        v32 = (const std::string::value_type *)*((_QWORD *)a1 + 4);
        v31 = (char *)a1 + 32;
        v30 = v32;
        v33 = v31[23];
        if (v33 >= 0)
          v34 = v31;
        else
          v34 = v30;
        if (v33 >= 0)
          v35 = *((unsigned __int8 *)v31 + 23);
        else
          v35 = *((_QWORD *)v31 + 1);
        v36 = std::string::insert(&v40, 0, v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v29 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
        return;
      }
      if (!memcmp(*(const void **)a3, v20, *((_QWORD *)a3 + 1)))
        goto LABEL_36;
    }
LABEL_34:
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    return;
  }
LABEL_31:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v39 = *(std::string *)a2;
  RIO_MTLX::replaceSubstrings(&v39, (uint64_t)a1 + 56, (uint64_t)&v40);
  v23 = (const std::string::value_type *)*((_QWORD *)a1 + 1);
  v22 = (char *)a1 + 8;
  v21 = v23;
  v24 = v22[23];
  if (v24 >= 0)
    v25 = v22;
  else
    v25 = v21;
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)v22 + 23);
  else
    v26 = *((_QWORD *)v22 + 1);
  v27 = std::string::insert(&v40, 0, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    v29 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_61:
    operator delete(v29);
  }
}

void sub_22FF4A1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::targetStringsMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v6;
  RIO_MTLX *v7;
  unsigned __int8 **v8;
  _BOOL8 v9;
  char *v10;
  uint64_t *v11;
  void **v12;
  char **v13;
  void **v14;
  void **v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  void **v19;
  void **v20;
  char *v21;
  char *v22;
  char **v24;
  char *v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  char **v29;
  char *v30[2];
  void **v31[3];
  const void **v32[3];
  char v33;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 1;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 1;
  v6 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)a1);
  RIO_MTLX::splitString((std::string *)a1, v6, (uint64_t)v32);
  v8 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(v7);
  RIO_MTLX::splitString((std::string *)a2, v8, (uint64_t)v31);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v29, v32[0], v32[1]);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v27, (const void **)v31[0], (const void **)v31[1]);
  v9 = 0;
  v10 = 0;
  v11 = (uint64_t *)&v25;
  v25 = 0;
  v26 = 0;
  v24 = &v25;
  v12 = (void **)v29;
  if (v29 != v30)
  {
    v13 = v27;
    if (v27 != v28)
    {
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v33, (const void **)v12 + 4, (const void **)v13 + 4))
        {
          v14 = (void **)v12[1];
          if (v14)
          {
            do
            {
              v12 = v14;
              v14 = (void **)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = v12;
              v12 = (void **)v12[2];
            }
            while (*v12 != v15);
          }
        }
        else
        {
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v33, (const void **)v13 + 4, (const void **)v12 + 4))
          {
            v16 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v24, v11, (const void **)v12 + 4, (uint64_t)(v12 + 4));
            v17 = (uint64_t *)v16[1];
            if (v17)
            {
              do
              {
                v11 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v11 = (uint64_t *)v16[2];
                v18 = *v11 == (_QWORD)v16;
                v16 = v11;
              }
              while (!v18);
            }
            v19 = (void **)v12[1];
            if (v19)
            {
              do
              {
                v12 = v19;
                v19 = (void **)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = v12;
                v12 = (void **)v12[2];
              }
              while (*v12 != v20);
            }
          }
          v21 = v13[1];
          if (v21)
          {
            do
            {
              v13 = (char **)v21;
              v21 = *(char **)v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (char *)v13;
              v13 = (char **)v13[2];
            }
            while (*v13 != v22);
          }
        }
      }
      while (v12 != (void **)v30 && v13 != v28);
      v10 = v25;
      v9 = v26 != 0;
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v24, v10);
  std::__tree<std::string>::destroy((uint64_t)&v27, v28[0]);
  std::__tree<std::string>::destroy((uint64_t)&v29, v30[0]);
  v29 = (char **)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v31[0] = (void **)v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v31);
  return v9;
}

void sub_22FF4A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ***a15, char *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__tree<std::string>::destroy((uint64_t)&a15, a16);
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = (void **)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void RIO_MTLX::TreeIterator::~TreeIterator(RIO_MTLX::TreeIterator *this)
{
  void **v2;

  v2 = (void **)((char *)this + 16);
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *RIO_MTLX::AttributeDef::CATEGORY(RIO_MTLX::AttributeDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::AttributeDef::CATEGORY(void)::v, "attributedef");
  }
  return RIO_MTLX::AttributeDef::CATEGORY(void)::v;
}

void sub_22FF4A5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryAttributeDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::AttributeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryAttributeDef(void)::v);
  }
  return &RIO_MTLX::registryAttributeDef(void)::v;
}

void sub_22FF4A618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Backdrop::CATEGORY(RIO_MTLX::Backdrop *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Backdrop::CATEGORY(void)::v, "backdrop");
  }
  return RIO_MTLX::Backdrop::CATEGORY(void)::v;
}

void sub_22FF4A694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryBackdrop(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Backdrop>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryBackdrop(void)::v);
  }
  return &RIO_MTLX::registryBackdrop(void)::v;
}

void sub_22FF4A708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Collection::CATEGORY(RIO_MTLX::Collection *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Collection::CATEGORY(void)::v, "collection");
  }
  return RIO_MTLX::Collection::CATEGORY(void)::v;
}

void sub_22FF4A784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryCollection(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Collection>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryCollection(void)::v);
  }
  return &RIO_MTLX::registryCollection(void)::v;
}

void sub_22FF4A7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::CommentElement::CATEGORY(RIO_MTLX::CommentElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::CommentElement::CATEGORY(void)::v, "comment");
  }
  return RIO_MTLX::CommentElement::CATEGORY(void)::v;
}

void sub_22FF4A874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryCommentElement(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::CommentElement>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryCommentElement(void)::v);
  }
  return &RIO_MTLX::registryCommentElement(void)::v;
}

void sub_22FF4A8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Document::CATEGORY(RIO_MTLX::Document *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Document::CATEGORY(void)::v, "materialx");
  }
  return RIO_MTLX::Document::CATEGORY(void)::v;
}

void sub_22FF4A964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryDocument(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Document>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryDocument(void)::v);
  }
  return &RIO_MTLX::registryDocument(void)::v;
}

void sub_22FF4A9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GenericElement::CATEGORY(RIO_MTLX::GenericElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GenericElement::CATEGORY(void)::v, "generic");
  }
  return RIO_MTLX::GenericElement::CATEGORY(void)::v;
}

void sub_22FF4AA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryGenericElement(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GenericElement>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGenericElement(void)::v);
  }
  return &RIO_MTLX::registryGenericElement(void)::v;
}

void sub_22FF4AAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GeomInfo::CATEGORY(RIO_MTLX::GeomInfo *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomInfo::CATEGORY(void)::v, "geominfo");
  }
  return RIO_MTLX::GeomInfo::CATEGORY(void)::v;
}

void sub_22FF4AB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryGeomInfo(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomInfo>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomInfo(void)::v);
  }
  return &RIO_MTLX::registryGeomInfo(void)::v;
}

void sub_22FF4ABB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GeomProp::CATEGORY(RIO_MTLX::GeomProp *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomProp::CATEGORY(void)::v, "geomprop");
  }
  return RIO_MTLX::GeomProp::CATEGORY(void)::v;
}

void sub_22FF4AC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryGeomProp(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomProp>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomProp(void)::v);
  }
  return &RIO_MTLX::registryGeomProp(void)::v;
}

void sub_22FF4ACA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GeomPropDef::CATEGORY(RIO_MTLX::GeomPropDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomPropDef::CATEGORY(void)::v, "geompropdef");
  }
  return RIO_MTLX::GeomPropDef::CATEGORY(void)::v;
}

void sub_22FF4AD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryGeomPropDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::GeomPropDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryGeomPropDef(void)::v);
  }
  return &RIO_MTLX::registryGeomPropDef(void)::v;
}

void sub_22FF4AD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Implementation::CATEGORY(RIO_MTLX::Implementation *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Implementation::CATEGORY(void)::v, "implementation");
  }
  return RIO_MTLX::Implementation::CATEGORY(void)::v;
}

void sub_22FF4AE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryImplementation(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Implementation>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryImplementation(void)::v);
  }
  return &RIO_MTLX::registryImplementation(void)::v;
}

void sub_22FF4AE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Input::CATEGORY(RIO_MTLX::Input *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Input::CATEGORY(void)::v, "input");
  }
  return RIO_MTLX::Input::CATEGORY(void)::v;
}

void sub_22FF4AF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryInput(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Input>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryInput(void)::v);
  }
  return &RIO_MTLX::registryInput(void)::v;
}

void sub_22FF4AF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Look::CATEGORY(RIO_MTLX::Look *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Look::CATEGORY(void)::v, "look");
  }
  return RIO_MTLX::Look::CATEGORY(void)::v;
}

void sub_22FF4AFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryLook(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Look>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryLook(void)::v);
  }
  return &RIO_MTLX::registryLook(void)::v;
}

void sub_22FF4B068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::LookGroup::CATEGORY(RIO_MTLX::LookGroup *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::LookGroup::CATEGORY(void)::v, "lookgroup");
  }
  return RIO_MTLX::LookGroup::CATEGORY(void)::v;
}

void sub_22FF4B0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryLookGroup(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::LookGroup>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryLookGroup(void)::v);
  }
  return &RIO_MTLX::registryLookGroup(void)::v;
}

void sub_22FF4B158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::MaterialAssign::CATEGORY(RIO_MTLX::MaterialAssign *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MaterialAssign::CATEGORY(void)::v, "materialassign");
  }
  return RIO_MTLX::MaterialAssign::CATEGORY(void)::v;
}

void sub_22FF4B1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryMaterialAssign(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::MaterialAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryMaterialAssign(void)::v);
  }
  return &RIO_MTLX::registryMaterialAssign(void)::v;
}

void sub_22FF4B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Member::CATEGORY(RIO_MTLX::Member *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Member::CATEGORY(void)::v, "member");
  }
  return RIO_MTLX::Member::CATEGORY(void)::v;
}

void sub_22FF4B2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryMember(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Member>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryMember(void)::v);
  }
  return &RIO_MTLX::registryMember(void)::v;
}

void sub_22FF4B338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Node::CATEGORY(RIO_MTLX::Node *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Node::CATEGORY(void)::v, "node");
  }
  return RIO_MTLX::Node::CATEGORY(void)::v;
}

void sub_22FF4B3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryNode(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Node>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNode(void)::v);
  }
  return &RIO_MTLX::registryNode(void)::v;
}

void sub_22FF4B428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NodeDef::CATEGORY(RIO_MTLX::NodeDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeDef::CATEGORY(void)::v, "nodedef");
  }
  return RIO_MTLX::NodeDef::CATEGORY(void)::v;
}

void sub_22FF4B4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryNodeDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::NodeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNodeDef(void)::v);
  }
  return &RIO_MTLX::registryNodeDef(void)::v;
}

void sub_22FF4B518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::NodeGraph::CATEGORY(RIO_MTLX::NodeGraph *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NodeGraph::CATEGORY(void)::v, "nodegraph");
  }
  return RIO_MTLX::NodeGraph::CATEGORY(void)::v;
}

void sub_22FF4B594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryNodeGraph(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::NodeGraph>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryNodeGraph(void)::v);
  }
  return &RIO_MTLX::registryNodeGraph(void)::v;
}

void sub_22FF4B608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Output::CATEGORY(RIO_MTLX::Output *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Output::CATEGORY(void)::v, "output");
  }
  return RIO_MTLX::Output::CATEGORY(void)::v;
}

void sub_22FF4B684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryOutput(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Output>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryOutput(void)::v);
  }
  return &RIO_MTLX::registryOutput(void)::v;
}

void sub_22FF4B6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Property::CATEGORY(RIO_MTLX::Property *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Property::CATEGORY(void)::v, "property");
  }
  return RIO_MTLX::Property::CATEGORY(void)::v;
}

void sub_22FF4B774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryProperty(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Property>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryProperty(void)::v);
  }
  return &RIO_MTLX::registryProperty(void)::v;
}

void sub_22FF4B7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PropertyAssign::CATEGORY(RIO_MTLX::PropertyAssign *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PropertyAssign::CATEGORY(void)::v, "propertyassign");
  }
  return RIO_MTLX::PropertyAssign::CATEGORY(void)::v;
}

void sub_22FF4B864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryPropertyAssign(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertyAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertyAssign(void)::v);
  }
  return &RIO_MTLX::registryPropertyAssign(void)::v;
}

void sub_22FF4B8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PropertySet::CATEGORY(RIO_MTLX::PropertySet *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PropertySet::CATEGORY(void)::v, "propertyset");
  }
  return RIO_MTLX::PropertySet::CATEGORY(void)::v;
}

void sub_22FF4B954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryPropertySet(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySet>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertySet(void)::v);
  }
  return &RIO_MTLX::registryPropertySet(void)::v;
}

void sub_22FF4B9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PropertySetAssign::CATEGORY(RIO_MTLX::PropertySetAssign *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PropertySetAssign::CATEGORY(void)::v, "propertysetassign");
  }
  return RIO_MTLX::PropertySetAssign::CATEGORY(void)::v;
}

void sub_22FF4BA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryPropertySetAssign(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySetAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryPropertySetAssign(void)::v);
  }
  return &RIO_MTLX::registryPropertySetAssign(void)::v;
}

void sub_22FF4BAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TargetDef::CATEGORY(RIO_MTLX::TargetDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TargetDef::CATEGORY(void)::v, "targetdef");
  }
  return RIO_MTLX::TargetDef::CATEGORY(void)::v;
}

void sub_22FF4BB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryTargetDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::TargetDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryTargetDef(void)::v);
  }
  return &RIO_MTLX::registryTargetDef(void)::v;
}

void sub_22FF4BBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Token::CATEGORY(RIO_MTLX::Token *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Token::CATEGORY(void)::v, "token");
  }
  return RIO_MTLX::Token::CATEGORY(void)::v;
}

void sub_22FF4BC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryToken(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Token>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryToken(void)::v);
  }
  return &RIO_MTLX::registryToken(void)::v;
}

void sub_22FF4BC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypeDef::CATEGORY(RIO_MTLX::TypeDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypeDef::CATEGORY(void)::v, "typedef");
  }
  return RIO_MTLX::TypeDef::CATEGORY(void)::v;
}

void sub_22FF4BD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryTypeDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::TypeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryTypeDef(void)::v);
  }
  return &RIO_MTLX::registryTypeDef(void)::v;
}

void sub_22FF4BD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Unit::CATEGORY(RIO_MTLX::Unit *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Unit::CATEGORY(void)::v, "unit");
  }
  return RIO_MTLX::Unit::CATEGORY(void)::v;
}

void sub_22FF4BE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryUnit(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Unit>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnit(void)::v);
  }
  return &RIO_MTLX::registryUnit(void)::v;
}

void sub_22FF4BE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UnitDef::CATEGORY(RIO_MTLX::UnitDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UnitDef::CATEGORY(void)::v, "unitdef");
  }
  return RIO_MTLX::UnitDef::CATEGORY(void)::v;
}

void sub_22FF4BEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryUnitDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::UnitDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnitDef(void)::v);
  }
  return &RIO_MTLX::registryUnitDef(void)::v;
}

void sub_22FF4BF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UnitTypeDef::CATEGORY(RIO_MTLX::UnitTypeDef *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, "unittypedef");
  }
  return RIO_MTLX::UnitTypeDef::CATEGORY(void)::v;
}

void sub_22FF4BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryUnitTypeDef(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::UnitTypeDef>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryUnitTypeDef(void)::v);
  }
  return &RIO_MTLX::registryUnitTypeDef(void)::v;
}

void sub_22FF4C058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Variant::CATEGORY(RIO_MTLX::Variant *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Variant::CATEGORY(void)::v, "variant");
  }
  return RIO_MTLX::Variant::CATEGORY(void)::v;
}

void sub_22FF4C0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryVariant(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Variant>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariant(void)::v);
  }
  return &RIO_MTLX::registryVariant(void)::v;
}

void sub_22FF4C148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VariantAssign::CATEGORY(RIO_MTLX::VariantAssign *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VariantAssign::CATEGORY(void)::v, "variantassign");
  }
  return RIO_MTLX::VariantAssign::CATEGORY(void)::v;
}

void sub_22FF4C1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryVariantAssign(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::VariantAssign>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariantAssign(void)::v);
  }
  return &RIO_MTLX::registryVariantAssign(void)::v;
}

void sub_22FF4C238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::VariantSet::CATEGORY(RIO_MTLX::VariantSet *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VariantSet::CATEGORY(void)::v, "variantset");
  }
  return RIO_MTLX::VariantSet::CATEGORY(void)::v;
}

void sub_22FF4C2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryVariantSet(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::VariantSet>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVariantSet(void)::v);
  }
  return &RIO_MTLX::registryVariantSet(void)::v;
}

void sub_22FF4C328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Visibility::CATEGORY(RIO_MTLX::Visibility *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Visibility::CATEGORY(void)::v, "visibility");
  }
  return RIO_MTLX::Visibility::CATEGORY(void)::v;
}

void sub_22FF4C3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registryVisibility(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ElementRegistry<RIO_MTLX::Visibility>::ElementRegistry((RIO_MTLX::Element *)&RIO_MTLX::registryVisibility(void)::v);
  }
  return &RIO_MTLX::registryVisibility(void)::v;
}

void sub_22FF4C418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::Element::initCategoryRegistry(RIO_MTLX::Element *this)
{
  RIO_MTLX *v1;
  RIO_MTLX *v2;
  RIO_MTLX *v3;
  RIO_MTLX *v4;
  RIO_MTLX *v5;
  RIO_MTLX *v6;
  RIO_MTLX *v7;
  RIO_MTLX *v8;
  RIO_MTLX *v9;
  RIO_MTLX *v10;
  RIO_MTLX *v11;
  RIO_MTLX *v12;
  RIO_MTLX *v13;
  RIO_MTLX *v14;
  RIO_MTLX *v15;
  RIO_MTLX *v16;
  RIO_MTLX *v17;
  RIO_MTLX *v18;
  RIO_MTLX *v19;
  RIO_MTLX *v20;
  RIO_MTLX *v21;
  RIO_MTLX *v22;
  RIO_MTLX *v23;
  RIO_MTLX *v24;
  RIO_MTLX *v25;
  RIO_MTLX *v26;
  RIO_MTLX *v27;
  RIO_MTLX *v28;
  RIO_MTLX *v29;
  RIO_MTLX *v30;
  RIO_MTLX *v31;
  RIO_MTLX *v32;
  RIO_MTLX *v33;

  v1 = (RIO_MTLX *)RIO_MTLX::registryInput(this);
  v2 = (RIO_MTLX *)RIO_MTLX::registryAttributeDef(v1);
  v3 = (RIO_MTLX *)RIO_MTLX::registryBackdrop(v2);
  v4 = (RIO_MTLX *)RIO_MTLX::registryCollection(v3);
  v5 = (RIO_MTLX *)RIO_MTLX::registryCommentElement(v4);
  v6 = (RIO_MTLX *)RIO_MTLX::registryDocument(v5);
  v7 = (RIO_MTLX *)RIO_MTLX::registryGenericElement(v6);
  v8 = (RIO_MTLX *)RIO_MTLX::registryGeomInfo(v7);
  v9 = (RIO_MTLX *)RIO_MTLX::registryGeomProp(v8);
  v10 = (RIO_MTLX *)RIO_MTLX::registryGeomPropDef(v9);
  v11 = (RIO_MTLX *)RIO_MTLX::registryImplementation(v10);
  v12 = (RIO_MTLX *)RIO_MTLX::registryInput(v11);
  v13 = (RIO_MTLX *)RIO_MTLX::registryLook(v12);
  v14 = (RIO_MTLX *)RIO_MTLX::registryLookGroup(v13);
  v15 = (RIO_MTLX *)RIO_MTLX::registryMaterialAssign(v14);
  v16 = (RIO_MTLX *)RIO_MTLX::registryMember(v15);
  v17 = (RIO_MTLX *)RIO_MTLX::registryNode(v16);
  v18 = (RIO_MTLX *)RIO_MTLX::registryNodeDef(v17);
  v19 = (RIO_MTLX *)RIO_MTLX::registryNodeGraph(v18);
  v20 = (RIO_MTLX *)RIO_MTLX::registryOutput(v19);
  v21 = (RIO_MTLX *)RIO_MTLX::registryProperty(v20);
  v22 = (RIO_MTLX *)RIO_MTLX::registryPropertyAssign(v21);
  v23 = (RIO_MTLX *)RIO_MTLX::registryPropertySet(v22);
  v24 = (RIO_MTLX *)RIO_MTLX::registryPropertySetAssign(v23);
  v25 = (RIO_MTLX *)RIO_MTLX::registryTargetDef(v24);
  v26 = (RIO_MTLX *)RIO_MTLX::registryToken(v25);
  v27 = (RIO_MTLX *)RIO_MTLX::registryTypeDef(v26);
  v28 = (RIO_MTLX *)RIO_MTLX::registryUnit(v27);
  v29 = (RIO_MTLX *)RIO_MTLX::registryUnitDef(v28);
  v30 = (RIO_MTLX *)RIO_MTLX::registryUnitTypeDef(v29);
  v31 = (RIO_MTLX *)RIO_MTLX::registryVariant(v30);
  v32 = (RIO_MTLX *)RIO_MTLX::registryVariantAssign(v31);
  v33 = (RIO_MTLX *)RIO_MTLX::registryVariantSet(v32);
  return RIO_MTLX::registryVisibility(v33);
}

void RIO_MTLX::Element::~Element(RIO_MTLX::Element *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(_QWORD *)this = &off_24FDE4378;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v5 = (void **)((char *)this + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 160);
  v5 = (void **)((char *)this + 136);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::~__hash_table((uint64_t)this + 96);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t RIO_MTLX::Element::getUpstreamEdgeCount(RIO_MTLX::Element *this)
{
  return 0;
}

void RIO_MTLX::ValueElement::~ValueElement(RIO_MTLX::ValueElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t *RIO_MTLX::TypedElement::getType(RIO_MTLX::TypedElement *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::StringResolver::~StringResolver(void **this)
{
  RIO_MTLX::StringResolver::~StringResolver(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  *this = &off_24FDE2E08;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 12));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB808] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB6D8], MEMORY[0x24BEDAC00]);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FF4C738(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__emplace_hint_unique_key_args<std::shared_ptr<RIO_MTLX::Element const>,std::shared_ptr<RIO_MTLX::Element const> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__emplace_hint_unique_key_args<std::shared_ptr<RIO_MTLX::Element const>,std::shared_ptr<RIO_MTLX::Element const> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(a1, a2, &v16, &v15, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v16, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(a1, a2[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t RIO_MTLX::GraphIterator::GraphIterator(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 32), a2, (uint64_t *)a2);
  return a1;
}

void sub_22FF4CB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;

  v14 = v13;
  a10 = v14;
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v12, *(_QWORD **)(v10 + 40));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v11;
}

void std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t RIO_MTLX::InheritanceIterator::InheritanceIterator(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 16), a2, (uint64_t *)a2);
  return a1;
}

void sub_22FF4CD60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v2, *(_QWORD **)(v1 + 24));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6 && (v6 = std::__shared_weak_count::lock(v6)) != 0)
    v7 = *(_QWORD *)(a1 + 240);
  else
    v7 = 0;
  v20 = v7;
  v21 = v6;
  RIO_MTLX::Element::getQualifiedName(a1, a2, &__p);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(v7, (unsigned __int8 *)&__p, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v8 = v19;
    *a3 = v18;
    a3[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(v7, (unsigned __int8 *)a2, a3);
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_22FF4CEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::Element::getInheritString(RIO_MTLX::Element *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::Element::INHERIT_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::Element>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::Element>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FF4CFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getQualifiedName(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  RIO_MTLX::Element *v5;
  uint64_t *Namespace;
  uint64_t *v7;
  uint64_t v8;
  RIO_MTLX::Element *v9;
  RIO_MTLX::Element *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::string *v15;
  int v16;
  std::string::size_type size;
  BOOL v18;
  unsigned __int8 *v19;
  std::string::size_type v20;
  std::string *v21;
  BOOL v22;
  const void **v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  int v42;
  void *v44;
  int v45;
  std::string __p;
  RIO_MTLX::Element *v47;
  std::__shared_weak_count *v48;
  char v49;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v47, (_QWORD *)(a1 + 8));
LABEL_2:
  v5 = v47;
  while (1)
  {
    if (!v5)
    {
      v14 = 1;
      goto LABEL_41;
    }
    Namespace = RIO_MTLX::Element::getNamespace(v5);
    v7 = Namespace;
    v8 = *((unsigned __int8 *)Namespace + 23);
    if ((v8 & 0x80u) != 0)
      v8 = Namespace[1];
    if (v8)
      break;
    v9 = v47;
    v5 = (RIO_MTLX::Element *)*((_QWORD *)v47 + 29);
    if (v5)
    {
      v5 = (RIO_MTLX::Element *)std::__shared_weak_count::lock((std::__shared_weak_count *)v5);
      v10 = v5;
      if (v5)
        v5 = (RIO_MTLX::Element *)*((_QWORD *)v9 + 28);
    }
    else
    {
      v10 = 0;
    }
    v11 = v48;
    v47 = v5;
    v48 = (std::__shared_weak_count *)v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_2;
    }
  }
  v15 = (std::string *)RIO_MTLX::NAME_PREFIX_SEPARATOR((RIO_MTLX *)Namespace);
  v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  v18 = v16 < 0;
  if (v16 >= 0)
    v19 = (unsigned __int8 *)a2;
  else
    v19 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  if (!v18)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v20 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  if ((v20 & 0x80u) == 0)
    v21 = v15;
  else
    v21 = (std::string *)v15->__r_.__value_.__r.__words[0];
  if ((v20 & 0x80u) != 0)
    v20 = v15->__r_.__value_.__l.__size_;
  if (size)
    v22 = v20 == 0;
  else
    v22 = 1;
  if (v22)
  {
LABEL_32:
    v23 = (const void **)RIO_MTLX::NAME_PREFIX_SEPARATOR((RIO_MTLX *)v15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v7, v23, (uint64_t)&__p);
    v24 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)a2;
    else
      v25 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
    if (v24 >= 0)
      v26 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v26 = a2->__r_.__value_.__l.__size_;
    v27 = std::string::append(&__p, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v32 = &v19[size];
    v33 = v19;
LABEL_52:
    v34 = v20;
    v35 = v21;
    while (*v33 != v35->__r_.__value_.__s.__data_[0])
    {
      v35 = (std::string *)((char *)v35 + 1);
      if (!--v34)
      {
        if (++v33 != v32)
          goto LABEL_52;
        goto LABEL_32;
      }
    }
    if (v33 == v32 || v33 - v19 == -1)
      goto LABEL_32;
    v15 = std::string::basic_string(&__p, a2, 0, v33 - v19, (std::allocator<char> *)&v49);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v36 = __p.__r_.__value_.__l.__size_;
    v37 = *((unsigned __int8 *)v7 + 23);
    v38 = (char)v37;
    if ((v37 & 0x80u) != 0)
      v37 = v7[1];
    if (v36 != v37)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
    if (v38 >= 0)
      v39 = (unsigned __int8 *)v7;
    else
      v39 = (unsigned __int8 *)*v7;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v44 = (void *)__p.__r_.__value_.__r.__words[0];
      v45 = memcmp(__p.__r_.__value_.__l.__data_, v39, __p.__r_.__value_.__l.__size_);
      operator delete(v44);
      if (v45)
        goto LABEL_32;
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v40 = 0;
      do
      {
        v41 = __p.__r_.__value_.__s.__data_[v40];
        v42 = v39[v40];
      }
      while (v41 == v42 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v40++);
      if (v41 != v42)
        goto LABEL_32;
    }
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v14 = 0;
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      goto LABEL_41;
    }
    std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  v14 = 0;
LABEL_41:
  v29 = v48;
  if (!v48)
    goto LABEL_45;
  v30 = (unint64_t *)&v48->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v14)
      return;
  }
  else
  {
LABEL_45:
    if (!v14)
      return;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
  }
}

void sub_22FF4D314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::Element::getNamespace(RIO_MTLX::Element *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::NAMESPACE_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24FDE1438, MEMORY[0x24BEDAB00]);
}

void sub_22FF4D3E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<RIO_MTLX::StringResolver *,std::shared_ptr<RIO_MTLX::StringResolver>::__shared_ptr_default_delete<RIO_MTLX::StringResolver,RIO_MTLX::StringResolver>,std::allocator<RIO_MTLX::StringResolver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *RIO_MTLX::Element::getFilePrefix(RIO_MTLX::Element *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::FILE_PREFIX_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t *RIO_MTLX::Element::getGeomPrefix(RIO_MTLX::Element *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::Element::GEOM_PREFIX_ATTRIBUTE(void)::v);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::GeomInfo>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::GeomInfo>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_22FF4D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *RIO_MTLX::GeomElement::getGeom(RIO_MTLX::GeomElement *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = (unsigned __int8 *)RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(this);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, v2);
  if (v3)
    return (uint64_t *)(v3 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Token>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Token>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_22FF4D8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::UnitTypeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::UnitTypeDef>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FF4D9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v7[2] = a2[2];
      a2 += 3;
      v7 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FF4DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

BOOL RIO_MTLX::TreeIterator::operator==(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(char **)(a1 + 16);
  v2 = *(char **)(a1 + 24);
  v4 = *(_QWORD **)(a2 + 16);
  if (v2 - v3 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_QWORD *)v3 != *v4 || *((_QWORD *)v3 + 2) != v4[2])
      return 0;
    v3 += 24;
    v4 += 3;
  }
  return *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_22FF4E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_22FF4E0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  __int128 v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  void *v42;
  _QWORD v43[2];
  char v44;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = *a4;
  v18 = (_QWORD *)(a1 + 16);
  v19 = operator new(0x38uLL);
  v43[0] = v19;
  v43[1] = a1 + 16;
  v44 = 0;
  *v19 = 0;
  v19[1] = v10;
  v20 = (std::string *)(v19 + 2);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v21 = *v17;
    v19[4] = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v19[5] = 0;
  v19[6] = 0;
  v44 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = *(void **)a1;
          *(_QWORD *)a1 = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD *)*v18;
          if (*v18)
          {
            v32 = v31[1];
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v18;
            v37 = (_QWORD *)*v31;
            if (*v31)
            {
              do
              {
                v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&prime)
                    v38 %= *(_QWORD *)&prime;
                }
                else
                {
                  v38 &= *(_QWORD *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v31;
                    goto LABEL_58;
                  }
                  *v31 = *v37;
                  *v37 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v38);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v38) = v37;
                  v37 = v31;
                }
                v38 = v32;
LABEL_58:
                v31 = v37;
                v37 = (_QWORD *)*v37;
                v32 = v38;
              }
              while (v37);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v42 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v39)
  {
    *(_QWORD *)v43[0] = *v39;
    *v39 = v43[0];
  }
  else
  {
    *(_QWORD *)v43[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v18;
    if (*(_QWORD *)v43[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v43[0];
    }
  }
  i = (unsigned __int8 *)v43[0];
  v43[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)v43, 0);
  return i;
}

void sub_22FF4E608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_22FF4E678(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22FF4E78C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::Node,std::allocator<RIO_MTLX::Node>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v8 = operator new(0x128uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24FDE43C0;
  v10 = (uint64_t)(v8 + 3);
  v16 = a2;
  v17 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  RIO_MTLX::Node::Node((RIO_MTLX::Node *)(v8 + 3), &v16, a4);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = v10;
  a1[1] = (uint64_t)v9;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)a1, v9 + 4, v10);
}

void sub_22FF4E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE43C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE43C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Node>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Node *RIO_MTLX::Node::Node(RIO_MTLX::Node *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::Node::CATEGORY(a1);
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v12, RIO_MTLX::Node::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDF5248;
  return a1;
}

void sub_22FF4EAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::InterfaceElement::InterfaceElement(_QWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::TypedElement::TypedElement(a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDFD398;
  a1[32] = 0;
  a1[33] = 0;
  return a1;
}

void sub_22FF4EB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedElement::TypedElement(_QWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::Element::Element((uint64_t)a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDE4310;
  return a1;
}

void sub_22FF4EC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Element::Element(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  char **v23;
  char *v24;
  char v25;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24FDE4378;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v7;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v8;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v9 = *a2;
  *(_QWORD *)(a1 + 224) = *a2;
  v10 = a2[1];
  *(_QWORD *)(a1 + 232) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v9 = *a2;
  }
  if (v9
    && (v13 = *(std::__shared_weak_count **)(v9 + 248)) != 0
    && (v14 = std::__shared_weak_count::lock(v13)) != 0)
  {
    v15 = v14;
    v16 = *(_QWORD *)(v9 + 240);
    *(_QWORD *)(a1 + 248) = v14;
    *(_QWORD *)(a1 + 240) = v16;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
  }
  v21 = atomic_load(&RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::once);
  if (v21 != -1)
  {
    v24 = &v25;
    v23 = &v24;
    std::__call_once(&RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::{lambda(void)#1} &&>>);
  }
  return a1;
}

void sub_22FF4EE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void **v13;
  std::__shared_weak_count *v15;

  if (*(char *)(v12 + 47) < 0)
    operator delete(*v13);
  v15 = *(std::__shared_weak_count **)(v12 + 16);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::TypedElement::~TypedElement(RIO_MTLX::TypedElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<RIO_MTLX::Element::Element(std::shared_ptr<RIO_MTLX::Element>,std::string const&,std::string const&)::{lambda(void)#1} &&>>(RIO_MTLX::Element *a1)
{
  RIO_MTLX::Value *inited;

  inited = (RIO_MTLX::Value *)RIO_MTLX::Element::initCategoryRegistry(a1);
  return RIO_MTLX::Value::initValueTypeRegistry(inited);
}

void std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::allocate_shared[abi:ne180100]<RIO_MTLX::GenericElement,std::allocator<RIO_MTLX::GenericElement>,std::shared_ptr<RIO_MTLX::Element> &,std::string const&,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v8 = (std::__shared_weak_count *)operator new(0x118uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2EB8;
  v28 = a3;
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v29 = a2;
    v30 = a3;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
  }
  else
  {
    v29 = a2;
    v30 = 0;
  }
  RIO_MTLX::GenericElement::CATEGORY((RIO_MTLX::GenericElement *)v8);
  v14 = &v9[1].__vftable;
  RIO_MTLX::Element::Element(&v9[1], &v29, RIO_MTLX::GenericElement::CATEGORY(void)::v, a4);
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *v14 = &off_24FDE2F08;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *a1 = v14;
  a1[1] = v9;
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v9[1].__shared_owners_ = (uint64_t)v14;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v25 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v9[1].__shared_owners_ = (uint64_t)v14;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_22FF4F170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GenericElement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::GenericElement::~GenericElement(RIO_MTLX::GenericElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t *v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  void *v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint8x8_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  unsigned __int8 *v45;
  unint64_t v46;

  v2 = (_QWORD *)a2;
  v4 = (unint64_t *)(a1 + 24);
  v45 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, a2 + 16);
  v6 = *(float *)(a1 + 32);
  v46 = v5;
  v2[1] = v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v7 || (float)(v6 * (float)v7) < v8)
  {
    v9 = 1;
    if (v7 >= 3)
      v9 = (v7 & (v7 - 1)) != 0;
    v10 = v9 | (2 * v7);
    v11 = vcvtps_u32_f32(v8 / v6);
    if (v10 <= v11)
      prime = (int8x8_t)v11;
    else
      prime = (int8x8_t)v10;
    v44 = v4;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    v43 = v2;
    if (*(_QWORD *)&prime > v7)
    {
LABEL_13:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * *(_QWORD *)&prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (*(_QWORD *)&prime != v15);
      v16 = *(unsigned __int8 ***)(a1 + 16);
      if (v16)
      {
        v17 = (unint64_t)v16[1];
        v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&prime)
            v17 %= *(_QWORD *)&prime;
        }
        else
        {
          v17 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = a1 + 16;
        v23 = *v16;
        if (*v16)
        {
          v42 = v18.u32[0];
          do
          {
            v24 = *((_QWORD *)v23 + 1);
            if (v19 > 1)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            if (v24 == v17)
            {
              v16 = (unsigned __int8 **)v23;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v24))
            {
              v25 = *(unsigned __int8 **)v23;
              if (*(_QWORD *)v23)
              {
                v26 = v23;
                while (1)
                {
                  v27 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v23 + 16, v25 + 16);
                  v28 = *(unsigned __int8 **)v26;
                  if (!v27)
                    break;
                  v25 = *(unsigned __int8 **)v28;
                  v26 = *(unsigned __int8 **)v26;
                  if (!*(_QWORD *)v28)
                    goto LABEL_46;
                }
                v25 = *(unsigned __int8 **)v26;
                v28 = v26;
LABEL_46:
                v19 = v42;
              }
              else
              {
                v28 = v23;
              }
              *v16 = v25;
              *(_QWORD *)v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v24) = v23;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v16;
              v16 = (unsigned __int8 **)v23;
              v17 = v24;
            }
            v23 = *v16;
          }
          while (*v16);
        }
      }
      goto LABEL_58;
    }
    if (*(_QWORD *)&prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*v4 / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (*(_QWORD *)&prime <= v20)
        prime = (int8x8_t)v20;
      if (*(_QWORD *)&prime < v7)
      {
        if (prime)
          goto LABEL_13;
        v29 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v29)
          operator delete(v29);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    v7 = *(_QWORD *)(a1 + 8);
    v2 = v43;
    v4 = v44;
  }
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v30.i16[0] = vaddlv_u8(v30);
  v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    v32 = v46;
    if (v7 <= v46)
      v32 = v46 % v7;
  }
  else
  {
    v32 = (v7 - 1) & v46;
  }
  v33 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v32);
  if (v33)
  {
    v34 = *(unsigned __int8 **)v33;
    if (*(_QWORD *)v33)
    {
      v35 = 0;
      do
      {
        v36 = *((_QWORD *)v34 + 1);
        if (v31 > 1)
        {
          v37 = *((_QWORD *)v34 + 1);
          if (v36 >= v7)
            v37 = v36 % v7;
        }
        else
        {
          v37 = v36 & (v7 - 1);
        }
        if (v37 != v32)
          break;
        v38 = v36 == v46 ? std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v34 + 16, v45) : 0;
        if ((v35 & (v38 ^ 1) & 1) != 0)
          break;
        v35 |= v38;
        v33 = *(unsigned __int8 **)v33;
        v34 = *(unsigned __int8 **)v33;
      }
      while (*(_QWORD *)v33);
      v7 = *(_QWORD *)(a1 + 8);
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v39.i16[0] = vaddlv_u8(v39);
      v31 = v39.u32[0];
    }
  }
  v40 = v2[1];
  if (v31 > 1)
  {
    if (v40 >= v7)
      v40 %= v7;
  }
  else
  {
    v40 &= v7 - 1;
  }
  if (!v33)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v33;
  *(_QWORD *)v33 = v2;
  if (*v2)
  {
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
    if (v41 != v40)
      goto LABEL_94;
  }
LABEL_95:
  ++*v4;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22FF4F72C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_22FF4F8AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22FF4F8B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22FF4F9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::TypeDef>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22FF4FC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22FF4FCB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FF4FF60(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::AttributeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::AttributeDef::CATEGORY((RIO_MTLX::AttributeDef *)v2);
  v4 = (__int128 *)RIO_MTLX::AttributeDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::AttributeDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::AttributeDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::AttributeDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2F68;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::AttributeDef::CATEGORY((RIO_MTLX::AttributeDef *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v27, RIO_MTLX::AttributeDef::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE2FB8;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF50248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::AttributeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::AttributeDef::~AttributeDef(RIO_MTLX::AttributeDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v8 = a1 + 3;
  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v10 = v9;
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2) & 1) != 0)return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v17 = *a4;
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v19 = *v17;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v15 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = a1[1];
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)a1[2];
          if (v29)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = a1 + 2;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v4);
  if (v38)
  {
    *(_QWORD *)v15 = *v38;
LABEL_75:
    *v38 = v15;
    goto LABEL_76;
  }
  *(_QWORD *)v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(_QWORD *)(v37 + 8 * v4) = a1 + 2;
  if (*(_QWORD *)v15)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v8;
  return v15;
}

void sub_22FF50784(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Backdrop>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Backdrop::CATEGORY((RIO_MTLX::Backdrop *)v2);
  v4 = (__int128 *)RIO_MTLX::Backdrop::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Backdrop::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Backdrop>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Backdrop>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3FB8;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::Backdrop::Backdrop((RIO_MTLX::Backdrop *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF50938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Backdrop>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Backdrop *RIO_MTLX::Backdrop::Backdrop(RIO_MTLX::Backdrop *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::Backdrop::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v12, RIO_MTLX::Backdrop::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDF52A8;
  return a1;
}

void sub_22FF50A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Collection>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Collection::CATEGORY((RIO_MTLX::Collection *)v2);
  v4 = (__int128 *)RIO_MTLX::Collection::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Collection::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Collection>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Collection>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3020;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Collection::CATEGORY((RIO_MTLX::Collection *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::Collection::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDF62D8;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF50CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Collection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Collection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Collection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::CommentElement>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::CommentElement::CATEGORY((RIO_MTLX::CommentElement *)v2);
  v4 = (__int128 *)RIO_MTLX::CommentElement::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::CommentElement::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::CommentElement>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::CommentElement>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3070;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::CommentElement::CATEGORY((RIO_MTLX::CommentElement *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::CommentElement::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE30C0;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF50FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::CommentElement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::CommentElement::~CommentElement(RIO_MTLX::CommentElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Document>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Document::CATEGORY((RIO_MTLX::Document *)v2);
  v4 = (__int128 *)RIO_MTLX::Document::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Document::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Document>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Document>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  double result;
  __int128 v15;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = operator new(0x130uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE40C0;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v15 = v6;
  *((_QWORD *)&v15 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  RIO_MTLX::Document::Document(v7 + 3, &v15, a2);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)&v15 = v9;
  *((_QWORD *)&v15 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v15, v8 + 4, v9);
  result = *(double *)&v15;
  *a3 = v15;
  return result;
}

void sub_22FF51204(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Document>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE40C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Document>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE40C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Document>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GenericElement>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GenericElement::CATEGORY((RIO_MTLX::GenericElement *)v2);
  v4 = (__int128 *)RIO_MTLX::GenericElement::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::GenericElement::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GenericElement>;
  return a1;
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomInfo>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomInfo::CATEGORY((RIO_MTLX::GeomInfo *)v2);
  v4 = (__int128 *)RIO_MTLX::GeomInfo::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::GeomInfo::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomInfo>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GeomInfo>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3F08;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::GeomInfo::GeomInfo((RIO_MTLX::GeomInfo *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF51444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::GeomInfo *RIO_MTLX::GeomInfo::GeomInfo(RIO_MTLX::GeomInfo *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::GeomInfo::CATEGORY(a1);
  RIO_MTLX::GeomElement::GeomElement(a1, &v12, (uint64_t)RIO_MTLX::GeomInfo::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE3F58;
  return a1;
}

void sub_22FF51590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GeomElement::GeomElement(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::Element::Element(a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDF6338;
  return a1;
}

void sub_22FF5163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GeomInfo::~GeomInfo(RIO_MTLX::GeomInfo *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomProp>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomProp::CATEGORY((RIO_MTLX::GeomProp *)v2);
  v4 = (__int128 *)RIO_MTLX::GeomProp::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::GeomProp::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomProp>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::GeomProp>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE4160;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::GeomProp::GeomProp((RIO_MTLX::GeomProp *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF517B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomProp>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::GeomProp *RIO_MTLX::GeomProp::GeomProp(RIO_MTLX::GeomProp *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::GeomProp::CATEGORY(a1);
  RIO_MTLX::ValueElement::ValueElement(a1, &v12, (uint64_t)RIO_MTLX::GeomProp::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE41B0;
  return a1;
}

void sub_22FF51904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::ValueElement::ValueElement(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::TypedElement::TypedElement(a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDE42C0;
  return a1;
}

void sub_22FF519B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GeomProp::~GeomProp(RIO_MTLX::GeomProp *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::GeomPropDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::GeomPropDef::CATEGORY((RIO_MTLX::GeomPropDef *)v2);
  v4 = (__int128 *)RIO_MTLX::GeomPropDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::GeomPropDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::GeomPropDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::GeomPropDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3120;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::GeomPropDef::CATEGORY((RIO_MTLX::GeomPropDef *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::GeomPropDef::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3170;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF51C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::GeomPropDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::GeomPropDef::~GeomPropDef(RIO_MTLX::GeomPropDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Implementation>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Implementation::CATEGORY((RIO_MTLX::Implementation *)v2);
  v4 = (__int128 *)RIO_MTLX::Implementation::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Implementation::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Implementation>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Implementation>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x128uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE31D0;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Implementation::CATEGORY((RIO_MTLX::Implementation *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::InterfaceElement::InterfaceElement(&v8[1], &v27, RIO_MTLX::Implementation::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDEBF78;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF51F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Implementation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE31D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Implementation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE31D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Implementation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Input>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Input::CATEGORY((RIO_MTLX::Input *)v2);
  v4 = (__int128 *)RIO_MTLX::Input::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Input::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Input>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Input>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE4270;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::Input::Input((RIO_MTLX::Input *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF5215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Input>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Input>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Input>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Input *RIO_MTLX::Input::Input(RIO_MTLX::Input *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::Input::CATEGORY(a1);
  RIO_MTLX::PortElement::PortElement(a1, &v12, (uint64_t)RIO_MTLX::Input::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDFD2E0;
  return a1;
}

void sub_22FF522A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PortElement::PortElement(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::ValueElement::ValueElement(a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDFD340;
  return a1;
}

void sub_22FF52354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Look>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Look::CATEGORY((RIO_MTLX::Look *)v2);
  v4 = (__int128 *)RIO_MTLX::Look::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Look::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Look>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Look>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3220;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Look::CATEGORY((RIO_MTLX::Look *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::Look::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3270;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF52598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Look>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Look>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Look>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::Look::~Look(RIO_MTLX::Look *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::LookGroup>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::LookGroup::CATEGORY((RIO_MTLX::LookGroup *)v2);
  v4 = (__int128 *)RIO_MTLX::LookGroup::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::LookGroup::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::LookGroup>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::LookGroup>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE32D0;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::LookGroup::CATEGORY((RIO_MTLX::LookGroup *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::LookGroup::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3320;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF528C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE32D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE32D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::LookGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::LookGroup::~LookGroup(RIO_MTLX::LookGroup *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::MaterialAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::MaterialAssign::CATEGORY((RIO_MTLX::MaterialAssign *)v2);
  v4 = (__int128 *)RIO_MTLX::MaterialAssign::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::MaterialAssign::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::MaterialAssign>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::MaterialAssign>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3380;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::MaterialAssign::MaterialAssign((RIO_MTLX::MaterialAssign *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF52B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::MaterialAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::MaterialAssign *RIO_MTLX::MaterialAssign::MaterialAssign(RIO_MTLX::MaterialAssign *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::MaterialAssign::CATEGORY(a1);
  RIO_MTLX::GeomElement::GeomElement(a1, &v12, (uint64_t)RIO_MTLX::MaterialAssign::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE33D0;
  return a1;
}

void sub_22FF52C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::MaterialAssign::~MaterialAssign(RIO_MTLX::MaterialAssign *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Member>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Member::CATEGORY((RIO_MTLX::Member *)v2);
  v4 = (__int128 *)RIO_MTLX::Member::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Member::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Member>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Member>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3430;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Member::CATEGORY((RIO_MTLX::Member *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v27, RIO_MTLX::Member::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3480;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF52EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Member>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Member>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Member>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::Member::~Member(RIO_MTLX::Member *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Node>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Node::CATEGORY((RIO_MTLX::Node *)v2);
  v4 = (__int128 *)RIO_MTLX::Node::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Node::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Node>;
  return a1;
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::NodeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::NodeDef::CATEGORY((RIO_MTLX::NodeDef *)v2);
  v4 = (__int128 *)RIO_MTLX::NodeDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::NodeDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::NodeDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::NodeDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x128uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE4110;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::NodeDef::NodeDef((RIO_MTLX::NodeDef *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF53158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::NodeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::NodeDef *RIO_MTLX::NodeDef::NodeDef(RIO_MTLX::NodeDef *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::NodeDef::CATEGORY(a1);
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v12, RIO_MTLX::NodeDef::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDEBFF0;
  return a1;
}

void sub_22FF532A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::NodeGraph>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::NodeGraph::CATEGORY((RIO_MTLX::NodeGraph *)v2);
  v4 = (__int128 *)RIO_MTLX::NodeGraph::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::NodeGraph::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::NodeGraph>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::NodeGraph>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x128uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3E68;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::NodeGraph::NodeGraph((RIO_MTLX::NodeGraph *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF533F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::NodeGraph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::NodeGraph *RIO_MTLX::NodeGraph::NodeGraph(RIO_MTLX::NodeGraph *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::NodeGraph::CATEGORY(a1);
  RIO_MTLX::GraphElement::GraphElement(a1, &v12, RIO_MTLX::NodeGraph::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDF5320;
  return a1;
}

void sub_22FF53544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GraphElement::GraphElement(_QWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::InterfaceElement::InterfaceElement(a1, &v12, a3, a4);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_24FDE3E08;
  return a1;
}

void sub_22FF535F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GraphElement::~GraphElement(RIO_MTLX::GraphElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Output>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Output::CATEGORY((RIO_MTLX::Output *)v2);
  v4 = (__int128 *)RIO_MTLX::Output::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Output::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Output>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Output>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3EB8;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::Output::Output((RIO_MTLX::Output *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF5376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Output>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Output>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Output>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Output *RIO_MTLX::Output::Output(RIO_MTLX::Output *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::Output::CATEGORY(a1);
  RIO_MTLX::PortElement::PortElement(a1, &v12, (uint64_t)RIO_MTLX::Output::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDFD258;
  return a1;
}

void sub_22FF538B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Property>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Property::CATEGORY((RIO_MTLX::Property *)v2);
  v4 = (__int128 *)RIO_MTLX::Property::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Property::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Property>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Property>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE34E8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Property::CATEGORY((RIO_MTLX::Property *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::ValueElement::ValueElement(&v8[1].__vftable, &v27, (uint64_t)RIO_MTLX::Property::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3538;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF53AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Property>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE34E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Property>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE34E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Property>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::Property::~Property(RIO_MTLX::Property *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertyAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertyAssign::CATEGORY((RIO_MTLX::PropertyAssign *)v2);
  v4 = (__int128 *)RIO_MTLX::PropertyAssign::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::PropertyAssign::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertyAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertyAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE35A0;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::PropertyAssign::CATEGORY((RIO_MTLX::PropertyAssign *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::ValueElement::ValueElement(&v8[1].__vftable, &v27, (uint64_t)RIO_MTLX::PropertyAssign::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE35F0;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF53E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE35A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE35A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertyAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::PropertyAssign::~PropertyAssign(RIO_MTLX::PropertyAssign *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySet>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertySet::CATEGORY((RIO_MTLX::PropertySet *)v2);
  v4 = (__int128 *)RIO_MTLX::PropertySet::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::PropertySet::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertySet>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertySet>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3658;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::PropertySet::CATEGORY((RIO_MTLX::PropertySet *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::PropertySet::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE36A8;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF54154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertySet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::PropertySet::~PropertySet(RIO_MTLX::PropertySet *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::PropertySetAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::PropertySetAssign::CATEGORY((RIO_MTLX::PropertySetAssign *)v2);
  v4 = (__int128 *)RIO_MTLX::PropertySetAssign::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::PropertySetAssign::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::PropertySetAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::PropertySetAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3708;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::PropertySetAssign::CATEGORY((RIO_MTLX::PropertySetAssign *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::GeomElement::GeomElement(&v8[1].__vftable, &v27, (uint64_t)RIO_MTLX::PropertySetAssign::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3758;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF54480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::PropertySetAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::PropertySetAssign::~PropertySetAssign(RIO_MTLX::PropertySetAssign *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::TargetDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::TargetDef::CATEGORY((RIO_MTLX::TargetDef *)v2);
  v4 = (__int128 *)RIO_MTLX::TargetDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::TargetDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::TargetDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::TargetDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE37B8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::TargetDef::CATEGORY((RIO_MTLX::TargetDef *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::TypedElement::TypedElement(&v8[1], &v27, RIO_MTLX::TargetDef::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3808;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF547AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE37B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE37B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TargetDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TargetDef::~TargetDef(RIO_MTLX::TargetDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Token>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Token::CATEGORY((RIO_MTLX::Token *)v2);
  v4 = (__int128 *)RIO_MTLX::Token::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Token::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Token>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Token>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE4008;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::Token::Token((RIO_MTLX::Token *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF549E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Token>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Token>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Token>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Token *RIO_MTLX::Token::Token(RIO_MTLX::Token *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  RIO_MTLX::Token::CATEGORY(a1);
  RIO_MTLX::ValueElement::ValueElement(a1, &v12, (uint64_t)RIO_MTLX::Token::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE4058;
  return a1;
}

void sub_22FF54B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Token::~Token(RIO_MTLX::Token *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::TypeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::TypeDef::CATEGORY((RIO_MTLX::TypeDef *)v2);
  v4 = (__int128 *)RIO_MTLX::TypeDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::TypeDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::TypeDef>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::TypeDef>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3870;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::TypeDef::CATEGORY((RIO_MTLX::TypeDef *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::TypeDef::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE38C0;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF54DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypeDef::~TypeDef(RIO_MTLX::TypeDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Unit>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Unit::CATEGORY((RIO_MTLX::Unit *)v2);
  v4 = (__int128 *)RIO_MTLX::Unit::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Unit::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Unit>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::Unit>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3920;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::Unit::Unit((RIO_MTLX::Unit *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF54FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Unit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Unit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Unit>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::Unit *RIO_MTLX::Unit::Unit(RIO_MTLX::Unit *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::Unit::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v12, RIO_MTLX::Unit::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE3970;
  return a1;
}

void sub_22FF55128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Unit::~Unit(RIO_MTLX::Unit *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::UnitDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::UnitDef::CATEGORY((RIO_MTLX::UnitDef *)v2);
  v4 = (__int128 *)RIO_MTLX::UnitDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::UnitDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::UnitDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::UnitDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE39D0;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::UnitDef::UnitDef((RIO_MTLX::UnitDef *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF552A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE39D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE39D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::UnitDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::UnitDef *RIO_MTLX::UnitDef::UnitDef(RIO_MTLX::UnitDef *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::UnitDef::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v12, RIO_MTLX::UnitDef::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE3A20;
  return a1;
}

void sub_22FF553F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::UnitDef::~UnitDef(RIO_MTLX::UnitDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::UnitTypeDef>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::UnitTypeDef::CATEGORY((RIO_MTLX::UnitTypeDef *)v2);
  v4 = (__int128 *)RIO_MTLX::UnitTypeDef::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::UnitTypeDef>;
  return a1;
}

double RIO_MTLX::Element::createElement<RIO_MTLX::UnitTypeDef>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double result;
  __int128 v16;

  v6 = *a1;
  v5 = a1[1];
  v7 = operator new(0x118uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE3A80;
  v9 = (uint64_t)(v7 + 3);
  *(_QWORD *)&v16 = v6;
  *((_QWORD *)&v16 + 1) = v5;
  if (v5)
  {
    v10 = (unint64_t *)(v5 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  RIO_MTLX::UnitTypeDef::UnitTypeDef((RIO_MTLX::UnitTypeDef *)(v7 + 3), (uint64_t *)&v16, a2);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v8;
  std::shared_ptr<RIO_MTLX::Node>::__enable_weak_this[abi:ne180100]<RIO_MTLX::Element,RIO_MTLX::Node,void>((uint64_t)&v16, v8 + 4, v9);
  result = *(double *)&v16;
  *a3 = v16;
  return result;
}

void sub_22FF5556C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::UnitTypeDef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

RIO_MTLX::UnitTypeDef *RIO_MTLX::UnitTypeDef::UnitTypeDef(RIO_MTLX::UnitTypeDef *a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  RIO_MTLX::UnitTypeDef::CATEGORY(a1);
  RIO_MTLX::Element::Element(a1, &v12, RIO_MTLX::UnitTypeDef::CATEGORY(void)::v, a3);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_24FDE3AD0;
  return a1;
}

void sub_22FF556B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::UnitTypeDef::~UnitTypeDef(RIO_MTLX::UnitTypeDef *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Variant>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Variant::CATEGORY((RIO_MTLX::Variant *)v2);
  v4 = (__int128 *)RIO_MTLX::Variant::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Variant::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Variant>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Variant>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x128uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3B30;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Variant::CATEGORY((RIO_MTLX::Variant *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::InterfaceElement::InterfaceElement(&v8[1], &v27, RIO_MTLX::Variant::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3B80;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF55924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Variant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Variant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Variant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::Variant::~Variant(RIO_MTLX::Variant *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::VariantAssign>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::VariantAssign::CATEGORY((RIO_MTLX::VariantAssign *)v2);
  v4 = (__int128 *)RIO_MTLX::VariantAssign::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::VariantAssign::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::VariantAssign>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::VariantAssign>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3BF8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::VariantAssign::CATEGORY((RIO_MTLX::VariantAssign *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::VariantAssign::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3C48;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF55C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::VariantAssign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::VariantAssign::~VariantAssign(RIO_MTLX::VariantAssign *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::VariantSet>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::VariantSet::CATEGORY((RIO_MTLX::VariantSet *)v2);
  v4 = (__int128 *)RIO_MTLX::VariantSet::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::VariantSet::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::VariantSet>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::VariantSet>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3CA8;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::VariantSet::CATEGORY((RIO_MTLX::VariantSet *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::Element::Element(&v8[1], &v27, RIO_MTLX::VariantSet::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3CF8;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF55F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::VariantSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::VariantSet::~VariantSet(RIO_MTLX::VariantSet *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

RIO_MTLX::Element *RIO_MTLX::ElementRegistry<RIO_MTLX::Visibility>::ElementRegistry(RIO_MTLX::Element *a1)
{
  __int128 *v2;
  __int128 *v4;

  v2 = RIO_MTLX::Element::_creatorMap(a1);
  RIO_MTLX::Visibility::CATEGORY((RIO_MTLX::Visibility *)v2);
  v4 = (__int128 *)RIO_MTLX::Visibility::CATEGORY(void)::v;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Element::_creatorMap(void)::vv, (unsigned __int8 *)RIO_MTLX::Visibility::CATEGORY(void)::v, (uint64_t)&std::piecewise_construct, &v4)+ 5) = RIO_MTLX::Element::createElement<RIO_MTLX::Visibility>;
  return a1;
}

void RIO_MTLX::Element::createElement<RIO_MTLX::Visibility>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x118uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3D58;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v28 = v5;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  else
  {
    v28 = 0;
  }
  v27 = v6;
  RIO_MTLX::Visibility::CATEGORY((RIO_MTLX::Visibility *)v7);
  v13 = &v8[1].__vftable;
  RIO_MTLX::GeomElement::GeomElement(&v8[1].__vftable, &v27, (uint64_t)RIO_MTLX::Visibility::CATEGORY(void)::v, a2);
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *v13 = &off_24FDE3DA8;
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v8[1].__shared_owners_ = (uint64_t)v13;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_31:
  *a3 = v13;
  a3[1] = v8;
}

void sub_22FF562A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::Visibility>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::Visibility>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE3D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::Visibility>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::Visibility::~Visibility(RIO_MTLX::Visibility *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t RIOPxrUsdGeomXformableXformQueryGetLocalTransformation(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v12[32];
  _OWORD v13[8];
  uint64_t v14;
  uint64_t v15;
  void **v16;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v14 = MEMORY[0x24BEE9D78] + 16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v13, 1.0);
  if (v15 && (*(_BYTE *)(v15 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v14 + 32))(&v14))
  {
    MEMORY[0x2348B2068](v12, &v14);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
    v16 = (void **)v12;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v16);
    v3 = v13[1];
    v4 = v13[2];
    v5 = v13[3];
    v6 = v13[4];
    v7 = v13[5];
    v8 = v13[6];
    v9 = v13[7];
    *a2 = v13[0];
    a2[1] = v3;
    a2[2] = v4;
    a2[3] = v5;
    a2[4] = v6;
    a2[5] = v7;
    v10 = 1;
    a2[6] = v8;
    a2[7] = v9;
  }
  else
  {
    v10 = 0;
  }
  MEMORY[0x2348B2080](&v14);
  return v10;
}

void sub_22FF564C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  MEMORY[0x2348B2080](v2 - 80);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdGeomXformableXformQueryCopyTimeSamples()
{
  __CFArray *Mutable;
  char *v1;
  char *v2;
  const __CFAllocator *v3;
  CFNumberRef v4;
  _BYTE v6[32];
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v9 = 0;
  v10 = MEMORY[0x24BEE9D78] + 16;
  v7 = 0;
  v8 = 0;
  if (v11
    && (*(_BYTE *)(v11 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D78] + 48))(&v10))
  {
    MEMORY[0x2348B2068](v6, &v10);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples();
    v12 = (void **)v6;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v12);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v1 = v7;
  v2 = v8;
  if (v7 != v8)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v4 = CFNumberCreate(v3, kCFNumberDoubleType, v1);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      v1 += 8;
    }
    while (v1 != v2);
    v1 = v7;
  }
  if (v1)
  {
    v8 = v1;
    operator delete(v1);
  }
  MEMORY[0x2348B2080](&v10);
  return Mutable;
}

void sub_22FF5661C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 56) = v17;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x2348B2080](&a17);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 136);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24FDE4400 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS8_17UsdAttributeQueryEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS8_17UsdAttributeQueryEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::~UsdAttributeQuery(a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::~UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdResolveTarget>::reset[abi:ne180100]((uint64_t *)this + 14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 96);
  v2 = (unsigned int *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = *((_QWORD *)this + 3);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v13 = *((_QWORD *)this + 1);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
}

uint64_t std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdResolveTarget>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t (***RIOPxrUsdUtilsModifyAssetPaths(uint64_t a1, uint64_t a2))()
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  std::recursive_mutex *v8;
  std::recursive_mutex *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t (***result)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  realityio::UsdLayerMutexTracker *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = &off_24FDE4420;
  v23 = (realityio::UsdLayerMutexTracker *)MEMORY[0x2348B5260](a2);
  v24 = &v22;
  v3 = realityio::UsdLayerMutexTracker::instance(v23);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)(a1 + 16);
  if (v5)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v4);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v20, v6);
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v7.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v3, &v20);
  v9 = v8;
  v10 = v21;
  if (v21)
  {
    v11 = (unsigned int *)(v21 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v10 + 8))(v10, v7);
  }
  std::recursive_mutex::lock(v9);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v20, v4);
  pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths();
  v14 = v21;
  if (v21)
  {
    v15 = (unsigned int *)(v21 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  std::recursive_mutex::unlock(v9);
  result = v24;
  if (v24 == &v22)
  {
    v19 = 4;
    result = &v22;
  }
  else
  {
    if (!v24)
      return result;
    v19 = 5;
  }
  return (uint64_t (***)())(*result)[v19]();
}

void sub_22FF56A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::recursive_mutex *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;

  if (a11)
  {
    v17 = a11 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  std::recursive_mutex::unlock(v15);
  v20 = a15;
  if (a15 == &a12)
  {
    v21 = 4;
    v20 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDE4420;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDE4420;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  int v4;
  CFStringRef v6;
  __CFString *v7;
  void *v8;
  _BYTE v9[8];
  __int128 v10;
  std::string::size_type v11;

  v4 = a2[23];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4 < 0)
      a2 = *(const char **)a2;
    v6 = CFStringCreateWithCString(0, a2, 0x8000100u);
    v7 = (__CFString *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
    CFRelease(v6);
    realityio::CFStringCopyUTF8String(v7, (uint64_t)v9);
    if (SHIBYTE(v11) < 0)
    {
      v8 = (void *)v10;
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
      if (v9[0])
        operator delete(v8);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
      a3->__r_.__value_.__r.__words[2] = v11;
    }
    CFRelease(v7);
  }
  else if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
}

void sub_22FF56CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  void *v9;

  if (a9)
    operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOPxrUsdUtilsModifyAssetPaths::$_0,std::allocator<RIOPxrUsdUtilsModifyAssetPaths::$_0>,std::string ()(std::string const&)>::target_type()
{
}

void *realityio::UsdLayerMutexTracker::instance(realityio::UsdLayerMutexTracker *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::concurrent_unordered_base((uint64_t)&realityio::UsdLayerMutexTracker::instance(void)::ret, 8uLL, &v3);
  }
  return &realityio::UsdLayerMutexTracker::instance(void)::ret;
}

void sub_22FF56DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double realityio::UsdLayerMutexTracker::writeMutexForLayer(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v4)(uint64_t *);
  double v5;
  char v6;
  double result;

  v4 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(a2);
  if (!(v6 & 1 | (unint64_t)v4))
    return _ZTWN9realityio33kDummyLayerMutexForInvalidObjectsE(v5);
  tbb::interface5::concurrent_unordered_map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::operator[](a1, a2);
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  v5[11] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_22FF56F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  void *v13;
  unint64_t v15;
  unint64_t v16;

  v6 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2);
  v7 = v6;
  v8 = a1 + 8 * v6;
  v10 = *(_QWORD *)(v8 + 48);
  v9 = (unint64_t *)(v8 + 48);
  __dmb(0xBu);
  if (!v10)
  {
    if (v6)
      v11 = 8 << v6;
    else
      v11 = 16;
    v12 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)v11);
    bzero(v12, v11);
    do
    {
      while (!__ldaxr(v9))
      {
        if (!__stlxr((unint64_t)v12, v9))
          goto LABEL_12;
      }
      __clrex();
      do
        v15 = __ldxr(v9);
      while (__stxr(v15, v9));
    }
    while (!v15);
    tbb::internal::deallocate_via_handler_v3((tbb::internal *)v12, v13);
  }
LABEL_12:
  v16 = *v9;
  __dmb(0xBu);
  *(_QWORD *)(v16 + 8 * (a2 - ((1 << v7) & 0x1FFFFFFFFFFFFFFELL))) = *a3;
}

unint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = a1 | 1;
  if (HIDWORD(a1))
    v1 = HIDWORD(a1);
  v2 = 32 * (HIDWORD(a1) != 0);
  if (v1 >= 0x10000)
  {
    v1 >>= 16;
    v2 = (32 * (HIDWORD(a1) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8uLL;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4uLL;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  return ((v1 >> 1) & 1) + v2;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::~split_ordered_list(uint64_t a1)
{
  tbb::internal *v2;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::clear(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::clear(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(int a1, tbb::internal *this)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24));
    v3 = (unsigned int *)*((_QWORD *)this + 2);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return tbb::internal::deallocate_via_handler_v3(this, this);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 16));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t tbb::interface5::concurrent_unordered_map<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::operator[](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v15;
  __int128 v16;
  std::recursive_mutex v17;
  uint64_t v18;
  uint64_t v19;
  std::recursive_mutex v20;
  __int128 v21;
  std::recursive_mutex v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_find(a1, (uint64_t)a2, &v16);
  v4 = v16;
  if ((_QWORD)v16)
    v5 = 0;
  else
    v5 = *((_QWORD *)&v16 + 1) == a1 + 16;
  if (v5)
  {
    MEMORY[0x2348B4CCC](&v17);
    std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(&v18, a2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(&v21, (uint64_t)&v18);
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_insert<tbb::internal::BOOL_constant<true>,tbb::internal::BOOL_constant<true>,std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(a1, &v21, 0, (uint64_t)&v15);
    v16 = v15;
    std::recursive_mutex::~recursive_mutex(&v22);
    v6 = *((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v7 = (unsigned int *)(*((_QWORD *)&v21 + 1) + 8);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    std::recursive_mutex::~recursive_mutex(&v20);
    v10 = v19;
    if (v19)
    {
      v11 = (unsigned int *)(v19 + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    std::recursive_mutex::~recursive_mutex(&v17);
    v4 = v16;
  }
  return v4 + 24;
}

void sub_22FF57314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::recursive_mutex *a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);
  v25 = va_arg(va1, _QWORD);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair(v15 - 120);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::~pair((uint64_t)va1);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)va);
  _Unwind_Resume(a1);
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::_FetchPointer;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::_FetchPointer(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_find(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)(a2 + 8));
    v6 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v8 = bswap64(v6);
  v18 = 0;
  v19 = (_QWORD *)v8;
  v9 = (unsigned __int8 *)&v19;
  for (i = 7; i != -1; --i)
  {
    v11 = *v9++;
    *((_BYTE *)&v18 + i) = tbb::internal::reverse<unsigned char>::byte_table[v11];
  }
  v12 = v18;
  v13 = a1 + 16;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(a1, v8, &v19);
  v14 = v19;
  if (v19)
  {
    v15 = v12 | 1;
    while (1)
    {
      v16 = v14[11];
      if (v16 > v15)
        break;
      if (v16 == v15)
      {
        v17 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)(v14 + 1), a2);
        v14 = v19;
        if (v17)
          goto LABEL_13;
      }
      v14 = (_QWORD *)*v14;
      v19 = v14;
      if (!v14)
        goto LABEL_11;
    }
    v14 = 0;
LABEL_13:
    *a3 = v14;
  }
  else
  {
LABEL_11:
    *a3 = 0;
  }
  a3[1] = v13;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(uint64_t a1, unint64_t *a2)
{
  unint64_t parent;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  parent = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::get_parent(a1, (unint64_t)a2);
  if (!tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::is_initialized(a1, parent))tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::init_bucket(a1, parent);
  v5 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(parent);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (parent - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = tbb::internal::reverse<unsigned char>::byte_table[v9];
  }
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::insert_dummy(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, (unint64_t)a2, &v10);
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::get_parent(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v2 = HIDWORD(a2);
    if (!HIDWORD(a2))
      v2 = a2;
    if (v2 < 0x10000)
    {
      v3 = 32 * (HIDWORD(a2) != 0);
    }
    else
    {
      v2 >>= 16;
      v3 = (32 * (HIDWORD(a2) != 0)) | 0x10;
    }
    if (v2 >= 0x100)
    {
      v2 >>= 8;
      v3 |= 8uLL;
    }
    if (v2 >= 0x10)
    {
      v2 >>= 4;
      v3 |= 4uLL;
    }
    if (v2 >= 4)
    {
      v2 >>= 2;
      v3 += 2;
    }
    v4 = ((v2 >> 1) & 1) + v3;
  }
  else
  {
    LOBYTE(v4) = -1;
  }
  return a2 & ~(1 << v4);
}

BOOL tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::is_initialized(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::segment_index_of(a2);
  v5 = a1 + 8 * v4;
  v7 = *(_QWORD *)(v5 + 48);
  v6 = (uint64_t *)(v5 + 48);
  __dmb(0xBu);
  if (!v7)
    return 0;
  v8 = *v6;
  __dmb(0xBu);
  return *(_QWORD *)(v8 + 8 * (a2 - ((1 << v4) & 0x1FFFFFFFFFFFFFFELL))) != 0;
}

tbb::internal *tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::insert_dummy@<X0>(int a1@<W0>, unint64_t **a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *i;
  tbb::internal *result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  i = (unint64_t *)**a2;
  result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  *((_QWORD *)result + 11) = a3;
  *(_QWORD *)result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v11 = *a2;
    *(_QWORD *)result = i;
    do
    {
      while (1)
      {
        v12 = __ldaxr(v11);
        if ((unint64_t *)v12 == i)
          break;
        __clrex();
        do
          v13 = __ldxr(v11);
        while (__stxr(v13, v11));
        if ((unint64_t *)v13 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v11));
    v13 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v13 || result == (tbb::internal *)v13)
      break;
    for (i = *a2; ; *a2 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v10 = i[11];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 == a3)
      {
        result = (tbb::internal *)tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1, result);
        goto LABEL_21;
      }
    }
  }
  i = (unint64_t *)result;
LABEL_21:
  *a4 = i;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v3);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  if (v8)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  return v6 == v10;
}

void tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::internal_insert<tbb::internal::BOOL_constant<true>,tbb::internal::BOOL_constant<true>,std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, tbb::internal *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t **v11;
  uint64_t i;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;

  v8 = a2[1];
  if (v8)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a2 + 1);
    v8 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v10 = bswap64(v8);
  v31 = 0;
  v32 = (unint64_t *)v10;
  v11 = &v32;
  for (i = 7; i != -1; --i)
  {
    v13 = *(unsigned __int8 *)v11;
    v11 = (unint64_t **)((char *)v11 + 1);
    *((_BYTE *)&v31 + i) = tbb::internal::reverse<unsigned char>::byte_table[v13];
  }
  v14 = v31 | 1;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::prepare_bucket(a1, v10, &v32);
  v15 = a1 + 16;
  if (a3)
  {
    *((_QWORD *)a3 + 11) = v14;
    *(_QWORD *)a3 = 0;
  }
  v16 = (uint64_t)a2;
  while (1)
  {
    v17 = v32;
    v18 = (unint64_t *)*v32;
    if (*v32)
    {
      v19 = v18[11];
      while (1)
      {
        v20 = v18;
        if (v19 > v14)
          break;
        if (v19 == v14
          && pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t)(v18 + 1), v16))
        {
          if (a3)
            tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::destroy_node(a1 + 16, a3);
          *(_QWORD *)a4 = v18;
          *(_QWORD *)(a4 + 8) = v15;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v32 = v18;
        v18 = (unint64_t *)*v18;
        if (!*v20)
        {
          v17 = v20;
          break;
        }
        v19 = v18[11];
        v17 = v20;
      }
    }
    if (!a3)
    {
      a3 = (tbb::internal *)tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::create_node<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(a1 + 16, v14, a2);
      v16 = (uint64_t)a3 + 8;
      v17 = v32;
    }
    *(_QWORD *)a3 = v18;
    do
    {
      while (1)
      {
        v21 = __ldaxr(v17);
        if ((unint64_t *)v21 == v18)
          break;
        __clrex();
        do
          v22 = __ldxr(v17);
        while (__stxr(v22, v17));
        if ((unint64_t *)v22 != v18)
          goto LABEL_25;
      }
    }
    while (__stlxr((unint64_t)a3, v17));
    v22 = (unint64_t)v18;
LABEL_25:
    if (v18 == (unint64_t *)v22 || a3 == (tbb::internal *)v22)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v15;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v24 = (unint64_t *)(a1 + 24);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = 1;
  v28 = *(_QWORD *)(a1 + 8);
  v27 = a1 + 8;
  v26 = v28;
  __dmb(0xBu);
  if ((float)((float)v25 / (float)v28) > *(float *)(v27 + 36))
  {
    do
    {
      while (1)
      {
        v29 = __ldaxr((unint64_t *)v27);
        if (v29 != v26)
          break;
        if (!__stlxr(2 * v26, (unint64_t *)v27))
          return;
      }
      __clrex();
      do
        v30 = __ldxr((unint64_t *)v27);
      while (__stxr(v30, (unint64_t *)v27));
    }
    while (v30 == v26);
  }
}

_QWORD *tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>>::create_node<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x60);
  std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100](v5 + 1, a3);
  v5[11] = a2;
  *v5 = 0;
  return v5;
}

void sub_22FF57B14(void *a1)
{
  tbb::internal *v1;
  void *v2;

  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_22FF57B28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  MEMORY[0x2348B4CCC](a1 + 2);
  return a1;
}

void sub_22FF57B84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  MEMORY[0x2348B4CCC](a1 + 2);
  return a1;
}

void sub_22FF57C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,0>(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MEMORY[0x2348B4CCC](a1 + 1);
  return a1;
}

void sub_22FF57C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = v1;
  v4 = *(unsigned int **)(v2 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_22FF57D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v2, (const char *)0x2F);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(v3);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_22FF57EA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

id `anonymous namespace'::getValue(_anonymous_namespace_ *this, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  realityio *v7;
  void *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[16];

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s.%s"), "com.apple.re", this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", v6);
    v7 = (realityio *)objc_claimAutoreleasedReturnValue();
    v5 = v7;
    if (v7)
    {
      v8 = v6;
    }
    else
    {
      v9 = objc_msgSend(v4, "rangeOfString:options:", CFSTR("."), 4);
      objc_msgSend(v4, "substringToIndex:", v9);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "substringFromIndex:", v9 + 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (-[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("com.apple.re.network.multipeerservice")))
      {

        v10 = CFSTR("com.apple.renetwork.multipeerservice");
      }
      objc_msgSend(v3, "dictionaryForKey:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKey:", v8);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v5)
        goto LABEL_9;
    }
    v12 = *(NSObject **)realityio::logObjects(v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
    }
LABEL_9:

  }
  return v5;
}

void sub_22FF58088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void realityio::Defaults::intValue(realityio::Defaults *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  int v5;
  void *v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v6 = v4;
    v5 = objc_msgSend(v4, "intValue");
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v5;
    v4 = v6;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }

}

void sub_22FF58140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *realityio::MeshDeformationComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
    realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  }
  else
  {
    REMeshDeformationComponentGetComponentType();
    v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5)
      RERetain();
    v6 = v8;
    if (v8 != v5)
    {
      v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(v9, &v8);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    RERelease();
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_22FF58244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP11REComponentEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t Exec::ExecAction::supportsPartialInputs(Exec::ExecAction *this)
{
  return 0;
}

_QWORD *realityio::WrappedRERef<REComponent *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REComponent *>>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REComponent *>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REComponent *>>(_QWORD *result)
{
  if (result)
  {
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_Equal(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_EqualPtr(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_StreamOut()
{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP11REComponentEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REComponent *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>>::_GetProxiedAsVtValue@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v6 = realityio::WrappedRERef<REComponent *>::~WrappedRERef(v2);
      MEMORY[0x2348B4E1C](v6, 0x1020C403A5D3213);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v9;

  v2 = atomic_load((unsigned int *)(*a1 + 8));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_QWORD *)*a1;
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      RERetain();
      v4 = (_QWORD *)*a1;
    }
    v6 = (unsigned int *)(v3 + 8);
    atomic_store(0, (unsigned int *)(v3 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v9 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REComponent *>>>::~intrusive_ptr(&v9);
  }
  return *a1;
}

void sub_22FF58658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = *a2;
  *(_QWORD *)v4 = *a2;
  if (result)
    result = RERetain();
  v6 = (unsigned int *)(v4 + 8);
  atomic_store(0, (unsigned int *)(v4 + 8));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_22FF586EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void realityio::ObjCCustomInputDescriptor::resolvedPrimPaths(uint64_t a1@<X0>, void **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *Instance;
  const void *v8;
  void **v9;
  const void *v10;
  const __CFSet *v11;
  uint64_t v12;
  CFIndex Count;
  void **v14;
  void **v15;
  void **values;
  void **v17;
  uint64_t v18;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (*(_QWORD *)(a1 + 48))
  {
    values = a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&values);
    if (RIOPxrUsdStageGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    v8 = Instance;
    if (Instance)
    {
      v9 = values;
      values = 0;
      Instance[3] = 0;
      Instance[4] = 0;
      Instance[2] = v9;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&values);
    v10 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3);
    v11 = (const __CFSet *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    CFRelease(v8);
    CFRelease(v10);
    if (v11)
    {
      if (RIOPxrSdfPathGetTypeID::onceToken != -1)
        dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
      v12 = RIOPxrSdfPathGetTypeID::typeID;
      values = 0;
      v17 = 0;
      v18 = 0;
      Count = CFSetGetCount(v11);
      std::vector<void const*>::resize((uint64_t)&values, Count);
      CFSetGetValues(v11, (const void **)values);
      v14 = values;
      v15 = v17;
      while (v14 != v15)
      {
        if (CFGetTypeID(*v14) == v12)
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, (unsigned int *)*v14 + 4, (_DWORD *)*v14 + 4);
        ++v14;
      }
      CFRelease(v11);
      if (values)
      {
        v17 = values;
        operator delete(values);
      }
    }
  }
}

void sub_22FF588BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(_DWORD *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrSdfPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 16), a1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), a1 + 1);
  }
  return v3;
}

void std::vector<void const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<void const*>::__append((void **)a1, a2 - v2);
  }
}

void realityio::ObjCCustomInputDescriptor::~ObjCCustomInputDescriptor(id *this)
{

  realityio::InputDescriptor::~InputDescriptor((realityio::InputDescriptor *)this);
}

{

  realityio::InputDescriptor::~InputDescriptor((realityio::InputDescriptor *)this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::vector<void const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::~AcousticMeshBuilderTokens_StaticTokenType(realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  void **v37;

  v37 = (void **)((char *)this + 96);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v37);
  v2 = *((_QWORD *)this + 11);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 10);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 9);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 8);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 7);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 6);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 5);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 4);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 3);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 2);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v35 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
}

realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType::AcousticMeshBuilderTokens_StaticTokenType(realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v49 = (uint64_t *)(MEMORY[0x2348B2758](this, "AcousticMeshComponent", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 24, "includeChildObjects", 0);
  MEMORY[0x2348B2758]((char *)this + 32, "info:id", 0);
  MEMORY[0x2348B2758]((char *)this + 40, "material:binding", 0);
  MEMORY[0x2348B2758]((char *)this + 48, "RealityKit.AcousticMesh", 0);
  MEMORY[0x2348B2758]((char *)this + 56, "RealityKit.AcousticAdjustments", 0);
  MEMORY[0x2348B2758]((char *)this + 64, "realityKit:acousticMaterialName", 0);
  MEMORY[0x2348B2758]((char *)this + 72, "customAcousticMesh", 0);
  MEMORY[0x2348B2758]((char *)this + 80, "realityKit:AcousticMaterialOrderedPaths", 0);
  MEMORY[0x2348B2758]((char *)this + 88, "realityKit:AcousticMaterialOrderedDescriptors", 0);
  v2 = *(_QWORD *)this;
  v50 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v49;
  v51 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v52 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v53 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v54 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v55 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v56 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v57 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v58 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v59 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v60 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v61 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v38 = operator new(0x60uLL);
  v39 = 0;
  *((_QWORD *)this + 12) = v38;
  *((_QWORD *)this + 13) = v38;
  *((_QWORD *)this + 14) = v38 + 12;
  do
  {
    v40 = *(&v50 + v39);
    *v38 = v40;
    if ((v40 & 7) != 0)
    {
      v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 2, v41));
      if ((v42 & 1) == 0)
        *v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v39;
    ++v38;
  }
  while (v39 != 12);
  v43 = &v62;
  *((_QWORD *)this + 13) = v38;
  do
  {
    v45 = *--v43;
    v44 = v45;
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
  }
  while (v43 != &v50);
  return this;
}

void sub_22FF5918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, _QWORD *a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  v36 = (char *)&a26;
  while (1)
  {
    v38 = *((_QWORD *)v36 - 1);
    v36 -= 8;
    v37 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    if (v36 == &a14)
    {
      if ((*v28 & 7) != 0)
      {
        v41 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v27 & 7) != 0)
      {
        v43 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v35 & 7) != 0)
      {
        v45 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v34 & 7) != 0)
      {
        v47 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v33 & 7) != 0)
      {
        v49 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v32 & 7) != 0)
      {
        v51 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v31 & 7) != 0)
      {
        v53 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v30 & 7) != 0)
      {
        v55 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*v29 & 7) != 0)
      {
        v57 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*a10 & 7) != 0)
      {
        v59 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((*a11 & 7) != 0)
      {
        v61 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*v26 & 7) != 0)
      {
        v63 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_22FF59398()
{
  JUMPOUT(0x22FF59328);
}

void sub_22FF593A0()
{
  JUMPOUT(0x22FF5934CLL);
}

void sub_22FF593A8()
{
  JUMPOUT(0x22FF59370);
}

void realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, uint64_t a2@<X0>, realityio *a3@<X1>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t ServiceLocator;
  uint64_t v10;
  unint64_t v11;
  _QWORD *NameToken;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  _OWORD *v90;
  float64x2_t v91;
  float64x2_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  float64x2_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const char *v113;
  std::string::size_type v114;
  std::string::size_type v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  const char **v120;
  char *v121;
  std::string::size_type v122;
  const char *v123;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v124;
  char *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v129;
  _QWORD **v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  char v136;
  char *v137;
  _QWORD *v138;
  uint64_t String;
  __int128 v140;
  void **v141;
  std::string::size_type v142;
  std::string *v143;
  __int128 v144;
  unint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  unint64_t v149;
  realityio::Inputs *v150;
  realityio::Inputs *v151;
  realityio::Inputs *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  realityio::Inputs *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  unsigned __int16 v163;
  unsigned __int16 v164;
  unsigned __int16 v165;
  uint64_t *v166;
  uint64_t v167;
  double v168;
  double v169;
  int v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  __int128 *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t *v197;
  int *v198;
  uint64_t v199;
  int v200;
  unsigned __int16 *v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned __int16 *v206;
  int v207;
  unsigned __int16 *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int16 *v212;
  uint64_t *v213;
  uint64_t v214;
  double v215;
  double v216;
  int v217;
  uint64_t v218;
  __int128 v219;
  std::string::size_type v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  __int128 v224;
  std::string::size_type v225;
  unint64_t *size;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::string::size_type v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  uint64_t v236;
  void *v237;
  void *v238;
  double v239;
  _QWORD *v240;
  _QWORD *v241;
  float v242;
  __int128 v243;
  uint64_t *v244;
  uint64_t v245;
  double v246;
  double v247;
  int v248;
  uint64_t v249;
  float64x2_t v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  __int128 *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  double v268;
  _QWORD *v269;
  _QWORD *v270;
  float32x2_t *v271;
  float32x2_t *v272;
  float v273;
  float32x2_t v274;
  float32x2_t v275;
  float v276;
  float v277;
  float v278;
  float32x2_t *v279;
  uint64_t v280;
  int v281;
  _OWORD *v282;
  void *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  __int128 v292;
  __int128 v293;
  realityio::Inputs *v294;
  realityio::Inputs *v295;
  realityio::Inputs *v296;
  _QWORD *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t SampledSkeletalPoseAnimation;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  std::string *v316;
  __int128 v317;
  std::string *v318;
  char *Text;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  float v323;
  float v324;
  float v325;
  float v326;
  std::string *v327;
  std::string::size_type TimelineAsset;
  std::string *v329;
  char *v330;
  uint64_t v331;
  NSObject *v332;
  uint64_t Name;
  uint64_t v334;
  uint64_t v335;
  void **New;
  void *v337;
  _QWORD *v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  realityio::Inputs *v345;
  unint64_t *v346;
  unint64_t v347;
  char *v348;
  float32x2_t v349;
  realityio::SkeletalAnimationAssetBuilder *v350;
  std::__shared_weak_count *v351;
  std::mutex *v352;
  unint64_t *p_shared_owners;
  unint64_t v354;
  const void **v355;
  realityio::SkeletalAnimationAssetBuilder *v356;
  int v357;
  std::vector<std::string>::size_type *v358;
  unint64_t *v359;
  unint64_t v360;
  float v361;
  float v362;
  float v363;
  float v364;
  uint64_t v365;
  std::string::size_type v366;
  char *v367;
  uint64_t v368;
  NSObject *v369;
  std::__shared_weak_count *v370;
  std::mutex *v371;
  unint64_t *v372;
  unint64_t v373;
  const void **v374;
  std::mutex *v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *v379;
  std::string *v380;
  __int128 v381;
  std::string::size_type v382;
  const void **v383;
  unint64_t *v384;
  unint64_t v385;
  float v386;
  float v387;
  float v388;
  float v389;
  uint64_t v390;
  std::string::size_type v391;
  char *v392;
  uint64_t v393;
  NSObject *v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  float32x2_t v405;
  uint64_t *v406;
  uint64_t v407;
  std::string::size_type v408;
  std::string::size_type v409;
  std::string::size_type v410;
  uint64_t *v411;
  _QWORD *v413;
  uint64_t v414;
  double v415;
  float64x2_t v416;
  uint64_t v418;
  unint64_t v419;
  double *v420;
  double *v421;
  double *v422;
  uint64_t v423;
  double *v424;
  double *v425;
  double *v426;
  _QWORD *v427;
  double *v428;
  double *v429;
  uint64_t v430;
  double *v431;
  float v432;
  int v433;
  uint64_t **v434;
  _QWORD *v435;
  uint64_t **v436;
  _QWORD *v437;
  uint64_t **v438;
  uint64_t v439;
  _QWORD *v440;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v441;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v442;
  float v443;
  float32x4_t v444;
  double v445;
  _QWORD *v446;
  float32x4_t v447;
  double v448;
  uint64_t *v449;
  char *v450;
  void *v451[2];
  float64x2_t v452;
  __int128 v453;
  __int128 v454;
  realityio::Inputs *v455;
  realityio::Inputs *v456;
  realityio::Inputs *v457;
  void *v458;
  void *v459;
  unint64_t v460;
  void *v461[2];
  std::string::size_type v462;
  std::string v463;
  std::string *v464[2];
  __int128 v465;
  uint64_t v466;
  _OWORD v467[2];
  _OWORD v468[2];
  uint64_t v469;
  __int128 v470;
  float64x2_t v471;
  uint64_t v472;
  std::string v473;
  std::string v474;
  __int128 v475;
  uint64_t v476;
  __int128 v477;
  __int128 v478;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  _OWORD v485[2];
  uint64_t v486;
  _OWORD v487[2];
  uint64_t v488;
  uint64_t v489;
  _BYTE v490[16];
  void *__p[2];
  std::string v492;
  _BYTE v493[48];
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;

  v499 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v490, a1);
  ServiceLocator = REEngineGetServiceLocator();
  v414 = MEMORY[0x2348B1264](ServiceLocator);
  v469 = 0;
  memset(v468, 0, sizeof(v468));
  memset(v467, 0, 24);
  v10 = *a4;
  v413 = a5;
  if (a4[1] == *a4)
  {
    v87 = 0;
    v416 = (float64x2_t)xmmword_230201500;
    LODWORD(v88) = 1;
    goto LABEL_86;
  }
  v430 = a2;
  v11 = 0;
  do
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v11));
    NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 8 * v11));
    Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 44) & 0xFFFFFFFFFFFFFFF8)
      && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
    {
      if (((uint64_t)__p[1] & 4) != 0)
        v6 = (*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
      else
        v6 = (uint64_t)__p[0];
      MEMORY[0x2348B274C](&v470, "anim");
      v14 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)&v470);
      v15 = v14 + 5;
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)(v14 + 5)) & 1) != 0)
      {
        v16 = v14[6];
        if ((v16 & 4) == 0)
        {
LABEL_11:
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v474, v15);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v474.__r_.__value_.__r.__words + 1, v15 + 1);
          MEMORY[0x2348B274C](v464, "joints");
          v17 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)v464);
          v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v17 + 5));
          v19 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)&v474.__r_.__value_.__r.__words[1] = *(_OWORD *)v18;
          v475 = v19;
          v20 = *(_QWORD *)(v18 + 32);
          v476 = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 - 16);
            if (*((_QWORD *)&v475 + 1))
              v21 = (unint64_t *)*((_QWORD *)&v475 + 1);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          MEMORY[0x2348B274C](&v473, "animJoints");
          v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)&v473);
          v24 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v23 + 5));
          v25 = *(_OWORD *)(v24 + 16);
          v477 = *(_OWORD *)v24;
          v478 = v25;
          v26 = *(_QWORD *)(v24 + 32);
          v479 = v26;
          if (v26)
          {
            v27 = (unint64_t *)(v26 - 16);
            if (*((_QWORD *)&v478 + 1))
              v27 = (unint64_t *)*((_QWORD *)&v478 + 1);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          MEMORY[0x2348B274C](&v463, "restTransforms");
          v29 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)&v463);
          v30 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v29 + 5));
          v31 = *(_OWORD *)(v30 + 16);
          v480 = *(_OWORD *)v30;
          v481 = v31;
          v32 = *(_QWORD *)(v30 + 32);
          v482 = v32;
          if (v32)
          {
            v33 = (unint64_t *)(v32 - 16);
            if (*((_QWORD *)&v481 + 1))
              v33 = (unint64_t *)*((_QWORD *)&v481 + 1);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          MEMORY[0x2348B274C](v461, "rotations_samples");
          v35 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)v461);
          v36 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v35 + 5));
          v37 = *(_OWORD *)v36;
          v484 = *(_QWORD *)(v36 + 16);
          v483 = v37;
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v485, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v36 + 24));
          MEMORY[0x2348B274C](&v458, "scales_samples");
          v38 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)&v458);
          v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 + 5));
          v40 = *(_OWORD *)v39;
          v486 = *(_QWORD *)(v39 + 16);
          v485[1] = v40;
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v487, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v39 + 24));
          MEMORY[0x2348B274C](&v455, "translations_samples");
          v41 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6, (uint64_t *)&v455);
          v42 = pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>((pxrInternal__aapl__pxrReserved__::VtValue *)(v41 + 5));
          v43 = *(_OWORD *)v42;
          v488 = *(_QWORD *)(v42 + 16);
          v487[1] = v43;
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v489, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v42 + 24));
          v44 = *((_QWORD *)&v467[0] + 1);
          if (*((_QWORD *)&v467[0] + 1) >= *(_QWORD *)&v467[1])
          {
            v46 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v467[0] + 1) - *(_QWORD *)&v467[0]) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0x108421084210842)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if (0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(_QWORD *)&v467[1] - *(_QWORD *)&v467[0]) >> 3) > v47)
              v47 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(_QWORD *)&v467[1] - *(_QWORD *)&v467[0]) >> 3);
            if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)&v467[1] - *(_QWORD *)&v467[0]) >> 3) >= 0x84210842108421)
              v48 = 0x108421084210842;
            else
              v48 = v47;
            *(_QWORD *)&v493[32] = &v467[1];
            v441 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11;
            if (v48)
            {
              if (v48 > 0x108421084210842)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v49 = (char *)operator new(248 * v48);
            }
            else
            {
              v49 = 0;
            }
            v50 = (uint64_t)&v49[248 * v46];
            *(_QWORD *)v493 = v49;
            *(_QWORD *)&v493[8] = v50;
            *(_QWORD *)&v493[24] = &v49[248 * v48];
            std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(v50, (uint64_t)&v474);
            v51 = 0;
            *(_QWORD *)&v493[16] = v50 + 248;
            v52 = *((_QWORD *)&v467[0] + 1);
            v6 = *(_QWORD *)&v467[0];
            while (1)
            {
              v53 = v50;
              if (v52 == v6)
                break;
              v50 -= 248;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v53 - 248), (_DWORD *)(v52 - 248));
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v53 - 244), (_DWORD *)(v52 - 244));
              v54 = *(_OWORD *)(v52 - 224);
              *(_OWORD *)(v53 - 240) = *(_OWORD *)(v52 - 240);
              *(_OWORD *)(v53 - 224) = v54;
              v55 = *(_QWORD *)(v52 - 208);
              *(_QWORD *)(v53 - 208) = v55;
              if (v55)
              {
                v56 = (unint64_t *)(v55 - 16);
                if (*(_QWORD *)(v53 - 216))
                  v56 = *(unint64_t **)(v53 - 216);
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
              }
              v58 = *(_OWORD *)(v52 - 200);
              *(_OWORD *)(v53 - 184) = *(_OWORD *)(v52 - 184);
              *(_OWORD *)(v53 - 200) = v58;
              v59 = *(_QWORD *)(v52 - 168);
              *(_QWORD *)(v53 - 168) = v59;
              if (v59)
              {
                v60 = (unint64_t *)(v59 - 16);
                if (*(_QWORD *)(v53 - 176))
                  v60 = *(unint64_t **)(v53 - 176);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              v62 = *(_OWORD *)(v52 - 144);
              *(_OWORD *)(v53 - 160) = *(_OWORD *)(v52 - 160);
              *(_OWORD *)(v53 - 144) = v62;
              v63 = *(_QWORD *)(v52 - 128);
              *(_QWORD *)(v53 - 128) = v63;
              if (v63)
              {
                v64 = (unint64_t *)(v63 - 16);
                if (*(_QWORD *)(v53 - 136))
                  v64 = *(unint64_t **)(v53 - 136);
                do
                  v65 = __ldxr(v64);
                while (__stxr(v65 + 1, v64));
              }
              v66 = *(_OWORD *)(v52 - 120);
              *(_QWORD *)(v53 - 104) = *(_QWORD *)(v52 - 104);
              *(_OWORD *)(v53 - 120) = v66;
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v53 - 96), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 - 96));
              v67 = *(_OWORD *)(v52 - 80);
              *(_QWORD *)(v53 - 64) = *(_QWORD *)(v52 - 64);
              *(_OWORD *)(v53 - 80) = v67;
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v53 - 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 - 56));
              v68 = *(_OWORD *)(v52 - 40);
              *(_QWORD *)(v53 - 24) = *(_QWORD *)(v52 - 24);
              *(_OWORD *)(v53 - 40) = v68;
              v51 -= 248;
              pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v53 - 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 - 16));
              v52 -= 248;
            }
            v69 = *(_QWORD *)&v467[1];
            v70 = *(_OWORD *)&v493[16];
            v439 = *(_QWORD *)&v493[16];
            v71 = v467[0];
            *(_QWORD *)&v467[0] = v50;
            *(_OWORD *)&v493[8] = v71;
            *(_OWORD *)((char *)v467 + 8) = v70;
            *(_QWORD *)&v493[24] = v69;
            *(_QWORD *)v493 = v71;
            std::__split_buffer<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo> &>::~__split_buffer((uint64_t)v493);
            v45 = v439;
            a5 = v413;
            v11 = (unint64_t)v441;
          }
          else
          {
            std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(*((uint64_t *)&v467[0] + 1), (uint64_t)&v474);
            v45 = v44 + 248;
          }
          *((_QWORD *)&v467[0] + 1) = v45;
          realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo(&v474);
          if ((v455 & 7) != 0)
          {
            v72 = (unsigned int *)((unint64_t)v455 & 0xFFFFFFFFFFFFFFF8);
            do
              v73 = __ldxr(v72);
            while (__stlxr(v73 - 2, v72));
          }
          if ((v458 & 7) != 0)
          {
            v74 = (unsigned int *)((unint64_t)v458 & 0xFFFFFFFFFFFFFFF8);
            do
              v75 = __ldxr(v74);
            while (__stlxr(v75 - 2, v74));
          }
          if (((uint64_t)v461[0] & 7) != 0)
          {
            v76 = (unsigned int *)((unint64_t)v461[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v77 = __ldxr(v76);
            while (__stlxr(v77 - 2, v76));
          }
          if ((v463.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v78 = (unsigned int *)(v463.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v79 = __ldxr(v78);
            while (__stlxr(v79 - 2, v78));
          }
          if ((v473.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v80 = (unsigned int *)(v473.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v81 = __ldxr(v80);
            while (__stlxr(v81 - 2, v80));
          }
          if (((uint64_t)v464[0] & 7) != 0)
          {
            v82 = (unsigned int *)((unint64_t)v464[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v83 = __ldxr(v82);
            while (__stlxr(v83 - 2, v82));
          }
          if ((v470 & 7) != 0)
          {
            v84 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
            do
              v85 = __ldxr(v84);
            while (__stlxr(v85 - 2, v84));
          }
          goto LABEL_72;
        }
        v86 = (*(uint64_t (**)(_DWORD *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
      }
      else
      {
        v86 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
      }
      v15 = (_DWORD *)v86;
      goto LABEL_11;
    }
LABEL_72:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    ++v11;
    v10 = *a4;
  }
  while (v11 < (a4[1] - *a4) >> 3);
  v87 = *(_QWORD *)&v467[0];
  a2 = v430;
  if (*((_QWORD *)&v467[0] + 1) == *(_QWORD *)&v467[0])
  {
    v416 = (float64x2_t)xmmword_230201500;
    LODWORD(v88) = 1;
    v87 = *((_QWORD *)&v467[0] + 1);
  }
  else
  {
    v88 = (*((_QWORD *)&v467[0] + 1) - *(_QWORD *)&v467[0]) / 248;
    if (v88 <= 1)
      v88 = 1;
    v89 = (int8x16_t)xmmword_230201500;
    v90 = (_OWORD *)(*(_QWORD *)&v467[0] + 208);
    do
    {
      v91.f64[0] = *((float64_t *)v90 - 5);
      v91.f64[1] = *((float64_t *)v90 - 9);
      v92.f64[0] = *((float64_t *)v90 - 10);
      v92.f64[1] = *((float64_t *)v90 - 4);
      v93 = vbslq_s8((int8x16_t)vcgtq_f64(v92, v91), *(int8x16_t *)((char *)v90 - 40), *((int8x16_t *)v90 - 5));
      v94 = *(int8x16_t *)v90;
      v90 = (_OWORD *)((char *)v90 + 248);
      *(_QWORD *)&v91.f64[0] = v94.i64[0];
      *(_QWORD *)&v91.f64[1] = v93.i64[1];
      *(_QWORD *)&v92.f64[0] = v93.i64[0];
      *(_QWORD *)&v92.f64[1] = v94.i64[1];
      v95 = vbslq_s8((int8x16_t)vcgtq_f64(v92, v91), v94, v93);
      *(_QWORD *)&v96.f64[0] = v95.i64[0];
      *(_QWORD *)&v96.f64[1] = v89.i64[1];
      *(_QWORD *)&v91.f64[0] = v89.i64[0];
      *(_QWORD *)&v91.f64[1] = v95.i64[1];
      v89 = vbslq_s8((int8x16_t)vcgtq_f64(v91, v96), v95, v89);
      --v88;
    }
    while (v88);
    v416 = (float64x2_t)v89;
  }
LABEL_86:
  v97 = *(_QWORD *)(a2 + 16);
  if (!v97 || !*(_QWORD *)(v97 + 200))
  {
    v464[1] = 0;
    v464[0] = 0;
    *(_QWORD *)&v465 = 0;
    v101 = 0;
    if ((_DWORD)v88)
    {
      v102 = 0;
      v405 = vcvt_f32_f64(v416);
LABEL_351:
      realityio::entityPath(a3, (uint64_t)__p);
      Text = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      std::string::basic_string[abi:ne180100]<0>(v493, Text);
      if ((v493[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v474, *(const std::string::value_type **)v493, *(std::string::size_type *)&v493[8]);
        *(float32x2_t *)&v475 = v405;
        DWORD2(v475) = -8388609;
        v476 = 0;
        v477 = 0uLL;
        if ((v493[23] & 0x80000000) != 0)
          operator delete(*(void **)v493);
      }
      else
      {
        v474 = *(std::string *)v493;
        *(float32x2_t *)&v475 = v405;
        DWORD2(v475) = -8388609;
        v476 = 0;
        v477 = 0uLL;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v102 != v101)
      {
        v320 = 0;
        if ((unint64_t)(v102 - v101) <= 1)
          v321 = 1;
        else
          v321 = v102 - v101;
        v322 = v101;
        do
        {
          RETimelineDefinitionGetStartTime();
          v324 = v323;
          RETimelineDefinitionGetEndTime();
          v326 = v325;
          v327 = v464[0];
          TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
          v329 = &v327[v320];
          v330 = (char *)&v327[v320];
          if (SHIBYTE(v327[v320].__r_.__value_.__r.__words[2]) < 0)
            v330 = (char *)v329->__r_.__value_.__r.__words[0];
          v331 = realityio::TimelineGroupFactory::addTimeline((char *)&v474, TimelineAsset, (__int128 *)&v327[v320], v330, v324, v326);
          if ((v331 & 1) == 0)
          {
            v332 = *(id *)(realityio::logObjects((realityio *)v331) + 24);
            if (os_log_type_enabled(v332, OS_LOG_TYPE_ERROR))
            {
              if (SHIBYTE(v329->__r_.__value_.__r.__words[2]) < 0)
                v329 = (std::string *)v329->__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
              Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
              if (*(char *)(Name + 23) >= 0)
                v334 = Name;
              else
                v334 = *(_QWORD *)Name;
              realityio::entityPath(a3, (uint64_t)&v470);
              v335 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v470);
              *(_DWORD *)v493 = 136315650;
              *(_QWORD *)&v493[4] = v329;
              *(_WORD *)&v493[12] = 2080;
              *(_QWORD *)&v493[14] = v334;
              *(_WORD *)&v493[22] = 2080;
              *(_QWORD *)&v493[24] = v335;
              _os_log_error_impl(&dword_22FF26000, v332, OS_LOG_TYPE_ERROR, "ERROR ADDING TIME LINE %s to %s entity %s\n", v493, 0x20u);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v470);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
            }

          }
          RERelease();
          ++v320;
          ++v322;
          --v321;
        }
        while (v321);
      }
      __p[0] = (void *)realityio::TimelineGroupFactory::createTimelineAsset((float *)&v474, v414, "default scene animation");
      if (__p[0])
        RERetain();
      RERelease();
      memset(v493, 0, 40);
      New = (void **)pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew((uint64_t)v493, 1uLL);
      std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(0, 0, (uint64_t)New);
      v337 = __p[0];
      *New = __p[0];
      if (v337)
        RERetain();
      pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(v493);
      *(_QWORD *)&v493[32] = New;
      ++*(_QWORD *)v493;
      a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a6, (uint64_t)v493);
      pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(v493);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(__p);
      *(_QWORD *)v493 = &v476;
      std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)v493);
      if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v474.__r_.__value_.__l.__data_);
      v474.__r_.__value_.__r.__words[0] = (std::string::size_type)v464;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v474);
      if (v101)
        operator delete(v101);
      goto LABEL_462;
    }
    v406 = 0;
    v103 = 0;
    v411 = 0;
    v415 = v416.f64[1] - v416.f64[0];
    v433 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 254);
    v409 = *MEMORY[0x24BEDB7F0];
    v408 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v410 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v405 = vcvt_f32_f64(v416);
    v407 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      memset(&v473, 0, sizeof(v473));
      v418 = v103;
      v104 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v87 + 248 * v103);
      v105 = *((_QWORD *)v104 + 1);
      v104 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v104 + 8);
      std::vector<RESRT const*>::reserve((void **)&v473.__r_.__value_.__l.__data_, v105);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v104);
      v106 = v87 + 248 * v418;
      v109 = *(_QWORD **)(v106 + 40);
      v108 = (_QWORD *)(v106 + 40);
      v107 = v109;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v104);
      v442 = v104;
      v110 = *(_QWORD *)v104;
      v111 = *v108 + 8 * *(_QWORD *)v104;
      if (v109 != (_QWORD *)v111)
        break;
      v124 = v442;
LABEL_123:
      v449 = v101;
      if (v110)
      {
        if (v110 >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v125 = (char *)operator new(16 * v110);
        v450 = v125;
        v126 = v125;
        do
        {
          *v126 = 0;
          *((_QWORD *)v126 + 1) = 0;
          v126 += 16;
        }
        while (v126 != &v125[16 * v110]);
        if (*(_QWORD *)v124)
        {
          v127 = 0;
          v128 = v87 + 248 * v418;
          v129 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v128 + 48);
          v130 = (_QWORD **)(v128 + 80);
          do
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v129);
            v131 = *v130;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v129);
            v132 = *v130;
            v133 = *(_QWORD *)v129;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v442);
            v134 = &v132[v133];
            if (v131 != v134)
            {
              while ((*v131 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*v108 + 8 * v127) & 0xFFFFFFFFFFFFFFF8))
              {
                if (++v131 == v134)
                {
                  v131 = &v132[v133];
                  break;
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v129);
            if (v131 == &(*v130)[*(_QWORD *)v129])
            {
              v136 = 0;
              v135 = v127;
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique(v129);
              v135 = v131 - *v130;
              v136 = 1;
            }
            v137 = &v450[16 * v127];
            *v137 = v136;
            *((_QWORD *)v137 + 1) = v135;
            ++v127;
          }
          while (*(_QWORD *)v442 > v127);
          v101 = v449;
          v124 = v442;
        }
      }
      else
      {
        v450 = 0;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v474);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v474.__r_.__value_.__r.__words[2], (uint64_t)"[", 1);
      v138 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"]", 1);
      realityio::entityPath(a3, (uint64_t)v493);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v493);
      if (*(char *)(String + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v463, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
      }
      else
      {
        v140 = *(_OWORD *)String;
        v463.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
        *(_OWORD *)&v463.__r_.__value_.__l.__data_ = v140;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v493);
      std::string::basic_string[abi:ne180100]<0>(v493, "SkeletalPose.SkeletalPoses");
      std::stringbuf::str();
      if (v492.__r_.__value_.__s.__data_[7] >= 0)
        v141 = __p;
      else
        v141 = (void **)__p[0];
      if (v492.__r_.__value_.__s.__data_[7] >= 0)
        v142 = v492.__r_.__value_.__s.__data_[7];
      else
        v142 = (std::string::size_type)__p[1];
      v143 = std::string::append((std::string *)v493, (const std::string::value_type *)v141, v142);
      v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
      v462 = v143->__r_.__value_.__r.__words[2];
      *(_OWORD *)v461 = v144;
      v143->__r_.__value_.__l.__size_ = 0;
      v143->__r_.__value_.__r.__words[2] = 0;
      v143->__r_.__value_.__r.__words[0] = 0;
      if (v492.__r_.__value_.__s.__data_[7] < 0)
        operator delete(__p[0]);
      if ((v493[23] & 0x80000000) != 0)
        operator delete(*(void **)v493);
      *(_QWORD *)v493 = 0;
      __p[0] = 0;
      *(_QWORD *)&v470 = 0;
      v458 = 0;
      realityio::getAnimInputControlsFromInputs(a4, v413, (double *)v493, __p, &v470, (double *)&v458);
      if (v416.f64[1] >= v416.f64[0])
        v145 = (unint64_t)(v415 * *(double *)v493 + 1.0 + 0.5);
      else
        v145 = 0;
      std::vector<RESRT>::vector(&v458, v145);
      v456 = 0;
      v455 = 0;
      v457 = 0;
      std::vector<unsigned long>::reserve((void **)&v455, v145);
      if (v145)
      {
        v423 = 0;
        v419 = v145;
        v146 = v87 + 248 * v418;
        v429 = (double *)(v146 + 128);
        v431 = (double *)(v146 + 168);
        v427 = (_QWORD *)(v146 + 120);
        v428 = (double *)(v146 + 208);
        v438 = (uint64_t **)(v146 + 192);
        v440 = (_QWORD *)(v146 + 200);
        v436 = (uint64_t **)(v146 + 152);
        v437 = (_QWORD *)(v146 + 160);
        v425 = (double *)(v146 + 136);
        v426 = (double *)(v146 + 176);
        v421 = (double *)(v146 + 144);
        v422 = (double *)(v146 + 184);
        v147 = v415 / ((double)v145 + -1.0);
        v434 = (uint64_t **)(v146 + 232);
        v435 = (_QWORD *)(v146 + 240);
        v424 = (double *)(v146 + 216);
        v420 = (double *)(v146 + 224);
        v148 = v416.f64[0];
        do
        {
          v149 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v459 - (_BYTE *)v458) >> 4);
          v150 = v456;
          if (v456 >= v457)
          {
            v152 = v455;
            v153 = (v456 - v455) >> 3;
            v154 = v153 + 1;
            if ((unint64_t)(v153 + 1) >> 61)
              std::vector<char const*>::__throw_length_error[abi:ne180100]();
            v155 = v457 - v455;
            if ((v457 - v455) >> 2 > v154)
              v154 = v155 >> 2;
            if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
              v156 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v156 = v154;
            if (v156)
            {
              v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v457, v156);
              v150 = v456;
              v152 = v455;
            }
            else
            {
              v157 = 0;
            }
            v158 = (realityio::Inputs *)&v157[8 * v153];
            *(_QWORD *)v158 = v149;
            v151 = (realityio::Inputs *)((char *)v158 + 8);
            while (v150 != v152)
            {
              v159 = *((_QWORD *)v150 - 1);
              v150 = (realityio::Inputs *)((char *)v150 - 8);
              *((_QWORD *)v158 - 1) = v159;
              v158 = (realityio::Inputs *)((char *)v158 - 8);
            }
            v455 = v158;
            v456 = v151;
            v457 = (realityio::Inputs *)&v157[8 * v156];
            if (v152)
              operator delete(v152);
          }
          else
          {
            *(_QWORD *)v456 = v149;
            v151 = (realityio::Inputs *)((char *)v150 + 8);
          }
          v456 = v151;
          if (*(_QWORD *)v124)
          {
            v160 = 0;
            do
            {
              DWORD2(v454) = 0;
              *(_QWORD *)&v454 = 0;
              LODWORD(v452.f64[1]) = 0;
              v452.f64[0] = 0.0;
              v161 = &v450[16 * v160];
              v162 = *((_QWORD *)v161 + 1);
              if (*v161)
              {
                v163 = v433;
                v164 = v433;
                v165 = v433;
                if (!v433)
                {
                  v164 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
                  v163 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
                  v165 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x3F800000);
                }
                if ((*v440 & 4) != 0)
                  v166 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((*v440 & 0xFFFFFFFFFFFFFFF8) + 168))(v438);
                else
                  v166 = *v438;
                v167 = *v166;
                if (*v166)
                {
                  v168 = *v431;
                  if (*v431 >= v148)
                  {
                    v183 = v166[4];
                    v172 = *(_OWORD *)(v183 + 16);
                    *(_OWORD *)v493 = *(_OWORD *)v183;
                    *(_OWORD *)&v493[16] = v172;
                    v184 = *(_QWORD *)(v183 + 32);
                    *(_QWORD *)&v493[32] = v184;
                    if (v184)
                    {
                      v185 = (unint64_t *)(v184 - 16);
                      if (*(_QWORD *)&v493[24])
                        v185 = *(unint64_t **)&v493[24];
                      do
                        v186 = __ldxr(v185);
                      while (__stxr(v186 + 1, v185));
                    }
                  }
                  else if (*v426 <= v148)
                  {
                    v187 = v166[4] + 40 * v167;
                    v172 = *(_OWORD *)(v187 - 24);
                    *(_OWORD *)v493 = *(_OWORD *)(v187 - 40);
                    *(_OWORD *)&v493[16] = v172;
                    v188 = *(_QWORD *)(v187 - 8);
                    *(_QWORD *)&v493[32] = v188;
                    if (v188)
                    {
                      v189 = (unint64_t *)(v188 - 16);
                      if (*(_QWORD *)&v493[24])
                        v189 = *(unint64_t **)&v493[24];
                      do
                        v190 = __ldxr(v189);
                      while (__stxr(v190 + 1, v189));
                    }
                  }
                  else
                  {
                    v169 = *v422;
                    v170 = (int)((v148 - v168) / *v422);
                    if (v167 - 2 >= (unint64_t)v170)
                    {
                      v191 = v170;
                      v192 = v166[4];
                      v193 = (unint64_t *)(v192 + 40 * v170);
                      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray((uint64_t)v493, *v193);
                      if (*v193 == *(_QWORD *)(v192 + 40 * (v191 + 1)))
                      {
                        v194 = *(_QWORD *)v493;
                        if (*(_QWORD *)v493)
                        {
                          v195 = 0;
                          v196 = (v148 - (v168 + (double)(int)v191 * v169)) / v169;
                          v446 = (_QWORD *)(v192 + 40 * (int)v191 + 32);
                          v197 = (uint64_t *)(v192 + 40 * (v191 + 1) + 32);
                          do
                          {
                            v198 = (int *)(*v446 + v195);
                            v199 = *v197;
                            v200 = *v198;
                            WORD2(__p[0]) = *((_WORD *)v198 + 2);
                            LODWORD(__p[0]) = v200;
                            v201 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)__p, 1.0 - v196);
                            v202 = (int *)(v199 + v195);
                            v203 = v201[2];
                            v204 = *(unsigned int *)v201;
                            v205 = *v202;
                            WORD2(__p[0]) = *((_WORD *)v202 + 2);
                            LODWORD(__p[0]) = v205;
                            v206 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)__p, v196);
                            v207 = *(_DWORD *)v206;
                            WORD2(v470) = v206[2];
                            LODWORD(v470) = v207;
                            WORD2(__p[0]) = (v204 | (unint64_t)(v203 << 32)) >> 32;
                            LODWORD(__p[0]) = v204;
                            v208 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)__p, (unsigned __int16 *)&v470);
                            v209 = v208[2];
                            v210 = *(unsigned int *)v208;
                            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v493);
                            v211 = *(_QWORD *)&v493[32] + v195;
                            *(_DWORD *)v211 = v210;
                            *(_WORD *)(v211 + 4) = (v210 | (unint64_t)(v209 << 32)) >> 32;
                            v195 += 6;
                            --v194;
                          }
                          while (v194);
                        }
                      }
                    }
                    else
                    {
                      v171 = v166[4] + 40 * v167;
                      v172 = *(_OWORD *)(v171 - 24);
                      *(_OWORD *)v493 = *(_OWORD *)(v171 - 40);
                      *(_OWORD *)&v493[16] = v172;
                      v173 = *(_QWORD *)(v171 - 8);
                      *(_QWORD *)&v493[32] = v173;
                      if (v173)
                      {
                        v174 = (unint64_t *)(v173 - 16);
                        if (*(_QWORD *)&v493[24])
                          v174 = *(unint64_t **)&v493[24];
                        do
                          v175 = __ldxr(v174);
                        while (__stxr(v175 + 1, v174));
                      }
                    }
                  }
                }
                else
                {
                  HIDWORD(v172) = 0;
                  memset(v493, 0, 40);
                }
                v101 = v449;
                if (*(_QWORD *)v493 > v162)
                {
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v493);
                  v212 = (unsigned __int16 *)(*(_QWORD *)&v493[32] + 6 * v162);
                  v164 = *v212;
                  v163 = v212[1];
                  v165 = v212[2];
                }
                LODWORD(v172) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * v164);
                DWORD1(v172) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * v163);
                DWORD2(v172) = *(_DWORD *)(MEMORY[0x24BEE8B20] + 4 * v165);
                v454 = v172;
                if ((*v437 & 4) != 0)
                  v213 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((*v437 & 0xFFFFFFFFFFFFFFF8) + 168))(v436);
                else
                  v213 = *v436;
                v214 = *v213;
                if (*v213)
                {
                  v215 = *v429;
                  if (*v429 >= v148)
                  {
                    v223 = v213[4];
                    v224 = *(_OWORD *)(v223 + 16);
                    *(_OWORD *)__p = *(_OWORD *)v223;
                    *(_OWORD *)&v492.__r_.__value_.__l.__data_ = v224;
                    v225 = *(_QWORD *)(v223 + 32);
                    v492.__r_.__value_.__r.__words[2] = v225;
                    if (v225)
                    {
                      size = (unint64_t *)(v225 - 16);
                      if (v492.__r_.__value_.__l.__size_)
                        size = (unint64_t *)v492.__r_.__value_.__l.__size_;
                      do
                        v227 = __ldxr(size);
                      while (__stxr(v227 + 1, size));
                    }
                  }
                  else if (*v425 <= v148)
                  {
                    v228 = v213[4] + 40 * v214;
                    v229 = *(_OWORD *)(v228 - 24);
                    *(_OWORD *)__p = *(_OWORD *)(v228 - 40);
                    *(_OWORD *)&v492.__r_.__value_.__l.__data_ = v229;
                    v230 = *(_QWORD *)(v228 - 8);
                    v492.__r_.__value_.__r.__words[2] = v230;
                    if (v230)
                    {
                      v231 = (unint64_t *)(v230 - 16);
                      if (v492.__r_.__value_.__l.__size_)
                        v231 = (unint64_t *)v492.__r_.__value_.__l.__size_;
                      do
                        v232 = __ldxr(v231);
                      while (__stxr(v232 + 1, v231));
                    }
                  }
                  else
                  {
                    v216 = *v421;
                    v217 = (int)((v148 - v215) / *v421);
                    if (v214 - 2 >= (unint64_t)v217)
                    {
                      v233 = v217;
                      v234 = v213[4];
                      v235 = (unint64_t *)(v234 + 40 * v217);
                      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray((uint64_t)__p, *v235);
                      v236 = v233 + 1;
                      if (*v235 == *(_QWORD *)(v234 + 40 * (v233 + 1)))
                      {
                        v237 = __p[0];
                        if (__p[0])
                        {
                          v238 = 0;
                          v239 = (v148 - (v215 + (double)(int)v233 * v216)) / v216;
                          v240 = (_QWORD *)(v234 + 40 * (int)v233 + 32);
                          v241 = (_QWORD *)(v234 + 40 * v236 + 32);
                          v242 = 1.0 - v239;
                          v443 = v242;
                          *(float *)&v239 = v239;
                          v432 = *(float *)&v239;
                          do
                          {
                            v444 = *(float32x4_t *)(*v241 + 16 * (_QWORD)v238);
                            v447 = *(float32x4_t *)(*v240 + 16 * (_QWORD)v238);
                            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
                            *(float32x4_t *)(v492.__r_.__value_.__r.__words[2] + 16 * (_QWORD)v238) = vaddq_f32(vmulq_n_f32(v447, v443), vmulq_n_f32(v444, v432));
                            v238 = (char *)v238 + 1;
                          }
                          while (v237 != v238);
                        }
                      }
                    }
                    else
                    {
                      v218 = v213[4] + 40 * v214;
                      v219 = *(_OWORD *)(v218 - 24);
                      *(_OWORD *)__p = *(_OWORD *)(v218 - 40);
                      *(_OWORD *)&v492.__r_.__value_.__l.__data_ = v219;
                      v220 = *(_QWORD *)(v218 - 8);
                      v492.__r_.__value_.__r.__words[2] = v220;
                      if (v220)
                      {
                        v221 = (unint64_t *)(v220 - 16);
                        if (v492.__r_.__value_.__l.__size_)
                          v221 = (unint64_t *)v492.__r_.__value_.__l.__size_;
                        do
                          v222 = __ldxr(v221);
                        while (__stxr(v222 + 1, v221));
                      }
                    }
                  }
                }
                else
                {
                  memset(&v492, 0, sizeof(v492));
                  *(_OWORD *)__p = 0u;
                }
                v243 = xmmword_230201510;
                if (__p[0] > (void *)v162)
                {
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
                  v243 = *(_OWORD *)(v492.__r_.__value_.__r.__words[2] + 16 * v162);
                }
                v453 = v243;
                if ((*v435 & 4) != 0)
                  v244 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((*v435 & 0xFFFFFFFFFFFFFFF8) + 168))(v434);
                else
                  v244 = *v434;
                v245 = *v244;
                if (*v244)
                {
                  v246 = *v428;
                  if (*v428 >= v148)
                  {
                    v254 = (__int128 *)v244[4];
                    v250 = (float64x2_t)v254[1];
                    v470 = *v254;
                    v471 = v250;
                    v255 = *((_QWORD *)v254 + 4);
                    v472 = v255;
                    if (v255)
                    {
                      v256 = (unint64_t *)(v255 - 16);
                      if (*(_QWORD *)&v471.f64[1])
                        v256 = *(unint64_t **)&v471.f64[1];
                      do
                        v257 = __ldxr(v256);
                      while (__stxr(v257 + 1, v256));
                    }
                  }
                  else if (*v424 <= v148)
                  {
                    v258 = v244[4] + 40 * v245;
                    v250 = *(float64x2_t *)(v258 - 24);
                    v470 = *(_OWORD *)(v258 - 40);
                    v471 = v250;
                    v259 = *(_QWORD *)(v258 - 8);
                    v472 = v259;
                    if (v259)
                    {
                      v260 = (unint64_t *)(v259 - 16);
                      if (*(_QWORD *)&v471.f64[1])
                        v260 = *(unint64_t **)&v471.f64[1];
                      do
                        v261 = __ldxr(v260);
                      while (__stxr(v261 + 1, v260));
                    }
                  }
                  else
                  {
                    v247 = *v420;
                    v248 = (int)((v148 - v246) / *v420);
                    if (v245 - 2 >= (unint64_t)v248)
                    {
                      v262 = v248;
                      v263 = v244[4];
                      v264 = (unint64_t *)(v263 + 40 * v248);
                      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)&v470, *v264);
                      v265 = v262 + 1;
                      if (*v264 == *(_QWORD *)(v263 + 40 * (v262 + 1)))
                      {
                        v266 = v470;
                        if ((_QWORD)v470)
                        {
                          v267 = 0;
                          v268 = (v148 - (v246 + (double)(int)v262 * v247)) / v247;
                          v269 = (_QWORD *)(v263 + 40 * (int)v262 + 32);
                          v270 = (_QWORD *)(v263 + 40 * v265 + 32);
                          v448 = v268;
                          v445 = 1.0 - v268;
                          do
                          {
                            v271 = (float32x2_t *)(*v269 + v267);
                            v272 = (float32x2_t *)(*v270 + v267);
                            v273 = v271[1].f32[0];
                            v274 = *v271;
                            v275 = *v272;
                            v276 = v272[1].f32[0];
                            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v470);
                            v277 = v445 * v273;
                            v278 = v448 * v276;
                            v279 = (float32x2_t *)(v472 + v267);
                            v250 = vmulq_n_f64(vcvtq_f64_f32(v274), v445);
                            *v279 = vadd_f32(vcvt_f32_f64(v250), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v275), v448)));
                            v279[1].f32[0] = v277 + v278;
                            v267 += 12;
                            --v266;
                          }
                          while (v266);
                        }
                      }
                    }
                    else
                    {
                      v249 = v244[4] + 40 * v245;
                      v250 = *(float64x2_t *)(v249 - 24);
                      v470 = *(_OWORD *)(v249 - 40);
                      v471 = v250;
                      v251 = *(_QWORD *)(v249 - 8);
                      v472 = v251;
                      if (v251)
                      {
                        v252 = (unint64_t *)(v251 - 16);
                        if (*(_QWORD *)&v471.f64[1])
                          v252 = *(unint64_t **)&v471.f64[1];
                        do
                          v253 = __ldxr(v252);
                        while (__stxr(v253 + 1, v252));
                      }
                    }
                  }
                }
                else
                {
                  v472 = 0;
                  HIDWORD(v250.f64[1]) = 0;
                  v470 = 0u;
                  v471 = 0u;
                }
                if ((unint64_t)v470 <= v162)
                {
                  v250.f64[0] = 0.0;
                  v281 = 0;
                  v124 = v442;
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v470);
                  v124 = v442;
                  v280 = v472 + 12 * v162;
                  v250.f64[0] = *(float64_t *)v280;
                  v281 = *(_DWORD *)(v280 + 8);
                }
                LODWORD(v250.f64[1]) = v281;
                v452 = v250;
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v470);
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v493);
              }
              else
              {
                v176 = (__int128 *)(*v427 + (v162 << 7));
                v177 = *v176;
                v178 = v176[1];
                v179 = v176[2];
                v494 = v176[3];
                *(_OWORD *)&v493[32] = v179;
                *(_OWORD *)&v493[16] = v178;
                *(_OWORD *)v493 = v177;
                v180 = v176[4];
                v181 = v176[5];
                v182 = v176[6];
                v498 = v176[7];
                v497 = v182;
                v496 = v181;
                v495 = v180;
                MEMORY[0x2348B199C](__p, v493);
                REDecomposeMatrix();
                v101 = v449;
              }
              v282 = v459;
              if ((unint64_t)v459 >= v460)
              {
                v284 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v459 - (_BYTE *)v458) >> 4);
                v285 = v284 + 1;
                if (v284 + 1 > 0x555555555555555)
                  std::vector<char const*>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v460 - (_QWORD)v458) >> 4) > v285)
                  v285 = 0x5555555555555556 * ((uint64_t)(v460 - (_QWORD)v458) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v460 - (_QWORD)v458) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v286 = 0x555555555555555;
                else
                  v286 = v285;
                if (v286)
                  v287 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)&v460, v286);
                else
                  v287 = 0;
                v288 = &v287[48 * v284];
                *(_OWORD *)v288 = v454;
                *((_OWORD *)v288 + 1) = v453;
                *((float64x2_t *)v288 + 2) = v452;
                v289 = (char *)v459;
                v290 = (char *)v458;
                v291 = v288;
                if (v459 != v458)
                {
                  do
                  {
                    v292 = *((_OWORD *)v289 - 3);
                    v293 = *((_OWORD *)v289 - 1);
                    *((_OWORD *)v291 - 2) = *((_OWORD *)v289 - 2);
                    *((_OWORD *)v291 - 1) = v293;
                    *((_OWORD *)v291 - 3) = v292;
                    v291 -= 48;
                    v289 -= 48;
                  }
                  while (v289 != v290);
                  v289 = v290;
                }
                v283 = v288 + 48;
                v458 = v291;
                v459 = v288 + 48;
                v460 = (unint64_t)&v287[48 * v286];
                if (v289)
                  operator delete(v289);
              }
              else
              {
                *(_OWORD *)v459 = v454;
                v282[1] = v453;
                v283 = v282 + 3;
                v282[2] = v452;
              }
              v459 = v283;
              ++v160;
            }
            while (*(_QWORD *)v124 > v160);
          }
          v148 = v147 + v148;
          ++v423;
        }
        while (v423 != v419);
      }
      v294 = v455;
      if (v473.__r_.__value_.__l.__size_ != v473.__r_.__value_.__r.__words[0] && v456 != v455)
      {
        memset(v493, 0, 24);
        std::vector<RESRT const*>::reserve((void **)v493, (v456 - v455) >> 3);
        v295 = v455;
        v296 = v456;
        if (v455 != v456)
        {
          v297 = *(_QWORD **)&v493[8];
          do
          {
            v298 = (char *)v458 + 48 * *(_QWORD *)v295;
            if ((unint64_t)v297 >= *(_QWORD *)&v493[16])
            {
              v299 = ((uint64_t)v297 - *(_QWORD *)v493) >> 3;
              if ((unint64_t)(v299 + 1) >> 61)
                std::vector<char const*>::__throw_length_error[abi:ne180100]();
              v300 = (uint64_t)(*(_QWORD *)&v493[16] - *(_QWORD *)v493) >> 2;
              if (v300 <= v299 + 1)
                v300 = v299 + 1;
              if (*(_QWORD *)&v493[16] - *(_QWORD *)v493 >= 0x7FFFFFFFFFFFFFF8uLL)
                v301 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v301 = v300;
              if (v301)
                v302 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v493[16], v301);
              else
                v302 = 0;
              v303 = &v302[8 * v299];
              *(_QWORD *)v303 = v298;
              v297 = v303 + 8;
              v304 = *(char **)&v493[8];
              v305 = *(char **)v493;
              if (*(_QWORD *)&v493[8] != *(_QWORD *)v493)
              {
                do
                {
                  v306 = *((_QWORD *)v304 - 1);
                  v304 -= 8;
                  *((_QWORD *)v303 - 1) = v306;
                  v303 -= 8;
                }
                while (v304 != v305);
                v304 = *(char **)v493;
              }
              *(_QWORD *)v493 = v303;
              *(_QWORD *)&v493[8] = v297;
              *(_QWORD *)&v493[16] = &v302[8 * v301];
              if (v304)
                operator delete(v304);
            }
            else
            {
              *v297++ = v298;
            }
            *(_QWORD *)&v493[8] = v297;
            v295 = (realityio::Inputs *)((char *)v295 + 8);
          }
          while (v295 != v296);
        }
        SampledSkeletalPoseAnimation = RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
        RETimelineDefinitionSetFillMode();
        RETimelineDefinitionSetTargetPath();
        RETimelineDefinitionSetAdditive();
        RETimelineDefinitionSetFrameInterval();
        RETimelineDefinitionSetStartTime();
        RETimelineDefinitionSetEndTime();
        RETimelineDefinitionSetSkeletalPoses();
        if (v411 >= v406)
        {
          v308 = v411 - v101;
          v309 = v308 + 1;
          if ((unint64_t)(v308 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if (((char *)v406 - (char *)v101) >> 2 > v309)
            v309 = ((char *)v406 - (char *)v101) >> 2;
          if ((unint64_t)((char *)v406 - (char *)v101) >= 0x7FFFFFFFFFFFFFF8)
            v310 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v310 = v309;
          if (v310)
          {
            if (v310 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v311 = (char *)operator new(8 * v310);
          }
          else
          {
            v311 = 0;
          }
          v312 = (uint64_t *)&v311[8 * v308];
          *v312 = SampledSkeletalPoseAnimation;
          v313 = v312 + 1;
          if (v411 != v101)
          {
            v314 = v411;
            do
            {
              v315 = *--v314;
              *--v312 = v315;
            }
            while (v314 != v101);
          }
          v406 = (uint64_t *)&v311[8 * v310];
          if (v101)
            operator delete(v101);
          v101 = v312;
          v411 = v313;
        }
        else
        {
          *v411++ = SampledSkeletalPoseAnimation;
        }
        v316 = v464[1];
        if (v464[1] >= (std::string *)v465)
        {
          v318 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v464, (__int128 *)&v463);
        }
        else
        {
          if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v464[1], v463.__r_.__value_.__l.__data_, v463.__r_.__value_.__l.__size_);
          }
          else
          {
            v317 = *(_OWORD *)&v463.__r_.__value_.__l.__data_;
            v464[1]->__r_.__value_.__r.__words[2] = v463.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v316->__r_.__value_.__l.__data_ = v317;
          }
          v318 = v316 + 1;
        }
        v464[1] = v318;
        if (*(_QWORD *)v493)
        {
          *(_QWORD *)&v493[8] = *(_QWORD *)v493;
          operator delete(*(void **)v493);
        }
        v294 = v455;
      }
      if (v294)
      {
        v456 = v294;
        operator delete(v294);
      }
      if (v458)
      {
        v459 = v458;
        operator delete(v458);
      }
      if (SHIBYTE(v462) < 0)
        operator delete(v461[0]);
      if (SHIBYTE(v463.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v463.__r_.__value_.__l.__data_);
      v474.__r_.__value_.__r.__words[0] = v409;
      *(std::string::size_type *)((char *)v474.__r_.__value_.__r.__words + *(_QWORD *)(v409 - 24)) = v408;
      v474.__r_.__value_.__r.__words[2] = v410;
      *(_QWORD *)&v475 = v407;
      if (SBYTE7(v481) < 0)
        operator delete((void *)v480);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2348B4DA4](&v483);
      if (v450)
        operator delete(v450);
      if (v473.__r_.__value_.__r.__words[0])
      {
        v473.__r_.__value_.__l.__size_ = v473.__r_.__value_.__r.__words[0];
        operator delete(v473.__r_.__value_.__l.__data_);
      }
      v103 = v418 + 1;
      v87 = *(_QWORD *)&v467[0];
      if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((_QWORD *)&v467[0] + 1) - *(_QWORD *)&v467[0]) >> 3) <= v418 + 1)
      {
        v102 = v411;
        goto LABEL_351;
      }
    }
    while (1)
    {
      v112 = *v107 & 0xFFFFFFFFFFFFFFF8;
      if (v112)
      {
        if (*(char *)(v112 + 39) < 0)
        {
          v113 = *(const char **)(v112 + 16);
          if (*(_QWORD *)(v112 + 24) > 1uLL)
          {
LABEL_102:
            if (*v113 == 47)
              ++v113;
          }
        }
        else
        {
          v113 = (const char *)(v112 + 16);
          if (*(unsigned __int8 *)(v112 + 39) >= 2u)
            goto LABEL_102;
        }
      }
      else
      {
        v113 = "";
      }
      v114 = v473.__r_.__value_.__l.__size_;
      if (v473.__r_.__value_.__l.__size_ >= v473.__r_.__value_.__r.__words[2])
      {
        v116 = (uint64_t)(v473.__r_.__value_.__l.__size_ - v473.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v116 + 1) >> 61)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v117 = (uint64_t)(v473.__r_.__value_.__r.__words[2] - v473.__r_.__value_.__r.__words[0]) >> 2;
        if (v117 <= v116 + 1)
          v117 = v116 + 1;
        if (v473.__r_.__value_.__r.__words[2] - v473.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
          v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v473.__r_.__value_.__r.__words[2], v118);
        else
          v119 = 0;
        v120 = (const char **)&v119[8 * v116];
        *v120 = v113;
        v115 = (std::string::size_type)(v120 + 1);
        v121 = (char *)v473.__r_.__value_.__l.__size_;
        v122 = v473.__r_.__value_.__r.__words[0];
        if (v473.__r_.__value_.__l.__size_ != v473.__r_.__value_.__r.__words[0])
        {
          do
          {
            v123 = (const char *)*((_QWORD *)v121 - 1);
            v121 -= 8;
            *--v120 = v123;
          }
          while (v121 != (char *)v122);
          v121 = (char *)v473.__r_.__value_.__r.__words[0];
        }
        v473.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
        v473.__r_.__value_.__l.__size_ = v115;
        v473.__r_.__value_.__r.__words[2] = (std::string::size_type)&v119[8 * v118];
        if (v121)
          operator delete(v121);
      }
      else
      {
        *(_QWORD *)v473.__r_.__value_.__l.__size_ = v113;
        v115 = v114 + 8;
      }
      v473.__r_.__value_.__l.__size_ = v115;
      if (++v107 == (_QWORD *)v111)
      {
        v124 = v442;
        v110 = *(_QWORD *)v442;
        goto LABEL_123;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v98 = *(_QWORD *)&v467[0];
  if (*((_QWORD *)&v467[0] + 1) != *(_QWORD *)&v467[0])
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v458, *(_DWORD **)&v467[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v458 + 4, (_DWORD *)(v98 + 4));
  }
  v99 = *(_QWORD *)(a2 + 16);
  if (v99)
    v100 = *(_QWORD *)(v99 + 192);
  else
    v100 = 0;
  v470 = 0u;
  v471 = 0u;
  LODWORD(v472) = 1065353216;
  v338 = operator new(0x260uLL);
  v338[1] = 0;
  v338[2] = 0;
  *v338 = &off_24FDE46C0;
  v339 = v338 + 3;
  realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetBuilder((realityio::SkeletalAnimationAssetBuilder *)(v338 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v458);
  v463.__r_.__value_.__r.__words[0] = (std::string::size_type)(v338 + 3);
  v463.__r_.__value_.__l.__size_ = (std::string::size_type)v338;
  v466 = 0;
  *(_OWORD *)v464 = 0u;
  v465 = 0u;
  v340 = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](v340);
  v341 = *(_QWORD *)(a2 + 16);
  if (v341)
  {
    v342 = *(_QWORD *)(v341 + 200);
    v343 = *(_QWORD *)(v341 + 208);
  }
  else
  {
    v342 = 0;
    v343 = 0;
  }
  v344 = operator new();
  v345 = (realityio::Inputs *)v344;
  v474.__r_.__value_.__r.__words[0] = (std::string::size_type)(v338 + 3);
  v474.__r_.__value_.__l.__size_ = (std::string::size_type)v338;
  v346 = v338 + 2;
  do
    v347 = __ldxr(v346);
  while (__stxr(v347 + 1, v346));
  realityio::Inputs::Inputs(v344, &v474, &v458, v100, (uint64_t)&v470, v342, v343);
  v455 = v345;
  if (v474.__r_.__value_.__l.__size_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v474.__r_.__value_.__l.__size_);
  (*(void (**)(void *, realityio::Inputs *))(*(_QWORD *)v339 + 64))(v339, v345);
  realityio::entityPath(a3, (uint64_t)__p);
  v348 = (char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
  std::string::basic_string[abi:ne180100]<0>(v493, v348);
  v349 = vcvt_f32_f64(v416);
  if ((v493[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v474, *(const std::string::value_type **)v493, *(std::string::size_type *)&v493[8]);
    *(float32x2_t *)&v475 = v349;
    DWORD2(v475) = -8388609;
    v476 = 0;
    v477 = 0uLL;
    if ((v493[23] & 0x80000000) != 0)
      operator delete(*(void **)v493);
  }
  else
  {
    v474 = *(std::string *)v493;
    *(float32x2_t *)&v475 = v349;
    DWORD2(v475) = -8388609;
    v476 = 0;
    v477 = 0uLL;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v350 = (realityio::SkeletalAnimationAssetBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  v352 = (std::mutex *)v338[5];
  v351 = (std::__shared_weak_count *)v338[6];
  v473.__r_.__value_.__r.__words[0] = (std::string::size_type)v352;
  v473.__r_.__value_.__l.__size_ = (std::string::size_type)v351;
  if (v351)
  {
    p_shared_owners = (unint64_t *)&v351->__shared_owners_;
    do
      v354 = __ldxr(p_shared_owners);
    while (__stxr(v354 + 1, p_shared_owners));
  }
  v355 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputName(v350);
  realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(v352, v355, (uint64_t)v493);
  v357 = v493[0];
  if (v493[0])
  {
    v358 = *(std::vector<std::string>::size_type **)&v493[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v493[8];
    v356 = (realityio::SkeletalAnimationAssetBuilder *)&v492;
    if ((v493[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v492, *(const std::string::value_type **)&v493[24], *(std::string::size_type *)&v493[32]);
      v358 = (std::vector<std::string>::size_type *)__p[0];
      v339 = (void *)v492.__r_.__value_.__r.__words[0];
      LOBYTE(v345) = *((_BYTE *)&v492.__r_.__value_.__s + 23);
      if (!v493[0] && (v493[47] & 0x80000000) != 0)
        operator delete(*(void **)&v493[24]);
    }
    else
    {
      v492 = *(std::string *)&v493[24];
      v358 = (std::vector<std::string>::size_type *)__p[0];
      v339 = *(void **)&v493[24];
      LOBYTE(v345) = v493[47];
    }
  }
  if (!v351)
    goto LABEL_407;
  v359 = (unint64_t *)&v351->__shared_owners_;
  do
    v360 = __ldaxr(v359);
  while (__stlxr(v360 - 1, v359));
  if (!v360)
  {
    ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
    std::__shared_weak_count::__release_weak(v351);
    if (v357)
      goto LABEL_408;
  }
  else
  {
LABEL_407:
    if (v357)
    {
LABEL_408:
      if (v358)
      {
        realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef(v358, 0, 0);
        RETimelineDefinitionGetStartTime();
        v362 = v361;
        RETimelineDefinitionGetEndTime();
        v364 = v363;
        v365 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v358);
        v366 = RETimelineDefinitionCreateTimelineAsset();
        if (*(char *)(v365 + 23) >= 0)
          v367 = (char *)v365;
        else
          v367 = *(char **)v365;
        v368 = realityio::TimelineGroupFactory::addTimeline((char *)&v474, v366, (__int128 *)v365, v367, v362, v364);
        if ((v368 & 1) == 0)
        {
          v369 = *(id *)(realityio::logObjects((realityio *)v368) + 24);
          if (os_log_type_enabled(v369, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(v365 + 23) < 0)
              v365 = *(_QWORD *)v365;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
            v398 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
            if (*(char *)(v398 + 23) >= 0)
              v399 = v398;
            else
              v399 = *(_QWORD *)v398;
            realityio::entityPath(a3, (uint64_t)&v473);
            v400 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v473);
            *(_DWORD *)v493 = 136315650;
            *(_QWORD *)&v493[4] = v365;
            *(_WORD *)&v493[12] = 2080;
            *(_QWORD *)&v493[14] = v399;
            *(_WORD *)&v493[22] = 2080;
            *(_QWORD *)&v493[24] = v400;
            _os_log_error_impl(&dword_22FF26000, v369, OS_LOG_TYPE_ERROR, "ERROR ADDING TIME LINE %s to %s entity %s\n", v493, 0x20u);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v473);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
          }

        }
        *(_QWORD *)v493 = v366;
        if (v366)
          RERetain();
        pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>((uint64_t)v464, v493);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v493);
        RERelease();
        v356 = (realityio::SkeletalAnimationAssetBuilder *)RERelease();
      }
      goto LABEL_421;
    }
  }
  if ((v345 & 0x80) != 0)
    operator delete(v339);
LABEL_421:
  v371 = *(std::mutex **)(v463.__r_.__value_.__r.__words[0] + 16);
  v370 = *(std::__shared_weak_count **)(v463.__r_.__value_.__r.__words[0] + 24);
  v461[0] = v371;
  v461[1] = v370;
  if (v370)
  {
    v372 = (unint64_t *)&v370->__shared_owners_;
    do
      v373 = __ldxr(v372);
    while (__stxr(v373 + 1, v372));
  }
  v374 = (const void **)realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v356);
  v375 = v371 + 1;
  std::mutex::lock(v371 + 1);
  v376 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v371->__m_.__opaque[32], v374);
  v377 = v376;
  v378 = &v371->__m_.__opaque[40];
  if (&v371->__m_.__opaque[40] == (char *)v376)
  {
    std::operator+<char>();
    v380 = std::string::append(&v473, "\" does not exist in the builder outputs");
    v381 = *(_OWORD *)&v380->__r_.__value_.__l.__data_;
    v492.__r_.__value_.__r.__words[0] = v380->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v381;
    v380->__r_.__value_.__l.__size_ = 0;
    v380->__r_.__value_.__r.__words[2] = 0;
    v380->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v493, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)v451 = *(_OWORD *)v493;
    v374 = *(const void ***)&v493[16];
    v382 = *(_QWORD *)&v493[24];
    LODWORD(v6) = v493[39];
    memset(&v493[16], 0, 24);
    if (v492.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v473.__r_.__value_.__l.__data_);
    std::mutex::unlock(v375);
    *(_OWORD *)v493 = *(_OWORD *)v451;
    if ((v6 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v493[16], (const std::string::value_type *)v374, v382);
      v379 = *(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)v493;
      v383 = *(const void ***)&v493[16];
      LOBYTE(v6) = v493[39];
      operator delete(v374);
      v374 = v383;
      if (!v370)
        goto LABEL_439;
      goto LABEL_435;
    }
    v379 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)v451[0];
    if (v370)
      goto LABEL_435;
  }
  else
  {
    v379 = *(realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)(*(_QWORD *)(v376 + 56) + 8);
    std::mutex::unlock(v375);
    if (!v370)
      goto LABEL_439;
LABEL_435:
    v384 = (unint64_t *)&v370->__shared_owners_;
    do
      v385 = __ldaxr(v384);
    while (__stlxr(v385 - 1, v384));
    if (!v385)
    {
      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
      std::__shared_weak_count::__release_weak(v370);
    }
  }
LABEL_439:
  if (v378 == (char *)v377)
  {
    if ((v6 & 0x80) != 0)
      operator delete(v374);
  }
  else if (v379)
  {
    realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::createTimelineDefinitionRef(v379);
    RETimelineDefinitionGetStartTime();
    v387 = v386;
    RETimelineDefinitionGetEndTime();
    v389 = v388;
    v390 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v379);
    v391 = RETimelineDefinitionCreateTimelineAsset();
    if (*(char *)(v390 + 23) >= 0)
      v392 = (char *)v390;
    else
      v392 = *(char **)v390;
    v393 = realityio::TimelineGroupFactory::addTimeline((char *)&v474, v391, (__int128 *)v390, v392, v387, v389);
    if ((v393 & 1) == 0)
    {
      v394 = *(id *)(realityio::logObjects((realityio *)v393) + 24);
      if (os_log_type_enabled(v394, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v390 + 23) < 0)
          v390 = *(_QWORD *)v390;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3);
        v401 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        if (*(char *)(v401 + 23) >= 0)
          v402 = v401;
        else
          v402 = *(_QWORD *)v401;
        realityio::entityPath(a3, (uint64_t)&v473);
        v403 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v473);
        *(_DWORD *)v493 = 136315650;
        *(_QWORD *)&v493[4] = v390;
        *(_WORD *)&v493[12] = 2080;
        *(_QWORD *)&v493[14] = v402;
        *(_WORD *)&v493[22] = 2080;
        *(_QWORD *)&v493[24] = v403;
        _os_log_error_impl(&dword_22FF26000, v394, OS_LOG_TYPE_ERROR, "ERROR ADDING TIME LINE %s to %s entity %s\n", v493, 0x20u);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v473);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      }

    }
    *(_QWORD *)v493 = v391;
    if (v391)
      RERetain();
    pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>((uint64_t)v464, v493);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v493);
    RERelease();
    RERelease();
  }
  a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a6, (uint64_t)v464);
  *(_QWORD *)v493 = &v476;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)v493);
  if (SHIBYTE(v474.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v474.__r_.__value_.__l.__data_);
  if (v455)
  {
    realityio::Inputs::~Inputs(v455);
    MEMORY[0x2348B4E1C]();
  }
  pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(v464);
  v395 = (std::__shared_weak_count *)v463.__r_.__value_.__l.__size_;
  if (v463.__r_.__value_.__l.__size_)
  {
    v396 = (unint64_t *)(v463.__r_.__value_.__l.__size_ + 8);
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)&v470);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v458);
LABEL_462:
  std::vector<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::~vector[abi:ne180100]((void **)v467);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v468);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v490);
}

void sub_22FF5BC34(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x490]);
  std::vector<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::~vector[abi:ne180100]((void **)&STACK[0x2D0]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&STACK[0x2F0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x480]);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7TfTokenENS1_7VtValueENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<TimeSampledDataT>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 29));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 19));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)(a1 + 11));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1 + 6);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1);
}

void realityio::entityPath(realityio *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
  MEMORY[0x2348B26F8](&v9, __p);
  v6 = v9;
  v5 = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v5 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/");
    MEMORY[0x2348B26F8](a2, __p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this);
  }
}

void sub_22FF5C7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::TimelineGroupFactory::addTimeline(char *a1, std::string::size_type a2, __int128 *a3, char *__s, float a5, float a6)
{
  char *v10;
  char *v11;
  int v12;
  char *v13;
  int64_t v14;
  uint64_t result;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float v30;
  void *__p[2];
  char v34;
  std::string v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v10 = (char *)*((unsigned __int8 *)a3 + 23);
  if ((char)v10 >= 0)
    v11 = (char *)a3;
  else
    v11 = *(char **)a3;
  v12 = a1[23];
  if (v12 >= 0)
    v13 = a1;
  else
    v13 = *(char **)a1;
  if (v12 >= 0)
    v14 = a1[23];
  else
    v14 = *((_QWORD *)a1 + 1);
  if (v14)
  {
    if ((char)v10 < 0)
      v10 = (char *)*((_QWORD *)a3 + 1);
    if ((uint64_t)v10 >= v14)
    {
      v16 = &v10[(_QWORD)v11];
      v17 = *v13;
      v18 = v11;
      do
      {
        v19 = &v10[-v14];
        if (v19 == (char *)-1)
          break;
        result = (uint64_t)memchr(v18, v17, (size_t)(v19 + 1));
        if (!result)
          return result;
        v20 = result;
        result = memcmp((const void *)result, v13, v14);
        if (!(_DWORD)result)
        {
          if ((char *)v20 == v16 || (char *)v20 != v11)
            return result;
          goto LABEL_23;
        }
        v18 = (char *)(v20 + 1);
        v10 = &v16[-v20 - 1];
      }
      while ((uint64_t)v10 >= v14);
    }
    return 0;
  }
  else
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    realityio::TimelineGroupFactory::TimelineData::TimelineData(&v35, (__int128 *)__p, a3, a2, a5, a6);
    v21 = *((_QWORD *)a1 + 6);
    if (v21 >= *((_QWORD *)a1 + 7))
    {
      v26 = std::vector<realityio::TimelineGroupFactory::TimelineData>::__push_back_slow_path<realityio::TimelineGroupFactory::TimelineData>((uint64_t *)a1 + 5, (__int128 *)&v35);
    }
    else
    {
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(_OWORD *)v21 = 0u;
      *(_QWORD *)(v21 + 48) = 0xFF7FFFFF7F7FFFFFLL;
      *(_QWORD *)(v21 + 56) = 0;
      v22 = v35.__r_.__value_.__r.__words[2];
      *(_OWORD *)v21 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
      *(_QWORD *)(v21 + 16) = v22;
      memset(&v35, 0, sizeof(v35));
      v23 = *(_QWORD *)(v21 + 40);
      v24 = *(_OWORD *)(v21 + 24);
      v25 = v37;
      *(_OWORD *)(v21 + 24) = v36;
      *(_QWORD *)(v21 + 40) = v25;
      v36 = v24;
      v37 = v23;
      *(_QWORD *)(v21 + 48) = v38;
      v38 = 0xFF7FFFFF7F7FFFFFLL;
      *(_QWORD *)(v21 + 56) = v39;
      v39 = 0;
      v26 = v21 + 64;
      *((_QWORD *)a1 + 6) = v21 + 64;
    }
    *((_QWORD *)a1 + 6) = v26;
    realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)&v35);
    if (v34 < 0)
      operator delete(__p[0]);
    v27.i32[0] = *((_QWORD *)a1 + 3);
    v27.f32[1] = a6;
    v28.i32[1] = HIDWORD(*((_QWORD *)a1 + 3));
    v28.f32[0] = a5;
    v29 = (int8x8_t)vcgt_f32(v27, v28);
    v27.f32[0] = a5;
    *((int8x8_t *)a1 + 3) = vbsl_s8(v29, (int8x8_t)v27, *(int8x8_t *)(a1 + 24));
    v30 = *((float *)a1 + 8);
    if (v30 < a6)
      v30 = a6;
    *((float *)a1 + 8) = v30;
    return 1;
  }
}

void sub_22FF5CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)&a20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void realityio::TimelineGroupFactory::~TimelineGroupFactory(void **this)
{
  void **v2;

  v2 = this + 5;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t realityio::TimelineGroupFactory::createTimelineAsset(float *a1, uint64_t a2, const char *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *i;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  float *v11;
  uint64_t v12;
  _BYTE *v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t TimelineAsset;
  size_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  std::string v30;
  uint64_t v31;
  void *__p;
  char v33;
  uint64_t v34;
  std::string __str;
  char v36[9];

  RETimelineDefinitionCreateTimelineGroup();
  v4 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  for (i = (unsigned __int8 *)*((_QWORD *)a1 + 6); v4 != i; v4 += 64)
  {
    memset(&v30, 0, sizeof(v30));
    v6 = (const void **)(v4 + 24);
    v7 = v4[47];
    if ((v7 & 0x80u) == 0)
      v8 = v4[47];
    else
      v8 = *((_QWORD *)v4 + 4);
    v9 = *((char *)a1 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a1 + 23);
    else
      v10 = *((_QWORD *)a1 + 1);
    if (v8 != v10)
      goto LABEL_19;
    if (v9 >= 0)
      v11 = a1;
    else
      v11 = *(float **)a1;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v6, v11, *((_QWORD *)v4 + 4)))
        goto LABEL_19;
    }
    else if (v4[47])
    {
      v12 = 0;
      while (v4[v12 + 24] == *((unsigned __int8 *)v11 + v12))
      {
        if (v7 == ++v12)
          goto LABEL_32;
      }
LABEL_19:
      v13 = v4 + 24;
      if ((v7 & 0x80) != 0)
        v13 = *v6;
      if (v13[v10] == 47)
        v14 = v10 + 1;
      else
        v14 = v10;
      std::string::basic_string(&__str, (const std::string *)v4 + 1, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v36);
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size = __str.__r_.__value_.__l.__size_;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      for (; size; --size)
      {
        if (p_str->__r_.__value_.__s.__data_[0] == 47)
          p_str->__r_.__value_.__s.__data_[0] = 46;
        p_str = (std::string *)((char *)p_str + 1);
      }
      std::string::operator=(&v30, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_32:
    RETimelineDefinitionCreateFromTimeline();
    v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = v30.__r_.__value_.__l.__size_;
    if (!v17
      && ((v18 = *((float *)v4 + 12), v19 = a1[6], v18 == v19)
       || vabds_f32(v18, v19) < (float)((float)((float)(fabsf(v18) + fabsf(v19)) + 1.0) * 0.00001))
      && ((v20 = *((float *)v4 + 13), v21 = a1[7], v20 == v21)
       || vabds_f32(v20, v21) < (float)((float)((float)(fabsf(v20) + fabsf(v21)) + 1.0) * 0.00001)))
    {
      RETimelineDefinitionAddChildTimeline();
    }
    else
    {
      RETimelineDefinitionCreateTimelineClip();
      RETimelineDefinitionSetClipDelay();
      RETimelineDefinitionSetFillMode();
      RETimelineDefinitionSetTargetPath();
      RETimelineDefinitionAddChildTimeline();
      RERelease();
    }
    RERelease();
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  v22 = a1[7];
  v23 = a1[8];
  if (v22 == v23 || vabds_f32(v22, v23) < (float)((float)((float)(fabsf(v22) + fabsf(v23)) + 1.0) * 0.00001))
  {
    TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v30);
    v26 = strlen(a3);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30.__r_.__value_.__r.__words[2], (uint64_t)a3, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"_Fill", 5);
    std::stringbuf::str();
    RETimelineDefinitionCreateTimelineClip();
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(double *)&__str.__r_.__value_.__l.__data_ = (float)(a1[7] - a1[6]);
    RETimelineDefinitionSetClipDuration();
    RETimelineDefinitionSetFillMode();
    TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    RERelease();
    v30.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v28 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words
                              + *(_QWORD *)(v30.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
    v30.__r_.__value_.__r.__words[2] = v28;
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2348B4DA4](&v34);
  }
  RERelease();
  return TimelineAsset;
}

void sub_22FF5CEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 113) < 0)
    operator delete(*(void **)(v16 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo((_QWORD *)(v3 - 248));
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::vector<realityio::TimelineGroupFactory::TimelineData>::__push_back_slow_path<realityio::TimelineGroupFactory::TimelineData>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[9];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(v7, v9);
  v11 = &v10[64 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[64 * v12];
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_QWORD *)v11 + 6) = 0xFF7FFFFF7F7FFFFFLL;
  *((_QWORD *)v11 + 7) = 0;
  v13 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v13;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *((_QWORD *)v11 + 5);
  v15 = *(_OWORD *)(v11 + 24);
  v16 = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v11 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)v11 + 5) = v16;
  *(__int128 *)((char *)a2 + 24) = v15;
  *((_QWORD *)a2 + 5) = v14;
  LODWORD(v15) = *((_DWORD *)v11 + 12);
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v15;
  LODWORD(v15) = *((_DWORD *)v11 + 13);
  *((_DWORD *)v11 + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v15;
  v17 = *((_QWORD *)v11 + 7);
  *((_QWORD *)v11 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v17;
  v20[2] = v11 + 64;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_22FF5D0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::TimelineGroupFactory::TimelineData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>,std::reverse_iterator<realityio::TimelineGroupFactory::TimelineData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::string *v12;

  v10 = 0;
  v11 = a7 - 64;
  while (a3 + v10 != a5)
  {
    v12 = (std::string *)(v11 + v10);
    v10 -= 64;
    realityio::TimelineGroupFactory::TimelineData::TimelineData(v12, (__int128 *)(v10 + a3));
  }
  return a6;
}

std::string *realityio::TimelineGroupFactory::TimelineData::TimelineData(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = v6;
  if (v6)
    RERetain();
  return this;
}

void sub_22FF5D2C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::TimelineGroupFactory::TimelineData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *realityio::TimelineGroupFactory::TimelineData::TimelineData(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type a4, float a5, float a6)
{
  __int128 v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v12;
  }
  *(float *)&this[2].__r_.__value_.__l.__data_ = a5;
  *((float *)this[2].__r_.__value_.__r.__words + 1) = a6;
  this[2].__r_.__value_.__l.__size_ = a4;
  if (a4)
    RERetain();
  return this;
}

void sub_22FF5D3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void realityio::TimelineGroupFactory::TimelineData::~TimelineData(realityio::TimelineGroupFactory::TimelineData *this)
{
  if (*((_QWORD *)this + 7))
  {
    RERelease();
    *((_QWORD *)this + 7) = 0;
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        realityio::TimelineGroupFactory::TimelineData::~TimelineData((realityio::TimelineGroupFactory::TimelineData *)(v4 - 64));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::VtArray(uint64_t a1, unint64_t a2)
{
  int v5;
  __int16 v6;
  int *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v7 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_22FF5D540(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    *a1 = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *New;
  uint64_t v11;
  char *v12;
  int v13;
  int *v14;
  uint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  int v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int *v29;
  uint64_t v30;
  char *v31;
  int v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)New + v11;
                v13 = *(_DWORD *)(v9 + v11);
                *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                *(_DWORD *)v12 = v13;
                v11 += 6;
              }
              while (6 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 6 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
            *(_DWORD *)v16 = v17;
            v15 += 6;
          }
          while (6 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 6 * v24;
      v27 = v25;
      do
      {
        v28 = *(_DWORD *)v7;
        *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
        *(_DWORD *)v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 6);
        v7 = (_QWORD *)((char *)v7 + 6);
        v26 -= 6;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 6 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
        *(_DWORD *)v31 = v32;
        v30 += 6;
      }
      while (6 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x2AAAAAAAAAAAAAABLL)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
    *(_DWORD *)v22 = v23;
    v20 += 6;
  }
  while (6 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  unsigned int v10;

  v4 = MEMORY[0x24BEE8B20];
  v5 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) + *(float *)(MEMORY[0x24BEE8B20] + 4 * *a2);
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  v7 = *(float *)(v4 + 4 * a1[1]) + *(float *)(v4 + 4 * a2[1]);
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23)))
  {
    v8 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  v9 = *(float *)(v4 + 4 * a1[2]) + *(float *)(v4 + 4 * a2[2]);
  if (v9 == 0.0)
  {
    v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23)))
  {
    v10 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3;
  uint64_t v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  unsigned int v10;

  v3 = a2;
  v4 = MEMORY[0x24BEE8B20];
  v5 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23)))
  {
    v8 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  v9 = *(float *)(v4 + 4 * a1[2]) * v3;
  if (v9 == 0.0)
  {
    v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23)))
  {
    v10 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::VtArray(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v6 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_22FF5DA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *New;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&New[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v16 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v7 = &v5;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_22FF5DCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *New;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
            v7 = New;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)New + v11;
                v13 = *(_QWORD *)(v9 + v11);
                *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                *(_QWORD *)v12 = v13;
                v11 += 12;
              }
              while (12 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 12 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
            *(_QWORD *)v16 = v17;
            v15 += 12;
          }
          while (12 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 12 * v24;
      v27 = v25;
      do
      {
        v28 = *v7;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v7 = (_QWORD *)((char *)v7 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 12 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v30 += 12;
      }
      while (12 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x1555555555555556)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(a1);
    return;
  }
  v19 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v22 = v23;
    v20 += 12;
  }
  while (12 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(_QWORD *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

realityio::tokens::EcsTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::EcsTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::EcsTokens_StaticTokenType::~EcsTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::EcsTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>::New()
{
  realityio::tokens::EcsTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::EcsTokens_StaticTokenType *)operator new();
  realityio::tokens::EcsTokens_StaticTokenType::EcsTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF5E048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40D31A2178);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::SdfPath>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  *v2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *a1 = v2;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfPath>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<TimeSampledDataT>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"16TimeSampledDataT" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<TimeSampledDataT>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<TimeSampledDataT>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<TimeSampledDataT>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 24));
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

_QWORD *std::allocator_traits<std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo>>::construct[abi:ne180100]<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,void>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v8;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(a1 + 152), (_QWORD *)(a2 + 152));
  v9 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(a1 + 192), (_QWORD *)(a2 + 192));
  v10 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v10;
  return pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)(a1 + 232), (_QWORD *)(a2 + 232));
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtValue::VtValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  if (a2[1])
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    else
      *a1 = *a2;
    a2[1] = 0;
    if (v7)
      (*(void (**)(_BYTE *))(v7 + 32))(v6);
  }
  return a1;
}

void sub_22FF5E518(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo,std::allocator<realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::SkelPoseInfo> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 248;
    realityio::SkeletalAnimationTimelineAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::SkelPoseInfo::~SkelPoseInfo((_QWORD *)(i - 248));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = a1 + 24;
  v3 = *(_QWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  v6 = *(_QWORD *)(a1 + 16);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE46C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE46C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletalAnimationAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (_QWORD *)a1[4];
        if (*a1)
        {
          v9 = 8 * *a1;
          do
          {
            v8 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v8) + 1;
            v9 -= 8;
          }
          while (v9);
          v8 = (_QWORD *)a1[4];
        }
        operator delete(v8 - 2);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

uint64_t realityio::Inputs::Inputs(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = a5;
  v11 = a2[1];
  *(_QWORD *)(a1 + 16) = *a2;
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a7;
  return a1;
}

realityio::Inputs *std::unique_ptr<realityio::Inputs>::reset[abi:ne180100](realityio::Inputs **a1)
{
  realityio::Inputs *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    realityio::Inputs::~Inputs(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void realityio::Inputs::~Inputs(realityio::Inputs *this)
{
  std::__shared_weak_count *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF5E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::emplace_back<realityio::WrappedRERef<REAsset *>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *New;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
      *a2 = 0;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew(a1, v11);
    std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(v9, v9 + 8 * v4, (uint64_t)New);
    New[v4] = *a2;
    *a2 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = New;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_AllocateNew(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  return v4 + 2;
}

void sub_22FF5EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::uninitialized_copy[abi:ne180100]<realityio::WrappedRERef<REAsset *> *,realityio::WrappedRERef<REAsset *> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + v6);
      *(_QWORD *)(a3 + v6) = v7;
      if (v7)
        RERetain();
      v6 += 8;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22FF5EBEC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 8)
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1++);
  __cxa_rethrow();
}

void sub_22FF5EC10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Move(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_Equal(_QWORD **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_IsArrayValued()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetElementTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetShapeData(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetNumElements(uint64_t a1)
{
  return **(_QWORD **)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIN9realityio12WrappedRERefIP7REAssetEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(a2, v2);
}

_QWORD **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::~intrusive_ptr(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_DecRef(v2);
      MEMORY[0x2348B4E1C](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::operator==(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32)
    && pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2)
    && a1[3] == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (uint64_t *)a1[4];
  v6 = *(uint64_t **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v9 = *v5++;
    v8 = v9;
    v10 = *v6++;
    result = v8 == v10;
    v11 = v8 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Vt_ShapeData::operator==(uint64_t a1, uint64_t a2)
{
  const void *v4;
  int v5;
  int v6;
  int v7;
  const void *v8;
  int v9;
  BOOL v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v6 = *(_DWORD *)(a1 + 8);
  v4 = (const void *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    else
      v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12))
      v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    else
      v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  if (v7 != v9)
    return 0;
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v10 = *(_DWORD *)(a1 + 16) == 0;
      v11 = 3;
      if (!v10)
        v11 = 4;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_GetMutableObj(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v13;

  v2 = atomic_load((unsigned int *)(*a1 + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_QWORD *)*a1;
    v5 = *(_OWORD *)(*a1 + 16);
    *(_OWORD *)v3 = *(_OWORD *)*a1;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = v4[4];
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = *(unint64_t **)(v3 + 24);
      v8 = (unint64_t *)(v6 - 16);
      if (!v7)
        v7 = v8;
      do
        v9 = __ldxr(v7);
      while (__stxr(v9 + 1, v7));
      v4 = (_QWORD *)*a1;
    }
    v10 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v13 = v4;
    *a1 = v3;
    boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>>::~intrusive_ptr(&v13);
  }
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFunctionRef<void ()(std::ostream &)>::_InvokeFn<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>::_Streamer>(_QWORD *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

_QWORD *std::vector<RESRT>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<RESRT>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22FF5F15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<RESRT>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

realityio::AnimationSceneAssetBuilder *realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(realityio::AnimationSceneAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t Data;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int **v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t i;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  void **v34[3];
  __int128 v35;
  __int128 v36;
  _QWORD *v37[3];
  __int128 v38;
  _QWORD *v39[3];
  uint64_t v40;
  uint64_t v41;
  void ***v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _OWORD v47[2];
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v32, "AnimationSceneAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kAnimationSceneAssetBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54530);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54530))
  {
    v15 = operator new();
    v16 = operator new();
    v17 = operator new();
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v19 = *(_QWORD *)(Data + 96);
    *(_QWORD *)v17 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      v19 = *(_QWORD *)v17;
      if ((v21 & 1) == 0)
      {
        v19 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v17 = v19;
      }
    }
    *(_BYTE *)(v17 + 8) = v19 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v36, v17);
    v47[0] = v36;
    v36 = 0uLL;
    v22 = operator new();
    v23 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v23)
      v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    v24 = (unint64_t)v23[3];
    *(_QWORD *)v22 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      v24 = *(_QWORD *)v22;
      if ((v26 & 1) == 0)
      {
        v24 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v22 = v24;
      }
    }
    *(_BYTE *)(v22 + 8) = v24 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v35, v22);
    v47[1] = v35;
    v35 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v37, v47, 2uLL);
    memset(v34, 0, sizeof(v34));
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v37, v34);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v38, v16);
    v48 = v38;
    v38 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v39, &v48, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v39);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v40, v15);
    _MergedGlobals_2 = v40;
    *(_QWORD *)algn_255E54528 = v41;
    v40 = 0;
    v41 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    v42 = (void ***)v39;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    v42 = v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    v34[0] = (void **)v37;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v34);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v47[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    __cxa_guard_release(&qword_255E54530);
  }
  v28 = _MergedGlobals_2;
  v29 = *(std::__shared_weak_count **)algn_255E54528;
  if (*(_QWORD *)algn_255E54528)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54528 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v46 = v45;
  v43[0] = &off_24FDE4B38;
  v44 = v43;
  v45[0] = &off_24FDE48E8;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v32, (uint64_t)__p, &v28, (uint64_t)v45, (uint64_t)v43);
  v7 = v44;
  if (v44 == v43)
  {
    v8 = 4;
    v7 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = v46;
  if (v46 == v45)
  {
    v10 = 4;
    v9 = v45;
    goto LABEL_14;
  }
  if (v46)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  *(_QWORD *)this = &off_24FDE47F0;
  return this;
}

void sub_22FF5F624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  MEMORY[0x2348B4E1C](v37, 0x1060C40E5A1EACFLL);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 128);
  MEMORY[0x2348B4E1C](v36, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v35, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54530);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void realityio::buildSceneAssetsAndAnimationLibraries(std::string::size_type a1, int a2, uint64_t a3, unint64_t a4, const void **a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, uint64_t a10, char *****a11, _QWORD *a12)
{
  char *Name;
  size_t v19;
  std::string *v20;
  const void *v21;
  const std::string::value_type *v22;
  std::string *v23;
  __int128 v24;
  _QWORD *v25;
  int8x8_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  double v60;
  double v61;
  std::string *v62;
  float v63;
  float v64;
  double v65;
  double v66;
  std::string::size_type v67;
  std::string *v68;
  float v69;
  float v70;
  char **v71;
  char **v72;
  char *v73;
  double v74;
  double v75;
  std::string::size_type v76;
  std::string *v77;
  float v78;
  float v79;
  uint64_t AnimationLibraryAsset;
  uint64_t ServiceLocator;
  uint64_t v82;
  unint64_t KeyCount;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t EntryByKey;
  const __CFString *Type;
  const char *CStringPtr;
  std::string::size_type v94;
  uint64_t v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  std::string::size_type v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  const void **v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t **v116;
  uint64_t v117;
  std::string::size_type v118;
  std::string *v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string *v122;
  uint64_t *v123;
  uint64_t **v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  std::string::size_type v131;
  std::string *v132;
  float v133;
  float v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  std::string::size_type v139;
  std::string *v140;
  float v141;
  float v142;
  char **v143;
  char **v144;
  char *v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  std::string::size_type v150;
  std::string *v151;
  float v152;
  float v153;
  uint64_t v154;
  std::string::size_type v155;
  double v156;
  double v157;
  std::string *v158;
  float v159;
  float v160;
  double v161;
  double v162;
  std::string *v163;
  float v164;
  float v165;
  char **v166;
  char **v167;
  char *v168;
  double v169;
  double v170;
  std::string *v171;
  float v172;
  float v173;
  std::string::size_type v174;
  double v175;
  double v176;
  std::string *v177;
  float v178;
  float v179;
  double v180;
  double v181;
  std::string *v182;
  float v183;
  float v184;
  char **v185;
  char **v186;
  char *v187;
  double v188;
  double v189;
  std::string *v190;
  float v191;
  float v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::string::size_type v199;
  double v200;
  double v201;
  std::string *v202;
  float v203;
  float v204;
  double v205;
  double v206;
  std::string::size_type v207;
  std::string *v208;
  float v209;
  float v210;
  char **v211;
  char **v212;
  char *v213;
  double v214;
  double v215;
  std::string::size_type v216;
  std::string *v217;
  float v218;
  float v219;
  unint64_t v220;
  char **v221;
  _QWORD *v222;
  std::string::size_type v223;
  uint64_t v224;
  _QWORD *v225;
  char **v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  std::string **v232;
  std::string *v233;
  unint64_t v234;
  char ****v235;
  char ****v236;
  _QWORD *v237;
  char ****v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char ****v244;
  char ***v245;
  uint64_t ChildCount;
  uint64_t i;
  uint64_t Child;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::string *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *String;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  const void **v269;
  unsigned __int8 *v270;
  uint64_t v271;
  std::string *v272;
  std::string *v273;
  uint64_t v274;
  uint64_t v275;
  std::string *v276;
  std::string *v277;
  uint64_t v278;
  char *v279;
  std::string *v280;
  std::string *v281;
  __int128 v282;
  uint64_t v283;
  std::string *v284;
  std::string *v285;
  uint64_t v286;
  uint64_t v287;
  std::string *v288;
  std::string *v289;
  uint64_t v290;
  int v291;
  _QWORD *v292;
  uint64_t v293;
  std::string::size_type v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v299;
  uint64_t *v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  std::string __p;
  unint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t **v310;
  uint64_t *v311;
  uint64_t v312;
  char **v313;
  char *v314;
  uint64_t v315;
  char **v316;
  char *v317[2];
  std::string v318;
  unint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  std::string v324;
  unint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  std::string v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  void **v334;
  uint64_t v335;
  uint64_t v336;
  std::string v337;
  std::string *v338;
  char v339;
  _QWORD v340[6];

  v340[4] = *MEMORY[0x24BDAC8D0];
  v332 = a4;
  if (!a4
    || std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a12, &v332))
  {
    return;
  }
  v331 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 16) + 16);
  std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)a12, &v332, &v332);
  if ((a2 & 1) != 0)
  {
    Name = (char *)REEntityGetName();
    std::string::basic_string[abi:ne180100]<0>(&v330, Name);
  }
  else
  {
    if (*((char *)a5 + 23) >= 0)
      v19 = *((unsigned __int8 *)a5 + 23);
    else
      v19 = (size_t)a5[1];
    v20 = &v337;
    std::string::basic_string[abi:ne180100]((uint64_t)&v337, v19 + 1);
    if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v337.__r_.__value_.__r.__words[0];
    if (v19)
    {
      if (*((char *)a5 + 23) >= 0)
        v21 = a5;
      else
        v21 = *a5;
      memmove(v20, v21, v19);
    }
    *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 47;
    v22 = (const std::string::value_type *)REEntityGetName();
    v23 = std::string::append(&v337, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v330.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v337.__r_.__value_.__l.__data_);
  }
  v293 = a3;
  v294 = a1;
  v291 = a2;
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v324, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
    v325 = 0xFF7FFFFF7F7FFFFFLL;
    v326 = -8388609;
    v328 = 0;
    v329 = 0;
    v327 = 0;
    v25 = a8;
    if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v318, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
      goto LABEL_21;
    }
  }
  else
  {
    v324 = v330;
    v325 = 0xFF7FFFFF7F7FFFFFLL;
    v326 = -8388609;
    v328 = 0;
    v329 = 0;
    v327 = 0;
    v25 = a8;
  }
  v318 = v330;
LABEL_21:
  v319 = 0xFF7FFFFF7F7FFFFFLL;
  v320 = -8388609;
  v322 = 0;
  v323 = 0;
  v321 = 0;
  v317[0] = 0;
  v317[1] = 0;
  v315 = 0;
  v316 = v317;
  v313 = &v314;
  v314 = 0;
  v26 = (int8x8_t)a6[1];
  v27 = 0x9DDFEA08EB382D69 * (((8 * v332) + 8) ^ HIDWORD(v332));
  v28 = 0x9DDFEA08EB382D69 * (HIDWORD(v332) ^ (v27 >> 47) ^ v27);
  v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
  if (!*(_QWORD *)&v26)
    goto LABEL_38;
  v30 = (uint8x8_t)vcnt_s8(v26);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    v31 = v29;
    if (v29 >= *(_QWORD *)&v26)
      v31 = v29 % *(_QWORD *)&v26;
  }
  else
  {
    v31 = v29 & (*(_QWORD *)&v26 - 1);
  }
  v32 = *(_QWORD **)(*a6 + 8 * v31);
  if (v32)
  {
    v33 = (_QWORD *)*v32;
    if (*v32)
    {
      do
      {
        v34 = v33[1];
        if (v29 == v34)
        {
          if (v33[2] == v332)
            break;
        }
        else
        {
          if (v30.u32[0] > 1uLL)
          {
            if (v34 >= *(_QWORD *)&v26)
              v34 %= *(_QWORD *)&v26;
          }
          else
          {
            v34 &= *(_QWORD *)&v26 - 1;
          }
          if (v34 != v31)
            goto LABEL_38;
        }
        v33 = (_QWORD *)*v33;
      }
      while (v33);
    }
  }
  else
  {
LABEL_38:
    v33 = 0;
  }
  v35 = (int8x8_t)a7[1];
  if (!*(_QWORD *)&v35)
    goto LABEL_56;
  v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    v37 = v29;
    if (v29 >= *(_QWORD *)&v35)
      v37 = v29 % *(_QWORD *)&v35;
  }
  else
  {
    v37 = (*(_QWORD *)&v35 - 1) & v29;
  }
  v38 = *(_QWORD **)(*a7 + 8 * v37);
  if (v38)
  {
    v39 = (_QWORD *)*v38;
    if (*v38)
    {
      do
      {
        v40 = v39[1];
        if (v29 == v40)
        {
          if (v39[2] == v332)
            break;
        }
        else
        {
          if (v36.u32[0] > 1uLL)
          {
            if (v40 >= *(_QWORD *)&v35)
              v40 %= *(_QWORD *)&v35;
          }
          else
          {
            v40 &= *(_QWORD *)&v35 - 1;
          }
          if (v40 != v37)
            goto LABEL_56;
        }
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_56:
    v39 = 0;
  }
  v41 = (int8x8_t)v25[1];
  if (!*(_QWORD *)&v41)
    goto LABEL_74;
  v42 = (uint8x8_t)vcnt_s8(v41);
  v42.i16[0] = vaddlv_u8(v42);
  if (v42.u32[0] > 1uLL)
  {
    v43 = v29;
    if (v29 >= *(_QWORD *)&v41)
      v43 = v29 % *(_QWORD *)&v41;
  }
  else
  {
    v43 = (*(_QWORD *)&v41 - 1) & v29;
  }
  v44 = *(_QWORD **)(*v25 + 8 * v43);
  if (v44)
  {
    v45 = (_QWORD *)*v44;
    if (*v44)
    {
      do
      {
        v46 = v45[1];
        if (v29 == v46)
        {
          if (v45[2] == v332)
            break;
        }
        else
        {
          if (v42.u32[0] > 1uLL)
          {
            if (v46 >= *(_QWORD *)&v41)
              v46 %= *(_QWORD *)&v41;
          }
          else
          {
            v46 &= *(_QWORD *)&v41 - 1;
          }
          if (v46 != v43)
            goto LABEL_74;
        }
        v45 = (_QWORD *)*v45;
      }
      while (v45);
    }
  }
  else
  {
LABEL_74:
    v45 = 0;
  }
  v47 = (int8x8_t)a9[1];
  if (!*(_QWORD *)&v47)
    goto LABEL_92;
  v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    v49 = v29;
    if (v29 >= *(_QWORD *)&v47)
      v49 = v29 % *(_QWORD *)&v47;
  }
  else
  {
    v49 = (*(_QWORD *)&v47 - 1) & v29;
  }
  v50 = *(_QWORD **)(*a9 + 8 * v49);
  if (v50)
  {
    v51 = (_QWORD *)*v50;
    if (*v50)
    {
      do
      {
        v52 = v51[1];
        if (v29 == v52)
        {
          if (v51[2] == v332)
            break;
        }
        else
        {
          if (v48.u32[0] > 1uLL)
          {
            if (v52 >= *(_QWORD *)&v47)
              v52 %= *(_QWORD *)&v47;
          }
          else
          {
            v52 &= *(_QWORD *)&v47 - 1;
          }
          if (v52 != v49)
            goto LABEL_92;
        }
        v51 = (_QWORD *)*v51;
      }
      while (v51);
    }
  }
  else
  {
LABEL_92:
    v51 = 0;
  }
  v295 = v45;
  v296 = v39;
  v301 = v51;
  v292 = v33;
  v302 = a6;
  v303 = a7;
  if (v33)
  {
    v53 = (_QWORD *)v33[3];
    v54 = v53[6] - v53[5];
    if (v54)
    {
      v55 = 0;
      v56 = v54 >> 3;
      if (v56 <= 1)
        v57 = 1;
      else
        v57 = v56;
      do
      {
        v58 = *(_QWORD *)(v53[5] + 8 * v55);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53[2] + 8 * v55);
        if (__p.__r_.__value_.__r.__words[0])
        {
          RERetain();
          v59 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v59 = 0;
        }
        v60 = *(double *)(v58 + 8);
        v61 = *(double *)(v58 + 16);
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v330;
        else
          v62 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v62);
        v63 = v61;
        v64 = v60;
        realityio::TimelineGroupFactory::addTimeline((char *)&v324, v59, (__int128 *)&v337, "entitySceneClip", v64, v63);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v65 = *(double *)(v58 + 8);
        v66 = *(double *)(v58 + 16);
        v67 = __p.__r_.__value_.__r.__words[0];
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v330;
        else
          v68 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v68);
        v69 = v66;
        v70 = v65;
        realityio::TimelineGroupFactory::addTimeline((char *)&v318, v67, (__int128 *)&v337, "defaultSceneClip", v70, v69);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v71 = *(char ***)a10;
        v72 = *(char ***)(a10 + 8);
        while (v71 != v72)
        {
          v73 = *v71;
          v74 = *(double *)(v58 + 8);
          v75 = *(double *)(v58 + 16);
          v76 = __p.__r_.__value_.__r.__words[0];
          if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = &v330;
          else
            v77 = (std::string *)v330.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v77);
          v78 = v75;
          v79 = v74;
          realityio::TimelineGroupFactory::addTimeline(v73, v76, (__int128 *)&v337, "childSceneClip", v79, v78);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          ++v71;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        ++v55;
      }
      while (v55 != v57);
    }
  }
  v311 = 0;
  v312 = 0;
  v310 = &v311;
  REAnimationLibraryComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
    if (AnimationLibraryAsset)
    {
      ServiceLocator = REEngineGetServiceLocator();
      MEMORY[0x2348B1264](ServiceLocator);
      v336 = 0;
      v82 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
      if (v336)
        RERelease();
      v336 = v82;
      KeyCount = REAnimationLibraryAssetGetKeyCount();
      v84 = KeyCount;
      memset(&__p, 0, sizeof(__p));
      if (KeyCount)
      {
        if (KeyCount >> 61)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&__p.__r_.__value_.__r.__words[2], KeyCount);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v85 + 8 * v86;
        bzero(v85, 8 * v84);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v85 + 8 * v84;
      }
      REAnimationLibraryAssetGetKeys();
      if (v336)
      {
        if (v84)
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v297 = v84;
          do
          {
            EntryByKey = REAnimationLibraryAssetGetEntryByKey();
            Type = (const __CFString *)REAssetGetType();
            CStringPtr = CFStringGetCStringPtr(Type, 0);
            if (!CStringPtr || strcmp(CStringPtr, "AnimationScene"))
            {
              v299 = (unint64_t)v89;
              v300 = v87;
              v94 = __p.__r_.__value_.__r.__words[0];
              v333 = EntryByKey;
              if (EntryByKey)
              {
                RERetain();
                v95 = v333;
              }
              else
              {
                v95 = 0;
              }
              v96 = *(void ***)(v94 + 8 * v90);
              v334 = v96;
              v335 = v95;
              v333 = 0;
              v97 = operator new(0x40uLL);
              v98 = AnimationLibraryAsset;
              v337.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
              v337.__r_.__value_.__l.__size_ = (std::string::size_type)&v311;
              v337.__r_.__value_.__s.__data_[16] = 0;
              std::string::basic_string[abi:ne180100]<0>(v97 + 4, (char *)v96);
              v97[7] = v335;
              v335 = 0;
              v337.__r_.__value_.__s.__data_[16] = 1;
              v99 = v337.__r_.__value_.__r.__words[0];
              v100 = v311;
              v101 = &v311;
              v102 = &v311;
              if (!v311)
                goto LABEL_144;
              v101 = &v311;
              while (1)
              {
                while (1)
                {
                  v102 = (uint64_t **)v100;
                  v103 = (const void **)(v100 + 4);
                  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v312, (const void **)(v99 + 32), (const void **)v100 + 4))break;
                  v100 = *v102;
                  v101 = v102;
                  if (!*v102)
                    goto LABEL_144;
                }
                if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v312, v103, (const void **)(v99 + 32)))
                  break;
                v101 = v102 + 1;
                v100 = v102[1];
                if (!v100)
                  goto LABEL_144;
              }
              if (!*v101)
              {
LABEL_144:
                *(_QWORD *)v99 = 0;
                *(_QWORD *)(v99 + 8) = 0;
                *(_QWORD *)(v99 + 16) = v102;
                *v101 = (uint64_t *)v99;
                if (*v310)
                {
                  v310 = (uint64_t **)*v310;
                  v99 = (std::string::size_type)*v101;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v311, (uint64_t *)v99);
                ++v312;
                v337.__r_.__value_.__r.__words[0] = 0;
              }
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v337, 0);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v335);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v333);
              v104 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v90);
              v89 = (char *)v299;
              if ((unint64_t)v88 >= v299)
              {
                v105 = ((char *)v88 - (char *)v300) >> 4;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 60)
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                AnimationLibraryAsset = v98;
                if ((uint64_t)(v299 - (_QWORD)v300) >> 3 > v106)
                  v106 = (uint64_t)(v299 - (_QWORD)v300) >> 3;
                if (v299 - (unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0)
                  v107 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v107 = v106;
                if (v107)
                {
                  if (v107 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v108 = (char *)operator new(16 * v107);
                }
                else
                {
                  v108 = 0;
                }
                v109 = (uint64_t *)&v108[16 * v105];
                *v109 = EntryByKey;
                v109[1] = v104;
                if (v88 == v300)
                {
                  v111 = &v108[16 * v105];
                }
                else
                {
                  v110 = &v108[16 * v105];
                  do
                  {
                    v111 = v110 - 16;
                    *((_OWORD *)v110 - 1) = *((_OWORD *)v88 - 1);
                    v88 -= 2;
                    v110 -= 16;
                  }
                  while (v88 != v300);
                }
                v89 = &v108[16 * v107];
                v88 = v109 + 2;
                if (v300)
                  operator delete(v300);
                v87 = (uint64_t *)v111;
              }
              else
              {
                *v88 = EntryByKey;
                v88[1] = v104;
                v88 += 2;
                AnimationLibraryAsset = v98;
                v87 = v300;
              }
            }
            ++v90;
          }
          while (v90 != v297);
        }
        else
        {
          v87 = 0;
          v88 = 0;
        }
        REAnimationLibraryDefinitionClearEntries();
        if (v88 != v87)
        {
          v112 = 0;
          if ((unint64_t)(((char *)v88 - (char *)v87) >> 4) <= 1)
            v113 = 1;
          else
            v113 = ((char *)v88 - (char *)v87) >> 4;
          v114 = (char *)(v87 + 1);
          do
          {
            REAnimationLibraryDefinitionAddEntryAsset();
            REAnimationLibraryDefinitionAddKeyedEntryIndex();
            ++v112;
            v114 += 16;
          }
          while (v113 != v112);
        }
        v337.__r_.__value_.__r.__words[0] = 0;
        v115 = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
        if (v337.__r_.__value_.__r.__words[0])
          RERelease();
        v337.__r_.__value_.__r.__words[0] = v115;
        if (v115)
          REAnimationLibraryComponentAssignAnimationLibraryAsset();
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v337);
        if (v87)
          operator delete(v87);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v336);
    }
  }
  if (v312)
  {
    v116 = v310;
    if (v310 != &v311)
    {
      do
      {
        v117 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v316, (const void **)v116 + 4);
        if (v317 == (char **)v117)
        {
          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
          else
            __p = v330;
          v305 = 0xFF7FFFFF7F7FFFFFLL;
          v306 = -8388609;
          v308 = 0;
          v309 = 0;
          v307 = 0;
          std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(&v337, (__int128 *)v116 + 2, (__int128 *)&__p);
          std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>((uint64_t **)&v316, (const void **)&v337.__r_.__value_.__l.__data_, (uint64_t)&v337);
          v334 = (void **)v340;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v334);
          if (v339 < 0)
            operator delete(v338);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          v334 = (void **)&v307;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v334);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v117 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v316, (const void **)v116 + 4);
        }
        v118 = (std::string::size_type)v116[7];
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &v330;
        else
          v119 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v119);
        realityio::TimelineGroupFactory::addTimeline((char *)(v117 + 56), v118, (__int128 *)&v337, "entitySceneClip", 0.0, 0.0);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v313, (const void **)v116 + 4);
        if (&v314 == (char **)v120)
        {
          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
          else
            __p = v330;
          v305 = 0xFF7FFFFF7F7FFFFFLL;
          v306 = -8388609;
          v308 = 0;
          v309 = 0;
          v307 = 0;
          std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(&v337, (__int128 *)v116 + 2, (__int128 *)&__p);
          std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>((uint64_t **)&v313, (const void **)&v337.__r_.__value_.__l.__data_, (uint64_t)&v337);
          v334 = (void **)v340;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v334);
          if (v339 < 0)
            operator delete(v338);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          v334 = (void **)&v307;
          std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v334);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v120 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v313, (const void **)v116 + 4);
        }
        v121 = (std::string::size_type)v116[7];
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &v330;
        else
          v122 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v122);
        realityio::TimelineGroupFactory::addTimeline((char *)(v120 + 56), v121, (__int128 *)&v337, "defaultSceneClip", 0.0, 0.0);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v123 = v116[1];
        if (v123)
        {
          do
          {
            v124 = (uint64_t **)v123;
            v123 = (uint64_t *)*v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            v124 = (uint64_t **)v116[2];
            v125 = *v124 == (uint64_t *)v116;
            v116 = v124;
          }
          while (!v125);
        }
        v116 = v124;
      }
      while (v124 != &v311);
    }
  }
  if (v296)
  {
    v126 = v296[3];
    v127 = *(_QWORD *)(v126 + 8);
    v129 = *(double *)(v127 + 16);
    v128 = *(double *)(v127 + 24);
    v130 = *(double *)(v127 + 8);
    v131 = *(_QWORD *)v127;
    if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = &v330;
    else
      v132 = (std::string *)v330.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v132);
    v133 = v128 * v129;
    v134 = v130 * v128;
    realityio::TimelineGroupFactory::addTimeline((char *)&v324, v131, (__int128 *)&v337, "entitySceneClip", v134, v133);
    if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v337.__r_.__value_.__l.__data_);
    v135 = *(_QWORD *)(v126 + 8);
    v137 = *(double *)(v135 + 16);
    v136 = *(double *)(v135 + 24);
    v138 = *(double *)(v135 + 8);
    v139 = *(_QWORD *)v135;
    if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v140 = &v330;
    else
      v140 = (std::string *)v330.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v140);
    v141 = v136 * v137;
    v142 = v138 * v136;
    realityio::TimelineGroupFactory::addTimeline((char *)&v318, v139, (__int128 *)&v337, "defaultSceneClip", v142, v141);
    if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v337.__r_.__value_.__l.__data_);
    v143 = *(char ***)a10;
    v144 = *(char ***)(a10 + 8);
    if (*(char ***)a10 != v144)
    {
      do
      {
        v145 = *v143;
        v146 = *(_QWORD *)(v126 + 8);
        v148 = *(double *)(v146 + 16);
        v147 = *(double *)(v146 + 24);
        v149 = *(double *)(v146 + 8);
        v150 = *(_QWORD *)v146;
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v151 = &v330;
        else
          v151 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v151);
        v152 = v147 * v148;
        v153 = v149 * v147;
        realityio::TimelineGroupFactory::addTimeline(v145, v150, (__int128 *)&v337, "childSceneClip", v153, v152);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        ++v143;
      }
      while (v143 != v144);
    }
  }
  if (v295)
  {
    v154 = v295[3];
    v155 = *(_QWORD *)(v154 + 8);
    if (v155)
    {
      v156 = *(double *)(v154 + 24);
      v157 = *(double *)(v154 + 32);
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v330;
      else
        v158 = (std::string *)v330.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v158);
      v159 = v157;
      v160 = v156;
      realityio::TimelineGroupFactory::addTimeline((char *)&v324, v155, (__int128 *)&v337, "entitySceneClip", v160, v159);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      v161 = *(double *)(v154 + 24);
      v162 = *(double *)(v154 + 32);
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v163 = &v330;
      else
        v163 = (std::string *)v330.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v163);
      v164 = v162;
      v165 = v161;
      realityio::TimelineGroupFactory::addTimeline((char *)&v318, v155, (__int128 *)&v337, "defaultSceneClip", v165, v164);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      v166 = *(char ***)a10;
      v167 = *(char ***)(a10 + 8);
      if (*(char ***)a10 != v167)
      {
        do
        {
          v168 = *v166;
          v169 = *(double *)(v154 + 24);
          v170 = *(double *)(v154 + 32);
          if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v171 = &v330;
          else
            v171 = (std::string *)v330.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v171);
          v172 = v170;
          v173 = v169;
          realityio::TimelineGroupFactory::addTimeline(v168, v155, (__int128 *)&v337, "childSceneClip", v173, v172);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          ++v166;
        }
        while (v166 != v167);
      }
    }
    v174 = *(_QWORD *)(v154 + 16);
    if (v174)
    {
      v175 = *(double *)(v154 + 24);
      v176 = *(double *)(v154 + 32);
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v177 = &v330;
      else
        v177 = (std::string *)v330.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v177);
      v178 = v176;
      v179 = v175;
      realityio::TimelineGroupFactory::addTimeline((char *)&v324, v174, (__int128 *)&v337, "entitySceneClip", v179, v178);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      v180 = *(double *)(v154 + 24);
      v181 = *(double *)(v154 + 32);
      if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = &v330;
      else
        v182 = (std::string *)v330.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v182);
      v183 = v181;
      v184 = v180;
      realityio::TimelineGroupFactory::addTimeline((char *)&v318, v174, (__int128 *)&v337, "defaultSceneClip", v184, v183);
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      v185 = *(char ***)a10;
      v186 = *(char ***)(a10 + 8);
      if (*(char ***)a10 != v186)
      {
        do
        {
          v187 = *v185;
          v188 = *(double *)(v154 + 24);
          v189 = *(double *)(v154 + 32);
          if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v190 = &v330;
          else
            v190 = (std::string *)v330.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v190);
          v191 = v189;
          v192 = v188;
          realityio::TimelineGroupFactory::addTimeline(v187, v174, (__int128 *)&v337, "childSceneClip", v192, v191);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          ++v185;
        }
        while (v185 != v186);
      }
    }
  }
  if (v301)
  {
    v193 = (_QWORD *)v301[3];
    v194 = v193[6] - v193[5];
    if (v194)
    {
      v195 = 0;
      v196 = v194 >> 3;
      if (v196 <= 1)
        v197 = 1;
      else
        v197 = v196;
      do
      {
        v198 = *(_QWORD *)(v193[5] + 8 * v195);
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v193[2] + 8 * v195);
        if (__p.__r_.__value_.__r.__words[0])
        {
          RERetain();
          v199 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v199 = 0;
        }
        v200 = *(double *)(v198 + 16);
        v201 = *(double *)(v198 + 24);
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v202 = &v330;
        else
          v202 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v202);
        v203 = v201;
        v204 = v200;
        realityio::TimelineGroupFactory::addTimeline((char *)&v324, v199, (__int128 *)&v337, "entitySceneClip", v204, v203);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v205 = *(double *)(v198 + 16);
        v206 = *(double *)(v198 + 24);
        v207 = __p.__r_.__value_.__r.__words[0];
        if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v208 = &v330;
        else
          v208 = (std::string *)v330.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v208);
        v209 = v206;
        v210 = v205;
        realityio::TimelineGroupFactory::addTimeline((char *)&v318, v207, (__int128 *)&v337, "defaultSceneClip", v210, v209);
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
        v211 = *(char ***)a10;
        v212 = *(char ***)(a10 + 8);
        while (v211 != v212)
        {
          v213 = *v211;
          v214 = *(double *)(v198 + 16);
          v215 = *(double *)(v198 + 24);
          v216 = __p.__r_.__value_.__r.__words[0];
          if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v217 = &v330;
          else
            v217 = (std::string *)v330.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&v337, (char *)v217);
          v218 = v215;
          v219 = v214;
          realityio::TimelineGroupFactory::addTimeline(v213, v216, (__int128 *)&v337, "childSceneClip", v219, v218);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v337.__r_.__value_.__l.__data_);
          ++v211;
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
        ++v195;
      }
      while (v195 != v197);
    }
  }
  v221 = *(char ***)(a10 + 8);
  v220 = *(_QWORD *)(a10 + 16);
  if ((unint64_t)v221 >= v220)
  {
    v226 = *(char ***)a10;
    v227 = ((uint64_t)v221 - *(_QWORD *)a10) >> 3;
    v228 = v227 + 1;
    v224 = v293;
    v223 = v294;
    v225 = v296;
    if ((unint64_t)(v227 + 1) >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v229 = v220 - (_QWORD)v226;
    if (v229 >> 2 > v228)
      v228 = v229 >> 2;
    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8)
      v230 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v230 = v228;
    if (v230)
    {
      if (v230 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v231 = (char *)operator new(8 * v230);
    }
    else
    {
      v231 = 0;
    }
    v232 = (std::string **)&v231[8 * v227];
    *v232 = &v318;
    v222 = v232 + 1;
    if (v221 != v226)
    {
      do
      {
        v233 = (std::string *)*--v221;
        *--v232 = v233;
      }
      while (v221 != v226);
      v221 = *(char ***)a10;
    }
    *(_QWORD *)a10 = v232;
    *(_QWORD *)(a10 + 8) = v222;
    *(_QWORD *)(a10 + 16) = &v231[8 * v230];
    if (v221)
      operator delete(v221);
  }
  else
  {
    *v221 = (char *)&v318;
    v222 = v221 + 1;
    v224 = v293;
    v223 = v294;
    v225 = v296;
  }
  *(_QWORD *)(a10 + 8) = v222;
  v235 = a11[1];
  v234 = (unint64_t)a11[2];
  if ((unint64_t)v235 >= v234)
  {
    v238 = *a11;
    v239 = v235 - *a11;
    v240 = v239 + 1;
    v237 = v292;
    if ((unint64_t)(v239 + 1) >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v241 = v234 - (_QWORD)v238;
    if (v241 >> 2 > v240)
      v240 = v241 >> 2;
    if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8)
      v242 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v242 = v240;
    if (v242)
    {
      if (v242 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v243 = (char *)operator new(8 * v242);
    }
    else
    {
      v243 = 0;
    }
    v244 = (char ****)&v243[8 * v239];
    *v244 = &v313;
    v236 = v244 + 1;
    if (v235 != v238)
    {
      do
      {
        v245 = *--v235;
        *--v244 = v245;
      }
      while (v235 != v238);
      v235 = *a11;
    }
    *a11 = v244;
    a11[1] = v236;
    a11[2] = (char ****)&v243[8 * v242];
    if (v235)
      operator delete(v235);
  }
  else
  {
    *v235 = &v313;
    v236 = v235 + 1;
    v237 = v292;
  }
  a11[1] = v236;
  ChildCount = REEntityGetChildCount();
  if (ChildCount)
  {
    for (i = 0; i != ChildCount; ++i)
    {
      Child = REEntityGetChild();
      realityio::buildSceneAssetsAndAnimationLibraries(v223, 0, v224, Child, &v330, v302, v303, a8, a9, a10, a11, a12);
    }
  }
  if (v328 == v327 && v322 == v321 && !v315)
    goto LABEL_436;
  v334 = 0;
  REAnimationLibraryComponentGetComponentType();
  if (REEntityGetComponentByClass() && REAnimationLibraryComponentGetAnimationLibraryAsset())
  {
    v249 = REEngineGetServiceLocator();
    MEMORY[0x2348B1264](v249);
    v334 = (void **)REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
    if (v334)
      goto LABEL_352;
  }
  else if (v334)
  {
    goto LABEL_352;
  }
  v334 = (void **)REAnimationLibraryDefinitionCreate();
LABEL_352:
  if (v328 == v327)
    goto LABEL_405;
  v336 = 0;
  REEntityGetName();
  v336 = REAnimationSceneEntityDefinitionCreate();
  if (v237)
  {
    v250 = (_QWORD *)v237[3];
    v251 = v250[6] - v250[5];
    if (v251)
    {
      v252 = 0;
      if ((unint64_t)(v251 >> 3) <= 1)
        v253 = 1;
      else
        v253 = v251 >> 3;
      do
      {
        REAnimationLibraryDefinitionAddEntryAsset();
        std::to_string(&__p, ++v252);
        v254 = std::string::insert(&__p, 0, "skeletal animation ");
        v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
        v337.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v337.__r_.__value_.__l.__data_ = v255;
        v254->__r_.__value_.__l.__size_ = 0;
        v254->__r_.__value_.__r.__words[2] = 0;
        v254->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v337.__r_.__value_.__l.__data_);
      }
      while (v253 != v252);
      v250 = (_QWORD *)v237[3];
      v225 = v296;
    }
    v337.__r_.__value_.__r.__words[0] = v250[1];
    if (v337.__r_.__value_.__r.__words[0])
      RERetain();
    REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v337);
  }
  if (v225)
  {
    REAnimationLibraryDefinitionAddEntryAsset();
    REAnimationLibraryDefinitionAddKeyedEntryIndex();
    REAnimationSceneEntityDefinitionSetHasTransformAnimations();
  }
  if (v295)
  {
    v256 = v295[3];
    if (*(_QWORD *)(v256 + 8))
    {
      REAnimationLibraryDefinitionAddEntryAsset();
      REAnimationLibraryDefinitionAddKeyedEntryIndex();
      v256 = v295[3];
    }
    if (*(_QWORD *)(v256 + 16))
    {
      REAnimationLibraryDefinitionAddEntryAsset();
      REAnimationLibraryDefinitionAddKeyedEntryIndex();
    }
  }
  if (v301)
  {
    v257 = *(_QWORD *)(v301[3] + 48) - *(_QWORD *)(v301[3] + 40);
    if (v257)
    {
      v258 = 0;
      v259 = v257 >> 3;
      if (v259 <= 1)
        v260 = 1;
      else
        v260 = v259;
      while (1)
      {
        v261 = v301[3];
        REAnimationLibraryDefinitionAddEntryAsset();
        String = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(*(_QWORD *)(v261 + 40) + 8 * v258));
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        v263 = v301[3];
        v264 = *(unsigned __int8 *)(v263 + 87);
        v265 = *(_QWORD *)(v263 + 72);
        if ((v264 & 0x80u) == 0)
          v266 = *(unsigned __int8 *)(v263 + 87);
        else
          v266 = *(_QWORD *)(v263 + 72);
        v267 = *((unsigned __int8 *)String + 23);
        v268 = (char)v267;
        if ((v267 & 0x80u) != 0)
          v267 = String[1];
        if (v266 != v267)
          goto LABEL_398;
        v269 = (const void **)(v263 + 64);
        if (v268 < 0)
          String = (_QWORD *)*String;
        if ((v264 & 0x80) == 0)
          break;
        if (!memcmp(*v269, String, v265))
          goto LABEL_397;
LABEL_398:
        if (++v258 == v260)
          goto LABEL_399;
      }
      if ((_DWORD)v264)
      {
        v270 = (unsigned __int8 *)String;
        while (*(unsigned __int8 *)v269 == *v270)
        {
          v269 = (const void **)((char *)v269 + 1);
          ++v270;
          if (!--v264)
            goto LABEL_397;
        }
        goto LABEL_398;
      }
LABEL_397:
      REAnimationLibraryDefinitionSetDefaultEntryKey();
      goto LABEL_398;
    }
  }
LABEL_399:
  v271 = *(_QWORD *)(v224 + 48);
  v272 = (std::string *)operator new(0x38uLL);
  v272->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE4BB8;
  v272->__r_.__value_.__l.__size_ = (std::string::size_type)&v331;
  v272->__r_.__value_.__r.__words[2] = (std::string::size_type)&v324;
  v272[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
  v272[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v334;
  v272[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v332;
  v272[2].__r_.__value_.__r.__words[0] = v223;
  v338 = v272;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v271 + 16))(v271, &v337);
  v273 = v338;
  if (v338 == &v337)
  {
    v274 = 4;
    v273 = &v337;
    goto LABEL_403;
  }
  if (v338)
  {
    v274 = 5;
LABEL_403:
    (*(void (**)(void))(v273->__r_.__value_.__r.__words[0] + 8 * v274))();
  }
  RERelease();
LABEL_405:
  if (v322 != v321)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    REEntityGetName();
    __p.__r_.__value_.__r.__words[0] = REAnimationSceneEntityDefinitionCreate();
    if (v237)
    {
      v337.__r_.__value_.__r.__words[0] = *(_QWORD *)(v237[3] + 8);
      if (v337.__r_.__value_.__r.__words[0])
        RERetain();
      REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset();
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v337);
    }
    if (v225)
      REAnimationSceneEntityDefinitionSetHasTransformAnimations();
    v275 = *(_QWORD *)(v224 + 48);
    v276 = (std::string *)operator new(0x40uLL);
    v276->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE4C38;
    v276->__r_.__value_.__l.__size_ = (std::string::size_type)&v331;
    v276->__r_.__value_.__r.__words[2] = (std::string::size_type)&v318;
    v276[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v276[1].__r_.__value_.__l.__size_ = v223;
    v276[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v334;
    v276[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
    v276[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v332;
    v338 = v276;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v275 + 16))(v275, &v337);
    v277 = v338;
    if (v338 == &v337)
    {
      v278 = 4;
      v277 = &v337;
    }
    else
    {
      if (!v338)
      {
LABEL_417:
        RERelease();
        goto LABEL_418;
      }
      v278 = 5;
    }
    (*(void (**)(void))(v277->__r_.__value_.__r.__words[0] + 8 * v278))();
    goto LABEL_417;
  }
LABEL_418:
  if (!v291 || v322 == v321)
    goto LABEL_429;
  v279 = (char *)REEntityGetName();
  v280 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v337, v279);
  v281 = std::string::append(v280, "__rootAnimationScene");
  v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v281->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v282;
  v281->__r_.__value_.__l.__size_ = 0;
  v281->__r_.__value_.__r.__words[2] = 0;
  v281->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  v336 = 0;
  v336 = REAnimationSceneEntityDefinitionCreate();
  v283 = *(_QWORD *)(v224 + 48);
  v284 = (std::string *)operator new(0x40uLL);
  v284->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE4CB8;
  v284->__r_.__value_.__l.__size_ = (std::string::size_type)&v331;
  v284->__r_.__value_.__r.__words[2] = (std::string::size_type)&v318;
  v284[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v336;
  v284[1].__r_.__value_.__l.__size_ = v223;
  v284[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v334;
  v284[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
  v284[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v332;
  v338 = v284;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v283 + 16))(v283, &v337);
  v285 = v338;
  if (v338 == &v337)
  {
    v286 = 4;
    v285 = &v337;
  }
  else
  {
    if (!v338)
      goto LABEL_427;
    v286 = 5;
  }
  (*(void (**)(void))(v285->__r_.__value_.__r.__words[0] + 8 * v286))();
LABEL_427:
  RERelease();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_429:
  if (REAnimationLibraryDefinitionGetEntryCount())
  {
    v287 = *(_QWORD *)(v224 + 48);
    v288 = (std::string *)operator new(0x28uLL);
    v288->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE4D38;
    v288->__r_.__value_.__l.__size_ = (std::string::size_type)&v331;
    v288->__r_.__value_.__r.__words[2] = (std::string::size_type)&v334;
    v288[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v332;
    v288[1].__r_.__value_.__l.__size_ = v223;
    v338 = v288;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v287 + 16))(v287, &v337);
    v289 = v338;
    if (v338 == &v337)
    {
      v290 = 4;
      v289 = &v337;
      goto LABEL_434;
    }
    if (v338)
    {
      v290 = 5;
LABEL_434:
      (*(void (**)(void))(v289->__r_.__value_.__r.__words[0] + 8 * v290))();
    }
  }
  RERelease();
LABEL_436:
  *(_QWORD *)(a10 + 8) -= 8;
  --a11[1];
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&v310, v311);
  std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(v314);
  std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(v317[0]);
  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v337);
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v318.__r_.__value_.__l.__data_);
  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327;
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v337);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v324.__r_.__value_.__l.__data_);
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v330.__r_.__value_.__l.__data_);
}

void sub_22FF61424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;

  realityio::TimelineGroupFactory::~TimelineGroupFactory(&a63);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,realityio::TimelineGroupFactory>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t realityio::removeAnimationLibraries(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Child;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if (!a2)
    return result;
  v4 = result;
  result = (uint64_t)std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a3, &v11);
  if (result)
    return result;
  std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)a3, &v11, &v11);
  v5 = *(_QWORD *)(v4 + 48);
  v12[0] = &off_24FDE4E38;
  v12[1] = &v11;
  v13 = v12;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v12);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
LABEL_8:
  result = REEntityGetChildCount();
  v8 = result;
  if (result)
  {
    v9 = 0;
    do
    {
      Child = REEntityGetChild();
      result = realityio::removeAnimationLibraries(v4, Child, a3);
      ++v9;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_22FF618E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t realityio::AnimationSceneAssetBuilder::run(realityio::AnimationSceneAssetBuilder *this, unint64_t a2)
{
  uint64_t v4;
  realityio::SkeletalAnimationAggregationBuilder *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t v12;
  uint64_t v13;
  std::mutex *v14;
  unint64_t *v15;
  unint64_t v16;
  const void **EmptyString;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  uint64_t String;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  realityio::TransformAnimationAggregationBuilder *v64;
  std::string::size_type v65;
  std::string::value_type v66;
  unsigned int *v67;
  unsigned int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  std::string::size_type *v78;
  std::string::size_type *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::mutex *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  const void **v86;
  int v87;
  std::string::size_type size;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  std::string::size_type *v94;
  std::string::size_type *v95;
  std::string::size_type v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  std::string *v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  const std::string::value_type *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  std::string::value_type v111;
  std::string::size_type *v112;
  unsigned int *v113;
  unsigned int v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  std::string::size_type *v124;
  std::string::size_type *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::mutex *v129;
  unint64_t *v130;
  unint64_t v131;
  const void **v132;
  int v133;
  std::string::size_type v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  std::string::size_type *v140;
  std::string::size_type *v141;
  std::string::size_type v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  uint64_t v149;
  int v150;
  const std::string::value_type *v151;
  std::string::size_type v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  std::string::value_type v157;
  std::string::size_type *v158;
  unsigned int *v159;
  unsigned int v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  pxrInternal__aapl__pxrReserved__::TfToken *v166;
  pxrInternal__aapl__pxrReserved__::TfToken *v167;
  pxrInternal__aapl__pxrReserved__::TfToken *v168;
  pxrInternal__aapl__pxrReserved__::TfToken *v169;
  uint64_t v170;
  uint64_t v171;
  std::mutex *v172;
  unint64_t *v173;
  unint64_t v174;
  const void **v175;
  __int128 v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  _OWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  char *v200;
  __int128 v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::string::size_type v211;
  std::string *v212;
  __int128 v213;
  uint64_t v214;
  int v215;
  const std::string::value_type *v216;
  std::string::size_type v217;
  std::string *v218;
  __int128 v219;
  std::string *v220;
  __int128 v221;
  std::string::value_type v222;
  unsigned int *v223;
  unsigned int v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  pxrInternal__aapl__pxrReserved__::TfToken *v229;
  pxrInternal__aapl__pxrReserved__::TfToken *v230;
  pxrInternal__aapl__pxrReserved__::TfToken *v231;
  unint64_t prime;
  uint64_t v233;
  std::__shared_weak_count *v234;
  std::mutex *v235;
  unint64_t *v236;
  unint64_t v237;
  const void **v238;
  uint64_t v239;
  uint64_t v240;
  std::string::size_type v241;
  std::string::size_type v242;
  unint64_t *v243;
  unint64_t v244;
  std::string *v245;
  __int128 v246;
  std::string::size_type v247;
  char v248;
  __int128 v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  _OWORD *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  char *v273;
  __int128 v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  std::string::size_type v284;
  std::string *v285;
  __int128 v286;
  uint64_t v287;
  int v288;
  const std::string::value_type *v289;
  std::string::size_type v290;
  std::string *v291;
  __int128 v292;
  std::string *v293;
  __int128 v294;
  std::string::value_type v295;
  unsigned int *v296;
  unsigned int v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::string::size_type **v301;
  std::string::size_type **v302;
  std::string::size_type v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint8x8_t v308;
  _QWORD *v309;
  _QWORD *i;
  unint64_t v311;
  _QWORD *v312;
  float v313;
  _BOOL8 v314;
  unint64_t v315;
  unint64_t v316;
  void *v317;
  void *v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint8x8_t v322;
  unint64_t v323;
  uint8x8_t v324;
  uint64_t v325;
  _QWORD *j;
  unint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  unint64_t v330;
  void *v331;
  unint64_t **v332;
  unint64_t **v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  uint8x8_t v339;
  _QWORD *v340;
  _QWORD *k;
  unint64_t v342;
  _QWORD *v343;
  float v344;
  _BOOL8 v345;
  unint64_t v346;
  unint64_t v347;
  int8x8_t v348;
  void *v349;
  void *v350;
  uint64_t v351;
  _QWORD **v352;
  unint64_t v353;
  uint8x8_t v354;
  unint64_t v355;
  uint8x8_t v356;
  uint64_t v357;
  _QWORD *m;
  unint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  void *v363;
  unint64_t **v364;
  std::string::size_type v365;
  unint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint8x8_t v371;
  _QWORD *v372;
  _QWORD *n;
  unint64_t v374;
  _QWORD *v375;
  float v376;
  _BOOL8 v377;
  unint64_t v378;
  unint64_t v379;
  int8x8_t v380;
  void *v381;
  void *v382;
  uint64_t v383;
  _QWORD **v384;
  unint64_t v385;
  uint8x8_t v386;
  unint64_t v387;
  uint8x8_t v388;
  uint64_t v389;
  _QWORD *ii;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  unint64_t v394;
  void *v395;
  std::string::size_type **v396;
  std::string::size_type **v397;
  std::string::size_type *v398;
  std::string::size_type v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint8x8_t v404;
  _QWORD *v405;
  _QWORD *jj;
  unint64_t v407;
  _QWORD *v408;
  float v409;
  _BOOL8 v410;
  unint64_t v411;
  unint64_t v412;
  int8x8_t v413;
  void *v414;
  void *v415;
  uint64_t v416;
  _QWORD **v417;
  unint64_t v418;
  uint8x8_t v419;
  unint64_t v420;
  uint8x8_t v421;
  uint64_t v422;
  _QWORD *kk;
  unint64_t v424;
  _QWORD *v425;
  _QWORD *v426;
  unint64_t v427;
  void *v428;
  unint64_t EntityAtPrimPath;
  uint64_t v430;
  uint64_t v431;
  pxrInternal__aapl__pxrReserved__::UsdStage *v432;
  char HasAuthoredMetadata;
  unsigned int *v434;
  unsigned int v435;
  const char *v436;
  id *v437;
  int v438;
  unsigned int *v439;
  unsigned int v440;
  char v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  std::string *v446;
  uint64_t v447;
  uint64_t **v448;
  uint64_t *v449;
  void *ServiceLocator;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  std::string::size_type v459;
  std::string *v460;
  uint64_t *v461;
  uint64_t *v462;
  _QWORD *v463;
  uint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  realityio::AnimationSceneAssetBuilder *v469;
  uint64_t **v470;
  realityio::Inputs *v471;
  uint64_t v472;
  void *v473;
  void *v474;
  int v475;
  unint64_t v476;
  __int128 v477;
  __int128 v478;
  int v479;
  void *v480[3];
  void *v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  void *v484[2];
  __int128 v485;
  float v486;
  __int128 v487;
  __int128 v488;
  float v489;
  __int128 v490;
  __int128 v491;
  float v492;
  _BYTE v493[32];
  _BYTE v494[15];
  std::string::value_type v495;
  _BYTE v496[32];
  _BYTE v497[15];
  std::string::value_type v498;
  uint64_t v499;
  std::string v500;
  _BYTE v501[15];
  std::string::value_type v502;
  _BYTE v503[32];
  _BYTE v504[15];
  std::string::value_type v505;
  char v506[8];
  __int128 v507;
  std::string::size_type v508;
  _BYTE v509[15];
  std::string::value_type v510;
  _BYTE v511[16];
  char v512[8];
  unint64_t v513;
  CFTypeRef cf;
  __int128 v515;
  std::string v516;
  void *v517[2];
  char v518;
  _QWORD v519[3];
  std::string *v520;
  _BYTE __p[48];
  std::string v522;
  __int128 v523;
  char v524;
  std::string v525;
  std::string v526;
  std::string v527;
  __int128 v528;
  char v529;
  id v530;
  uint64_t v531;
  uint64_t v532;

  v532 = *MEMORY[0x24BDAC8D0];
  v4 = realityio::EntityBuilder::kRootEntityInputName(this);
  v471 = (realityio::Inputs *)a2;
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(a2, v4, (uint64_t)v512);
  if (v512[0] && v513)
  {
    v5 = realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v511, 2032, (uint64_t)this);
    v6 = realityio::SkeletalAnimationAggregationBuilder::kOutputName(v5);
    v499 = 0;
    v500.__r_.__value_.__r.__words[0] = 0;
    v7 = *(std::__shared_weak_count **)(a2 + 24);
    if (v7)
    {
      v500.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__shared_weak_count::lock(v7);
      if (v500.__r_.__value_.__r.__words[0])
        v499 = *(_QWORD *)(a2 + 16);
    }
    v469 = this;
    MEMORY[0x2348B2764](&v500.__r_.__value_.__r.__words[1], v6);
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a2 + 8), &v499);
    v9 = v8;
    v11 = v10;
    if (v8 != v10)
    {
      memset(v496, 0, 24);
      while (1)
      {
        v12 = *((_QWORD *)v9 + 5);
        v14 = *(std::mutex **)(v12 + 16);
        v13 = *(_QWORD *)(v12 + 24);
        *(_QWORD *)v493 = v14;
        *(_QWORD *)&v493[8] = v13;
        if (v13)
        {
          v15 = (unint64_t *)(v13 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if ((*((_QWORD *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const void **)((*((_QWORD *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v14, EmptyString, (uint64_t)&v525);
        if (v525.__r_.__value_.__s.__data_[0])
        {
          v18 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (v525.__r_.__value_.__r.__words[2])
          {
            v19 = (unint64_t *)(v525.__r_.__value_.__r.__words[2] + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            do
              v21 = __ldxr(v19);
            while (__stxr(v21 + 1, v19));
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v18;
            do
              v22 = __ldaxr(v19);
            while (__stlxr(v22 - 1, v19));
            if (!v22)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v18 + 1) + 16))(*((_QWORD *)&v18 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v18 + 1));
            }
          }
          else
          {
            __p[0] = 1;
            *(_QWORD *)&__p[8] = v525.__r_.__value_.__l.__size_;
            *(_QWORD *)&__p[16] = 0;
          }
        }
        else
        {
          *(_OWORD *)v503 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v503[16], v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v503[16] = *(_OWORD *)&v526.__r_.__value_.__l.__data_;
            *(_QWORD *)v504 = *((_QWORD *)&v526.__r_.__value_.__l + 2);
          }
          __p[0] = 0;
          *(_OWORD *)&__p[8] = *(_OWORD *)v503;
          *(_OWORD *)&__p[24] = *(_OWORD *)&v503[16];
          *(_QWORD *)&__p[40] = *(_QWORD *)v504;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v525);
        if (*(_QWORD *)&v493[8])
        {
          v23 = (unint64_t *)(*(_QWORD *)&v493[8] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&v493[8] + 16))(*(_QWORD *)&v493[8]);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v493[8]);
          }
        }
        if (!__p[0])
          goto LABEL_57;
        v25 = *(_QWORD *)&v496[8];
        if (*(_QWORD *)&v496[8] < *(_QWORD *)&v496[16])
        {
          **(_QWORD **)&v496[8] = *(_QWORD *)&__p[8];
          v26 = *(_QWORD *)&__p[16];
          *(_QWORD *)(v25 + 8) = *(_QWORD *)&__p[16];
          if (v26)
          {
            v27 = (unint64_t *)(v26 + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (_OWORD *)(v25 + 16);
          goto LABEL_56;
        }
        v30 = (uint64_t)(*(_QWORD *)&v496[8] - *(_QWORD *)v496) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v32 = *(_QWORD *)&v496[16] - *(_QWORD *)v496;
        if ((uint64_t)(*(_QWORD *)&v496[16] - *(_QWORD *)v496) >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v33);
        v36 = &v34[16 * v30];
        v37 = *(_QWORD *)&__p[16];
        *(_OWORD *)v36 = *(_OWORD *)&__p[8];
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v41 = *(_QWORD **)&v496[8];
        v40 = *(_QWORD **)v496;
        if (*(_QWORD *)&v496[8] == *(_QWORD *)v496)
        {
          v29 = v36 + 16;
          *(_QWORD *)v496 = v36;
          *(_QWORD *)&v496[8] = v36 + 16;
          *(_QWORD *)&v496[16] = &v34[16 * v35];
          if (!v41)
            goto LABEL_56;
        }
        else
        {
          v42 = v36;
          do
          {
            v43 = *((_OWORD *)v41 - 1);
            v41 -= 2;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *v41 = 0;
            v41[1] = 0;
          }
          while (v41 != v40);
          v44 = *(_QWORD *)&v496[8];
          v41 = *(_QWORD **)v496;
          v29 = v36 + 16;
          *(_QWORD *)v496 = v42;
          *(_QWORD *)&v496[8] = v36 + 16;
          *(_QWORD *)&v496[16] = &v34[16 * v35];
          while ((_QWORD *)v44 != v41)
          {
            v44 -= 16;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v44);
          }
          if (!v41)
            goto LABEL_56;
        }
        operator delete(v41);
LABEL_56:
        *(_QWORD *)&v496[8] = v29;
LABEL_57:
        v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        v9 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v9;
        if (v9 == v11)
        {
          memset(&v525, 0, sizeof(v525));
          v46 = *(_QWORD **)&v496[8];
          v45 = *(_QWORD **)v496;
          a2 = (unint64_t)&v525;
          *(_QWORD *)__p = &v525;
          __p[8] = 0;
          v47 = *(_QWORD *)&v496[8] - *(_QWORD *)v496;
          if (*(_QWORD *)&v496[8] == *(_QWORD *)v496)
          {
            v53 = 0;
            v48 = 0;
          }
          else
          {
            if (v47 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v47 >> 4);
            v525.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
            v525.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
            v525.__r_.__value_.__r.__words[2] = (std::string::size_type)v48 + 16 * v49;
            v47 = (uint64_t)v48;
            do
            {
              *(_QWORD *)v47 = *v45;
              v50 = v45[1];
              *(_QWORD *)(v47 + 8) = v50;
              if (v50)
              {
                v51 = (unint64_t *)(v50 + 8);
                do
                  v52 = __ldxr(v51);
                while (__stxr(v52 + 1, v51));
              }
              v45 += 2;
              v47 += 16;
            }
            while (v45 != v46);
            v53 = v525.__r_.__value_.__r.__words[2];
          }
          v506[0] = 1;
          *(_QWORD *)&v507 = v48;
          *((_QWORD *)&v507 + 1) = v47;
          v508 = v53;
          memset(&v525, 0, sizeof(v525));
          *(_QWORD *)__p = &v525;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v525.__r_.__value_.__r.__words[0] = (std::string::size_type)v496;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v525);
          goto LABEL_85;
        }
      }
    }
    std::operator+<char>();
    v54 = std::string::append((std::string *)v493, ") at prim path (");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(_QWORD *)&v496[16] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
    *(_OWORD *)v496 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v57 = *(char *)(String + 23);
    if (v57 >= 0)
      v58 = (const std::string::value_type *)String;
    else
      v58 = *(const std::string::value_type **)String;
    if (v57 >= 0)
      v59 = *(unsigned __int8 *)(String + 23);
    else
      v59 = *(_QWORD *)(String + 8);
    v60 = std::string::append((std::string *)v496, v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    *(_QWORD *)&v503[16] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
    *(_OWORD *)v503 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append((std::string *)v503, ")");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = (realityio::TransformAnimationAggregationBuilder *)realityio::DetailedError::DetailedError(&v525, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v507 = *(_OWORD *)&v525.__r_.__value_.__l.__data_;
    v65 = v525.__r_.__value_.__r.__words[2];
    *(_QWORD *)v509 = v526.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v509[7] = *(std::string::size_type *)((char *)v526.__r_.__value_.__r.__words + 7);
    v66 = v526.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v526.__r_.__value_.__l.__data_ = 0uLL;
    v525.__r_.__value_.__r.__words[2] = 0;
    v506[0] = 0;
    v508 = v65;
    v510 = v66;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v503[23] & 0x80000000) != 0)
      operator delete(*(void **)v503);
    if ((v496[23] & 0x80000000) != 0)
      operator delete(*(void **)v496);
    if ((v493[23] & 0x80000000) != 0)
      operator delete(*(void **)v493);
LABEL_85:
    if ((v500.__r_.__value_.__s.__data_[8] & 7) != 0)
    {
      v67 = (unsigned int *)(v500.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
    v69 = (std::__shared_weak_count *)v500.__r_.__value_.__r.__words[0];
    if (v500.__r_.__value_.__r.__words[0])
    {
      v70 = (unint64_t *)(v500.__r_.__value_.__r.__words[0] + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = realityio::TransformAnimationAggregationBuilder::kOutputName(v64);
    v499 = 0;
    v500.__r_.__value_.__r.__words[0] = 0;
    v73 = (std::__shared_weak_count *)*((_QWORD *)v471 + 3);
    if (v73)
    {
      v500.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__shared_weak_count::lock(v73);
      if (v500.__r_.__value_.__r.__words[0])
        v499 = *((_QWORD *)v471 + 2);
    }
    MEMORY[0x2348B2764](&v500.__r_.__value_.__r.__words[1], v72);
    v74 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v471 + 1), &v499);
    v75 = (_QWORD *)v74;
    v77 = v76;
    if ((_QWORD *)v74 != v76)
    {
      v78 = 0;
      v79 = 0;
      v80 = 0;
      while (1)
      {
        v81 = v75[5];
        v83 = *(std::mutex **)(v81 + 16);
        v82 = *(std::__shared_weak_count **)(v81 + 24);
        *(_QWORD *)v496 = v83;
        *(_QWORD *)&v496[8] = v82;
        if (v82)
        {
          p_shared_owners = (unint64_t *)&v82->__shared_owners_;
          do
            v85 = __ldxr(p_shared_owners);
          while (__stxr(v85 + 1, p_shared_owners));
        }
        if ((v75[7] & 0xFFFFFFFFFFFFFFF8) != 0)
          v86 = (const void **)((v75[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v86 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v74);
        realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(v83, v86, (uint64_t)&v525);
        v87 = v525.__r_.__value_.__s.__data_[0];
        if (v525.__r_.__value_.__s.__data_[0])
        {
          size = v525.__r_.__value_.__l.__size_;
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[16], v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
            size = *(_QWORD *)__p;
            v473 = *(void **)&__p[16];
            LOBYTE(a2) = __p[39];
            if (!v525.__r_.__value_.__s.__data_[0] && SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v526.__r_.__value_.__l.__data_);
          }
          else
          {
            *(std::string *)&__p[16] = v526;
            size = *(_QWORD *)__p;
            v473 = (void *)v526.__r_.__value_.__r.__words[0];
            LOBYTE(a2) = *((_BYTE *)&v526.__r_.__value_.__s + 23);
          }
        }
        if (!v82)
          goto LABEL_115;
        v89 = (unint64_t *)&v82->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
          if (!v87)
          {
LABEL_127:
            if ((a2 & 0x80) != 0)
              operator delete(v473);
            goto LABEL_136;
          }
        }
        else
        {
LABEL_115:
          if (!v87)
            goto LABEL_127;
        }
        if ((unint64_t)v79 >= v80)
        {
          v91 = v79 - v78;
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v80 - (_QWORD)v78) >> 2 > v92)
            v92 = (uint64_t)(v80 - (_QWORD)v78) >> 2;
          if (v80 - (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v92;
          if (v74)
            v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v74);
          else
            v93 = 0;
          v94 = (std::string::size_type *)(v74 + 8 * v91);
          *v94 = size;
          v95 = v94 + 1;
          while (v79 != v78)
          {
            v96 = *--v79;
            *--v94 = v96;
          }
          v80 = v74 + 8 * v93;
          if (v78)
            operator delete(v78);
          v78 = v94;
          v79 = v95;
        }
        else
        {
          *v79++ = size;
        }
LABEL_136:
        v75 = (_QWORD *)*v75;
        if (v75 == v77)
        {
          v97 = (char *)v79 - (char *)v78;
          if (v79 == v78)
          {
            v98 = 0;
            v100 = 0;
            a2 = 0;
          }
          else
          {
            if (v97 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v97 >> 3);
            a2 = (unint64_t)&v98[8 * v99];
            v74 = (unint64_t)memmove(v98, v78, (char *)v79 - (char *)v78);
            v100 = &v98[8 * (v97 >> 3)];
          }
          v503[0] = 1;
          *(_QWORD *)&v503[8] = v98;
          *(_QWORD *)&v503[16] = v100;
          *(_QWORD *)&v503[24] = a2;
          if (v78)
          {
            v112 = v78;
LABEL_157:
            operator delete(v112);
          }
          goto LABEL_158;
        }
      }
    }
    std::operator+<char>();
    v101 = std::string::append((std::string *)&v515, ") at prim path (");
    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    *(_QWORD *)&v493[16] = *((_QWORD *)&v101->__r_.__value_.__l + 2);
    *(_OWORD *)v493 = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    v103 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v471 + 32));
    v104 = *(char *)(v103 + 23);
    if (v104 >= 0)
      v105 = (const std::string::value_type *)v103;
    else
      v105 = *(const std::string::value_type **)v103;
    if (v104 >= 0)
      v106 = *(unsigned __int8 *)(v103 + 23);
    else
      v106 = *(_QWORD *)(v103 + 8);
    v107 = std::string::append((std::string *)v493, v105, v106);
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    *(_QWORD *)&v496[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
    *(_OWORD *)v496 = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    v109 = std::string::append((std::string *)v496, ")");
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v109->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    v74 = (unint64_t)realityio::DetailedError::DetailedError(&v525, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(std::string *)&v503[8] = v525;
    *(_QWORD *)v504 = v526.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v504[7] = *(std::string::size_type *)((char *)v526.__r_.__value_.__r.__words + 7);
    v111 = v526.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v526.__r_.__value_.__l.__data_ = 0uLL;
    v525.__r_.__value_.__r.__words[2] = 0;
    v503[0] = 0;
    v505 = v111;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v496[23] & 0x80000000) != 0)
      operator delete(*(void **)v496);
    if ((v493[23] & 0x80000000) != 0)
      operator delete(*(void **)v493);
    if (v516.__r_.__value_.__s.__data_[7] < 0)
    {
      v112 = (std::string::size_type *)v515;
      goto LABEL_157;
    }
LABEL_158:
    if ((v500.__r_.__value_.__s.__data_[8] & 7) != 0)
    {
      v113 = (unsigned int *)(v500.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
      do
        v114 = __ldxr(v113);
      while (__stlxr(v114 - 2, v113));
    }
    v115 = (std::__shared_weak_count *)v500.__r_.__value_.__r.__words[0];
    if (v500.__r_.__value_.__r.__words[0])
    {
      v116 = (unint64_t *)(v500.__r_.__value_.__r.__words[0] + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = realityio::SpatialAudioComponentBuilder::kOutputName((realityio::SpatialAudioComponentBuilder *)v74);
    *(_OWORD *)v496 = 0uLL;
    v119 = (std::__shared_weak_count *)*((_QWORD *)v471 + 3);
    if (v119)
    {
      *(_QWORD *)&v496[8] = std::__shared_weak_count::lock(v119);
      if (*(_QWORD *)&v496[8])
        *(_QWORD *)v496 = *((_QWORD *)v471 + 2);
    }
    MEMORY[0x2348B2764](&v496[16], v118);
    v120 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v471 + 1), v496);
    v121 = (_QWORD *)v120;
    v123 = v122;
    if ((_QWORD *)v120 != v122)
    {
      v124 = 0;
      v125 = 0;
      v126 = 0;
      while (1)
      {
        v127 = v121[5];
        v129 = *(std::mutex **)(v127 + 16);
        v128 = *(std::__shared_weak_count **)(v127 + 24);
        *(_QWORD *)v493 = v129;
        *(_QWORD *)&v493[8] = v128;
        if (v128)
        {
          v130 = (unint64_t *)&v128->__shared_owners_;
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        if ((v121[7] & 0xFFFFFFFFFFFFFFF8) != 0)
          v132 = (const void **)((v121[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v132 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v120);
        realityio::Outputs::getRawValue<realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*>(v129, v132, (uint64_t)&v525);
        v133 = v525.__r_.__value_.__s.__data_[0];
        if (v525.__r_.__value_.__s.__data_[0])
        {
          v134 = v525.__r_.__value_.__l.__size_;
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[16], v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
            v134 = *(_QWORD *)__p;
            v473 = *(void **)&__p[16];
            LOBYTE(a2) = __p[39];
            if (!v525.__r_.__value_.__s.__data_[0] && SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v526.__r_.__value_.__l.__data_);
          }
          else
          {
            *(std::string *)&__p[16] = v526;
            v134 = *(_QWORD *)__p;
            v473 = (void *)v526.__r_.__value_.__r.__words[0];
            LOBYTE(a2) = *((_BYTE *)&v526.__r_.__value_.__s + 23);
          }
        }
        if (!v128)
          goto LABEL_188;
        v135 = (unint64_t *)&v128->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
          if (!v133)
          {
LABEL_200:
            if ((a2 & 0x80) != 0)
              operator delete(v473);
            goto LABEL_209;
          }
        }
        else
        {
LABEL_188:
          if (!v133)
            goto LABEL_200;
        }
        if ((unint64_t)v125 >= v126)
        {
          v137 = v125 - v124;
          v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v126 - (_QWORD)v124) >> 2 > v138)
            v138 = (uint64_t)(v126 - (_QWORD)v124) >> 2;
          if (v126 - (unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
            v120 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v120 = v138;
          if (v120)
            v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v120);
          else
            v139 = 0;
          v140 = (std::string::size_type *)(v120 + 8 * v137);
          *v140 = v134;
          v141 = v140 + 1;
          while (v125 != v124)
          {
            v142 = *--v125;
            *--v140 = v142;
          }
          v126 = v120 + 8 * v139;
          if (v124)
            operator delete(v124);
          v124 = v140;
          v125 = v141;
        }
        else
        {
          *v125++ = v134;
        }
LABEL_209:
        v121 = (_QWORD *)*v121;
        if (v121 == v123)
        {
          v143 = (char *)v125 - (char *)v124;
          if (v125 == v124)
          {
            v144 = 0;
            v146 = 0;
            a2 = 0;
          }
          else
          {
            if (v143 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v144 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v143 >> 3);
            a2 = (unint64_t)v144 + 8 * v145;
            v120 = (unint64_t)memmove(v144, v124, (char *)v125 - (char *)v124);
            v146 = (std::string::size_type)v144 + 8 * (v143 >> 3);
          }
          LOBYTE(v499) = 1;
          v500.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
          v500.__r_.__value_.__l.__size_ = v146;
          v500.__r_.__value_.__r.__words[2] = a2;
          if (v124)
          {
            v158 = v124;
LABEL_230:
            operator delete(v158);
          }
          goto LABEL_231;
        }
      }
    }
    std::operator+<char>();
    v147 = std::string::append((std::string *)&v490, ") at prim path (");
    v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
    v516.__r_.__value_.__r.__words[0] = v147->__r_.__value_.__r.__words[2];
    v515 = v148;
    v147->__r_.__value_.__l.__size_ = 0;
    v147->__r_.__value_.__r.__words[2] = 0;
    v147->__r_.__value_.__r.__words[0] = 0;
    v149 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v471 + 32));
    v150 = *(char *)(v149 + 23);
    if (v150 >= 0)
      v151 = (const std::string::value_type *)v149;
    else
      v151 = *(const std::string::value_type **)v149;
    if (v150 >= 0)
      v152 = *(unsigned __int8 *)(v149 + 23);
    else
      v152 = *(_QWORD *)(v149 + 8);
    v153 = std::string::append((std::string *)&v515, v151, v152);
    v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
    *(_QWORD *)&v493[16] = *((_QWORD *)&v153->__r_.__value_.__l + 2);
    *(_OWORD *)v493 = v154;
    v153->__r_.__value_.__l.__size_ = 0;
    v153->__r_.__value_.__r.__words[2] = 0;
    v153->__r_.__value_.__r.__words[0] = 0;
    v155 = std::string::append((std::string *)v493, ")");
    v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v155->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v156;
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    v120 = (unint64_t)realityio::DetailedError::DetailedError(&v525, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v500 = v525;
    *(_QWORD *)v501 = v526.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v501[7] = *(std::string::size_type *)((char *)v526.__r_.__value_.__r.__words + 7);
    v157 = v526.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v526.__r_.__value_.__l.__data_ = 0uLL;
    v525.__r_.__value_.__r.__words[2] = 0;
    LOBYTE(v499) = 0;
    v502 = v157;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v493[23] & 0x80000000) != 0)
      operator delete(*(void **)v493);
    if (v516.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v515);
    if (SBYTE7(v491) < 0)
    {
      v158 = (std::string::size_type *)v490;
      goto LABEL_230;
    }
LABEL_231:
    if ((v496[16] & 7) != 0)
    {
      v159 = (unsigned int *)(*(_QWORD *)&v496[16] & 0xFFFFFFFFFFFFFFF8);
      do
        v160 = __ldxr(v159);
      while (__stlxr(v160 - 2, v159));
    }
    v161 = *(std::__shared_weak_count **)&v496[8];
    if (*(_QWORD *)&v496[8])
    {
      v162 = (unint64_t *)(*(_QWORD *)&v496[8] + 8);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v164 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName((realityio::SkeletalAnimationAggregationBuilder *)v120);
    v515 = 0uLL;
    v165 = (std::__shared_weak_count *)*((_QWORD *)v471 + 3);
    if (v165)
    {
      *((_QWORD *)&v515 + 1) = std::__shared_weak_count::lock(v165);
      if (*((_QWORD *)&v515 + 1))
        *(_QWORD *)&v515 = *((_QWORD *)v471 + 2);
    }
    MEMORY[0x2348B2764](&v516, v164);
    v166 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v471 + 1), &v515);
    v167 = v166;
    v169 = v168;
    if (v166 != v168)
    {
      v490 = 0uLL;
      *(_QWORD *)&v491 = 0;
      while (1)
      {
        v170 = *((_QWORD *)v167 + 5);
        v172 = *(std::mutex **)(v170 + 16);
        v171 = *(_QWORD *)(v170 + 24);
        *(_QWORD *)&v487 = v172;
        *((_QWORD *)&v487 + 1) = v171;
        if (v171)
        {
          v173 = (unint64_t *)(v171 + 8);
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
        }
        if ((*((_QWORD *)v167 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
          v175 = (const void **)((*((_QWORD *)v167 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v175 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v166);
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v172, v175, (uint64_t)&v525);
        if (v525.__r_.__value_.__s.__data_[0])
        {
          v176 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (v525.__r_.__value_.__r.__words[2])
          {
            v177 = (unint64_t *)(v525.__r_.__value_.__r.__words[2] + 8);
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
            do
              v179 = __ldxr(v177);
            while (__stxr(v179 + 1, v177));
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v176;
            do
              v180 = __ldaxr(v177);
            while (__stlxr(v180 - 1, v177));
            if (!v180)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v176 + 1) + 16))(*((_QWORD *)&v176 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v176 + 1));
            }
          }
          else
          {
            __p[0] = 1;
            *(_QWORD *)&__p[8] = v525.__r_.__value_.__l.__size_;
            *(_QWORD *)&__p[16] = 0;
          }
        }
        else
        {
          *(_OWORD *)v493 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v493[16], v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v493[16] = *(_OWORD *)&v526.__r_.__value_.__l.__data_;
            *(_QWORD *)v494 = *((_QWORD *)&v526.__r_.__value_.__l + 2);
          }
          __p[0] = 0;
          *(_OWORD *)&__p[8] = *(_OWORD *)v493;
          *(_OWORD *)&__p[24] = *(_OWORD *)&v493[16];
          *(_QWORD *)&__p[40] = *(_QWORD *)v494;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v525);
        if (*((_QWORD *)&v487 + 1))
        {
          v181 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v487 + 1) + 16))(*((_QWORD *)&v487 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v487 + 1));
          }
        }
        if (!__p[0])
          goto LABEL_293;
        v183 = *((_QWORD *)&v490 + 1);
        if (*((_QWORD *)&v490 + 1) < (unint64_t)v491)
        {
          **((_QWORD **)&v490 + 1) = *(_QWORD *)&__p[8];
          v184 = *(_QWORD *)&__p[16];
          *(_QWORD *)(v183 + 8) = *(_QWORD *)&__p[16];
          if (v184)
          {
            v185 = (unint64_t *)(v184 + 8);
            do
              v186 = __ldxr(v185);
            while (__stxr(v186 + 1, v185));
          }
          v187 = (_OWORD *)(v183 + 16);
          goto LABEL_292;
        }
        v188 = (uint64_t)(*((_QWORD *)&v490 + 1) - v490) >> 4;
        v189 = v188 + 1;
        if ((unint64_t)(v188 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v190 = v491 - v490;
        if ((uint64_t)(v491 - v490) >> 3 > v189)
          v189 = v190 >> 3;
        if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
          v191 = 0xFFFFFFFFFFFFFFFLL;
        else
          v191 = v189;
        v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v191);
        v194 = &v192[16 * v188];
        v195 = *(_QWORD *)&__p[16];
        *(_OWORD *)v194 = *(_OWORD *)&__p[8];
        if (v195)
        {
          v196 = (unint64_t *)(v195 + 8);
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        v199 = (_QWORD *)*((_QWORD *)&v490 + 1);
        v198 = (_QWORD *)v490;
        if (*((_QWORD *)&v490 + 1) == (_QWORD)v490)
        {
          v187 = v194 + 16;
          *(_QWORD *)&v490 = v194;
          *((_QWORD *)&v490 + 1) = v194 + 16;
          *(_QWORD *)&v491 = &v192[16 * v193];
          if (!v199)
            goto LABEL_292;
        }
        else
        {
          v200 = v194;
          do
          {
            v201 = *((_OWORD *)v199 - 1);
            v199 -= 2;
            *((_OWORD *)v200 - 1) = v201;
            v200 -= 16;
            *v199 = 0;
            v199[1] = 0;
          }
          while (v199 != v198);
          v202 = *((_QWORD *)&v490 + 1);
          v199 = (_QWORD *)v490;
          v187 = v194 + 16;
          *(_QWORD *)&v490 = v200;
          *((_QWORD *)&v490 + 1) = v194 + 16;
          *(_QWORD *)&v491 = &v192[16 * v193];
          while ((_QWORD *)v202 != v199)
          {
            v202 -= 16;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v202);
          }
          if (!v199)
            goto LABEL_292;
        }
        operator delete(v199);
LABEL_292:
        *((_QWORD *)&v490 + 1) = v187;
LABEL_293:
        v166 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        v167 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v167;
        if (v167 == v169)
        {
          memset(&v525, 0, sizeof(v525));
          v204 = (_QWORD *)*((_QWORD *)&v490 + 1);
          v203 = (_QWORD *)v490;
          a2 = (unint64_t)&v525;
          *(_QWORD *)__p = &v525;
          __p[8] = 0;
          v205 = *((_QWORD *)&v490 + 1) - v490;
          if (*((_QWORD *)&v490 + 1) == (_QWORD)v490)
          {
            v211 = 0;
            v206 = 0;
          }
          else
          {
            if (v205 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v206 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v205 >> 4);
            v525.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
            v525.__r_.__value_.__l.__size_ = (std::string::size_type)v206;
            v525.__r_.__value_.__r.__words[2] = (std::string::size_type)v206 + 16 * v207;
            v205 = (uint64_t)v206;
            do
            {
              *(_QWORD *)v205 = *v203;
              v208 = v203[1];
              *(_QWORD *)(v205 + 8) = v208;
              if (v208)
              {
                v209 = (unint64_t *)(v208 + 8);
                do
                  v210 = __ldxr(v209);
                while (__stxr(v210 + 1, v209));
              }
              v203 += 2;
              v205 += 16;
            }
            while (v203 != v204);
            v211 = v525.__r_.__value_.__r.__words[2];
          }
          v496[0] = 1;
          *(_QWORD *)&v496[8] = v206;
          *(_QWORD *)&v496[16] = v205;
          *(_QWORD *)&v496[24] = v211;
          memset(&v525, 0, sizeof(v525));
          *(_QWORD *)__p = &v525;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v525.__r_.__value_.__r.__words[0] = (std::string::size_type)&v490;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v525);
          goto LABEL_321;
        }
      }
    }
    std::operator+<char>();
    v212 = std::string::append((std::string *)&v487, ") at prim path (");
    v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
    *(_QWORD *)&v491 = *((_QWORD *)&v212->__r_.__value_.__l + 2);
    v490 = v213;
    v212->__r_.__value_.__l.__size_ = 0;
    v212->__r_.__value_.__r.__words[2] = 0;
    v212->__r_.__value_.__r.__words[0] = 0;
    v214 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v471 + 32));
    v215 = *(char *)(v214 + 23);
    if (v215 >= 0)
      v216 = (const std::string::value_type *)v214;
    else
      v216 = *(const std::string::value_type **)v214;
    if (v215 >= 0)
      v217 = *(unsigned __int8 *)(v214 + 23);
    else
      v217 = *(_QWORD *)(v214 + 8);
    v218 = std::string::append((std::string *)&v490, v216, v217);
    v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
    *(_QWORD *)&v493[16] = *((_QWORD *)&v218->__r_.__value_.__l + 2);
    *(_OWORD *)v493 = v219;
    v218->__r_.__value_.__l.__size_ = 0;
    v218->__r_.__value_.__r.__words[2] = 0;
    v218->__r_.__value_.__r.__words[0] = 0;
    v220 = std::string::append((std::string *)v493, ")");
    v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v220->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v221;
    v220->__r_.__value_.__l.__size_ = 0;
    v220->__r_.__value_.__r.__words[2] = 0;
    v220->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v525, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(std::string *)&v496[8] = v525;
    *(_QWORD *)v497 = v526.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v497[7] = *(std::string::size_type *)((char *)v526.__r_.__value_.__r.__words + 7);
    v222 = v526.__r_.__value_.__s.__data_[15];
    *(_OWORD *)&v526.__r_.__value_.__l.__data_ = 0uLL;
    v525.__r_.__value_.__r.__words[2] = 0;
    v496[0] = 0;
    v498 = v222;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if ((v493[23] & 0x80000000) != 0)
      operator delete(*(void **)v493);
    if (SBYTE7(v491) < 0)
      operator delete((void *)v490);
    if (SBYTE7(v488) < 0)
      operator delete((void *)v487);
LABEL_321:
    if ((v516.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v223 = (unsigned int *)(v516.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v224 = __ldxr(v223);
      while (__stlxr(v224 - 2, v223));
    }
    v225 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
    if (*((_QWORD *)&v515 + 1))
    {
      v226 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v517, "arbitraryComponentAnimationLibrary");
    v484[0] = 0;
    v484[1] = 0;
    v228 = (std::__shared_weak_count *)*((_QWORD *)v471 + 3);
    if (v228)
    {
      v484[1] = std::__shared_weak_count::lock(v228);
      if (v484[1])
        v484[0] = *((void **)v471 + 2);
    }
    MEMORY[0x2348B2764](&v485, v517);
    v229 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v471 + 1), v484);
    v230 = v229;
    prime = (unint64_t)v231;
    if (v229 == v231)
    {
      std::operator+<char>();
      v285 = std::string::append((std::string *)&v487, ") at prim path (");
      v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
      *(_QWORD *)&v491 = *((_QWORD *)&v285->__r_.__value_.__l + 2);
      v490 = v286;
      v285->__r_.__value_.__l.__size_ = 0;
      v285->__r_.__value_.__r.__words[2] = 0;
      v285->__r_.__value_.__r.__words[0] = 0;
      v287 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v471 + 32));
      v288 = *(char *)(v287 + 23);
      if (v288 >= 0)
        v289 = (const std::string::value_type *)v287;
      else
        v289 = *(const std::string::value_type **)v287;
      if (v288 >= 0)
        v290 = *(unsigned __int8 *)(v287 + 23);
      else
        v290 = *(_QWORD *)(v287 + 8);
      v291 = std::string::append((std::string *)&v490, v289, v290);
      v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
      v516.__r_.__value_.__r.__words[0] = v291->__r_.__value_.__r.__words[2];
      v515 = v292;
      v291->__r_.__value_.__l.__size_ = 0;
      v291->__r_.__value_.__r.__words[2] = 0;
      v291->__r_.__value_.__r.__words[0] = 0;
      v293 = std::string::append((std::string *)&v515, ")");
      v294 = *(_OWORD *)&v293->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v293->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v294;
      v293->__r_.__value_.__l.__size_ = 0;
      v293->__r_.__value_.__r.__words[2] = 0;
      v293->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v525, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(std::string *)&v493[8] = v525;
      *(_QWORD *)v494 = v526.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v494[7] = *(std::string::size_type *)((char *)v526.__r_.__value_.__r.__words + 7);
      v295 = v526.__r_.__value_.__s.__data_[15];
      *(_OWORD *)&v526.__r_.__value_.__l.__data_ = 0uLL;
      v525.__r_.__value_.__r.__words[2] = 0;
      v493[0] = 0;
      v495 = v295;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v516.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v515);
      if (SBYTE7(v491) < 0)
        operator delete((void *)v490);
      if (SBYTE7(v488) < 0)
        operator delete((void *)v487);
    }
    else
    {
      v477 = 0uLL;
      *(_QWORD *)&v478 = 0;
      do
      {
        v233 = *((_QWORD *)v230 + 5);
        v235 = *(std::mutex **)(v233 + 16);
        v234 = *(std::__shared_weak_count **)(v233 + 24);
        v481 = v235;
        v482 = v234;
        if (v234)
        {
          v236 = (unint64_t *)&v234->__shared_owners_;
          do
            v237 = __ldxr(v236);
          while (__stxr(v237 + 1, v236));
        }
        if ((*((_QWORD *)v230 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
          v238 = (const void **)((*((_QWORD *)v230 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v238 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v229);
        std::mutex::lock(v235 + 1);
        v239 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v235->__m_.__opaque[32], v238);
        if (&v235->__m_.__opaque[40] == (char *)v239)
        {
          std::operator+<char>();
          v245 = std::string::append((std::string *)&v487, "\" does not exist in the builder outputs");
          v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
          *(_QWORD *)&v491 = *((_QWORD *)&v245->__r_.__value_.__l + 2);
          v490 = v246;
          v245->__r_.__value_.__l.__size_ = 0;
          v245->__r_.__value_.__r.__words[2] = 0;
          v245->__r_.__value_.__r.__words[0] = 0;
          realityio::DetailedError::DetailedError(&v515, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v490);
          *(_OWORD *)&v525.__r_.__value_.__r.__words[1] = v515;
          v526.__r_.__value_.__l.__size_ = v516.__r_.__value_.__l.__size_;
          v247 = v516.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v526.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v516.__r_.__value_.__r.__words[1] + 7);
          v248 = HIBYTE(v516.__r_.__value_.__r.__words[2]);
          memset(&v516, 0, sizeof(v516));
          v525.__r_.__value_.__s.__data_[0] = 0;
          v526.__r_.__value_.__r.__words[0] = v247;
          *((_BYTE *)&v526.__r_.__value_.__s + 23) = v248;
          if (SBYTE7(v491) < 0)
            operator delete((void *)v490);
          if (SBYTE7(v488) < 0)
            operator delete((void *)v487);
        }
        else
        {
          v240 = *(_QWORD *)(v239 + 56);
          v242 = *(_QWORD *)(v240 + 8);
          v241 = *(_QWORD *)(v240 + 16);
          if (v241)
          {
            v243 = (unint64_t *)(v241 + 8);
            do
              v244 = __ldxr(v243);
            while (__stxr(v244 + 1, v243));
          }
          v525.__r_.__value_.__s.__data_[0] = 1;
          v525.__r_.__value_.__l.__size_ = v242;
          v525.__r_.__value_.__r.__words[2] = v241;
        }
        std::mutex::unlock(v235 + 1);
        if (v525.__r_.__value_.__s.__data_[0])
        {
          v249 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (v525.__r_.__value_.__r.__words[2])
          {
            v250 = (unint64_t *)(v525.__r_.__value_.__r.__words[2] + 8);
            do
              v251 = __ldxr(v250);
            while (__stxr(v251 + 1, v250));
            do
              v252 = __ldxr(v250);
            while (__stxr(v252 + 1, v250));
            __p[0] = 1;
            *(_OWORD *)&__p[8] = v249;
            do
              v253 = __ldaxr(v250);
            while (__stlxr(v253 - 1, v250));
            if (!v253)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v249 + 1) + 16))(*((_QWORD *)&v249 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v249 + 1));
            }
          }
          else
          {
            __p[0] = 1;
            *(_QWORD *)&__p[8] = v525.__r_.__value_.__l.__size_;
            *(_QWORD *)&__p[16] = 0;
          }
        }
        else
        {
          v515 = *(_OWORD *)&v525.__r_.__value_.__r.__words[1];
          if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v516, v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
          else
            v516 = v526;
          __p[0] = 0;
          *(_OWORD *)&__p[8] = v515;
          *(std::string *)&__p[24] = v516;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v525);
        if (v482)
        {
          v254 = &v482->__shared_owners_;
          do
            v255 = __ldaxr((unint64_t *)v254);
          while (__stlxr(v255 - 1, (unint64_t *)v254));
          if (!v255)
          {
            ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
            std::__shared_weak_count::__release_weak(v482);
          }
        }
        if (__p[0])
        {
          v256 = *((_QWORD *)&v477 + 1);
          if (*((_QWORD *)&v477 + 1) >= (unint64_t)v478)
          {
            v261 = (uint64_t)(*((_QWORD *)&v477 + 1) - v477) >> 4;
            v262 = v261 + 1;
            if ((unint64_t)(v261 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v263 = v478 - v477;
            if ((uint64_t)(v478 - v477) >> 3 > v262)
              v262 = v263 >> 3;
            if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF0)
              v264 = 0xFFFFFFFFFFFFFFFLL;
            else
              v264 = v262;
            v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v264);
            v267 = &v265[16 * v261];
            v268 = *(_QWORD *)&__p[16];
            *(_OWORD *)v267 = *(_OWORD *)&__p[8];
            if (v268)
            {
              v269 = (unint64_t *)(v268 + 8);
              do
                v270 = __ldxr(v269);
              while (__stxr(v270 + 1, v269));
            }
            v272 = (_QWORD *)*((_QWORD *)&v477 + 1);
            v271 = (_QWORD *)v477;
            if (*((_QWORD *)&v477 + 1) == (_QWORD)v477)
            {
              v260 = v267 + 16;
              *(_QWORD *)&v477 = v267;
              *((_QWORD *)&v477 + 1) = v267 + 16;
              *(_QWORD *)&v478 = &v265[16 * v266];
            }
            else
            {
              v273 = &v265[16 * v261];
              do
              {
                v274 = *((_OWORD *)v272 - 1);
                v272 -= 2;
                *((_OWORD *)v273 - 1) = v274;
                v273 -= 16;
                *v272 = 0;
                v272[1] = 0;
              }
              while (v272 != v271);
              v275 = *((_QWORD *)&v477 + 1);
              v272 = (_QWORD *)v477;
              v260 = v267 + 16;
              *(_QWORD *)&v477 = v273;
              *((_QWORD *)&v477 + 1) = v267 + 16;
              *(_QWORD *)&v478 = &v265[16 * v266];
              while ((_QWORD *)v275 != v272)
              {
                v275 -= 16;
                std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v275);
              }
            }
            if (v272)
              operator delete(v272);
          }
          else
          {
            **((_QWORD **)&v477 + 1) = *(_QWORD *)&__p[8];
            v257 = *(_QWORD *)&__p[16];
            *(_QWORD *)(v256 + 8) = *(_QWORD *)&__p[16];
            if (v257)
            {
              v258 = (unint64_t *)(v257 + 8);
              do
                v259 = __ldxr(v258);
              while (__stxr(v259 + 1, v258));
            }
            v260 = (_OWORD *)(v256 + 16);
          }
          *((_QWORD *)&v477 + 1) = v260;
        }
        v229 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
        v230 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v230;
      }
      while (v230 != (pxrInternal__aapl__pxrReserved__::TfToken *)prime);
      memset(&v525, 0, sizeof(v525));
      v277 = (_QWORD *)*((_QWORD *)&v477 + 1);
      v276 = (_QWORD *)v477;
      a2 = (unint64_t)&v525;
      *(_QWORD *)__p = &v525;
      __p[8] = 0;
      v278 = *((_QWORD *)&v477 + 1) - v477;
      if (*((_QWORD *)&v477 + 1) == (_QWORD)v477)
      {
        v284 = 0;
        v279 = 0;
      }
      else
      {
        if (v278 < 0)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v279 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v278 >> 4);
        v525.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
        v525.__r_.__value_.__l.__size_ = (std::string::size_type)v279;
        v525.__r_.__value_.__r.__words[2] = (std::string::size_type)v279 + 16 * v280;
        v278 = (uint64_t)v279;
        do
        {
          *(_QWORD *)v278 = *v276;
          v281 = v276[1];
          *(_QWORD *)(v278 + 8) = v281;
          if (v281)
          {
            v282 = (unint64_t *)(v281 + 8);
            do
              v283 = __ldxr(v282);
            while (__stxr(v283 + 1, v282));
          }
          v276 += 2;
          v278 += 16;
        }
        while (v276 != v277);
        v284 = v525.__r_.__value_.__r.__words[2];
      }
      v493[0] = 1;
      *(_QWORD *)&v493[8] = v279;
      *(_QWORD *)&v493[16] = v278;
      *(_QWORD *)&v493[24] = v284;
      memset(&v525, 0, sizeof(v525));
      *(_QWORD *)__p = &v525;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v525.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v525);
    }
    if ((v485 & 7) != 0)
    {
      v296 = (unsigned int *)(v485 & 0xFFFFFFFFFFFFFFF8);
      do
        v297 = __ldxr(v296);
      while (__stlxr(v297 - 2, v296));
    }
    v298 = (std::__shared_weak_count *)v484[1];
    if (v484[1])
    {
      v299 = (unint64_t *)((char *)v484[1] + 8);
      do
        v300 = __ldaxr(v299);
      while (__stlxr(v300 - 1, v299));
      if (!v300)
      {
        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
        std::__shared_weak_count::__release_weak(v298);
      }
    }
    if (v518 < 0)
      operator delete(v517[0]);
    v515 = 0u;
    *(_OWORD *)&v516.__r_.__value_.__l.__data_ = 0u;
    LODWORD(v516.__r_.__value_.__r.__words[2]) = 1065353216;
    v490 = 0u;
    v491 = 0u;
    v492 = 1.0;
    v487 = 0u;
    v488 = 0u;
    v489 = 1.0;
    *(_OWORD *)v484 = 0u;
    v485 = 0u;
    v486 = 1.0;
    if (v506[0])
    {
      v302 = (std::string::size_type **)*((_QWORD *)&v507 + 1);
      v301 = (std::string::size_type **)v507;
      if ((_QWORD)v507 != *((_QWORD *)&v507 + 1))
      {
        while (1)
        {
          prime = (unint64_t)*v301;
          v525.__r_.__value_.__r.__words[0] = **v301;
          if (v525.__r_.__value_.__r.__words[0])
          {
            RERetain();
            v303 = v525.__r_.__value_.__r.__words[0];
            prime = (unint64_t)*v301;
          }
          else
          {
            v303 = 0;
          }
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v525);
          v304 = 0x9DDFEA08EB382D69 * (((8 * v303) + 8) ^ HIDWORD(v303));
          v305 = 0x9DDFEA08EB382D69 * (HIDWORD(v303) ^ (v304 >> 47) ^ v304);
          v306 = 0x9DDFEA08EB382D69 * (v305 ^ (v305 >> 47));
          v307 = *((_QWORD *)&v515 + 1);
          if (*((_QWORD *)&v515 + 1))
          {
            v308 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v515 + 8));
            v308.i16[0] = vaddlv_u8(v308);
            if (v308.u32[0] > 1uLL)
            {
              a2 = 0x9DDFEA08EB382D69 * (v305 ^ (v305 >> 47));
              if (v306 >= *((_QWORD *)&v515 + 1))
                a2 = v306 % *((_QWORD *)&v515 + 1);
            }
            else
            {
              a2 = v306 & (*((_QWORD *)&v515 + 1) - 1);
            }
            v309 = *(_QWORD **)(v515 + 8 * a2);
            if (v309)
            {
              for (i = (_QWORD *)*v309; i; i = (_QWORD *)*i)
              {
                v311 = i[1];
                if (v311 == v306)
                {
                  if (i[2] == v303)
                    goto LABEL_505;
                }
                else
                {
                  if (v308.u32[0] > 1uLL)
                  {
                    if (v311 >= *((_QWORD *)&v515 + 1))
                      v311 %= *((_QWORD *)&v515 + 1);
                  }
                  else
                  {
                    v311 &= *((_QWORD *)&v515 + 1) - 1;
                  }
                  if (v311 != a2)
                    break;
                }
              }
            }
          }
          v312 = operator new(0x20uLL);
          *v312 = 0;
          v312[1] = v306;
          v312[2] = v303;
          v312[3] = prime;
          v313 = (float)(v516.__r_.__value_.__l.__size_ + 1);
          if (!v307 || (float)(*(float *)&v516.__r_.__value_.__r.__words[2] * (float)v307) < v313)
            break;
LABEL_495:
          v328 = v515;
          v329 = *(_QWORD **)(v515 + 8 * a2);
          if (v329)
          {
            *v312 = *v329;
          }
          else
          {
            *v312 = v516.__r_.__value_.__r.__words[0];
            v516.__r_.__value_.__r.__words[0] = (std::string::size_type)v312;
            *(_QWORD *)(v328 + 8 * a2) = &v516;
            if (!*v312)
              goto LABEL_504;
            v330 = *(_QWORD *)(*v312 + 8);
            if ((v307 & (v307 - 1)) != 0)
            {
              if (v330 >= v307)
                v330 %= v307;
            }
            else
            {
              v330 &= v307 - 1;
            }
            v329 = (_QWORD *)(v515 + 8 * v330);
          }
          *v329 = v312;
LABEL_504:
          ++v516.__r_.__value_.__l.__size_;
LABEL_505:
          v301 += 2;
          if (v301 == v302)
            goto LABEL_516;
        }
        v314 = (v307 & (v307 - 1)) != 0;
        if (v307 < 3)
          v314 = 1;
        v315 = v314 | (2 * v307);
        v316 = vcvtps_u32_f32(v313 / *(float *)&v516.__r_.__value_.__r.__words[2]);
        if (v315 <= v316)
          prime = v316;
        else
          prime = v315;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v307 = *((_QWORD *)&v515 + 1);
        }
        if (prime > v307)
          goto LABEL_461;
        if (prime < v307)
        {
          v323 = vcvtps_u32_f32((float)v516.__r_.__value_.__l.__size_ / *(float *)&v516.__r_.__value_.__r.__words[2]);
          if (v307 < 3
            || (v324 = (uint8x8_t)vcnt_s8((int8x8_t)v307), v324.i16[0] = vaddlv_u8(v324), v324.u32[0] > 1uLL))
          {
            v323 = std::__next_prime(v323);
          }
          else
          {
            v325 = 1 << -(char)__clz(v323 - 1);
            if (v323 >= 2)
              v323 = v325;
          }
          if (prime <= v323)
            prime = v323;
          if (prime >= v307)
          {
            v307 = *((_QWORD *)&v515 + 1);
          }
          else
          {
            if (prime)
            {
LABEL_461:
              if (prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v317 = operator new(8 * prime);
              v318 = (void *)v515;
              *(_QWORD *)&v515 = v317;
              if (v318)
                operator delete(v318);
              v319 = 0;
              *((_QWORD *)&v515 + 1) = prime;
              do
                *(_QWORD *)(v515 + 8 * v319++) = 0;
              while (prime != v319);
              v320 = (_QWORD **)v516.__r_.__value_.__r.__words[0];
              if (v516.__r_.__value_.__r.__words[0])
              {
                v321 = *(_QWORD *)(v516.__r_.__value_.__r.__words[0] + 8);
                v322 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
                v322.i16[0] = vaddlv_u8(v322);
                if (v322.u32[0] > 1uLL)
                {
                  if (v321 >= prime)
                    v321 %= prime;
                }
                else
                {
                  v321 &= prime - 1;
                }
                *(_QWORD *)(v515 + 8 * v321) = &v516;
                for (j = *v320; j; v321 = v327)
                {
                  v327 = j[1];
                  if (v322.u32[0] > 1uLL)
                  {
                    if (v327 >= prime)
                      v327 %= prime;
                  }
                  else
                  {
                    v327 &= prime - 1;
                  }
                  if (v327 != v321)
                  {
                    if (!*(_QWORD *)(v515 + 8 * v327))
                    {
                      *(_QWORD *)(v515 + 8 * v327) = v320;
                      goto LABEL_486;
                    }
                    *v320 = (_QWORD *)*j;
                    *j = **(_QWORD **)(v515 + 8 * v327);
                    **(_QWORD **)(v515 + 8 * v327) = j;
                    j = v320;
                  }
                  v327 = v321;
LABEL_486:
                  v320 = (_QWORD **)j;
                  j = (_QWORD *)*j;
                }
              }
              v307 = prime;
              goto LABEL_490;
            }
            v331 = (void *)v515;
            *(_QWORD *)&v515 = 0;
            if (v331)
              operator delete(v331);
            v307 = 0;
            *((_QWORD *)&v515 + 1) = 0;
          }
        }
LABEL_490:
        if ((v307 & (v307 - 1)) != 0)
        {
          if (v306 >= v307)
            a2 = v306 % v307;
          else
            a2 = v306;
        }
        else
        {
          a2 = (v307 - 1) & v306;
        }
        goto LABEL_495;
      }
    }
LABEL_516:
    if (v503[0])
    {
      v333 = *(unint64_t ***)&v503[16];
      v332 = *(unint64_t ***)&v503[8];
      if (*(_QWORD *)&v503[8] != *(_QWORD *)&v503[16])
      {
        v334 = *((_QWORD *)&v490 + 1);
        while (1)
        {
          v335 = *v332;
          v336 = **v332;
          v337 = 0x9DDFEA08EB382D69 * (((8 * v336) + 8) ^ HIDWORD(v336));
          v338 = 0x9DDFEA08EB382D69 * (HIDWORD(v336) ^ (v337 >> 47) ^ v337);
          a2 = 0x9DDFEA08EB382D69 * (v338 ^ (v338 >> 47));
          if (v334)
          {
            v339 = (uint8x8_t)vcnt_s8((int8x8_t)v334);
            v339.i16[0] = vaddlv_u8(v339);
            if (v339.u32[0] > 1uLL)
            {
              prime = 0x9DDFEA08EB382D69 * (v338 ^ (v338 >> 47));
              if (a2 >= v334)
                prime = a2 % v334;
            }
            else
            {
              prime = a2 & (v334 - 1);
            }
            v340 = *(_QWORD **)(v490 + 8 * prime);
            if (v340)
            {
              for (k = (_QWORD *)*v340; k; k = (_QWORD *)*k)
              {
                v342 = k[1];
                if (v342 == a2)
                {
                  if (k[2] == v336)
                    goto LABEL_591;
                }
                else
                {
                  if (v339.u32[0] > 1uLL)
                  {
                    if (v342 >= v334)
                      v342 %= v334;
                  }
                  else
                  {
                    v342 &= v334 - 1;
                  }
                  if (v342 != prime)
                    break;
                }
              }
            }
          }
          v343 = operator new(0x20uLL);
          *v343 = 0;
          v343[1] = a2;
          v343[2] = v336;
          v343[3] = v335;
          v344 = (float)(unint64_t)(*((_QWORD *)&v491 + 1) + 1);
          if (!v334 || (float)(v492 * (float)v334) < v344)
            break;
LABEL_581:
          v360 = v490;
          v361 = *(_QWORD **)(v490 + 8 * prime);
          if (v361)
          {
            *v343 = *v361;
          }
          else
          {
            *v343 = v491;
            *(_QWORD *)&v491 = v343;
            *(_QWORD *)(v360 + 8 * prime) = &v491;
            if (!*v343)
              goto LABEL_590;
            v362 = *(_QWORD *)(*v343 + 8);
            if ((v334 & (v334 - 1)) != 0)
            {
              if (v362 >= v334)
                v362 %= v334;
            }
            else
            {
              v362 &= v334 - 1;
            }
            v361 = (_QWORD *)(v490 + 8 * v362);
          }
          *v361 = v343;
LABEL_590:
          ++*((_QWORD *)&v491 + 1);
LABEL_591:
          if (++v332 == v333)
            goto LABEL_602;
        }
        v345 = (v334 & (v334 - 1)) != 0;
        if (v334 < 3)
          v345 = 1;
        v346 = v345 | (2 * v334);
        v347 = vcvtps_u32_f32(v344 / v492);
        if (v346 <= v347)
          v348 = (int8x8_t)v347;
        else
          v348 = (int8x8_t)v346;
        if (*(_QWORD *)&v348 == 1)
        {
          v348 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v348 & (*(_QWORD *)&v348 - 1)) != 0)
        {
          v348 = (int8x8_t)std::__next_prime(*(_QWORD *)&v348);
          v334 = *((_QWORD *)&v490 + 1);
        }
        if (*(_QWORD *)&v348 > v334)
          goto LABEL_547;
        if (*(_QWORD *)&v348 < v334)
        {
          v355 = vcvtps_u32_f32((float)*((unint64_t *)&v491 + 1) / v492);
          if (v334 < 3
            || (v356 = (uint8x8_t)vcnt_s8((int8x8_t)v334), v356.i16[0] = vaddlv_u8(v356), v356.u32[0] > 1uLL))
          {
            v355 = std::__next_prime(v355);
          }
          else
          {
            v357 = 1 << -(char)__clz(v355 - 1);
            if (v355 >= 2)
              v355 = v357;
          }
          if (*(_QWORD *)&v348 <= v355)
            v348 = (int8x8_t)v355;
          if (*(_QWORD *)&v348 >= v334)
          {
            v334 = *((_QWORD *)&v490 + 1);
          }
          else
          {
            if (v348)
            {
LABEL_547:
              if (*(_QWORD *)&v348 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v349 = operator new(8 * *(_QWORD *)&v348);
              v350 = (void *)v490;
              *(_QWORD *)&v490 = v349;
              if (v350)
                operator delete(v350);
              v351 = 0;
              *((int8x8_t *)&v490 + 1) = v348;
              do
                *(_QWORD *)(v490 + 8 * v351++) = 0;
              while (*(_QWORD *)&v348 != v351);
              v352 = (_QWORD **)v491;
              if ((_QWORD)v491)
              {
                v353 = *(_QWORD *)(v491 + 8);
                v354 = (uint8x8_t)vcnt_s8(v348);
                v354.i16[0] = vaddlv_u8(v354);
                if (v354.u32[0] > 1uLL)
                {
                  if (v353 >= *(_QWORD *)&v348)
                    v353 %= *(_QWORD *)&v348;
                }
                else
                {
                  v353 &= *(_QWORD *)&v348 - 1;
                }
                *(_QWORD *)(v490 + 8 * v353) = &v491;
                for (m = *v352; m; v353 = v359)
                {
                  v359 = m[1];
                  if (v354.u32[0] > 1uLL)
                  {
                    if (v359 >= *(_QWORD *)&v348)
                      v359 %= *(_QWORD *)&v348;
                  }
                  else
                  {
                    v359 &= *(_QWORD *)&v348 - 1;
                  }
                  if (v359 != v353)
                  {
                    if (!*(_QWORD *)(v490 + 8 * v359))
                    {
                      *(_QWORD *)(v490 + 8 * v359) = v352;
                      goto LABEL_572;
                    }
                    *v352 = (_QWORD *)*m;
                    *m = **(_QWORD **)(v490 + 8 * v359);
                    **(_QWORD **)(v490 + 8 * v359) = m;
                    m = v352;
                  }
                  v359 = v353;
LABEL_572:
                  v352 = (_QWORD **)m;
                  m = (_QWORD *)*m;
                }
              }
              v334 = (unint64_t)v348;
              goto LABEL_576;
            }
            v363 = (void *)v490;
            *(_QWORD *)&v490 = 0;
            if (v363)
              operator delete(v363);
            v334 = 0;
            *((_QWORD *)&v490 + 1) = 0;
          }
        }
LABEL_576:
        if ((v334 & (v334 - 1)) != 0)
        {
          if (a2 >= v334)
            prime = a2 % v334;
          else
            prime = a2;
        }
        else
        {
          prime = (v334 - 1) & a2;
        }
        goto LABEL_581;
      }
    }
LABEL_602:
    if ((_BYTE)v499)
    {
      v365 = v500.__r_.__value_.__l.__size_;
      v364 = (unint64_t **)v500.__r_.__value_.__r.__words[0];
      if (v500.__r_.__value_.__r.__words[0] != v500.__r_.__value_.__l.__size_)
      {
        v366 = *((_QWORD *)&v487 + 1);
        while (1)
        {
          v367 = *v364;
          v368 = **v364;
          v369 = 0x9DDFEA08EB382D69 * (((8 * v368) + 8) ^ HIDWORD(v368));
          v370 = 0x9DDFEA08EB382D69 * (HIDWORD(v368) ^ (v369 >> 47) ^ v369);
          a2 = 0x9DDFEA08EB382D69 * (v370 ^ (v370 >> 47));
          if (v366)
          {
            v371 = (uint8x8_t)vcnt_s8((int8x8_t)v366);
            v371.i16[0] = vaddlv_u8(v371);
            if (v371.u32[0] > 1uLL)
            {
              prime = 0x9DDFEA08EB382D69 * (v370 ^ (v370 >> 47));
              if (a2 >= v366)
                prime = a2 % v366;
            }
            else
            {
              prime = a2 & (v366 - 1);
            }
            v372 = *(_QWORD **)(v487 + 8 * prime);
            if (v372)
            {
              for (n = (_QWORD *)*v372; n; n = (_QWORD *)*n)
              {
                v374 = n[1];
                if (v374 == a2)
                {
                  if (n[2] == v368)
                    goto LABEL_677;
                }
                else
                {
                  if (v371.u32[0] > 1uLL)
                  {
                    if (v374 >= v366)
                      v374 %= v366;
                  }
                  else
                  {
                    v374 &= v366 - 1;
                  }
                  if (v374 != prime)
                    break;
                }
              }
            }
          }
          v375 = operator new(0x20uLL);
          *v375 = 0;
          v375[1] = a2;
          v375[2] = v368;
          v375[3] = v367;
          v376 = (float)(unint64_t)(*((_QWORD *)&v488 + 1) + 1);
          if (!v366 || (float)(v489 * (float)v366) < v376)
            break;
LABEL_667:
          v392 = v487;
          v393 = *(_QWORD **)(v487 + 8 * prime);
          if (v393)
          {
            *v375 = *v393;
          }
          else
          {
            *v375 = v488;
            *(_QWORD *)&v488 = v375;
            *(_QWORD *)(v392 + 8 * prime) = &v488;
            if (!*v375)
              goto LABEL_676;
            v394 = *(_QWORD *)(*v375 + 8);
            if ((v366 & (v366 - 1)) != 0)
            {
              if (v394 >= v366)
                v394 %= v366;
            }
            else
            {
              v394 &= v366 - 1;
            }
            v393 = (_QWORD *)(v487 + 8 * v394);
          }
          *v393 = v375;
LABEL_676:
          ++*((_QWORD *)&v488 + 1);
LABEL_677:
          if (++v364 == (unint64_t **)v365)
            goto LABEL_688;
        }
        v377 = (v366 & (v366 - 1)) != 0;
        if (v366 < 3)
          v377 = 1;
        v378 = v377 | (2 * v366);
        v379 = vcvtps_u32_f32(v376 / v489);
        if (v378 <= v379)
          v380 = (int8x8_t)v379;
        else
          v380 = (int8x8_t)v378;
        if (*(_QWORD *)&v380 == 1)
        {
          v380 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v380 & (*(_QWORD *)&v380 - 1)) != 0)
        {
          v380 = (int8x8_t)std::__next_prime(*(_QWORD *)&v380);
          v366 = *((_QWORD *)&v487 + 1);
        }
        if (*(_QWORD *)&v380 > v366)
          goto LABEL_633;
        if (*(_QWORD *)&v380 < v366)
        {
          v387 = vcvtps_u32_f32((float)*((unint64_t *)&v488 + 1) / v489);
          if (v366 < 3
            || (v388 = (uint8x8_t)vcnt_s8((int8x8_t)v366), v388.i16[0] = vaddlv_u8(v388), v388.u32[0] > 1uLL))
          {
            v387 = std::__next_prime(v387);
          }
          else
          {
            v389 = 1 << -(char)__clz(v387 - 1);
            if (v387 >= 2)
              v387 = v389;
          }
          if (*(_QWORD *)&v380 <= v387)
            v380 = (int8x8_t)v387;
          if (*(_QWORD *)&v380 >= v366)
          {
            v366 = *((_QWORD *)&v487 + 1);
          }
          else
          {
            if (v380)
            {
LABEL_633:
              if (*(_QWORD *)&v380 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v381 = operator new(8 * *(_QWORD *)&v380);
              v382 = (void *)v487;
              *(_QWORD *)&v487 = v381;
              if (v382)
                operator delete(v382);
              v383 = 0;
              *((int8x8_t *)&v487 + 1) = v380;
              do
                *(_QWORD *)(v487 + 8 * v383++) = 0;
              while (*(_QWORD *)&v380 != v383);
              v384 = (_QWORD **)v488;
              if ((_QWORD)v488)
              {
                v385 = *(_QWORD *)(v488 + 8);
                v386 = (uint8x8_t)vcnt_s8(v380);
                v386.i16[0] = vaddlv_u8(v386);
                if (v386.u32[0] > 1uLL)
                {
                  if (v385 >= *(_QWORD *)&v380)
                    v385 %= *(_QWORD *)&v380;
                }
                else
                {
                  v385 &= *(_QWORD *)&v380 - 1;
                }
                *(_QWORD *)(v487 + 8 * v385) = &v488;
                for (ii = *v384; ii; v385 = v391)
                {
                  v391 = ii[1];
                  if (v386.u32[0] > 1uLL)
                  {
                    if (v391 >= *(_QWORD *)&v380)
                      v391 %= *(_QWORD *)&v380;
                  }
                  else
                  {
                    v391 &= *(_QWORD *)&v380 - 1;
                  }
                  if (v391 != v385)
                  {
                    if (!*(_QWORD *)(v487 + 8 * v391))
                    {
                      *(_QWORD *)(v487 + 8 * v391) = v384;
                      goto LABEL_658;
                    }
                    *v384 = (_QWORD *)*ii;
                    *ii = **(_QWORD **)(v487 + 8 * v391);
                    **(_QWORD **)(v487 + 8 * v391) = ii;
                    ii = v384;
                  }
                  v391 = v385;
LABEL_658:
                  v384 = (_QWORD **)ii;
                  ii = (_QWORD *)*ii;
                }
              }
              v366 = (unint64_t)v380;
              goto LABEL_662;
            }
            v395 = (void *)v487;
            *(_QWORD *)&v487 = 0;
            if (v395)
              operator delete(v395);
            v366 = 0;
            *((_QWORD *)&v487 + 1) = 0;
          }
        }
LABEL_662:
        if ((v366 & (v366 - 1)) != 0)
        {
          if (a2 >= v366)
            prime = a2 % v366;
          else
            prime = a2;
        }
        else
        {
          prime = (v366 - 1) & a2;
        }
        goto LABEL_667;
      }
    }
LABEL_688:
    if (v496[0])
    {
      v397 = *(std::string::size_type ***)&v496[16];
      v396 = *(std::string::size_type ***)&v496[8];
      if (*(_QWORD *)&v496[8] != *(_QWORD *)&v496[16])
      {
        while (1)
        {
          v398 = *v396;
          v525.__r_.__value_.__r.__words[0] = **v396;
          if (v525.__r_.__value_.__r.__words[0])
          {
            RERetain();
            v399 = v525.__r_.__value_.__r.__words[0];
            v398 = *v396;
          }
          else
          {
            v399 = 0;
          }
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v525);
          v400 = 0x9DDFEA08EB382D69 * (((8 * v399) + 8) ^ HIDWORD(v399));
          v401 = 0x9DDFEA08EB382D69 * (HIDWORD(v399) ^ (v400 >> 47) ^ v400);
          v402 = 0x9DDFEA08EB382D69 * (v401 ^ (v401 >> 47));
          v403 = (unint64_t)v484[1];
          if (v484[1])
          {
            v404 = (uint8x8_t)vcnt_s8((int8x8_t)v484[1]);
            v404.i16[0] = vaddlv_u8(v404);
            if (v404.u32[0] > 1uLL)
            {
              a2 = 0x9DDFEA08EB382D69 * (v401 ^ (v401 >> 47));
              if ((void *)v402 >= v484[1])
                a2 = v402 % (unint64_t)v484[1];
            }
            else
            {
              a2 = v402 & ((unint64_t)v484[1] - 1);
            }
            v405 = (_QWORD *)*((_QWORD *)v484[0] + a2);
            if (v405)
            {
              for (jj = (_QWORD *)*v405; jj; jj = (_QWORD *)*jj)
              {
                v407 = jj[1];
                if (v407 == v402)
                {
                  if (jj[2] == v399)
                    goto LABEL_765;
                }
                else
                {
                  if (v404.u32[0] > 1uLL)
                  {
                    if ((void *)v407 >= v484[1])
                      v407 %= (unint64_t)v484[1];
                  }
                  else
                  {
                    v407 &= (unint64_t)v484[1] - 1;
                  }
                  if (v407 != a2)
                    break;
                }
              }
            }
          }
          v408 = operator new(0x20uLL);
          *v408 = 0;
          v408[1] = v402;
          v408[2] = v399;
          v408[3] = v398;
          v409 = (float)(unint64_t)(*((_QWORD *)&v485 + 1) + 1);
          if (!v403 || (float)(v486 * (float)v403) < v409)
            break;
LABEL_755:
          v425 = v484[0];
          v426 = (_QWORD *)*((_QWORD *)v484[0] + a2);
          if (v426)
          {
            *v408 = *v426;
          }
          else
          {
            *v408 = v485;
            *(_QWORD *)&v485 = v408;
            v425[a2] = &v485;
            if (!*v408)
              goto LABEL_764;
            v427 = *(_QWORD *)(*v408 + 8);
            if ((v403 & (v403 - 1)) != 0)
            {
              if (v427 >= v403)
                v427 %= v403;
            }
            else
            {
              v427 &= v403 - 1;
            }
            v426 = (char *)v484[0] + 8 * v427;
          }
          *v426 = v408;
LABEL_764:
          ++*((_QWORD *)&v485 + 1);
LABEL_765:
          v396 += 2;
          if (v396 == v397)
            goto LABEL_776;
        }
        v410 = (v403 & (v403 - 1)) != 0;
        if (v403 < 3)
          v410 = 1;
        v411 = v410 | (2 * v403);
        v412 = vcvtps_u32_f32(v409 / v486);
        if (v411 <= v412)
          v413 = (int8x8_t)v412;
        else
          v413 = (int8x8_t)v411;
        if (*(_QWORD *)&v413 == 1)
        {
          v413 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v413 & (*(_QWORD *)&v413 - 1)) != 0)
        {
          v413 = (int8x8_t)std::__next_prime(*(_QWORD *)&v413);
          v403 = (unint64_t)v484[1];
        }
        if (*(_QWORD *)&v413 > v403)
          goto LABEL_721;
        if (*(_QWORD *)&v413 < v403)
        {
          v420 = vcvtps_u32_f32((float)*((unint64_t *)&v485 + 1) / v486);
          if (v403 < 3
            || (v421 = (uint8x8_t)vcnt_s8((int8x8_t)v403), v421.i16[0] = vaddlv_u8(v421), v421.u32[0] > 1uLL))
          {
            v420 = std::__next_prime(v420);
          }
          else
          {
            v422 = 1 << -(char)__clz(v420 - 1);
            if (v420 >= 2)
              v420 = v422;
          }
          if (*(_QWORD *)&v413 <= v420)
            v413 = (int8x8_t)v420;
          if (*(_QWORD *)&v413 >= v403)
          {
            v403 = (unint64_t)v484[1];
          }
          else
          {
            if (v413)
            {
LABEL_721:
              if (*(_QWORD *)&v413 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v414 = operator new(8 * *(_QWORD *)&v413);
              v415 = v484[0];
              v484[0] = v414;
              if (v415)
                operator delete(v415);
              v416 = 0;
              v484[1] = (void *)v413;
              do
                *((_QWORD *)v484[0] + v416++) = 0;
              while (*(_QWORD *)&v413 != v416);
              v417 = (_QWORD **)v485;
              if ((_QWORD)v485)
              {
                v418 = *(_QWORD *)(v485 + 8);
                v419 = (uint8x8_t)vcnt_s8(v413);
                v419.i16[0] = vaddlv_u8(v419);
                if (v419.u32[0] > 1uLL)
                {
                  if (v418 >= *(_QWORD *)&v413)
                    v418 %= *(_QWORD *)&v413;
                }
                else
                {
                  v418 &= *(_QWORD *)&v413 - 1;
                }
                *((_QWORD *)v484[0] + v418) = &v485;
                for (kk = *v417; kk; v418 = v424)
                {
                  v424 = kk[1];
                  if (v419.u32[0] > 1uLL)
                  {
                    if (v424 >= *(_QWORD *)&v413)
                      v424 %= *(_QWORD *)&v413;
                  }
                  else
                  {
                    v424 &= *(_QWORD *)&v413 - 1;
                  }
                  if (v424 != v418)
                  {
                    if (!*((_QWORD *)v484[0] + v424))
                    {
                      *((_QWORD *)v484[0] + v424) = v417;
                      goto LABEL_746;
                    }
                    *v417 = (_QWORD *)*kk;
                    *kk = **((_QWORD **)v484[0] + v424);
                    **((_QWORD **)v484[0] + v424) = kk;
                    kk = v417;
                  }
                  v424 = v418;
LABEL_746:
                  v417 = (_QWORD **)kk;
                  kk = (_QWORD *)*kk;
                }
              }
              v403 = (unint64_t)v413;
              goto LABEL_750;
            }
            v428 = v484[0];
            v484[0] = 0;
            if (v428)
              operator delete(v428);
            v403 = 0;
            v484[1] = 0;
          }
        }
LABEL_750:
        if ((v403 & (v403 - 1)) != 0)
        {
          if (v402 >= v403)
            a2 = v402 % v403;
          else
            a2 = v402;
        }
        else
        {
          a2 = (v403 - 1) & v402;
        }
        goto LABEL_755;
      }
    }
LABEL_776:
    if (!v516.__r_.__value_.__l.__size_
      && !*((_QWORD *)&v491 + 1)
      && !*((_QWORD *)&v488 + 1)
      && !*((_QWORD *)&v485 + 1))
    {
LABEL_879:
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)v484);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v487);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v490);
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v515);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v493);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v496);
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v499);
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v503);
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v506);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v511);
      return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v512);
    }
    v481 = 0;
    v482 = 0;
    v483 = 0;
    memset(v480, 0, sizeof(v480));
    v477 = 0u;
    v478 = 0u;
    v479 = 1065353216;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)&v477, 0x64uLL);
    EntityAtPrimPath = v513;
    v476 = v513;
    v430 = *((_QWORD *)v471 + 5);
    if (*(_BYTE *)(*(_QWORD *)(v430 + 16) + 272))
    {
      std::string::basic_string[abi:ne180100]<0>(&v525, "/model");
      MEMORY[0x2348B26F8](&v475, &v525);
      EntityAtPrimPath = realityio::ImportSession::getEntityAtPrimPath(v430, &v475);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v475);
      if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v525.__r_.__value_.__l.__data_);
      if (EntityAtPrimPath)
        v476 = EntityAtPrimPath;
      else
        EntityAtPrimPath = v476;
    }
    std::string::basic_string[abi:ne180100]<0>(&v525, "");
    realityio::buildSceneAssetsAndAnimationLibraries((std::string::size_type)v469, 1, (uint64_t)v471, EntityAtPrimPath, (const void **)&v525.__r_.__value_.__l.__data_, &v515, &v490, &v487, v484, (uint64_t)&v481, (char *****)v480, &v477);
    if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v525.__r_.__value_.__l.__data_);
    v431 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)v471 + 8));
    if (!v476)
    {
LABEL_817:
      if (v493[0])
      {
        v470 = *(uint64_t ***)&v493[16];
        v448 = *(uint64_t ***)&v493[8];
        if (*(_QWORD *)&v493[8] != *(_QWORD *)&v493[16])
        {
          while (1)
          {
            v449 = *v448;
            if (*v448)
              break;
LABEL_874:
            v448 += 2;
            if (v448 == v470)
              goto LABEL_875;
          }
          v472 = *((_QWORD *)v471 + 6);
          v474 = *(void **)(*(_QWORD *)(*((_QWORD *)v471 + 5) + 16) + 16);
          if (v474)
          {
            ServiceLocator = (void *)REEngineGetServiceLocator();
            if (ServiceLocator)
              ServiceLocator = (void *)MEMORY[0x2348B1264](ServiceLocator, v451, v452);
          }
          else
          {
            ServiceLocator = 0;
          }
          v517[0] = ServiceLocator;
          v454 = v449[4];
          v453 = v449[5];
          while (1)
          {
            if (v454 == v453)
              goto LABEL_874;
            if (*(char *)(v454 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v525, *(const std::string::value_type **)v454, *(_QWORD *)(v454 + 8));
            }
            else
            {
              v455 = *(_OWORD *)v454;
              v525.__r_.__value_.__r.__words[2] = *(_QWORD *)(v454 + 16);
              *(_OWORD *)&v525.__r_.__value_.__l.__data_ = v455;
            }
            if (*(char *)(v454 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v526, *(const std::string::value_type **)(v454 + 24), *(_QWORD *)(v454 + 32));
            }
            else
            {
              v456 = *(_OWORD *)(v454 + 24);
              v526.__r_.__value_.__r.__words[2] = *(_QWORD *)(v454 + 40);
              *(_OWORD *)&v526.__r_.__value_.__l.__data_ = v456;
            }
            if (*(char *)(v454 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&v527, *(const std::string::value_type **)(v454 + 48), *(_QWORD *)(v454 + 56));
            }
            else
            {
              v457 = *(_OWORD *)(v454 + 48);
              v527.__r_.__value_.__r.__words[2] = *(_QWORD *)(v454 + 64);
              *(_OWORD *)&v527.__r_.__value_.__l.__data_ = v457;
            }
            v458 = *(_OWORD *)(v454 + 72);
            v529 = *(_BYTE *)(v454 + 88);
            v528 = v458;
            v530 = 0;
            v459 = HIBYTE(v527.__r_.__value_.__r.__words[2]);
            if ((v527.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v459 = v527.__r_.__value_.__l.__size_;
            if (v459)
            {
              if ((v527.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v460 = &v527;
              else
                v460 = (std::string *)v527.__r_.__value_.__r.__words[0];
              v461 = (uint64_t *)RIOPxrUsdStageCreateWithFilePathWithErrorReporting((char *)v460, &v530);
              v462 = v461;
              if (v461)
              {
                cf = 0;
                cf = (CFTypeRef)RIOImportSessionCreateSingleUseImporterWithStage(v461, (uint64_t)v474, 0, 0, 0);
                if (cf)
                {
                  v463 = operator new(0x28uLL);
                  *v463 = &off_24FDE4868;
                  v463[1] = &cf;
                  v463[2] = v517;
                  v463[3] = v449;
                  v463[4] = &v525;
                  *(_QWORD *)&__p[24] = v463;
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v472 + 16))(v472, __p);
                  v466 = *(_QWORD **)&__p[24];
                  if (*(_BYTE **)&__p[24] == __p)
                  {
                    v466 = __p;
                    v467 = 4;
LABEL_864:
                    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v466 + 8 * v467))(v466, v464, v465);
                  }
                  else if (*(_QWORD *)&__p[24])
                  {
                    v467 = 5;
                    goto LABEL_864;
                  }
                  CFRelease(cf);
                }
                CFRelease(v462);
              }
            }
            else
            {
              if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)__p, v525.__r_.__value_.__l.__data_, v525.__r_.__value_.__l.__size_);
              else
                *(std::string *)__p = v525;
              if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)&__p[24], v526.__r_.__value_.__l.__data_, v526.__r_.__value_.__l.__size_);
              else
                *(std::string *)&__p[24] = v526;
              if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v522, v527.__r_.__value_.__l.__data_, v527.__r_.__value_.__l.__size_);
              else
                v522 = v527;
              v523 = v528;
              v524 = 0;
              if (v529)
              {
                v524 = 1;
              }
              if (SHIBYTE(v522.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v522.__r_.__value_.__l.__data_);
              if ((__p[47] & 0x80000000) != 0)
                operator delete(*(void **)&__p[24]);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v527.__r_.__value_.__l.__data_);
            if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v526.__r_.__value_.__l.__data_);
            if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v525.__r_.__value_.__l.__data_);
            v454 += 96;
          }
        }
      }
LABEL_875:
      std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v477);
      if (v480[0])
        operator delete(v480[0]);
      if (v481)
        operator delete(v481);
      goto LABEL_879;
    }
    v432 = (pxrInternal__aapl__pxrReserved__::UsdStage *)v431;
    MEMORY[0x2348B274C](&v525, "autoPlay");
    HasAuthoredMetadata = pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v432, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v525);
    if ((v525.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v434 = (unsigned int *)(v525.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v435 = __ldxr(v434);
      while (__stlxr(v435 - 2, v434));
    }
    MEMORY[0x2348B274C](&cf, "autoPlay");
    v531 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(v432, (const pxrInternal__aapl__pxrReserved__::TfToken *)&cf, (pxrInternal__aapl__pxrReserved__::VtValue *)&v530) & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)&v530))
      {
        if ((v531 & 4) != 0)
          v437 = (id *)(*(uint64_t (**)(id *))((v531 & 0xFFFFFFFFFFFFFFF8) + 168))(&v530);
        else
          v437 = &v530;
        v438 = *(unsigned __int8 *)v437;
LABEL_802:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v530);
        if ((cf & 7) != 0)
        {
          v439 = (unsigned int *)((unint64_t)cf & 0xFFFFFFFFFFFFFFF8);
          do
            v440 = __ldxr(v439);
          while (__stlxr(v440 - 2, v439));
        }
        v441 = HasAuthoredMetadata ^ 1;
        if (!v438)
          v441 = 1;
        if ((v441 & 1) != 0)
        {
          REAnimationComponentGetComponentType();
          v519[0] = &off_24FDE4F38;
          v520 = (std::string *)v519;
          v525.__r_.__value_.__r.__words[0] = REEntityGetOrAddComponentByClass();
          if (!v520)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(std::string *, std::string *))(v520->__r_.__value_.__r.__words[0] + 48))(v520, &v525);
          RENetworkMarkComponentDirty();
          v446 = v520;
          if (v520 == (std::string *)v519)
          {
            v447 = 4;
            v446 = (std::string *)v519;
            goto LABEL_816;
          }
        }
        else
        {
          REAnimationLibraryComponentGetComponentType();
          if (!REEntityGetComponentByClass())
            goto LABEL_817;
          *(_QWORD *)__p = 0;
          *(_QWORD *)__p = REAnimationLibraryComponentGetAnimationLibraryAsset();
          v442 = *((_QWORD *)v471 + 6);
          v443 = operator new(0x20uLL);
          *v443 = &off_24FDE4EB8;
          v443[1] = __p;
          v443[2] = &v476;
          v443[3] = v469;
          v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v443;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v442 + 16))(v442, &v525);
          v446 = (std::string *)v526.__r_.__value_.__r.__words[0];
          if ((std::string *)v526.__r_.__value_.__l.__data_ == &v525)
          {
            v447 = 4;
            v446 = &v525;
LABEL_816:
            (*(void (**)(std::string *, uint64_t, uint64_t))(v446->__r_.__value_.__r.__words[0] + 8 * v447))(v446, v444, v445);
            goto LABEL_817;
          }
        }
        if (!v446)
          goto LABEL_817;
        v447 = 5;
        goto LABEL_816;
      }
      v525.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.h";
      v525.__r_.__value_.__l.__size_ = (std::string::size_type)"GetMetadata";
      v525.__r_.__value_.__r.__words[2] = 2410;
      v526.__r_.__value_.__r.__words[0] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMe"
                                                                  "tadata(const TfToken &, T *) const [T = BOOL]";
      v526.__r_.__value_.__s.__data_[8] = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), v436);
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v530);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      if (v518 < 0)
        operator delete(v517[0]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v438 = 0;
    goto LABEL_802;
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v512);
}

void sub_22FF64B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a69;
  uint64_t v69;
  unsigned int *v71;
  unsigned int v72;
  void *v73;

  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v69 - 120));
  if ((STACK[0x288] & 7) != 0)
  {
    v71 = (unsigned int *)(STACK[0x288] & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  v73 = (void *)a27;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a21);
  if (v73)
    operator delete(v73);
  if (a30)
    operator delete(a30);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&STACK[0x290]);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&a51);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&a57);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&a63);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&a69);
  realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x218]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&STACK[0x248]);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSession::getEntityAtPrimPath(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2 + 1);
  v4 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 64))(v3, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4;
}

void sub_22FF65368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnimationSceneAssetBuilder::clear(realityio::AnimationSceneAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3;
  _OWORD v5[2];
  int v6;
  _BYTE v7[8];
  uint64_t v8;

  v3 = realityio::EntityBuilder::kRootEntityInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v7);
  if (v7[0] && a2 && v8)
  {
    memset(v5, 0, sizeof(v5));
    v6 = 1065353216;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>((uint64_t)v5, 0x64uLL);
    realityio::removeAnimationLibraries((uint64_t)a2, v8, v5);
    std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)v5);
  }
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v7);
}

void sub_22FF65404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void realityio::AnimationSceneAssetBuilder::~AnimationSceneAssetBuilder(realityio::AnimationSceneAssetBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unint64_t result;
  uint64_t v4;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = MEMORY[0x2348B24E8]();
    MEMORY[0x2348B4E1C](v4, 0x60C40DF8E1979);
  }
  return atomic_load(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>::New()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2348B24DC]();
  return v0;
}

void sub_22FF654DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

_QWORD *realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

std::string *std::pair<std::string,realityio::TimelineGroupFactory>::pair[abi:ne180100]<std::string const&,realityio::TimelineGroupFactory,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v7 = *((_QWORD *)a3 + 3);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 8);
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(__int128 *)((char *)a3 + 40);
  this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  return this;
}

void realityio::`anonymous namespace'::copyAnimationLibraryEntryAndAssignToEntityHelper(realityio *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  const char *v5;
  std::string::size_type size;
  uint64_t v7;
  const __CFString *Type;
  realityio *RootTimeline;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t AnimationLibraryAsset;
  NSObject *v16;
  std::string *p_buf;
  uint64_t v18;
  uint64_t TimelineAsset;
  uint64_t TimelineClip;
  std::string v21;
  uint64_t EntryAssetByKey;
  std::string buf;
  uint64_t v24;
  uint8_t v25[24];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v4 = *(NSObject **)realityio::logObjects(a1);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v5 = "To and from entities must be valid.";
    goto LABEL_13;
  }
  {
    v4 = *(NSObject **)realityio::logObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v5 = "Could not find animation components to copy to and from.";
    goto LABEL_13;
  }
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset())
  {
    v4 = *(NSObject **)realityio::logObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v5 = "Could not find animation library assets to copy from and into.";
LABEL_13:
    _os_log_impl(&dword_22FF26000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&buf, 2u);
    return;
  }
  v24 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (v24)
  {
    if (*(char *)(a3 + 47) < 0)
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
    else
      buf = *(std::string *)(a3 + 24);
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = buf.__r_.__value_.__l.__size_;
    if (!size)
    {
      v7 = REAnimationLibraryComponentDefaultLocalSubtreeSceneName();
      MEMORY[0x2348B4AD4](&buf, v7);
    }
    EntryAssetByKey = REAnimationLibraryDefinitionGetEntryAssetByKey();
    if (!EntryAssetByKey)
      goto LABEL_52;
    RERetain();
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v21 = *(std::string *)a3;
    if (*(double *)(a3 + 72) > 0.0 || *(double *)(a3 + 80) > 0.0 || *(_BYTE *)(a3 + 88))
    {
      Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, CFSTR("Timeline"), 0))
      {
        RootTimeline = (realityio *)REAnimationSceneAssetGetRootTimeline();
        v10 = (uint64_t)RootTimeline;
      }
      else
      {
        REAnimationSceneEntityDefinitionCreate();
        v10 = EntryAssetByKey;
        REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        RootTimeline = (realityio *)RERelease();
      }
      if (!v10)
      {
        v16 = *(NSObject **)realityio::logObjects(RootTimeline);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v25 = 136315138;
          *(_QWORD *)&v25[4] = p_buf;
          _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_DEFAULT, "Could not add animation clip for animation named: \"%s\".", v25, 0xCu);
        }
        goto LABEL_50;
      }
      *(_QWORD *)v25 = 0;
      v11 = RETimelineDefinitionCreateFromTimeline();
      if (*(_QWORD *)v25)
        RERelease();
      *(_QWORD *)v25 = v11;
      TimelineClip = RETimelineDefinitionCreateTimelineClip();
      if (*(double *)(a3 + 72) > 0.0)
        RETimelineDefinitionSetClipStart();
      if (*(double *)(a3 + 80) > 0.0)
        RETimelineDefinitionSetClipEnd();
      if (*(_BYTE *)(a3 + 88))
      {
        RETimelineDefinitionSetClipLoopBehavior();
        TimelineAsset = 0x7FF0000000000000;
        RETimelineDefinitionSetClipDuration();
        RETimelineDefinitionSetFillMode();
        std::string::append(&v21, "__auto_generated_looping");
      }
      TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        v18 = REAnimationSceneAssetCreateWithTimeline();
        realityio::WrappedRERef<REAsset *>::operator=(&EntryAssetByKey, &v18);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v18);
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&TimelineAsset);
      realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&TimelineClip);
      realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(v25);
    }
    REAnimationLibraryDefinitionAddEntryAsset();
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v21;
    else
      v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    v13 = REAnimationLibraryDefinitionAddKeyedEntryIndex();
    if ((v13 & 1) == 0)
    {
      v14 = *(NSObject **)realityio::logObjects((realityio *)v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v25 = 136315138;
        *(_QWORD *)&v25[4] = v12;
        _os_log_impl(&dword_22FF26000, v14, OS_LOG_TYPE_DEFAULT, "Could not add key for animation named: \"%s\".", v25, 0xCu);
      }
    }
    *(_QWORD *)v25 = 0;
    AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    if (*(_QWORD *)v25)
      RERelease();
    *(_QWORD *)v25 = AnimationLibraryAsset;
    REAnimationLibraryComponentAssignAnimationLibraryAsset();
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v25);
LABEL_50:
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
LABEL_52:
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&EntryAssetByKey);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v24);
}

void sub_22FF65B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 a33,char a34,char a35)
{
  if (a24 < 0)
    operator delete(__p);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a25);
  if (a31 < 0)
    operator delete(a26);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&a32);
  _Unwind_Resume(a1);
}

void realityio::`anonymous namespace'::AnimationLibraryEntry::~AnimationLibraryEntry(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t realityio::`anonymous namespace'::findFirstAnimationLibraryComponentInHierarchy()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t Child;

  REAnimationLibraryComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (!result)
  {
    result = REEntityGetChildCount();
    if (result)
    {
      v1 = result;
      v2 = 0;
      while (1)
      {
        Child = REEntityGetChild();
        if (result)
          break;
        if (v1 == ++v2)
          return 0;
      }
    }
  }
  return result;
}

_QWORD *realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE4868;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE4868;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  realityio *ChildCount;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t FirstAnimationLibraryComponentInHierarchy;
  realityio *v9;
  BOOL v10;
  NSObject *v11;
  const char *v12;
  uint64_t AnimationLibraryAsset;
  realityio *v14;
  realityio *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t EntryCount;
  uint64_t i;
  uint64_t EntryAsset;
  uint64_t v21;
  NSObject *v22;
  std::string *v23;
  uint64_t v24;
  __int128 *v25;
  realityio *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::string v31;
  uint64_t v32;
  uint64_t v33;
  std::string buf;
  std::string v35;
  std::string __p;
  __int128 v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, 1);
  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  ChildCount = (realityio *)REEntityGetChildCount();
  if (ChildCount == (realityio *)1)
    ChildCount = (realityio *)REEntityGetChild();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = *(__int128 **)(a1 + 32);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
  }
  if (!v5)
  {
    v11 = *(NSObject **)realityio::logObjects(ChildCount);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_42;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v12 = "To and from entities must be valid.";
    goto LABEL_24;
  }
  if (FirstAnimationLibraryComponentInHierarchy)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10)
  {
    v11 = *(NSObject **)realityio::logObjects(v9);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_42;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v12 = "Could not find animation components to copy to and from.";
LABEL_24:
    _os_log_impl(&dword_22FF26000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&buf, 2u);
    goto LABEL_42;
  }
  AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  v14 = (realityio *)REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (!AnimationLibraryAsset)
  {
    v11 = *(NSObject **)realityio::logObjects(v14);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_42;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v12 = "Could not find animation library assets to copy from.";
    goto LABEL_24;
  }
  v15 = v14;
  v33 = 0;
  v16 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (v33)
    RERelease();
  v32 = 0;
  v33 = v16;
  if (v15)
  {
    v17 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
    if (v32)
      goto LABEL_26;
  }
  else
  {
    v17 = REAnimationLibraryDefinitionCreate();
    if (v32)
LABEL_26:
      RERelease();
  }
  v32 = v17;
  EntryCount = REAnimationLibraryDefinitionGetEntryCount();
  if (EntryCount)
  {
    for (i = 0; i != EntryCount; ++i)
    {
      EntryAsset = REAnimationLibraryDefinitionGetEntryAsset();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (REAnimationLibraryDefinitionGetDefaultEntry() == EntryAsset)
      {
        v21 = REAnimationLibraryDefinitionAddKeyedEntryIndex();
        if ((v21 & 1) == 0)
        {
          v22 = *(NSObject **)realityio::logObjects((realityio *)v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v31;
            else
              v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
            _os_log_impl(&dword_22FF26000, v22, OS_LOG_TYPE_DEFAULT, "Could not add key for animation named: \"%s\".", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  v24 = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (buf.__r_.__value_.__r.__words[0])
    RERelease();
  buf.__r_.__value_.__r.__words[0] = v24;
  if (v24)
  {
    REAnimationLibraryComponentAssignAnimationLibraryAsset();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v32);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v33);
LABEL_42:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v25 = *(__int128 **)(a1 + 32);
  if (*((_BYTE *)v25 + 88))
  {
    v26 = **(realityio ***)(a1 + 16);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    if (*((char *)v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
      v25 = *(__int128 **)(a1 + 32);
    }
    else
    {
      v28 = *v25;
      buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v28;
    }
    if (*((char *)v25 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v25 + 3), *((_QWORD *)v25 + 4));
      v25 = *(__int128 **)(a1 + 32);
    }
    else
    {
      v29 = *(__int128 *)((char *)v25 + 24);
      v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 5);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
    }
    if (*((char *)v25 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v25 + 6), *((_QWORD *)v25 + 7));
      v25 = *(__int128 **)(a1 + 32);
    }
    else
    {
      v30 = v25[3];
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 8);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    }
    v37 = *(__int128 *)((char *)v25 + 72);
    v38 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_22FF661D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&a18);
  realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&a19);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0,std::allocator<realityio::`anonymous namespace'::coalesceRealityKitComponentAnimationsIntoAnimationLibraries(REEngine *,realityio::EngineQueueManager &,realityio::ArbitraryComponentBuilder::AnimationLibrary const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE48E8;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE48E8;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  realityio::SkeletalAnimationAggregationBuilder *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  realityio::TransformAnimationAggregationBuilder *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  realityio::SpatialAudioComponentBuilder *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  realityio::SkeletalAnimationAggregationBuilder *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unsigned int *v54;
  unsigned int v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *__p[2];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)realityio::EntityBuilder::kRootEntityInputName((realityio::EntityBuilder *)v2);
  v5 = (uint64_t)Data;
  v6 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v6)
  {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
    v6 = (unint64_t)Data;
  }
  v7 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(Data);
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>(v5, (uint64_t *)(v6 + 64), v7, (int *)__p, &v81);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v80 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v72 = v8;
  v11 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v80);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = realityio::SkeletalAnimationAggregationBuilder::kOutputName(v11);
  v16 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 1;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v79 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v71 = v17;
  v20 = (realityio::TransformAnimationAggregationBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v79);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = realityio::TransformAnimationAggregationBuilder::kOutputName(v20);
  v25 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v25)
    v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 1;
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v78 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = (realityio::SpatialAudioComponentBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v78);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = realityio::SpatialAudioComponentBuilder::kOutputName(v29);
  v34 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v34)
    v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 1;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v77 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v77);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v38);
  v43 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v43)
    v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 1;
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v76 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = a1;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v76);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationLibrary");
  v51 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v51)
    v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  MEMORY[0x2348B274C](&v73, "RealityKitComponent");
  v52 = (std::__shared_weak_count *)operator new(0x60uLL);
  v52->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v52->__shared_owners_;
  v52->__shared_weak_owners_ = 0;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
  v81 = *(_OWORD *)__p;
  v82 = v75;
  __p[0] = 0;
  __p[1] = 0;
  v75 = 0;
  realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v52[1].__vftable, (uint64_t)&v81, (uint64_t *)v51 + 3, &v73, 1);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if ((v73 & 7) != 0)
  {
    v54 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v81 = v52 + 1;
  *((_QWORD *)&v81 + 1) = v52;
  do
    v56 = __ldxr(p_shared_owners);
  while (__stxr(v56 + 1, p_shared_owners));
  realityio::InputsDescriptor::addInputDescriptor(v3, &v81);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *v47 = v3;
  v47[1] = (uint64_t)v2;
  do
    v60 = __ldaxr(p_shared_owners);
  while (__stlxr(v60 - 1, p_shared_owners));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  if (v44)
  {
    v61 = (unint64_t *)&v44->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v35)
  {
    v63 = (unint64_t *)&v35->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v26)
  {
    v65 = (unint64_t *)&v26->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v71)
  {
    v67 = (unint64_t *)&v71->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v72)
  {
    v69 = (unint64_t *)&v72->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_22FF66978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  unint64_t *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;

  if (a17 < 0)
    operator delete(__p);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v28)
  {
    v37 = (unint64_t *)&v28->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (a9)
  {
    v39 = (unint64_t *)&a9->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  if (a10)
  {
    v41 = (unint64_t *)&a10->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  do
    v43 = __ldaxr(v27);
  while (__stlxr(v43 - 1, v27));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t realityio::`anonymous namespace'::getAllEntityGeneratingPrimPathsForSubtree@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  pxrInternal__aapl__pxrReserved__ *IsEntityProviding;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *PrimPath;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v40) & 1) != 0)
  {
    IsEntityProviding = (pxrInternal__aapl__pxrReserved__ *)realityio::calculateIsEntityProviding((realityio *)v40, v5);
    if ((_DWORD)IsEntityProviding)
      IsEntityProviding = (pxrInternal__aapl__pxrReserved__ *)std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)a2, a2);
    UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsEntityProviding);
    v9 = *(_QWORD *)UsdPrimDefaultPredicate;
    v8 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
    v10 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
    v27 = v8;
    *(_QWORD *)&v28 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v40, (uint64_t *)&v26, (uint64_t)&v30);
    v26 = v30;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v27 + 1, &v32);
    v28 = v33;
    v29 = v34;
    while (1)
    {
      v22 = v35;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v36);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v23 + 1, &v37);
      v24 = v38;
      v25 = v39;
      if (v26 == v22 && v27 == v23)
        v11 = pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v28, (uint64_t)&v24) ^ 1;
      else
        v11 = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
      if ((v11 & 1) == 0)
        break;
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v26, (uint64_t)&v22);
      v13 = realityio::calculateIsEntityProviding((realityio *)&v22, v12);
      if ((BYTE8(v24) & 7) != 0)
      {
        v14 = (unsigned int *)(*((_QWORD *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
      if (v23)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
      if (v13)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v26, (uint64_t)&v22);
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v22);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, PrimPath, PrimPath);
        if ((BYTE8(v24) & 7) != 0)
        {
          v17 = (unsigned int *)(*((_QWORD *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
        if (v23)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v26);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  }
  if ((v43 & 7) != 0)
  {
    v19 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  result = v41;
  if (v41)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  return result;
}

void sub_22FF67038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _DWORD *a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::StaticPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FF67104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,std::allocator<realityio::StaticPrimInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE4FB8;
  std::allocator<realityio::StaticPrimInputDescriptor>::construct[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_22FF6716C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::StaticPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::StaticPrimInputDescriptor>::construct[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5, int *a6)
{
  int v10;
  int v11;
  std::string v12;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v12 = *(std::string *)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v10, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a5 + 1);
  realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor(a2, (uint64_t)&v12, a4, &v10, *a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_22FF67294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, int a5)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor(a1, (__int128 *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_24FDE5008;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 48), a4 + 1);
  return a1;
}

void sub_22FF6736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::StaticPrimInputDescriptor::~StaticPrimInputDescriptor(realityio::StaticPrimInputDescriptor *this)
{
  realityio::StaticPrimInputDescriptor::~StaticPrimInputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  *(_QWORD *)this = &off_24FDE5008;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 44);
  realityio::InputDescriptor::~InputDescriptor(this);
}

_QWORD *realityio::StaticPrimInputDescriptor::resolvedPrimPaths@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a2, (unsigned int *)(a1 + 44), (_DWORD *)(a1 + 44));
}

void sub_22FF673EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FF674A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE4958;
  std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_22FF67508(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string __p;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v15[0] = &off_24FDE49A8;
  v15[1] = a5;
  v16 = v15;
  realityio::CustomInputDescriptor::CustomInputDescriptor(a2, (uint64_t)&__p, a4, (uint64_t)v15, *a6);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v10, v11);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF67660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE49A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE49A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),std::allocator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (*)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

_QWORD *realityio::CustomInputDescriptor::CustomInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE4A58;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a4);
  return a1;
}

void sub_22FF67818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor *v14;

  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void realityio::CustomInputDescriptor::~CustomInputDescriptor(realityio::CustomInputDescriptor *this)
{
  realityio::CustomInputDescriptor::~CustomInputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24FDE4A58;
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

uint64_t realityio::CustomInputDescriptor::resolvedPrimPaths(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  int v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;

  v17 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v6 = v17;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, (_DWORD *)(a1 + 20));
  v14 = v6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v16);
  if (pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 0, a2))
  {
    while (pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, 0, a2));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator((uint64_t)v10, &v17, &v15, (__int128 *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator((uint64_t)&v8, &v14, &v12, (__int128 *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(a3, (uint64_t)v10, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
}

void sub_22FF67AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 - 64));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  int v14;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((*((_BYTE *)*a1 + 57) & 1) != 0)
  {
    v9 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1) + 32);
    if (v9)
      goto LABEL_6;
    return 0;
  }
  v9 = *((_QWORD *)*a1 + 4);
  if (!v9)
    return 0;
  if (!v8)
  {
    v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    v11 = a2;
  else
    v11 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v11, NameToken);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, &v14);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  v10 = 1;
LABEL_10:
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
  return pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a4, (uint64_t)a1, v10)|| !pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *PrimDataAtPathOrInPrototype;
  _BYTE *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  BOOL v21;
  uint64_t Text;
  const char *v24;
  _QWORD v25[4];
  char v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  v9 = *((_QWORD *)*a1 + 5);
  if ((v9 & 7) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (v10)
    v11 = v10 == (_QWORD)a3;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = v8;
    do
    {
      v13 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a4, (uint64_t)&v28, v12);
      v10 = (unint64_t)v28;
      if (v13)
        break;
      *a1 = v28;
      v14 = *(_QWORD *)(v10 + 40);
      v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
    }
    while (v10 && v10 != (_QWORD)a3);
  }
  if (!v10)
  {
    v16 = *((_QWORD *)*a1 + 5);
    if ((v16 & 7) != 0)
      v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    else
      v10 = 0;
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*a1 == a3)
    {
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_32:
      v19 = v25;
LABEL_34:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
      goto LABEL_35;
    }
    if (*a1 == v28)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v27, NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v19 = v27;
      goto LABEL_34;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v25);
    v17 = *a1;
    if (!*a1
      || (*((_BYTE *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v17 + 16)))
    {
      goto LABEL_35;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (*((_QWORD *)PrimDataAtPathOrInPrototype + 2) != *(_QWORD *)a2)
        goto LABEL_35;
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, (int *)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_32;
    }
    v25[0] = "usd/primData.h";
    v25[1] = "Usd_MoveToNextSiblingOrParent";
    v25[2] = 576;
    v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, PrimDataPtr,"
             " const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    v26 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper())
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_35:
  if (v28)
    v21 = 1;
  else
    v21 = *a1 == 0;
  return !v21;
}

void sub_22FF67F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = 0x2000;
  if (!a3)
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  v5 = *a1;
  v6 = a1[1];
  v9 = *a1 & v4;
  v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::UsdPrimSubtreeIterator(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  __int128 v8;
  uint64_t v10;

  *(_QWORD *)a1 = *a2;
  v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  v8 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(_QWORD *)a1
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 16), a1)&& pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1, v7, 0, (uint64_t *)(a1 + 16)))
  {
    *(_QWORD *)a1 = 0;
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v7, (int *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  }
  return a1;
}

void sub_22FF68170(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(uint64_t *a1, uint64_t a2)
{
  int v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::_Eval<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(a1, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  v7 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>((_QWORD *)a1, 0, a1, 0xFu, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    result = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,15ul>,true,true>((_QWORD *)(a1 + 8), 0, a1 + 8, 0xFu, (_QWORD *)(a2 + 8));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)this;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v8, (_DWORD *)this + 2);
  result = v8;
  if (v8)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return result;
}

void sub_22FF68318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(pxrInternal__aapl__pxrReserved__::Usd_PrimData **this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t *v3;
  _BOOL8 result;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 1);
  v3 = (uint64_t *)(this + 2);
  result = pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(this, (pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 1), 0, (uint64_t *)this + 2);
  if (!result)
  {
    do
      result = pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(this, v2, 0, v3);
    while (result);
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::DescendantPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  std::string v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v15 = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&v15, a3, a5);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE4AE8;
  v9 = *a4;
  v16[0] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v16[0] = (uint64_t)v10;
  }
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)(a1 + 6), v16, 1);
  if ((v16[0] & 7) != 0)
  {
    v12 = (unsigned int *)(v16[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return a1;
}

void sub_22FF684FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void realityio::DescendantPrimInputDescriptor::~DescendantPrimInputDescriptor(realityio::DescendantPrimInputDescriptor *this)
{
  *(_QWORD *)this = &off_24FDE4AE8;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  *(_QWORD *)this = &off_24FDE4AE8;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::DescendantPrimInputDescriptor::resolvedPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *IsValid;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  pxrInternal__aapl__pxrReserved__ *v12;
  unsigned int *PrimPath;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  _BYTE v19[8];
  pxrInternal__aapl__pxrReserved__ *v20;
  uint64_t v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v41);
  if ((IsValid & 1) != 0)
  {
    UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsValid);
    v9 = *(_QWORD *)UsdPrimDefaultPredicate;
    v8 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
    v10 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    v27 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
    v28 = v8;
    *(_QWORD *)&v29 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v41, (uint64_t *)&v27, (uint64_t)&v31);
    v27 = v31;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, &v32);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v28 + 1, &v33);
    v29 = v34;
    v30 = v35;
    v23 = v36;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v37);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v24 + 1, &v38);
    v25 = v39;
    v26 = v40;
    while (v27 != v23
         || v28 != v24
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v29, (uint64_t)&v25))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v27, (uint64_t)v19);
      v12 = v20;
      if (!v20 || (*((_BYTE *)v20 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v20, v11);
      if ((_QWORD *)(a3 + 56) != std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a3 + 48, *((_QWORD **)v12 + 3)))
      {
        PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v19);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a4, PrimPath, PrimPath);
      }
      if ((v22 & 7) != 0)
      {
        v14 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v20);
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v27);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  }
  if ((v44 & 7) != 0)
  {
    v16 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  result = v42;
  if (v42)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  return result;
}

void sub_22FF6888C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v2 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_22FF68954(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5 & 0xFFFFFFFFFFFFFFF8, v7 = a2[4] & 0xFFFFFFFFFFFFFFF8, v6 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5 & 0xFFFFFFFFFFFFFFF8;
    if ((v10[4] & 0xFFFFFFFFFFFFFFF8) < v15)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4] & 0xFFFFFFFFFFFFFFF8;
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= (a4[4] & 0xFFFFFFFFFFFFFFF8))
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4] & 0xFFFFFFFFFFFFFFF8;
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = v2;
  do
  {
    v7 = v3[4] & 0xFFFFFFFFFFFFFFF8;
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < (v6[4] & 0xFFFFFFFFFFFFFFF8))
    return v2;
  return v6;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE4B38;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE4B38;
}

char *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::AnimationSceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22FF69024(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 96);
    std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (a1[79] < 0)
      operator delete(*((void **)a1 + 7));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::TimelineGroupFactory>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TimelineGroupFactory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TimelineGroupFactory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TimelineGroupFactory>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  uint64_t *result;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v11 = operator new(0x78uLL);
    v11[2] = *(_OWORD *)a3;
    *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v11 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *((_DWORD *)v11 + 22) = *(_DWORD *)(a3 + 56);
    v12 = *(_QWORD *)(a3 + 40);
    v13 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *((_QWORD *)v11 + 9) = v12;
    *((_QWORD *)v11 + 10) = v13;
    v11[6] = *(_OWORD *)(a3 + 64);
    *((_QWORD *)v11 + 14) = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = (uint64_t *)v11;
    v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    else
    {
      v15 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDE4BB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDE4BB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  uint64_t v3;
  uint64_t TimelineAsset;
  uint64_t v5;
  char *Name;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 *v20;
  std::string *v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  __int128 v26;
  int64_t v27;

  ServiceLocator = REEngineGetServiceLocator();
  v3 = MEMORY[0x2348B1264](ServiceLocator);
  TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "default scene animation");
  v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  REAnimationLibraryDefinitionAddEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v23, Name);
  v7 = std::string::append(&v23, ".");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v24, "timelineGroup.");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v25, "default scene animation");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v27 = v11->__r_.__value_.__r.__words[2];
  v26 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v13 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v22, v13);
  v14 = std::string::append(&v22, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v23, "entityAnimationScene.");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v24, "default scene animation");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v27 >= 0)
    v20 = &v26;
  else
    v20 = (__int128 *)v26;
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 48), TimelineAsset, (uint64_t)v20);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v25;
  else
    v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 48), v5, (uint64_t)v21);
  RERelease();
  RERelease();
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
}

void sub_22FF694FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDE4C38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDE4C38;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  uint64_t v3;
  uint64_t TimelineAsset;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::string *p_p;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  char *Name;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  char *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string __p;
  void *v36;
  char v37;
  uint64_t v38;

  ServiceLocator = REEngineGetServiceLocator();
  v3 = MEMORY[0x2348B1264](ServiceLocator);
  TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "default subtree animation");
  v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  std::string::basic_string[abi:ne180100]<0>(&__p, "default subtree animation");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  REAnimationLibraryDefinitionAddEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  v6 = *(_QWORD **)(a1 + 48);
  if (v6[2])
  {
    v9 = (__int128 *)*v6;
    v7 = (__int128 *)(v6 + 1);
    v8 = v9;
    if (v9 != v7)
    {
      do
      {
        std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](&__p, v8 + 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        realityio::TimelineGroupFactory::createTimelineAsset((float *)&v36, v3, (const char *)p_p);
        v11 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (v37 < 0)
          operator delete(v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)*((_QWORD *)v8 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(__int128 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (__int128 *)*((_QWORD *)v8 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != v7);
    }
  }
  Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v32, Name);
  v16 = std::string::append(&v32, ".");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v33, "timelineGroup.");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v34, "default subtree animation");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v22 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v31, v22);
  v23 = std::string::append(&v31, ".");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v32, "subtreeAnimationScene.");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v33, "default subtree animation");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), TimelineAsset, (uint64_t)v29);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v34;
  else
    v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), v5, (uint64_t)v30);
  RERelease();
  RERelease();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF69A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_2>,void ()(void)>::target_type()
{
}

uint64_t realityio::`anonymous namespace'::annotateSubTimelines(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t Size;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Asset;
  const __CFString *Type;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v19;
  void *__p[2];
  char v22;
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  REAssetCopyDependencyArray();
  Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    v7 = Size;
    v8 = 0;
    v9 = *MEMORY[0x24BEDB800];
    v19 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10 = MEMORY[0x24BEDB848] + 16;
    do
    {
      Asset = REAssetDynamicArrayGetAsset();
      Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, CFSTR("Timeline"), 0) == kCFCompareEqualTo)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
        v13 = *(char *)(a1 + 23);
        if (v13 >= 0)
          v14 = a1;
        else
          v14 = *(_QWORD *)a1;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a1 + 23);
        else
          v15 = *(_QWORD *)(a1 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"_subTimeline_", 13);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (v22 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        realityio::Builder::addAsset(a3, Asset, (uint64_t)v17);
        if (v22 < 0)
          operator delete(__p[0]);
        std::stringbuf::str();
        if (v22 < 0)
          operator delete(__p[0]);
        v23[0] = v9;
        *(_QWORD *)((char *)v23 + *(_QWORD *)(v9 - 24)) = v19;
        v23[1] = v10;
        if (v24 < 0)
          operator delete((void *)v23[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x2348B4DA4](&v25);
      }
      ++v8;
    }
    while (v7 != v8);
  }
  return RERelease();
}

void sub_22FF69D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_22FF69E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](a1 + 112);
  return a1;
}

std::string *std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string::size_type v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_QWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 14);
  this[2].__r_.__value_.__r.__words[2] = 0;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = v7;
  this[2].__r_.__value_.__r.__words[0] = v6;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  v9 = *((_QWORD *)a2 + 8);
  v8 = *((_QWORD *)a2 + 9);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TimelineGroupFactory::TimelineData>>((uint64_t)&this[3].__r_.__value_.__l.__size_, v10 >> 6);
    v12 = 0;
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    this[3].__r_.__value_.__l.__size_ = (std::string::size_type)&v11[64 * v13];
    do
    {
      realityio::TimelineGroupFactory::TimelineData::TimelineData((std::string *)&v11[v12], (__int128 *)(v9 + v12));
      v12 += 64;
    }
    while (v9 + v12 != v8);
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v11[v12];
  }
  return this;
}

void sub_22FF6A03C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDE4CB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDE4CB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  uint64_t v3;
  uint64_t TimelineAsset;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  std::string *p_p;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  char *Name;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  char *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string __p;
  void *v36;
  char v37;
  uint64_t v38;

  ServiceLocator = REEngineGetServiceLocator();
  v3 = MEMORY[0x2348B1264](ServiceLocator);
  TimelineAsset = realityio::TimelineGroupFactory::createTimelineAsset(*(float **)(a1 + 16), v3, "global scene animation");
  v5 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
  std::string::basic_string[abi:ne180100]<0>(&__p, "global scene animation");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  REAnimationLibraryDefinitionInsertEntryAsset();
  REAnimationLibraryDefinitionAddKeyedEntryIndex();
  v6 = *(_QWORD **)(a1 + 48);
  if (v6[2])
  {
    v9 = (__int128 *)*v6;
    v7 = (__int128 *)(v6 + 1);
    v8 = v9;
    if (v9 != v7)
    {
      do
      {
        std::pair<std::string const,realityio::TimelineGroupFactory>::pair[abi:ne180100](&__p, v8 + 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        realityio::TimelineGroupFactory::createTimelineAsset((float *)&v36, v3, (const char *)p_p);
        v11 = REAnimationSceneAssetCreateWithTimelineAndEntityDefinition();
        REAnimationLibraryDefinitionAddEntryAsset();
        REAnimationLibraryDefinitionAddKeyedEntryIndex();
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
        std::vector<realityio::TimelineGroupFactory::TimelineData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        if (v37 < 0)
          operator delete(v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)*((_QWORD *)v8 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(__int128 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (__int128 *)*((_QWORD *)v8 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v8;
            v8 = v13;
          }
          while (!v14);
        }
        v8 = v13;
      }
      while (v13 != v7);
    }
  }
  Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v32, Name);
  v16 = std::string::append(&v32, ".");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v33, "timelineGroup.");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v34, "global scene animation");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v22 = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v31, v22);
  v23 = std::string::append(&v31, ".");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v32, "globalAnimationScene.");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v33, "global scene animation");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), TimelineAsset, (uint64_t)v29);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v34;
  else
    v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), v5, (uint64_t)v30);
  RERelease();
  RERelease();
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF6A520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_3>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE4D38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE4D38;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *Name;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  int64_t v15;
  uint64_t AnimationLibraryAsset;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (!AnimationLibraryAsset)
    goto LABEL_10;
  REAnimationLibraryComponentGetComponentType();
  v17[0] = &off_24FDE4DA8;
  v17[1] = &AnimationLibraryAsset;
  v18 = v17;
  __p[0] = (void *)REEntityGetOrAddComponentByClass();
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, void **))(*v18 + 48))(v18, __p);
  RENetworkMarkComponentDirty();
  v3 = v18;
  if (v18 == v17)
  {
    v4 = 4;
    v3 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  REAnimationComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    REAnimationComponentGetComponentType();
    REEntityAddComponentByClass();
    v5 = *(_QWORD *)(a1 + 32);
    __p[0] = (void *)REAnimationComponentGetComponentType();
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v5 + 40), (unint64_t *)__p, (uint64_t *)__p);
  }
LABEL_10:
  Name = (char *)REEntityGetName();
  std::string::basic_string[abi:ne180100]<0>(&v12, Name);
  v7 = std::string::append(&v12, ".");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v13, "animationLibrary");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v15 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  realityio::Builder::addAsset(*(uint64_t **)(a1 + 32), AnimationLibraryAsset, (uint64_t)v11);
  RERelease();
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_22FF6A8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::buildSceneAssetsAndAnimationLibraries(realityio::Builder &,BOOL,realityio::Inputs *,REEntity *,std::string const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*> const&,std::unordered_map<REEntity *,realityio::SpatialAudioComponentBuilder::SpatialAudioComponentDataT const*> const&,std::unordered_map<REEntity *,realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT const*> const&,std::vector<realityio::TimelineGroupFactory *> &,std::vector<std::map<std::string,realityio::TimelineGroupFactory> *,std::allocator<std::map<std::string,realityio::TimelineGroupFactory> *>> &,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE4DA8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE7__cloneEPNS0_6__baseIS2D_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE4DA8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEEclEOS2C_()
{
  return REAnimationLibraryComponentAssignAnimationLibraryAsset();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS_7BuilderEbPNS_6InputsEP8REEntityRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS6_13unordered_mapIS5_PKNS_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS6_4hashIS5_EENS6_8equal_toIS5_EENSA_INS6_4pairIKS5_SJ_EEEEEERKNSF_IS5_PKNS_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESL_SN_NSA_INSO_ISP_SY_EEEEEERKNSF_IS5_PKNS_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESL_SN_NSA_INSO_ISP_S17_EEEEEERKNSF_IS5_PKNSG_29BlendShapeAnimationSceneDataTESL_SN_NSA_INSO_ISP_S1F_EEEEEERNS6_6vectorIPNS_20TimelineGroupFactoryENSA_IS1N_EEEERNS1L_IPNS6_3mapISC_S1M_NS6_4lessISC_EENSA_INSO_ISD_S1M_EEEEEENSA_IS1X_EEEERNS6_13unordered_setIS5_SL_SN_NSA_IS5_EEEEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS2_7BuilderEbPNS2_6InputsEP8REEntityRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_13unordered_mapIS8_PKNS2_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS_4hashIS8_EENS_8equal_toIS8_EENSC_INS_4pairIKS8_SL_EEEEEERKNSH_IS8_PKNS2_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S10_EEEEEERKNSH_IS8_PKNS2_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESN_SP_NSC_INSQ_ISR_S19_EEEEEERKNSH_IS8_PKNSI_29BlendShapeAnimationSceneDataTESN_SP_NSC_INSQ_ISR_S1H_EEEEEERNS_6vectorIPNS2_20TimelineGroupFactoryENSC_IS1P_EEEERNS1N_IPNS_3mapISE_S1O_NS_4lessISE_EENSC_INSQ_ISF_S1O_EEEEEENSC_IS1Z_EEEERNS_13unordered_setIS8_SN_SP_NSC_IS8_EEEEENK3__0clEvEUlT_E_NSC_IS29_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio37buildSceneAssetsAndAnimationLibrariesERNS_7BuilderEbPNS_6InputsEP8REEntityRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS6_13unordered_mapIS5_PKNS_35SkeletalAnimationAggregationBuilder27SkeletalAnimationSceneDataTENS6_4hashIS5_EENS6_8equal_toIS5_EENSA_INS6_4pairIKS5_SJ_EEEEEERKNSF_IS5_PKNS_36TransformAnimationAggregationBuilder28TransformAnimationSceneDataTESL_SN_NSA_INSO_ISP_SY_EEEEEERKNSF_IS5_PKNS_28SpatialAudioComponentBuilder26SpatialAudioComponentDataTESL_SN_NSA_INSO_ISP_S17_EEEEEERKNSF_IS5_PKNSG_29BlendShapeAnimationSceneDataTESL_SN_NSA_INSO_ISP_S1F_EEEEEERNS6_6vectorIPNS_20TimelineGroupFactoryENSA_IS1N_EEEERNS1L_IPNS6_3mapISC_S1M_NS6_4lessISC_EENSA_INSO_ISD_S1M_EEEEEENSA_IS1X_EEEERNS6_13unordered_setIS5_SL_SN_NSA_IS5_EEEEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE4E38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE4E38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::operator()()
{
  uint64_t result;

  REAnimationLibraryComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    REAnimationLibraryComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
  REAnimationComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (!result)
  {
    REAnimationComponentGetComponentType();
    return REEntityRemoveComponentByClass();
  }
  return result;
}

uint64_t std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0,std::allocator<realityio::removeAnimationLibraries(realityio::Inputs *,REEntity *,std::unordered_set<REEntity *> &)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v13 = std::string::append(&v16, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v19;
    v15 = v21;
    *(_QWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v15;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v21 + 7);
    LOBYTE(v15) = HIBYTE(v21);
    v21 = 0uLL;
    v20 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v15;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_22FF6ACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

uint64_t realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)a1)
  {
    v3 = (void **)(a1 + 8);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF6AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
LABEL_6:
      operator delete(v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    v2 = *(void **)(a1 + 24);
    goto LABEL_6;
  }
  return a1;
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v13 = std::string::append(&v16, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v19;
    v15 = v21;
    *(_QWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v15;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v21 + 7);
    LOBYTE(v15) = HIBYTE(v21);
    v21 = 0uLL;
    v20 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v15;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_22FF6B0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16))
    return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB770]);
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE4EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE4EB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(a1 + 24);
  REAssetGetAssetManager();
  REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset();
  if (REAnimationLibraryDefinitionGetEntryCount())
  {
    REAnimationLibraryDefinitionGetEntryAsset();
    REAnimationComponentGetComponentType();
    v2 = REEntityGetOrAddComponentByClass();
    realityio::Builder::addComponent(v1, v2);
    RENetworkMarkComponentDirty();
    REAnimationHandoffDefaultDescEx();
    REAnimationComponentPlay();
  }
  return RERelease();
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE4F38;
  return result;
}

void std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE4F38;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::operator()()
{
  uint64_t result;

  result = REAnimationComponentActiveAnimationCount();
  if (result)
    return REAnimationComponentStopAllAnimations();
  return result;
}

uint64_t std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::AnimationSceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(REComponent *)>::target_type()
{
}

uint64_t realityio::TransformAnimationAssetBuilder::kOutputName(realityio::TransformAnimationAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "transform_animation_asset");
    realityio::TransformAnimationAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::TransformAnimationAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_22FF6B458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformAnimationAssetBuilder::kOutputLibraryName(realityio::TransformAnimationAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "transform_animation_library_asset");
    realityio::TransformAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName = (uint64_t)v3;
  }
  return realityio::TransformAnimationAssetBuilder::kOutputLibraryName(void)::kOutputLibraryName;
}

void sub_22FF6B50C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAssetBuilder *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(realityio::TransformAnimationAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TransformAnimationAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformAnimationAssetBuilderIdentifier);
  realityio::generateTransformAnimationDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE5220;
  v21 = v20;
  v18[0] = &off_24FDE52A0;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE5048;
  *((_QWORD *)this + 35) = 0;
  *((_OWORD *)this + 18) = xmmword_230204270;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::TransformAnimationAssetBuilder *)((char *)this + 344));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_22FF6B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  uint64_t v28;
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *v29;
  uint64_t v30;

  v30 = v28;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v30, *((_QWORD **)v27 + 41));
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT(realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *this)
{
  *(_QWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = xmmword_230204270;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<RESRT>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<RESRT>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

void ___Z9sampleSRTmdRN32pxrInternal__aapl__pxrReserved__16UsdGeomXformableE_block_invoke(uint64_t a1, uint64_t a2)
{
  realityio *LocalTransformation;
  _OWORD *v5;
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  uint8_t buf[16];
  char v10;
  _BYTE v11[128];

  v10 = 0;
  LocalTransformation = (realityio *)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation();
  if ((_DWORD)LocalTransformation)
  {
    MEMORY[0x2348B199C](buf, v11);
    *(_DWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    DWORD2(v7) = 0;
    *(_QWORD *)&v7 = 0;
    REDecomposeMatrix();
    v5 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 48 * a2);
    *v5 = *(_OWORD *)buf;
    v5[1] = v8;
    v5[2] = v7;
  }
  else
  {
    v6 = *(NSObject **)(realityio::logObjects(LocalTransformation) + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_DEFAULT, "Stopping operation to read animation because USD call failed.", buf, 2u);
    }
  }
}

uint64_t realityio::TransformAnimationAssetBuilder::run(realityio::TransformAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  double v15;
  double v16;
  unsigned int **Data;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  double v35;
  realityio *TimeSamples;
  double v37;
  double v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t Text;
  uint64_t SampledSRTAnimationTimelineAsset;
  realityio::TransformAnimationAssetBuilder *v43;
  realityio::TransformAnimationAssetBuilder *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t result;
  void *v62[2];
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _QWORD v75[4];
  _BYTE v76[16];
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  _BYTE v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t buf[16];
  __int128 v85;
  uint64_t v86;
  std::string v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, buf);
  v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  v8 = (_QWORD *)(v6 + 72) != v7 && *(_QWORD *)(*(_QWORD *)(v6 + 40) + 104 * v7[5] + 24) == *(_QWORD *)buf;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v80);
    v9 = *(unsigned int **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf[8])
                    + 14))
        v9 = *(unsigned int **)buf;
      else
        v9 = 0;
    }
    v79 = v9;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v79);
    v10 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v11 = (unsigned int *)(*(_QWORD *)&buf[8] + 8);
      do
      {
        v12 = __ldxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v79);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v14);
    v16 = v15;
    if (v15 == 0.0)
      goto LABEL_89;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v77 = MEMORY[0x24BEE9D78] + 16;
    if (!v78
      || (*(_BYTE *)(v78 + 57) & 8) != 0
      || ((*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D78] + 48))(&v77) & 1) == 0
      || !pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v77))
    {
LABEL_88:
      MEMORY[0x2348B2080](&v77);
LABEL_89:
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v79);
      goto LABEL_90;
    }
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v76, 2028, (uint64_t)this);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v75[3] = 0;
    v75[0] = MEMORY[0x24BEE9DB0] + 16;
    Data = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v75, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 1));
    v70 = *(_DWORD *)buf;
    v71 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 48);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72, &v85);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v73, (_DWORD *)&v85 + 1);
    v74 = *((_QWORD *)&v85 + 1);
    if ((BYTE8(v85) & 7) != 0)
    {
      v20 = (unsigned int *)(*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v86 & 7) != 0)
    {
      v22 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    if ((BYTE8(v85) & 7) != 0)
    {
      v24 = (unsigned int *)(*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
    if (*(_QWORD *)&buf[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
    v26 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v75, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v26 + 2));
    v65 = *(_DWORD *)buf;
    v66 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 48);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, &v85);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, (_DWORD *)&v85 + 1);
    v69 = *((_QWORD *)&v85 + 1);
    if ((BYTE8(v85) & 7) != 0)
    {
      v29 = (unsigned int *)(*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if ((v30 & 1) == 0)
        v69 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v86 & 7) != 0)
    {
      v31 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    if ((BYTE8(v85) & 7) != 0)
    {
      v33 = (unsigned int *)(*((_QWORD *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
    if (*(_QWORD *)&buf[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
    std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = (char *)this + 328;
    v35 = 1.0 / v16;
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v70)
      && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v65))
    {
      v86 = 0;
      *(_OWORD *)buf = 0u;
      v85 = 0u;
      v64 = 0;
      *(_OWORD *)v62 = 0u;
      v63 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>();
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v62);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)buf);
    }
    v62[0] = 0;
    v62[1] = 0;
    *(_QWORD *)&v63 = 0;
    TimeSamples = (realityio *)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples();
    if (v62[1] == v62[0])
    {
      v39 = *(id *)(realityio::logObjects(TimeSamples) + 24);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77, &v87);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = Text;
        _os_log_impl(&dword_22FF26000, v39, OS_LOG_TYPE_DEFAULT, "Empty transform animation samples %s", buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
      }
    }
    else
    {
      v37 = *(double *)v62[0];
      v38 = *((double *)v62[1] - 1);
      if (*(double *)v62[0] <= v38)
      {
        SampledSRTAnimationTimelineAsset = createSampledSRTAnimationTimelineAsset(a2, (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v77, *(double *)v62[0], *((double *)v62[1] - 1), v35);
        realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)buf);
        realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=((int *)this + 70, (int *)buf);
        realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)buf);
        if (SampledSRTAnimationTimelineAsset)
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, &v87);
          realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT((uint64_t)buf, SampledSRTAnimationTimelineAsset, &v87, v37, v38, v35);
          realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=((int *)this + 70, (int *)buf);
          realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)buf);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
          realityio::Builder::addAsset((uint64_t *)this, SampledSRTAnimationTimelineAsset, 0);
          v44 = (realityio::TransformAnimationAssetBuilder *)RERelease();
          v46 = *((_QWORD *)this + 2);
          v45 = *((_QWORD *)this + 3);
          *(_QWORD *)buf = v46;
          *(_QWORD *)&buf[8] = v45;
          if (v45)
          {
            v47 = (unint64_t *)(v45 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          v49 = (__int128 *)realityio::TransformAnimationAssetBuilder::kOutputName(v44);
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 280;
          realityio::Outputs::storeValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>(v46, v49, &v87);
          v43 = (realityio::TransformAnimationAssetBuilder *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        }
        v51 = *((_QWORD *)this + 2);
        v50 = *((_QWORD *)this + 3);
        *(_QWORD *)buf = v51;
        *(_QWORD *)&buf[8] = v50;
        if (v50)
        {
          v52 = (unint64_t *)(v50 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = (__int128 *)realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v43);
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 320;
        realityio::Outputs::storeValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v51, v54, &v87);
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        goto LABEL_75;
      }
      v39 = *(id *)(realityio::logObjects(TimeSamples) + 24);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v77, &v87);
        v40 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v40;
        _os_log_impl(&dword_22FF26000, v39, OS_LOG_TYPE_DEFAULT, "Animation endTime is smaller than startTime %s", buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
      }
    }

LABEL_75:
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if ((v69 & 7) != 0)
    {
      v55 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
    if (v66)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
    if ((v74 & 7) != 0)
    {
      v57 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
    if (v71)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
    MEMORY[0x2348B21DC](v75);
    realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v76);
    goto LABEL_88;
  }
LABEL_90:
  if ((v83 & 7) != 0)
  {
    v59 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
  result = v81;
  if (v81)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
  return result;
}

void sub_22FF6C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,unsigned int *a42,__int16 a43,char a44,char a45)
{
  void *v45;
  uint64_t v46;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v46 - 176));

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a25);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a29);
  MEMORY[0x2348B21DC](&a33);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a37);
  MEMORY[0x2348B2080](&a39);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a42);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a43);
  _Unwind_Resume(a1);
}

void sub_22FF6C6B8()
{
  JUMPOUT(0x22FF6C6B0);
}

uint64_t createSampledSRTAnimationTimelineAsset(realityio::Inputs *a1, pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a2, double a3, double a4, double a5)
{
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  uint64_t v22;
  uint64_t String;
  __int128 v24;
  uint64_t SampledSRTAnimation;
  uint64_t v26;
  __n128 (*v27)(__n128 *, __n128 *);
  std::string *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *__dst;
  uint64_t v36;
  realityio::Inputs *v37;
  _QWORD v38[7];
  _QWORD block[4];
  id v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  std::string v44;
  std::string *v45;
  void (*v46)(uint64_t);
  const char *v47;
  void *__p;
  void *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v37 = a1;
  v44.__r_.__value_.__r.__words[0] = 0;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)&v44;
  v44.__r_.__value_.__r.__words[2] = 0x4812000000;
  v45 = (std::string *)__Block_byref_object_copy_;
  v46 = __Block_byref_object_dispose_;
  v47 = "";
  __p = 0;
  v49 = 0;
  v50 = 0;
  std::vector<RESRT>::resize((uint64_t)&__p, (unint64_t)(a4 - a3 + 1.0));
  dispatch_get_global_queue(25, 0);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = 0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(_QWORD *)(v44.__r_.__value_.__l.__size_ + 56) - *(_QWORD *)(v44.__r_.__value_.__l.__size_ + 48)) >> 4);
  v9 = MEMORY[0x24BDAC760];
  v38[0] = MEMORY[0x24BDAC760];
  v38[1] = 3221225472;
  v38[2] = ___Z9sampleSRTmdRN32pxrInternal__aapl__pxrReserved__16UsdGeomXformableE_block_invoke;
  v38[3] = &unk_24FDE50A0;
  *(double *)&v38[5] = a3;
  v38[6] = a2;
  v38[4] = &v44;
  v10 = v38;
  block[0] = v9;
  block[1] = 3221225472;
  block[2] = ___ZL16dispatchInChunksmmPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvmE_block_invoke;
  block[3] = &unk_24FDE50E0;
  v43 = v8 % 0x3E8;
  v41 = v8 / 0x3E8;
  v42 = 1000;
  v40 = v10;
  dispatch_apply(v8 / 0x3E8 + 1, v7, block);

  __dst = 0;
  v36 = 0;
  v34 = 0;
  v12 = *(_BYTE **)(v44.__r_.__value_.__l.__size_ + 48);
  v11 = *(_BYTE **)(v44.__r_.__value_.__l.__size_ + 56);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    std::vector<RESRT>::__vallocate[abi:ne180100](&v34, 0xAAAAAAAAAAAAAAABLL * (v13 >> 4));
    v14 = (char *)__dst;
    memmove(__dst, v12, v13);
    __dst = &v14[16 * (v13 >> 4)];
  }

  _Block_object_dispose(&v44, 8);
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  v33 = 0;
  v15 = __dst;
  if (__dst == v34)
  {
    v20 = 0;
    if (!__dst)
      return v20;
    goto LABEL_37;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v44, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData((pxrInternal__aapl__pxrReserved__::UsdObject *)&v44);
  if ((v45 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44.__r_.__value_.__r.__words[2]);
  if (v44.__r_.__value_.__l.__size_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44.__r_.__value_.__l.__size_);
  std::string::basic_string[abi:ne180100]<0>(&v44, "RealityKit:interpMode");
  ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_24;
  }
  else if (!ValueAtPath)
  {
    goto LABEL_24;
  }
  v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v19);
  if ((_DWORD)v21)
  {
    v22 = *((_QWORD *)v19 + 1);
    if ((v22 & 4) != 0)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
      v19 = v21;
    }
    if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  }
LABEL_24:
  v31 = 0;
  if (__dst == v34)
  {
    SampledSRTAnimation = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a2, block);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)block);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v24 = *(_OWORD *)String;
      v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)block);
    SampledSRTAnimation = RETimelineDefinitionCreateSampledSRTAnimation();
    RETimelineDefinitionSetInterpolationEnabled();
    RETimelineDefinitionSetTargetPath();
    RETimelineDefinitionSetFrameInterval();
    RETimelineDefinitionSetStartTime();
    RETimelineDefinitionSetEndTime();
    RETimelineDefinitionSetSRTValues();
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  v31 = SampledSRTAnimation;
  v26 = *((_QWORD *)v37 + 6);
  v27 = (__n128 (*)(__n128 *, __n128 *))operator new(0x20uLL);
  *(_QWORD *)v27 = &off_24FDE51A0;
  *((_QWORD *)v27 + 1) = &v37;
  *((_QWORD *)v27 + 2) = &v33;
  *((_QWORD *)v27 + 3) = &v31;
  v45 = (std::string *)v27;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 16))(v26, &v44);
  v28 = v45;
  if (v45 == &v44)
  {
    v29 = 4;
    v28 = &v44;
  }
  else
  {
    if (!v45)
      goto LABEL_36;
    v29 = 5;
  }
  (*(void (**)(std::string *))(v28->__r_.__value_.__r.__words[0] + 8 * v29))(v28);
LABEL_36:
  RERelease();
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v32, 0);
  v20 = v33;
  v15 = v34;
  if (v34)
  {
LABEL_37:
    __dst = v15;
    operator delete(v15);
  }
  return v20;
}

void sub_22FF6CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=(int *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a1;
    v9 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
    }
    if (v4)
    {
      *(_QWORD *)a2 = v4;
      v9 = 0;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v9);
    v5 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    v6 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v6;
    v7 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v7;
    std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(a1 + 8, a2 + 8);
  }
  return (uint64_t *)a1;
}

void realityio::Outputs::storeValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE5320;
  v7[3] = &off_24FDE5370;
  v7[4] = *a3;
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  v9 = (std::__shared_weak_count *)v8[8];
  v8[7] = (uint64_t)(v7 + 3);
  v8[8] = (uint64_t)v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_22FF6CEA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::TransformAnimationAssetBuilder::clear(realityio::TransformAnimationAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  realityio::TransformAnimationAssetBuilder *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  std::mutex *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  realityio::TransformAnimationAssetBuilder *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  const void **v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  char v37;
  std::string v38;
  uint64_t v39;
  __int128 v40;
  std::string __p;

  v4 = (std::mutex *)*((_QWORD *)this + 2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(v4, v8, (uint64_t)&v39);
  v10 = v39;
  if (!(_BYTE)v39)
  {
    v9 = (realityio::TransformAnimationAssetBuilder *)&v38;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v37 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      v36 = (void *)v38.__r_.__value_.__r.__words[0];
      if (!(_BYTE)v39 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v38 = __p;
      v36 = (void *)__p.__r_.__value_.__r.__words[0];
      v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v5)
    goto LABEL_14;
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v10)
      goto LABEL_26;
  }
  else
  {
LABEL_14:
    if (!v10)
      goto LABEL_26;
  }
  v14 = *((_QWORD *)this + 2);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v39 = v14;
  *(_QWORD *)&v40 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputName(v9);
  std::mutex::lock((std::mutex *)(v14 + 64));
  if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)v17);
  std::mutex::unlock((std::mutex *)(v14 + 64));
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v20 = (std::mutex *)*((_QWORD *)this + 2);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v9);
  realityio::Outputs::getRawValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v20, v24, (uint64_t)&v39);
  v26 = v39;
  if (!(_BYTE)v39)
  {
    v25 = (realityio::TransformAnimationAssetBuilder *)&v38;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v20 = (std::mutex *)v38.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v39 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v38 = __p;
      v20 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v21)
    goto LABEL_39;
  v27 = (unint64_t *)&v21->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v26)
      goto LABEL_51;
  }
  else
  {
LABEL_39:
    if (!v26)
      goto LABEL_51;
  }
  v30 = *((_QWORD *)this + 2);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v39 = v30;
  *(_QWORD *)&v40 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (const void **)realityio::TransformAnimationAssetBuilder::kOutputLibraryName(v25);
  std::mutex::lock((std::mutex *)(v30 + 64));
  if (v30 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v30 + 40, v33))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v30 + 40), v33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v30, (unsigned __int8 *)v33);
  std::mutex::unlock((std::mutex *)(v30 + 64));
  if (v29)
  {
    v34 = (unint64_t *)&v29->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_51:
  v39 = 0;
  v40 = xmmword_230204270;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::operator=((int *)this + 70, (int *)&v39);
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)&v39);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  if (!v26 && v2 < 0)
    operator delete(v20);
  if (!v10 && v37 < 0)
    operator delete(v36);
}

void sub_22FF6D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v28;

  if (!a20 && a28 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (!v28 && a11 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void realityio::TransformAnimationAssetBuilder::~TransformAnimationAssetBuilder(void **this)
{
  realityio::TransformAnimationAssetBuilder::~TransformAnimationAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::TransformAnimationAssetBuilder *v2;
  uint64_t v3;
  realityio::TransformAnimationAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDE5048;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)(this + 40), this[41]);
  realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT((realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *)(this + 35));
  *this = off_24FDE1CA0;
  v2 = (realityio::TransformAnimationAssetBuilder *)this[34];
  if (v2 == (realityio::TransformAnimationAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::TransformAnimationAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::TransformAnimationAssetBuilder *)this[30];
  if (v4 == (realityio::TransformAnimationAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::TransformAnimationAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::~TransformAnimationAssetDataT(realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this);
}

uint64_t ___ZL16dispatchInChunksmmPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvmE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result;
  if (*(_QWORD *)(result + 40) == a2)
  {
    v3 = *(int *)(result + 56);
    if (!*(_DWORD *)(result + 56))
      return result;
  }
  else
  {
    v3 = *(_QWORD *)(result + 48);
    if (!v3)
      return result;
  }
  v4 = 0;
  do
  {
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
    ++v4;
  }
  while (v3 != v4);
  return result;
}

void std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDE5110;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE5110;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  RETimelineDefinitionCreateFromTimeline();
  RETimelineDefinitionCreateTimelineClip();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetClipLoopBehavior();
  **(_QWORD **)(a1 + 32) = RETimelineDefinitionCreateTimelineAsset();
  RERelease();
  return RERelease();
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineClipAsset(realityio::Builder &,realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,std::string const&,double,double,double)::$_0>,void ()(void)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

void std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDE51A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDE51A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t ServiceLocator;
  uint64_t result;

  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  result = RETimelineDefinitionCreateTimelineAsset();
  **(_QWORD **)(a1 + 16) = result;
  return result;
}

uint64_t std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0,std::allocator<createSampledSRTAnimationTimelineAsset(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdGeomXformable &,double,double,double)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v2, *(_QWORD **)(v2 + 8));
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<void>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>(int *a1, int *a2)
{
  int v5[2];

  v5[0] = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  v5[1] = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a1 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2, v5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(a2 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v5);
}

uint64_t realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT::TransformAnimationAssetDataT(uint64_t a1, uint64_t a2, _DWORD *a3, double a4, double a5, double a6)
{
  *(_QWORD *)a1 = a2;
  if (a2)
    RERetain();
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 24) = a6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), a3 + 1);
  return a1;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE5220;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE5220;
}

char *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE52A0;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE52A0;
}

void std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::TransformAnimationAssetBuilder::kOutputName((realityio::TransformAnimationAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 38, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::TransformAnimationAssetBuilder::kOutputLibraryName((realityio::TransformAnimationAssetBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 39, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF6DD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::vector<RESRT>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE5320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE5320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF6E1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType(realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  v7 = (void **)((char *)this + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::SkeletalAnimationAssetBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "SkelAnimation", 0) + 8);
  MEMORY[0x2348B2758](v2, "PackedJointAnimation", 0);
  v3 = *this;
  v22 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v22 = v4;
  }
  v6 = *v2;
  v23 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v23 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  v11 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v12 = v10;
    v13 = (&v22)[v11];
    *(_QWORD *)v9 = v13;
    if ((v13 & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if ((v15 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 += 2;
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  v16 = (unsigned int **)&v24;
  this[3] = v9;
  do
  {
    v18 = (uint64_t)*--v16;
    v17 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  while (v16 != &v22);
  return (realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)this;
}

void sub_22FF6E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateSkeletalAnimationDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *Data;
  _BYTE *v11;
  unint64_t *v12;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v13;
  __int128 *EmptyString;
  _BYTE *v15;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v16;
  __int128 *v17;
  _BYTE *v18;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v19;
  __int128 *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  unsigned int **v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  unsigned int **v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  unsigned int **v28;
  realityio::AnyValueDirtyPropertyDescriptor *v29;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v30;
  realityio::AnyValueDirtyPropertyDescriptor *v31;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v32;
  _BYTE *v33;
  unsigned int **v34;
  uint64_t i;
  uint64_t j;
  void **v37[3];
  void **v38[3];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49[3];
  _QWORD *v50[3];
  __int128 v51;
  _QWORD *v52[3];
  _QWORD *v53[3];
  __int128 v54;
  _QWORD *v55[3];
  uint64_t v56;
  uint64_t v57;
  void ***v58;
  _OWORD v59[9];
  _OWORD v60[2];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54548);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54548))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v53, 0, sizeof(v53));
    v9 = (_BYTE *)operator new();
    Data = (uint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
    if (!Data)
      Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
    memset(v50, 0, sizeof(v50));
    v11 = (_BYTE *)operator new();
    v12 = (unint64_t *)MEMORY[0x24BEE8040];
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
    if (!v13)
      v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    if ((*((_QWORD *)v13 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (__int128 *)((*((_QWORD *)v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
    realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(v11, EmptyString);
    std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(&v48, (uint64_t)v11);
    v59[0] = v48;
    v48 = 0uLL;
    v15 = (_BYTE *)operator new();
    v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    if ((*((_QWORD *)v16 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
      v17 = (__int128 *)((*((_QWORD *)v16 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v17 = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(v15, v17);
    std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(&v47, (uint64_t)v15);
    v59[1] = v47;
    v47 = 0uLL;
    v18 = (_BYTE *)operator new();
    v19 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v19)
      v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    if ((*((_QWORD *)v19 + 22) & 0xFFFFFFFFFFFFFFF8) != 0)
      v20 = (__int128 *)((*((_QWORD *)v19 + 22) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v20 = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
    realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(v18, v20);
    std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(&v46, (uint64_t)v18);
    v59[2] = v46;
    v46 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v22 + 48));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v45, (uint64_t)v21);
    v59[3] = v45;
    v45 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)v24);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v44, (uint64_t)v23);
    v59[4] = v44;
    v44 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v26 + 1));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v43, (uint64_t)v25);
    v59[5] = v43;
    v43 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 2));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v42, (uint64_t)v27);
    v59[6] = v42;
    v42 = 0uLL;
    v29 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v30 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v29, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v30 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v41, (uint64_t)v29);
    v59[7] = v41;
    v41 = 0uLL;
    v31 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v32 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v12);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v31, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v32 + 16));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v40, (uint64_t)v31);
    v59[8] = v40;
    v40 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v49, v59, 9uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, Data, v50, v49);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v51, (uint64_t)v9);
    v60[0] = v51;
    v51 = 0uLL;
    v33 = (_BYTE *)operator new();
    v34 = (unsigned int **)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
    if (!v34)
      v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
    memset(v38, 0, sizeof(v38));
    memset(v37, 0, sizeof(v37));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v33, (uint64_t *)v34 + 1, v38, v37);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v39, (uint64_t)v33);
    v60[1] = v39;
    v39 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v52, v60, 2uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v53, v52);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v54, v8);
    v61 = v54;
    v54 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v55, &v61, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v55);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v56, v7);
    _MergedGlobals_3 = v56;
    unk_255E54540 = v57;
    v56 = 0;
    v57 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
    v58 = (void ***)v55;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v61);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v54);
    v58 = (void ***)v52;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v60[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    v58 = v37;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v37[0] = (void **)v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    v38[0] = (void **)v49;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v38);
    for (j = 8; j != -1; --j)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v59[j]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    *(_QWORD *)&v59[0] = v50;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
    *(_QWORD *)&v59[0] = v53;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
    __cxa_guard_release(&qword_255E54548);
  }
  v4 = unk_255E54540;
  *a1 = _MergedGlobals_3;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_22FF6EC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;

  MEMORY[0x2348B4E1C](v60, 0x10A1C40F82F910ELL);
  v63 = v62 - 128;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  a14 = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  for (i = 16; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&(&a59)[i]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  a59 = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  while (v63 != v62 - 144)
  {
    v63 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v63);
  }
  a59 = &a48;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  MEMORY[0x2348B4E1C](v59, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v61, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54548);
  _Unwind_Resume(a1);
}

void realityio::generateSkeletalMeshDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t *v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  unint64_t *v28;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v29;
  realityio::AnyValueDirtyPropertyDescriptor *v30;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v31;
  realityio::AnyValueDirtyPropertyDescriptor *v32;
  unsigned int **v33;
  realityio::AnyValueDirtyPropertyDescriptor *v34;
  unsigned int **v35;
  realityio::AnyValueDirtyPropertyDescriptor *v36;
  unsigned int **v37;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46[3];
  _QWORD *v47[3];
  __int128 v48;
  _QWORD *v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53[3];
  __int128 v54;
  _QWORD *v55[3];
  _QWORD *v56[3];
  __int128 v57;
  _QWORD *v58[3];
  uint64_t v59;
  uint64_t v60;
  void **v61;
  _OWORD v62[5];
  _OWORD v63[3];
  _OWORD v64[2];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54568);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54568))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v56, 0, sizeof(v56));
    v9 = operator new();
    v10 = operator new();
    Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v12 = *((_QWORD *)Data + 2);
    *(_QWORD *)v10 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      v12 = *(_QWORD *)v10;
      if ((v14 & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v10 = v12;
      }
    }
    *(_BYTE *)(v10 + 8) = v12 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v52, v10);
    v63[0] = v52;
    v52 = 0uLL;
    v15 = operator new();
    v16 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      v17 = *(_QWORD *)v15;
      if ((v19 & 1) == 0)
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v15 = v17;
      }
    }
    *(_BYTE *)(v15 + 8) = v17 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v51, v15);
    v63[1] = v51;
    v51 = 0uLL;
    v20 = operator new();
    v21 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v22 = *(_QWORD *)v21;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      v22 = *(_QWORD *)v20;
      if ((v24 & 1) == 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v20 = v22;
      }
    }
    *(_BYTE *)(v20 + 8) = v22 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v50, v20);
    v63[2] = v50;
    v50 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v53, v63, 3uLL);
    memset(v49, 0, sizeof(v49));
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v53, v49);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v54, v9);
    v64[0] = v54;
    v54 = 0uLL;
    v25 = (_BYTE *)operator new();
    v26 = (uint64_t *)atomic_load(&qword_255E54550);
    if (!v26)
      v26 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
    memset(v47, 0, sizeof(v47));
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (unint64_t *)MEMORY[0x24BEE8040];
    v29 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
    if (!v29)
      v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v29 + 168));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v45, (uint64_t)v27);
    v62[0] = v45;
    v45 = 0uLL;
    v30 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v31 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v28);
    if (!v31)
      v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v30, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v31 + 136));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v44, (uint64_t)v30);
    v62[1] = v44;
    v44 = 0uLL;
    v32 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v33 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v33)
      v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v32, (const pxrInternal__aapl__pxrReserved__::TfToken *)v33);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v43, (uint64_t)v32);
    v62[2] = v43;
    v43 = 0uLL;
    v34 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v35 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v35 + 1));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v42, (uint64_t)v34);
    v62[3] = v42;
    v42 = 0uLL;
    v36 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v37 = (unsigned int **)atomic_load(&realityio::tokens::AnimationBuilderTokens);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AnimationBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::AnimationBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v37 + 2));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v41, (uint64_t)v36);
    v62[4] = v41;
    v41 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v46, v62, 5uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v25, v26, v47, v46);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v48, (uint64_t)v25);
    v64[1] = v48;
    v48 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v55, v64, 2uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v56, v55);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v57, v8);
    v65 = v57;
    v57 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v58, &v65, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v58);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v59, v7);
    qword_255E54558 = v59;
    unk_255E54560 = v60;
    v59 = 0;
    v60 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
    v61 = (void **)v58;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v61);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    v61 = (void **)v55;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v61);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v64[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    v61 = (void **)v46;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v61);
    for (j = 4; j != -1; --j)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v62[j]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
    *(_QWORD *)&v62[0] = v47;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v54);
    *(_QWORD *)&v62[0] = v49;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    *(_QWORD *)&v62[0] = v53;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    for (k = 2; k != -1; --k)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v63[k]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
    *(_QWORD *)&v62[0] = v56;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v62);
    __cxa_guard_release(&qword_255E54568);
  }
  v4 = unk_255E54560;
  *a1 = qword_255E54558;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_22FF6F878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char *a59)
{
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;

  MEMORY[0x2348B4E1C](v60, 0x10A1C40F82F910ELL);
  v63 = v62 - 128;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  a59 = &a30;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  a59 = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  for (i = 32; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v62 - 192 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  while (v63 != v62 - 144)
  {
    v63 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v63);
  }
  a59 = &a48;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  MEMORY[0x2348B4E1C](v59, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v61, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54568);
  _Unwind_Resume(a1);
}

void sub_22FF6FD28()
{
  JUMPOUT(0x22FF6FC00);
}

pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *result;

  result = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::~UsdSkelTokensType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>::New()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2348B2194]();
  return v0;
}

void sub_22FF6FE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40A4D8F774);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::~UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  void **v88;

  v88 = (void **)((char *)this + 232);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v88);
  v2 = *((_QWORD *)this + 28);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 26);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 25);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 24);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 23);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 22);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 21);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 20);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 19);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 18);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 17);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 16);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 15);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 14);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 13);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 12);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 11);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 10);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 9);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 8);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 7);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 6);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 5);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 4);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 3);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 2);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 1);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v86 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stlxr(v87 - 2, v86));
  }
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::~SkeletalAnimationAssetBuilderTokens_StaticTokenType((realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType::SkeletalAnimationAssetBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF702C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40F64FA5DBLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE53A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF70340(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AnyValueNamedspacedDirtyPropertyDescriptor *,std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__shared_ptr_default_delete<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,realityio::AnyValueNamedspacedDirtyPropertyDescriptor>,std::allocator<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

realityio::tokens::EntityBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::EntityBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::EntityBuilderTokens_StaticTokenType::~EntityBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::EntityBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::EntityBuilderTokens_StaticTokenType::EntityBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF70474(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40EB01C5B6);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDE5418;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22FF704EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitiveDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitiveDirtyPrimDescriptor,realityio::PrimitiveDirtyPrimDescriptor>,std::allocator<realityio::PrimitiveDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  unint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  void **v13;
  char v14;

  v0 = operator new();
  MEMORY[0x2348B2758](v0, "Mesh", 0);
  v1 = *(_QWORD *)v0;
  if ((*(_QWORD *)v0 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v13 = (void **)(v0 + 8);
  v14 = 0;
  v4 = operator new(8uLL);
  *(_QWORD *)(v0 + 8) = v4;
  *(_QWORD *)(v0 + 16) = v4;
  *v4 = v1;
  v5 = v4 + 1;
  *(_QWORD *)(v0 + 24) = v4 + 1;
  if ((v1 & 7) != 0)
  {
    v6 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v0 + 16) = v5;
    do
      v8 = __ldxr(v6);
    while (__stlxr(v8 - 2, v6));
  }
  else
  {
    *(_QWORD *)(v0 + 16) = v5;
  }
  while (!__ldaxr(&qword_255E54550))
  {
    if (!__stlxr(v0, &qword_255E54550))
      return v0;
  }
  __clrex();
  v13 = (void **)(v0 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v13);
  if ((*(_QWORD *)v0 & 7) != 0)
  {
    v10 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B4E1C](v0, 0x60C405399E965);
  return atomic_load(&qword_255E54550);
}

void sub_22FF706E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  MEMORY[0x2348B4E1C](v9, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t realityio::InputsDescriptor::addInputDescriptor(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *i;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;

  MEMORY[0x2348B2764](&v51, *a2 + 8);
  v4 = v51;
  if ((v51 & 7) != 0)
  {
    v5 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = v4 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(int8x8_t *)(a1 + 8);
  if (v8)
  {
    v9 = bswap64(0x9E3779B97F4A7C55 * v7);
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v9;
      if (v9 >= *(_QWORD *)&v8)
        v11 = v9 % *(_QWORD *)&v8;
    }
    else
    {
      v11 = v9 & (*(_QWORD *)&v8 - 1);
    }
    i = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
    if (i)
    {
      for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v7)
            break;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= *(_QWORD *)&v8)
              v13 %= *(_QWORD *)&v8;
          }
          else
          {
            v13 &= *(_QWORD *)&v8 - 1;
          }
          if (v13 != v11)
            goto LABEL_23;
        }
      }
    }
  }
  else
  {
LABEL_23:
    i = 0;
  }
  if ((v4 & 7) != 0)
  {
    do
      v14 = __ldxr((unsigned int *)v7);
    while (__stlxr(v14 - 2, (unsigned int *)v7));
  }
  v15 = v51;
  if (!i)
  {
    v49 = 0uLL;
    v50 = 0;
    v16 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((float *)a1, v51, &v51);
    v17 = v16;
    v18 = (void **)(v16 + 3);
    v19 = (void *)v16[3];
    if (v19)
    {
      v20 = v16[4];
      v21 = v19;
      if ((void *)v20 != v19)
      {
        do
          v20 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v20 - 16);
        while ((void *)v20 != v19);
        v21 = *v18;
      }
      v17[4] = v19;
      operator delete(v21);
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
    }
    *(_OWORD *)(v17 + 3) = v49;
    v17[5] = v50;
    v50 = 0;
    v49 = 0uLL;
    v52 = (void **)&v49;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v52);
    v15 = v51;
  }
  v22 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((float *)a1, v15, &v51);
  v23 = v22[5];
  v24 = (_QWORD *)v22[4];
  if ((unint64_t)v24 >= v23)
  {
    v29 = v22[3];
    v30 = ((uint64_t)v24 - v29) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v32 = v23 - v29;
    v33 = (uint64_t)(v23 - v29) >> 3;
    if (v33 > v31)
      v31 = v33;
    if (v32 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v31;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(v22 + 5), v34);
    v37 = &v35[16 * v30];
    v38 = *(_OWORD *)a2;
    *(_OWORD *)v37 = *(_OWORD *)a2;
    if (*((_QWORD *)&v38 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (_QWORD *)v22[3];
    v42 = (_QWORD *)v22[4];
    if (v42 == v41)
    {
      v28 = v37 + 16;
      v22[3] = v37;
      v22[4] = v37 + 16;
      v22[5] = &v35[16 * v36];
    }
    else
    {
      v43 = &v35[16 * v30];
      do
      {
        v44 = *((_OWORD *)v42 - 1);
        v42 -= 2;
        *((_OWORD *)v43 - 1) = v44;
        v43 -= 16;
        *v42 = 0;
        v42[1] = 0;
      }
      while (v42 != v41);
      v42 = (_QWORD *)v22[3];
      v45 = v22[4];
      v28 = v37 + 16;
      v22[3] = v43;
      v22[4] = v37 + 16;
      v22[5] = &v35[16 * v36];
      while ((_QWORD *)v45 != v42)
      {
        v45 -= 16;
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v45);
      }
    }
    if (v42)
      operator delete(v42);
  }
  else
  {
    *v24 = *a2;
    v25 = a2[1];
    v24[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v24 + 2;
  }
  v22[4] = v28;
  if ((v51 & 7) != 0)
  {
    v46 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  return 1;
}

void sub_22FF70A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  unsigned int *v15;
  unsigned int v16;

  a14 = (void **)&a9;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  if ((a13 & 7) != 0)
  {
    v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::InputDescriptor const>*,std::shared_ptr<realityio::InputDescriptor const>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22FF70B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v37;

  v6 = bswap64(0x9E3779B97F4A7C55 * (a2 & 0xFFFFFFFFFFFFFFF8));
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == (a2 & 0xFFFFFFFFFFFFFFF8))
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x30uLL);
  i = v12;
  *v12 = 0;
  v12[1] = v6;
  v13 = *a3;
  v12[2] = *a3;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v12[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_35;
    if (*(_QWORD *)&prime < v7)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_60;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_60:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_64;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_64:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *i = *v34;
LABEL_77:
    *v34 = i;
    goto LABEL_78;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v33[v3] = a1 + 4;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7)
        v35 %= v7;
    }
    else
    {
      v35 &= v7 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_77;
  }
LABEL_78:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_22FF70FDC(_Unwind_Exception *a1)
{
  char *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::vector<std::shared_ptr<realityio::InputDescriptor const>>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  if (a1)
  {
    v6 = (void **)(__p + 24);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v6);
    v3 = *((_QWORD *)__p + 2);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  operator delete(__p);
}

uint64_t realityio::Builder::addAsset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v6;

  if (a3)
    REAssetSetMetadataString();
  result = *a2;
  if (*a2)
  {
    v6 = (uint64_t *)a1[9];
    if ((unint64_t)v6 >= a1[10])
    {
      result = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(a1 + 8, a2);
    }
    else
    {
      *v6 = result;
      RERetain();
      result = (uint64_t)(v6 + 1);
      a1[9] = (uint64_t)(v6 + 1);
    }
    a1[9] = result;
  }
  return result;
}

void sub_22FF710CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

char **realityio::Builder::addedAssets(realityio::Builder *this)
{
  char **v1;
  char *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v2 = (char *)*((_QWORD *)this + 14);
  v1 = (char **)((char *)this + 112);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  v3 = (uint64_t *)*((_QWORD *)this + 9);
  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12);
  if (((v6 - v5) >> 4) + v3 - v4 != (uint64_t)(*((_QWORD *)this + 15) - (_QWORD)v2) >> 3)
  {
    *((_QWORD *)this + 15) = v2;
    if (v4 != v3)
    {
      v8 = (_QWORD *)((char *)this + 128);
      do
      {
        v9 = *v4;
        if ((unint64_t)v2 >= *v8)
        {
          v10 = (v2 - *v1) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
LABEL_42:
            std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
          v11 = *v8 - (_QWORD)*v1;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)this + 128, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v9;
          v2 = v15 + 8;
          v17 = (char *)*((_QWORD *)this + 14);
          v16 = (char *)*((_QWORD *)this + 15);
          if (v16 != v17)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = *v1;
          }
          *((_QWORD *)this + 14) = v15;
          *((_QWORD *)this + 15) = v2;
          *((_QWORD *)this + 16) = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v2 = v9;
          v2 += 8;
        }
        *((_QWORD *)this + 15) = v2;
        ++v4;
      }
      while (v4 != v3);
      v5 = *((_QWORD *)this + 11);
      v6 = *((_QWORD *)this + 12);
    }
    if (v5 != v6)
    {
      v19 = (_QWORD *)((char *)this + 128);
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if ((unint64_t)v2 >= *v19)
        {
          v21 = (v2 - *v1) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
            goto LABEL_42;
          v22 = *v19 - (_QWORD)*v1;
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)this + 128, v24);
          else
            v25 = 0;
          v26 = &v25[8 * v21];
          *(_QWORD *)v26 = v20;
          v2 = v26 + 8;
          v28 = (char *)*((_QWORD *)this + 14);
          v27 = (char *)*((_QWORD *)this + 15);
          if (v27 != v28)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            v27 = *v1;
          }
          *((_QWORD *)this + 14) = v26;
          *((_QWORD *)this + 15) = v2;
          *((_QWORD *)this + 16) = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v2 = v20;
          v2 += 8;
        }
        *((_QWORD *)this + 15) = v2;
        v5 += 16;
      }
      while (v5 != v6);
    }
  }
  return v1;
}

uint64_t realityio::Builder::isResync(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a2 + 16);
  v3 = (_QWORD *)(a2 + 24);
  if (v2 == (_QWORD *)(a2 + 24))
    return 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  while (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 6))|| !*((_BYTE *)v2 + 56))
  {
    v5 = (_QWORD *)v2[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v2[2];
        v7 = *v6 == (_QWORD)v2;
        v2 = v6;
      }
      while (!v7);
    }
    v2 = v6;
    if (v6 == v3)
      return 0;
  }
  return 1;
}

uint64_t std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[8 * v9];
  v12 = *a2;
  *(_QWORD *)v11 = *a2;
  if (v12)
  {
    RERetain();
    v11 = v16;
  }
  v16 = v11 + 8;
  std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_22FF71580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>,std::reverse_iterator<realityio::WrappedRERef<REAsset *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a3 + v11 - 8);
      *(_QWORD *)(a7 - 8 + v11) = v12;
      if (v12)
        RERetain();
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_22FF71694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 8)
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *realityio::MapFromGroupsAction::operator()@<X0>(uint64_t a1@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *result;

  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
    return pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, *(const pxrInternal__aapl__pxrReserved__::VtValue **)a1);
  *((_QWORD *)a2 + 1) = 0;
  return result;
}

uint64_t RIOBuilderPrimDeltaGetTypeID()
{
  if (RIOBuilderPrimDeltaGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderPrimDeltaGetTypeID::onceToken, &__block_literal_global);
  return RIOBuilderPrimDeltaGetTypeID::typeID;
}

__CFArray *RIOBuilderPrimDeltaCopyPropertyDeltas(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t *v3;
  uint64_t *i;
  uint64_t Instance;
  const void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(uint64_t **)(a1 + 56);
  for (i = *(uint64_t **)(a1 + 64); v3 != i; v3 += 6)
  {
    if (RIOBuilderPropertyDeltaGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderPropertyDeltaGetTypeID::onceToken, &__block_literal_global_13);
    Instance = _CFRuntimeCreateInstance();
    v6 = (const void *)Instance;
    if (Instance)
    {
      v7 = *v3;
      *(_QWORD *)(Instance + 16) = *v3;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          *(_QWORD *)(Instance + 16) &= 0xFFFFFFFFFFFFFFF8;
      }
      std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 24, (uint64_t)(v3 + 1));
    }
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

__CFArray *RIOBuilderPrimDeltaCopyDirtyMetadata(uint64_t a1)
{
  __CFArray *Mutable;
  _QWORD *i;
  const void *v4;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (RIOPxrTfTokenGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = *a1;
    *(_QWORD *)(result + 16) = *a1;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  return result;
}

uint64_t _RIOBuilderPrimDeltaCFFinalize(char *a1)
{
  char *v1;
  void **v3;

  v1 = a1 + 16;
  v3 = (void **)(a1 + 56);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v1);
}

BOOL _RIOBuilderPrimDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderPrimDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderPrimDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderPrimDelta %p>"), a1);
}

CFStringRef _RIOBuilderPrimDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderPrimDelta %p>"), a1);
}

void std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<realityio::PropertyDelta>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<realityio::PropertyDelta>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 48)
  {
    result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(i - 40);
    v6 = *(_QWORD *)(i - 48);
    v5 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_22FF71BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, v6, a3, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_22FF71DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node_hash<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x18uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v3)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = v3[2];
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    operator delete(v3);
  }
}

void RIO_MTLX::FilePath::assign(uint64_t a1, std::string *a2)
{
  unsigned int v4;
  int v5;
  unint64_t size;
  int v7;
  std::string *v8;
  int v9;
  void *__p[2];
  char v11;
  __int128 v12;
  uint64_t v13;
  void **v14;

  *(_DWORD *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "/\\");
  RIO_MTLX::splitString(a2, (unsigned __int8 **)__p, (uint64_t)&v12);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a1);
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  v13 = 0;
  v12 = 0uLL;
  v14 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (v11 < 0)
    operator delete(__p[0]);
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v5 = *(unsigned __int8 *)a2->__r_.__value_.__l.__data_;
    if (v5 == 47)
      goto LABEL_19;
    if (size <= 1)
      return;
  }
  else
  {
    if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
      return;
    v5 = a2->__r_.__value_.__s.__data_[0];
    if (v5 == 47)
      goto LABEL_19;
    if (v4 < 2)
      return;
  }
  if ((v5 & 0x80) != 0)
  {
    v7 = __maskrune((char)v5, 0x100uLL);
    LOBYTE(v4) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    if (!v7)
      goto LABEL_22;
    goto LABEL_15;
  }
  if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * (char)v5 + 60) & 0x100) != 0)
  {
LABEL_15:
    if ((v4 & 0x80u) == 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v8->__r_.__value_.__s.__data_[1] != 58)
      goto LABEL_22;
LABEL_19:
    v9 = 1;
LABEL_20:
    *(_DWORD *)(a1 + 24) = v9;
    return;
  }
LABEL_22:
  if ((v4 & 0x80) != 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (a2->__r_.__value_.__s.__data_[0] == 92 && a2->__r_.__value_.__s.__data_[1] == 92)
  {
    v9 = 2;
    goto LABEL_20;
  }
}

void sub_22FF72018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::asString(char **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char **v6;
  char *v7;
  const std::string::value_type *v8;
  unsigned int v9;
  int v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string::value_type v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  unint64_t v20;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2 == 1)
  {
    if (!*((_DWORD *)a1 + 6))
      goto LABEL_22;
    v6 = (char **)*a1;
    if (*a1 == a1[1])
      goto LABEL_20;
    if (*((char *)v6 + 23) < 0)
    {
      if ((unint64_t)v6[1] <= 1)
      {
LABEL_20:
        v8 = "/";
        goto LABEL_21;
      }
      v7 = *v6;
    }
    else
    {
      v7 = *a1;
      if (*((unsigned __int8 *)v6 + 23) <= 1u)
        goto LABEL_20;
    }
    v9 = *v7;
    if ((v9 & 0x80000000) != 0)
      v10 = __maskrune(v9, 0x100uLL);
    else
      v10 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x100;
    if (!v10)
      goto LABEL_20;
    v11 = *((char *)v6 + 23) >= 0 ? v6 : (char **)*v6;
    if (*((_BYTE *)v11 + 1) != 58)
      goto LABEL_20;
  }
  else if (!a2 && *((_DWORD *)a1 + 6) == 2)
  {
    v8 = "\\\\";
LABEL_21:
    std::string::append(a3, v8);
  }
LABEL_22:
  v12 = (uint64_t)*a1;
  if (a1[1] != *a1)
  {
    v13 = 0;
    v14 = 0;
    if (a2 == 1)
      v15 = 47;
    else
      v15 = 92;
    do
    {
      v16 = v12 + v13;
      v17 = *(char *)(v16 + 23);
      if (v17 >= 0)
        v18 = (const std::string::value_type *)v16;
      else
        v18 = *(const std::string::value_type **)v16;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v16 + 23);
      else
        v19 = *(_QWORD *)(v16 + 8);
      std::string::append(a3, v18, v19);
      ++v14;
      v12 = (uint64_t)*a1;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v14 < v20)
      {
        std::string::push_back(a3, v15);
        v12 = (uint64_t)*a1;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v13 += 24;
    }
    while (v14 < v20);
  }
}

void sub_22FF721C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::operator/(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, *(__int128 **)a1, *(__int128 **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 24);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(_QWORD *)(a3 + 8);
    do
    {
      if (v8 >= *(_QWORD *)(a3 + 16))
      {
        v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v6);
        v8 += 24;
      }
      *(_QWORD *)(a3 + 8) = v8;
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
}

void sub_22FF72294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::FilePath::exists(char **this)
{
  std::string *p_p;
  int v2;
  std::string __p;
  stat v5;

  RIO_MTLX::FilePath::asString(this, 1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v2 = stat((const char *)p_p, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2 == 0;
}

void sub_22FF72310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::FilePath::getParentPath(__int128 **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a2, *this, this[1], 0xAAAAAAAAAAAAAAABLL * (((char *)this[1] - (char *)*this) >> 3));
  *(_DWORD *)(a2 + 24) = *((_DWORD *)this + 6);
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v4)
  {
    v5 = (void **)(v4 - 24);
    if (*(char *)(v4 - 1) < 0)
      operator delete(*v5);
    *(_QWORD *)(a2 + 8) = v5;
  }
}

void RIO_MTLX::getEnvironmentPath(unsigned __int8 **a1@<X0>, RIO_MTLX::FileSearchPath *a2@<X8>)
{
  void *__p[2];
  char v5;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(__p, "MATERIALX_SEARCH_PATH");
  RIO_MTLX::getEnviron((const char *)__p, &__str);
  if (v5 < 0)
    operator delete(__p[0]);
  RIO_MTLX::FileSearchPath::FileSearchPath(a2, &__str, a1);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22FF72414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22FF724A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::FilePath::FilePath(_QWORD *a1, std::string *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  RIO_MTLX::FilePath::assign((uint64_t)a1, a2);
  return a1;
}

void sub_22FF724FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

RIO_MTLX::FileSearchPath *RIO_MTLX::FileSearchPath::FileSearchPath(RIO_MTLX::FileSearchPath *a1, std::string *__str, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v5;
  void **v7[4];
  uint64_t v8;
  uint64_t v9;
  void ***v10;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  RIO_MTLX::splitString(__str, a3, (uint64_t)&v8);
  v4 = v8;
  v5 = v9;
  if (v8 != v9)
  {
    while (*(char *)(v4 + 23) < 0)
    {
      if (*(_QWORD *)(v4 + 8))
        goto LABEL_6;
LABEL_7:
      v4 += 24;
      if (v4 == v5)
        goto LABEL_8;
    }
    if (!*(_BYTE *)(v4 + 23))
      goto LABEL_7;
LABEL_6:
    RIO_MTLX::FilePath::FilePath(v7, (std::string *)v4);
    RIO_MTLX::FileSearchPath::append(a1, (const RIO_MTLX::FilePath *)v7);
    v10 = v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    goto LABEL_7;
  }
LABEL_8:
  v7[0] = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v7);
  return a1;
}

void sub_22FF725C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::FileSearchPath::append(RIO_MTLX::FileSearchPath *this, const RIO_MTLX::FilePath *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 1);
  if (v3 >= *((_QWORD *)this + 2))
  {
    result = std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>((uint64_t *)this, (uint64_t)a2);
  }
  else
  {
    std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>((uint64_t)this, (uint64_t)a2);
    result = v3 + 32;
  }
  *((_QWORD *)this + 1) = result;
  return result;
}

std::string *std::vector<RIO_MTLX::FilePath>::__construct_one_at_end[abi:ne180100]<RIO_MTLX::FilePath const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_22FF726B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__push_back_slow_path<RIO_MTLX::FilePath const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  LODWORD(v11[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  v15 = (std::string *)((char *)v15 + 32);
  std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer(v14);
  return v12;
}

void sub_22FF727B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v11 = *(__int128 **)(v10 - 32);
      v12 = *(__int128 **)(v10 - 24);
      v10 -= 32;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v7 - 32), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v9 = v10;
    }
    while (v10 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_22FF7290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<RIO_MTLX::FilePath>::~__split_buffer(void **a1)
{
  std::__split_buffer<RIO_MTLX::FilePath>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<RIO_MTLX::FilePath>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<RIO_MTLX::FilePath>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v8, *(__int128 **)v10, *(__int128 **)(v10 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3));
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(v10 + 24);
      v8 += 32;
      v10 += 32;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>((uint64_t)&v12, a2, v7, v6);
}

void sub_22FF72BC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<RIO_MTLX::FilePath>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>,std::reverse_iterator<RIO_MTLX::FilePath*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22FF72D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      if (v7 != a4)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 - 32), *(std::string **)(v7 - 32), *(__int128 **)(v7 - 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 - 24) - *(_QWORD *)(v7 - 32)) >> 3));
      *(_DWORD *)(a4 - 8) = *(_DWORD *)(v7 - 8);
      v7 -= 32;
      a4 -= 32;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<RIO_MTLX::FilePath *,RIO_MTLX::FilePath *,RIO_MTLX::FilePath *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::string> *this)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::string> *)v5 != this)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      LODWORD(this[1].__begin_) = *(_DWORD *)(v5 + 24);
      v5 += 32;
      this = (std::vector<std::string> *)((char *)this + 32);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*,RIO_MTLX::FilePath*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22FF72F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::FilePath>,RIO_MTLX::FilePath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

uint64_t RIOPxrUsdUtilsCreateNewARKitUsdzPackage(uint64_t a1, char *a2, char *a3)
{
  uint64_t NewARKitUsdzPackage;
  void *__p;
  char v7;
  void *v8;
  char v9;

  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  NewARKitUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage();
  if (v7 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  return NewARKitUsdzPackage;
}

void sub_22FF730B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdUtilsCreateNewUsdzPackage(char *a1, char *a2, char *a3)
{
  char *TmpDir;
  unint64_t v7;
  char *v8;
  void *RelativeToLayer;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t NewUsdzPackage;
  void *__p[2];
  char v16;
  void *v17[2];
  unsigned __int8 v18;
  void *v19[2];
  CFStringRef (*v20)(uint64_t, char *);
  void *v21;

  TmpDir = (char *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir((pxrInternal__aapl__pxrReserved__ *)a1);
  std::string::basic_string[abi:ne180100]<0>(v19, TmpDir);
  std::string::basic_string[abi:ne180100]<0>(__p, "usdzConversion");
  pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir();
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  v7 = v18;
  if ((v18 & 0x80u) != 0)
    v7 = (unint64_t)v17[1];
  if (v7)
  {
    v8 = a1 + 16;
    if (a1[39] < 0)
      v8 = *(char **)v8;
    RelativeToLayer = (void *)RIOPxrSdfLayerCreateOrFindRelativeToLayer(0, v8);
    v10 = (uint64_t)RelativeToLayer;
    __p[0] = RelativeToLayer;
    if (RelativeToLayer)
      CFRetain(RelativeToLayer);
    if ((v18 & 0x80u) == 0)
      v11 = v17;
    else
      v11 = (void **)v17[0];
    v19[0] = (void *)MEMORY[0x24BDAC760];
    v19[1] = (void *)3321888768;
    v20 = ___ZZ34RIOPxrUsdUtilsCreateNewUsdzPackageENK3__0cvU13block_pointerFPK10__CFStringPKcPK14__CFDictionaryPS5_EEv_block_invoke;
    v21 = &__block_descriptor_33_ea8_32c47_ZTSKZ34RIOPxrUsdUtilsCreateNewUsdzPackageE3__0_e62_____CFString__32__0r_8____CFDictionary__16____CFDictionary__24l;
    v12 = (void *)MEMORY[0x2348B5260](v19);
    RIOPxrUsdUtilsConvertNonUsdzImages(v10, (uint64_t)v11, v12);

    realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef((const void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  NewUsdzPackage = pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage();
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return NewUsdzPackage;
}

void sub_22FF73284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef((const void **)&a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void RIOPxrUsdUtilsConvertNonUsdzImages(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Resolver;
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t ResolvedPath;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;
  _QWORD **v19;
  _QWORD *v20[2];
  pxrInternal__aapl__pxrReserved__ *v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v20[1] = 0;
  v21 = a3;
  v19 = v20;
  v20[0] = 0;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v21);
  v5 = (uint64_t *)(a1 + 16);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
  ResolvedPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v6);
  if (*(char *)(ResolvedPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)ResolvedPath, *(_QWORD *)(ResolvedPath + 8));
  }
  else
  {
    v8 = *(_OWORD *)ResolvedPath;
    v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(ResolvedPath + 16);
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v5);
  v9 = operator new(0x30uLL);
  *v9 = &off_24FDE5598;
  v9[1] = &v22;
  v9[2] = &v21;
  v9[3] = &v19;
  v9[4] = Resolver;
  v9[5] = &v18;
  v24 = v9;
  pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths();
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
    goto LABEL_8;
  }
  if (v24)
  {
    v11 = 5;
LABEL_8:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unsigned int *)(v17 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, v20[0]);

}

void sub_22FF73488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void *a21)
{
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v24 = *(_QWORD **)(v22 - 32);
  if (v24 == v21)
  {
    v25 = 4;
    v24 = (_QWORD *)(v22 - 56);
  }
  else
  {
    if (!v24)
    {
LABEL_6:
      if (a10)
      {
        v26 = a10 + 2;
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
      }
      if (a16 < 0)
        operator delete(__p);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a18, a19);

      _Unwind_Resume(a1);
    }
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
  goto LABEL_6;
}

CFStringRef ___ZZ34RIOPxrUsdUtilsCreateNewUsdzPackageENK3__0cvU13block_pointerFPK10__CFStringPKcPK14__CFDictionaryPS5_EEv_block_invoke(uint64_t a1, char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  const __CFURL *v6;
  CGImageSourceRef v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  CFStringRef v11;
  void *__p;
  char v14;
  std::string v15;
  void *v16[2];
  int64_t v17;

  v3 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fileURLWithPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLByResolvingSymlinksInPath");
  v6 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  v7 = CGImageSourceCreateWithURL(v6, 0);
  if (v7)
  {
    CFRelease(v7);

    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix();
    v8 = std::string::append(&v15, ".png");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v17 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)v16 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v14 < 0)
      operator delete(__p);
    if (v17 >= 0)
      v10 = v16;
    else
      v10 = (void **)v16[0];
    v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v10, 0x8000100u);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    return v11;
  }
  else
  {

    return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, 0x8000100u);
  }
}

void sub_22FF73698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **realityio::WrappedCFRef<RIOPxrSdfLayer *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDE5598;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDE5598;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  std::string *v12;
  realityio *v13;
  const __CFString *v14;
  std::string::size_type size;
  size_t v16;
  std::string *v17;
  void **v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  int v23;
  size_t v24;
  std::string *v25;
  void **v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::string *p_p;
  const UInt8 *v43;
  CFIndex v44;
  CFDataRef v45;
  CGImageSourceRef v46;
  CGImageRef ImageAtIndex;
  const __CFAllocator *v48;
  std::string *v49;
  const __CFString *v50;
  CFArrayRef AllIdentifiersForTag;
  const __CFString *ValueAtIndex;
  const char *v53;
  CFStringRef v54;
  const __CFString *v55;
  CFURLRef v56;
  const __CFURL *v57;
  CGImageDestinationRef v58;
  char v59;
  const void **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  NSObject *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  const std::string::value_type *v72;
  uint64_t v73;
  CFStringRef inTag[2];
  char v75;
  std::string __p;
  uint64_t v77;
  std::__shared_weak_count *v78;
  std::string v79;
  realityio *v80;
  std::string v81;
  CFMutableDictionaryRef v82;
  CFMutableDictionaryRef v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  void *v88;
  size_t v89;
  unsigned __int8 v90;
  CGImageDestination *v91;
  CFURLRef v92;
  std::string v93;
  char v94;
  const void *v95[5];

  v95[2] = *(const void **)MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions((pxrInternal__aapl__pxrReserved__::SdfFileFormat *)a1);
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  v6 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v93, (const void **)&v88);
  if ((char)v90 < 0)
    operator delete(v88);
  std::__tree<std::string>::destroy((uint64_t)&v93, (char *)v93.__r_.__value_.__l.__size_);
  if (v6)
    goto LABEL_12;
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  pxrInternal__aapl__pxrReserved__::TfStringToLower();
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if ((char)v90 < 0)
    operator delete(v88);
  if (v7 - (_QWORD)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions != 64)
  {
LABEL_12:
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(*(_QWORD *)(a1 + 24), (const void **)a2);
    if (*(_QWORD *)(a1 + 24) + 8 == v8)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v83 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v82 = v11;
      if (v11)
        CFRetain(v11);
      pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier();
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v81;
      else
        v12 = (std::string *)v81.__r_.__value_.__r.__words[0];
      v13 = (realityio *)(*(uint64_t (**)(_QWORD, std::string *, CFMutableDictionaryRef, CFMutableDictionaryRef))(**(_QWORD **)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16), v12, v83, v82);
      v80 = v13;
      if (v13)
      {
        CFRetain(v13);
        v13 = v80;
      }
      realityio::stringFromCFString(v13, v14, (uint64_t)&v93);
      if (v94)
        v79 = v93;
      else
        std::string::basic_string[abi:ne180100]<0>(&v79, "");
      size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v79.__r_.__value_.__l.__size_;
      if (size)
      {
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v93, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
        else
          v93 = v81;
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (v77)
        {
          std::string::basic_string[abi:ne180100]<0>(inTag, **(char ***)(a1 + 8));
          pxrInternal__aapl__pxrReserved__::ArchNormPath();
          pxrInternal__aapl__pxrReserved__::TfGetBaseName();
          if ((char)v90 < 0)
            operator delete(v88);
          pxrInternal__aapl__pxrReserved__::ArchNormPath();
          if ((v90 & 0x80u) == 0)
            v16 = v90;
          else
            v16 = v89;
          std::string::basic_string[abi:ne180100]((uint64_t)&v87, v16 + 1);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v87;
          else
            v17 = (std::string *)v87.__r_.__value_.__r.__words[0];
          if (v16)
          {
            if ((v90 & 0x80u) == 0)
              v18 = &v88;
            else
              v18 = (void **)v88;
            memmove(v17, v18, v16);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 47;
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v93;
          else
            v19 = (std::string *)v93.__r_.__value_.__r.__words[0];
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
          else
            v20 = v93.__r_.__value_.__l.__size_;
          v21 = std::string::append(&v87, (const std::string::value_type *)v19, v20);
          v73 = a1;
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          v23 = 0;
          while (pxrInternal__aapl__pxrReserved__::TfPathExists())
          {
            if ((v90 & 0x80u) == 0)
              v24 = v90;
            else
              v24 = v89;
            std::string::basic_string[abi:ne180100]((uint64_t)&v85, v24 + 1);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &v85;
            else
              v25 = (std::string *)v85.__r_.__value_.__r.__words[0];
            if (v24)
            {
              if ((v90 & 0x80u) == 0)
                v26 = &v88;
              else
                v26 = (void **)v88;
              memmove(v25, v26, v24);
            }
            *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 47;
            std::to_string(&v84, v23);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &v84;
            else
              v27 = (std::string *)v84.__r_.__value_.__r.__words[0];
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            else
              v28 = v84.__r_.__value_.__l.__size_;
            v29 = std::string::append(&v85, (const std::string::value_type *)v27, v28);
            v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            v31 = std::string::append(&v86, "_");
            v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
            v87.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v32;
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v33 = &v93;
            else
              v33 = (std::string *)v93.__r_.__value_.__r.__words[0];
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            else
              v34 = v93.__r_.__value_.__l.__size_;
            v35 = std::string::append(&v87, (const std::string::value_type *)v33, v34);
            v36 = v35->__r_.__value_.__r.__words[0];
            v95[0] = (const void *)v35->__r_.__value_.__l.__size_;
            *(const void **)((char *)v95 + 7) = *(const void **)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
            v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = v36;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v95[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v95 + 7);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v37;
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v87.__r_.__value_.__l.__data_);
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            ++v23;
          }
          if ((char)v90 < 0)
            operator delete(v88);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          if (v75 < 0)
            operator delete((void *)inTag[0]);
          v39 = v77;
          v38 = v78;
          if (v78)
          {
            p_shared_owners = (unint64_t *)&v78->__shared_owners_;
            do
              v41 = __ldxr(p_shared_owners);
            while (__stxr(v41 + 1, p_shared_owners));
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&v88, (char *)p_p);
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v39 + 24))(&v87, v39);
          v43 = (const UInt8 *)v87.__r_.__value_.__r.__words[0];
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
          v45 = CFDataCreateWithBytesNoCopy(0, v43, v44, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
          v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
          if (v45)
          {
            CFRetain(v45);
            v45 = (CFDataRef)v86.__r_.__value_.__r.__words[0];
          }
          v46 = CGImageSourceCreateWithData(v45, 0);
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          if (v46)
          {
            CFRetain(v46);
            v46 = (CGImageSourceRef)v85.__r_.__value_.__r.__words[0];
          }
          ImageAtIndex = CGImageSourceCreateImageAtIndex(v46, 0, 0);
          v84.__r_.__value_.__r.__words[0] = (std::string::size_type)ImageAtIndex;
          if (ImageAtIndex && (CFRetain(ImageAtIndex), v84.__r_.__value_.__r.__words[0]))
          {
            pxrInternal__aapl__pxrReserved__::TfGetExtension();
            v48 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v49 = &v93;
            else
              v49 = (std::string *)v93.__r_.__value_.__r.__words[0];
            v50 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v49, 0x8000100u);
            inTag[0] = v50;
            if (v50)
              CFRetain(v50);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            AllIdentifiersForTag = UTTypeCreateAllIdentifiersForTag((CFStringRef)*MEMORY[0x24BDC1658], inTag[0], 0);
            v93.__r_.__value_.__r.__words[0] = (std::string::size_type)AllIdentifiersForTag;
            if (AllIdentifiersForTag
              && (CFRetain(AllIdentifiersForTag), v93.__r_.__value_.__r.__words[0])
              && CFArrayGetCount((CFArrayRef)v93.__r_.__value_.__l.__data_) >= 1)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v93.__r_.__value_.__l.__data_, 0);
              if ((v90 & 0x80u) == 0)
                v53 = (const char *)&v88;
              else
                v53 = (const char *)v88;
              v54 = CFStringCreateWithCString(v48, v53, 0x8000100u);
              v55 = v54;
              v95[0] = v54;
              if (v54)
                CFRetain(v54);
              v56 = CFURLCreateWithFileSystemPath(v48, v55, kCFURLPOSIXPathStyle, 0);
              v57 = v56;
              v92 = v56;
              if (v56)
                CFRetain(v56);
              v58 = CGImageDestinationCreateWithURL(v57, ValueAtIndex, 1uLL, 0);
              v91 = v58;
              if (v58)
              {
                CFRetain(v58);
                if (v91)
                {
                  CGImageDestinationAddImage(v91, (CGImageRef)v84.__r_.__value_.__l.__data_, 0);
                  CGImageDestinationFinalize(v91);
                }
              }
              realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef((const void **)&v91);
              realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)&v92);
              realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v95);
              v59 = 1;
            }
            else
            {
              v59 = 0;
            }
            realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef((const void **)&v93.__r_.__value_.__l.__data_);
            realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)inTag);
          }
          else
          {
            v59 = 0;
          }
          realityio::WrappedCFRef<CGImage *>::~WrappedCFRef((const void **)&v84.__r_.__value_.__l.__data_);
          realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef((const void **)&v85.__r_.__value_.__l.__data_);
          v60 = realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v86.__r_.__value_.__l.__data_);
          v61 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
          if (v87.__r_.__value_.__l.__size_)
          {
            v62 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          if ((char)v90 < 0)
            operator delete(v88);
          if (v38)
          {
            v64 = (unint64_t *)&v38->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          if ((v59 & 1) != 0)
          {
            v66 = *(uint64_t ***)(v73 + 24);
            v93.__r_.__value_.__r.__words[0] = a2;
            v67 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v66, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v93);
            std::string::operator=((std::string *)(v67 + 7), &__p);
            *a3 = __p;
            memset(&__p, 0, sizeof(__p));
          }
          else
          {
            v68 = *(id *)realityio::logObjects((realityio *)v60);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              if (*(char *)(a2 + 23) >= 0)
                v72 = (const std::string::value_type *)a2;
              else
                v72 = *(const std::string::value_type **)a2;
              LODWORD(v93.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
              _os_log_error_impl(&dword_22FF26000, v68, OS_LOG_TYPE_ERROR, "Unable to convert %s to a valid USDZ-texture-file.", (uint8_t *)&v93, 0xCu);
            }

            if (*(char *)(a2 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            }
            else
            {
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
              a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        }
        v69 = v78;
        if (v78)
        {
          v70 = (unint64_t *)&v78->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
      }
      else
      {
        *a3 = v79;
      }
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v80);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef((const void **)&v82);
      realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef((const void **)&v83);
    }
    else if (*(char *)(v8 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v8 + 56), *(_QWORD *)(v8 + 64));
    }
    else
    {
      v9 = *(_OWORD *)(v8 + 56);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    }
  }
}

void sub_22FF7423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,const void *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,const void *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;

  realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef((const void **)(v59 - 176));
  realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef((const void **)(v59 - 168));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v59 - 120));
  realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef((const void **)(v59 - 160));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&a10);
  realityio::WrappedCFRef<CGImage *>::~WrappedCFRef((const void **)&a41);
  realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef((const void **)&a47);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&a53);
  v61 = *(std::__shared_weak_count **)(v59 - 216);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (*(char *)(v59 - 177) < 0)
    operator delete(*(void **)(v59 - 200));
  if (v58)
  {
    v64 = (unint64_t *)&v58->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (a21 < 0)
    operator delete(__p);
  v66 = a24;
  if (a24)
  {
    v67 = (unint64_t *)&a24->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (a30 < 0)
    operator delete(a25);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a32);
  if (a38 < 0)
    operator delete(a33);
  realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef(&a39);
  realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef(&a40);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOPxrUsdUtilsConvertNonUsdzImages::$_0,std::allocator<RIOPxrUsdUtilsConvertNonUsdzImages::$_0>,std::string ()(std::string const&)>::target_type()
{
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  char v5;
  size_t v6;
  const void *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    if (v5 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    while (*(_QWORD *)(v3 + 8) != v6 || memcmp(*(const void **)v3, v7, v6))
    {
      v3 += 16;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

const void **realityio::WrappedCFRef<CGImageDestination *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFURL const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFArray const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<CGImage *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<CGImageSource *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FF74920(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

const void **realityio::WrappedCFRef<__CFDictionary *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<__CFDictionary const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType::~MaterialAssetBuilderTokens_StaticTokenType(realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  void **v97;

  v97 = (void **)((char *)this + 256);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v97);
  v2 = *((_QWORD *)this + 31);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 30);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 29);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 28);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 27);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 26);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 25);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 24);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 23);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 22);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 21);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 20);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 19);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 18);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 17);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 16);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 15);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 14);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 13);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 12);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 11);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 10);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 9);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 8);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 7);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 6);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 5);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 4);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 3);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 2);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 1);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v95 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v96 = __ldxr(v95);
    while (__stlxr(v96 - 2, v95));
  }
}

uint64_t realityio::MaterialAssetBuilder::kMaterialDataName(realityio::MaterialAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "shader_asset");
    realityio::MaterialAssetBuilder::kMaterialDataName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::MaterialAssetBuilder::kMaterialDataName(void)::kOutputName;
}

void sub_22FF74E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MaterialAssetBuilder *realityio::MaterialAssetBuilder::MaterialAssetBuilder(realityio::MaterialAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24FDE5658;
  std::string::basic_string[abi:ne180100]<0>(v16, "MaterialAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMaterialAssetBuilderIdentifier);
  realityio::generateMaterialAssetsDirtyStageSubscription(&v12);
  v20[0] = &off_24FDE5750;
  v20[1] = this;
  v21 = v20;
  v18[0] = &off_24FDE57D0;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDE5658;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::MaterialAssetBuilder *)((char *)this + 304));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_22FF750A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  realityio::MaterialAssetDataT *v28;
  realityio::MaterialAssetDataT *v29;

  v29 = v28;
  realityio::MaterialAssetDataT::~MaterialAssetDataT(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::run(realityio::MaterialAssetBuilder *this, realityio::Inputs *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  realityio::MaterialAssetBuilder *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  int v24;
  _QWORD *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];

  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v47, 2036, (uint64_t)this);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, (realityio::Inputs *)((char *)a2 + 32));
  v41 = 0;
  v42 = 0;
  if (realityio::hasMaterialXSurface((realityio *)v43, v5))
  {
    realityio::buildMaterialXAsset(a2, &v36);
    realityio::WrappedRERef<REAsset *>::operator=(&v42, &v36);
    if (v37)
    {
      v40 = v37;
      RERetain();
      realityio::Builder::addAsset((uint64_t *)this, &v40, 0);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v40);
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v37);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
  }
  v6 = v42;
  if (v42)
    goto LABEL_6;
  v19 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v43, &v36);
  v22 = *(_QWORD **)(v19 + 168);
  v20 = (unsigned __int8 *)(v19 + 168);
  v21 = v22;
  if (!v22)
    goto LABEL_33;
  v23 = v20;
  do
  {
    v24 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
    v25 = v21 + 1;
    if (!v24)
    {
      v25 = v21;
      v23 = (unsigned __int8 *)v21;
    }
    v21 = (_QWORD *)*v25;
  }
  while (*v25);
  if (v23 == v20
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 28)))
  {
LABEL_33:
    v23 = v20;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  if ((unsigned __int8 *)(*(_QWORD *)a2 + 168) == v23)
  {
    v28 = 0;
  }
  else
  {
    v26 = v23[36];
    v27 = v23[37];
    v28 = v23[37] != 0;
    if (!v26)
    {
      if (!v27)
        goto LABEL_49;
LABEL_42:
      realityio::createPbrMaterialFromUsdPreviewSurface((realityio *)&v36, this, (realityio::ImportSession **)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v43, 1);
      v30 = v41;
      if (v41 != v36)
      {
        v41 = v36;
        v36 = v30;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
      v6 = v42;
      if (v42)
        goto LABEL_6;
      v7 = v41;
      if (v41)
        goto LABEL_7;
      realityio::createDefaultPbrMaterialAsset(&v36, (uint64_t)this, (uint64_t)a2, 1);
      v31 = v41;
      if (v41 != v36)
      {
        v41 = v36;
        v36 = v31;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
      goto LABEL_49;
    }
  }
  realityio::createPbrMaterialFromUsdPreviewSurface((realityio *)&v36, this, (realityio::ImportSession **)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v43, 0);
  v29 = v42;
  if (v42 != v36)
  {
    v42 = v36;
    v36 = v29;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
  if (v28)
    goto LABEL_42;
LABEL_49:
  v6 = v42;
  if (!v42)
  {
    v7 = v41;
    if (v41)
      goto LABEL_7;
    realityio::createDefaultPbrMaterialAsset(&v36, (uint64_t)this, (uint64_t)a2, 0);
    v32 = v42;
    if (v42 != v36)
    {
      v42 = v36;
      v36 = v32;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
    v6 = v42;
    if (!v42)
    {
      v7 = v41;
      if (!v41)
        goto LABEL_20;
      goto LABEL_7;
    }
  }
LABEL_6:
  v39 = v6;
  RERetain();
  realityio::Builder::addAsset((uint64_t *)this, &v39, 0);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v39);
  v7 = v41;
  if (v41)
  {
LABEL_7:
    v38 = v7;
    RERetain();
    realityio::Builder::addAsset((uint64_t *)this, &v38, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v38);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v43, &v35);
  v34 = v42;
  if (v42)
    RERetain();
  v33 = v41;
  if (v41)
    RERetain();
  realityio::MaterialAssetDataT::MaterialAssetDataT((uint64_t)&v36, &v35, &v34, &v33);
  v8 = (char *)this + 280;
  realityio::MaterialAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&v36);
  realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)&v36);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v33);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v9 = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
  v11 = *((_QWORD *)this + 2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v36 = v11;
  v37 = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (__int128 *)realityio::MaterialAssetBuilder::kMaterialDataName(v9);
  v35 = v8;
  realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(v11, v14, &v35);
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_20:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v41);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v42);
  if ((v46 & 7) != 0)
  {
    v17 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (v44)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v47);
}

void sub_22FF75578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v11 - 64));
  _Unwind_Resume(a1);
}

_QWORD *realityio::createPbrMaterialFromUsdPreviewSurface(realityio *this, realityio::MaterialAssetBuilder *a2, realityio::ImportSession **a3, const pxrInternal__aapl__pxrReserved__::UsdPrim *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *IsValid;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v20;
  _BOOL4 isAlphaCutout;
  _BOOL4 v22;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v24;
  int hasInvalidTextures;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v30;
  __int16 v31;
  int v32;
  pxrInternal__aapl__pxrReserved__::UsdStage *v33;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v34;
  pxrInternal__aapl__pxrReserved__::TfToken *v35;
  uint64_t EmptyString;
  __int128 v37;
  pxrInternal__aapl__pxrReserved__::TfToken *v38;
  uint64_t v39;
  __int128 v40;
  pxrInternal__aapl__pxrReserved__::TfToken *v41;
  uint64_t v42;
  __int128 v43;
  pxrInternal__aapl__pxrReserved__::TfToken *v44;
  uint64_t v45;
  __int128 v46;
  pxrInternal__aapl__pxrReserved__::TfToken *v47;
  uint64_t v48;
  __int128 v49;
  pxrInternal__aapl__pxrReserved__::TfToken *v50;
  uint64_t v51;
  __int128 v52;
  pxrInternal__aapl__pxrReserved__::TfToken *v53;
  uint64_t v54;
  __int128 v55;
  pxrInternal__aapl__pxrReserved__::TfToken *v56;
  uint64_t v57;
  __int128 v58;
  pxrInternal__aapl__pxrReserved__::TfToken *v59;
  uint64_t v60;
  __int128 v61;
  pxrInternal__aapl__pxrReserved__::TfToken *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int isRMABundled;
  char **v67;
  int v68;
  char **v69;
  char **v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string *v74;
  std::string::size_type v75;
  int v76;
  BOOL v77;
  const char *v78;
  std::string *v79;
  unsigned int *v80;
  unsigned int v81;
  id v82;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  char *v92;
  char **v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  std::string v98;
  void *v99[2];
  std::string::size_type v100;
  uint64_t v101;
  __int128 v102;
  std::string __str;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string __p;
  uint64_t v109;
  __int128 v110;
  std::string::size_type v111;
  void *v112[2];
  char v113;
  _BYTE v114[8];
  char *v115;
  std::string v116;
  std::string v117;
  int v118;
  int v119;
  int v120[2];
  std::string::size_type v121;
  char **v122;
  char *v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  std::string v130;
  const char *v131;
  std::string v132;
  const char *v133;
  std::string v134;
  const char *v135;
  std::string v136;
  const char *v137;
  std::string v138;
  const char *v139;
  std::string v140;
  const char *v141;
  std::string v142;
  const char *v143;
  std::string v144;
  const char *v145;
  std::string v146;
  const char *v147;
  std::string v148;
  const char *v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v129 = 0;
  IsValid = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a4);
  if ((IsValid & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(IsValid);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0
      && *(_QWORD *)(*((_QWORD *)a3[5] + 2) + 16)
      && REEngineGetServiceLocator()
      && MEMORY[0x2348B1264]())
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v126 = MEMORY[0x24BEE9D88] + 16;
      if (!v127
        || (*(_BYTE *)(v127 + 57) & 8) != 0
        || ((*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D88] + 48))(&v126) & 1) == 0)
      {
        *(_QWORD *)this = v129;
        v129 = 0;
LABEL_32:
        MEMORY[0x2348B20B0](&v126);
        return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v129);
      }
      Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      v12 = *((_QWORD *)Data + 27);
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      memset(&v130, 0, sizeof(v130));
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
      __p.__r_.__value_.__s.__data_[8] = 0;
      v15 = operator new(8uLL);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
      *v15 = v12;
      v130.__r_.__value_.__r.__words[2] = (std::string::size_type)(v15 + 1);
      if ((v12 & 7) != 0)
      {
        v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          *v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      v130.__r_.__value_.__l.__size_ = (std::string::size_type)(v15 + 1);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if ((v12 & 7) != 0)
      {
        v18 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      if (!v125
        || (*(_BYTE *)(v125 + 57) & 8) != 0
        || ((*(uint64_t (**)(uint64_t *))(v124 + 32))(&v124) & 1) == 0)
      {
        *(_QWORD *)this = v129;
        v129 = 0;
LABEL_34:
        MEMORY[0x2348B1EC4](&v124);
        goto LABEL_32;
      }
      realityio::makeBaseNameToTextureDataMap((uint64_t)&v122, (realityio::Inputs *)a3, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v124);
      isAlphaCutout = realityio::isAlphaCutout((realityio *)&v124, v20);
      v22 = isAlphaCutout || realityio::isTransparent((realityio *)&v124, (uint64_t)&v122);
      if (realityio::ImportSession::allowUnsupportedTextures(a3[5]))
      {
        v121 = 0;
        if ((a5 & 1) != 0)
        {
LABEL_43:
          if (isAlphaCutout)
          {
            v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v130.__r_.__value_.__r.__words[0])
              goto LABEL_58;
          }
          else if (v22)
          {
            v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v130.__r_.__value_.__r.__words[0])
              goto LABEL_58;
          }
          else
          {
            v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
            if (v130.__r_.__value_.__r.__words[0])
              goto LABEL_58;
          }
LABEL_59:
          v26 = 0;
          goto LABEL_60;
        }
      }
      else
      {
        hasInvalidTextures = realityio::hasInvalidTextures((realityio *)&v124, v24);
        v121 = 0;
        if (((a5 ^ 1 | hasInvalidTextures) & 1) == 0)
          goto LABEL_43;
        if (hasInvalidTextures)
        {
          v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
          if (!v130.__r_.__value_.__r.__words[0])
            goto LABEL_59;
          goto LABEL_58;
        }
      }
      if (isAlphaCutout)
      {
        v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
        if (v130.__r_.__value_.__r.__words[0])
          goto LABEL_58;
        goto LABEL_59;
      }
      if (v22)
      {
        v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
        if (v130.__r_.__value_.__r.__words[0])
          goto LABEL_58;
        goto LABEL_59;
      }
      v130.__r_.__value_.__r.__words[0] = REAssetManagerCreateAssetHandle();
      if (!v130.__r_.__value_.__r.__words[0])
        goto LABEL_59;
LABEL_58:
      RERetain();
      v26 = v130.__r_.__value_.__r.__words[0];
LABEL_60:
      v27 = v121;
      if (v121 != v26)
      {
        v121 = v26;
        v130.__r_.__value_.__r.__words[0] = v27;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v130);
      v28 = v121;
      if (v121)
      {
        v29 = *(_QWORD *)(*((_QWORD *)a3[5] + 2) + 40);
        if (v29)
        {
          realityio::LiveSceneManager::queueForDeferredAssetLoad(v29, (uint64_t *)&v121);
          v28 = v121;
        }
        realityio::Builder::addAsset((uint64_t *)a2, v28, (uint64_t)"pbrMaterialDef");
        RERelease();
        *(_QWORD *)v120 = REMaterialAssetBuilderCreate();
        if (*(_QWORD *)v120 && (RERetain(), *(_QWORD *)v120))
        {
          RERelease();
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a4, &v118);
          if (*(_BYTE *)(*((_QWORD *)a3[5] + 2) + 272))
          {
            std::string::basic_string[abi:ne180100]<0>(&v130, "/model");
            MEMORY[0x2348B26F8](&v117, &v130);
            std::string::basic_string[abi:ne180100]<0>(&__p, "/");
            MEMORY[0x2348B26F8](&v116, &__p);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v117, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v116);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v118, (int *)&v104);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v119);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v104);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v116);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v117);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118);
          REMaterialAssetBuilderSetName();
          REMaterialAssetBuilderSetMaterialDefinition();
          realityio::getCullMode(a4, v30);
          if (!v31)
            REMaterialAssetBuilderSetMTLCullMode();
          v32 = v120[0];
          v33 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a3 + 1);
          realityio::setFunctionConstantsFromScene(v32, v33);
          realityio::setMaterialConstantsFromUsdPreviewSurface(v120[0], (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v124, (uint64_t)&v122);
          realityio::setFunctionConstantsFromUsdPreviewSurface(v120[0], (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v124, (uint64_t)&v122);
          realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v124, v34, &v117);
          std::string::basic_string[abi:ne180100]<0>(&v116, "");
          v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v35)
            v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v35 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (*((_QWORD *)v35 + 4) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
          }
          else
          {
            v37 = *(_OWORD *)EmptyString;
            v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v37;
          }
          v131 = "textureBaseColor";
          v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v38)
            v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v38 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
            v39 = (*((_QWORD *)v38 + 2) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
          if (*(char *)(v39 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v39, *(_QWORD *)(v39 + 8));
          }
          else
          {
            v40 = *(_OWORD *)v39;
            v132.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 16);
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v40;
          }
          v133 = "textureMetallic";
          v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v41)
            v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v41 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
            v42 = (*((_QWORD *)v41 + 3) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
          if (*(char *)(v42 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v134, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
          }
          else
          {
            v43 = *(_OWORD *)v42;
            v134.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v43;
          }
          v135 = "textureRoughness";
          v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v44)
            v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v44 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
            v45 = (*((_QWORD *)v44 + 5) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          if (*(char *)(v45 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v45, *(_QWORD *)(v45 + 8));
          }
          else
          {
            v46 = *(_OWORD *)v45;
            v136.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 16);
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v46;
          }
          v137 = "textureEmissive";
          v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v47)
            v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v47 + 24) & 0xFFFFFFFFFFFFFFF8) != 0)
            v48 = (*((_QWORD *)v47 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v48 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
          if (*(char *)(v48 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
          }
          else
          {
            v49 = *(_OWORD *)v48;
            v138.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
            *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v49;
          }
          v139 = "textureSpecular";
          v50 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v50)
            v50 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v50 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
            v51 = (*((_QWORD *)v50 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v51 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v50);
          if (*(char *)(v51 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v51, *(_QWORD *)(v51 + 8));
          }
          else
          {
            v52 = *(_OWORD *)v51;
            v140.__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
            *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v52;
          }
          v141 = "textureClearcoat";
          v53 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v53)
            v53 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
            v54 = (*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v53);
          if (*(char *)(v54 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v54, *(_QWORD *)(v54 + 8));
          }
          else
          {
            v55 = *(_OWORD *)v54;
            v142.__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 16);
            *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v55;
          }
          v143 = "textureClearcoatRoughness";
          v56 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v56)
            v56 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v56 + 11) & 0xFFFFFFFFFFFFFFF8) != 0)
            v57 = (*((_QWORD *)v56 + 11) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v57 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v56);
          if (*(char *)(v57 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
          }
          else
          {
            v58 = *(_OWORD *)v57;
            v144.__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 16);
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v58;
          }
          v145 = "textureNormal";
          v59 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v59)
            v59 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v59 + 23) & 0xFFFFFFFFFFFFFFF8) != 0)
            v60 = (*((_QWORD *)v59 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v60 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v59);
          if (*(char *)(v60 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
          }
          else
          {
            v61 = *(_OWORD *)v60;
            v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
            *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v61;
          }
          v147 = "textureAmbientOcclusion";
          v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
          if (!v62)
            v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          if ((*((_QWORD *)v62 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
            v63 = (*((_QWORD *)v62 + 10) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v63 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v62);
          if (*(char *)(v63 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)v63, *(_QWORD *)(v63 + 8));
          }
          else
          {
            v64 = *(_OWORD *)v63;
            v148.__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 16);
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v64;
          }
          v149 = "textureOpacity";
          std::map<std::string,char const*>::map[abi:ne180100]((uint64_t)v114, (const void **)&v130.__r_.__value_.__l.__data_, 10);
          v65 = 320;
          do
          {
            if (*(&v128 + v65) < 0)
              operator delete(*(void **)((char *)&v126 + v65));
            v65 -= 32;
          }
          while (v65);
          isRMABundled = realityio::isRMABundled((uint64_t)&v122);
          v67 = v122;
          if (v122 != v123)
          {
            v68 = isRMABundled;
            v96 = 0;
            v97 = 0;
            while (1)
            {
              if (*((char *)v67 + 55) < 0)
                std::string::__init_copy_ctor_external(&v130, v67[4], (std::string::size_type)v67[5]);
              else
                v130 = *(std::string *)(v67 + 4);
              v131 = v67[7];
              v69 = (char **)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)v114, (const void **)&v130.__r_.__value_.__l.__data_);
              v70 = v69;
              if (&v115 != v69)
                break;
LABEL_233:
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v130.__r_.__value_.__l.__data_);
              v92 = v67[1];
              if (v92)
              {
                do
                {
                  v93 = (char **)v92;
                  v92 = *(char **)v92;
                }
                while (v92);
              }
              else
              {
                do
                {
                  v93 = (char **)v67[2];
                  v77 = *v93 == (char *)v67;
                  v67 = v93;
                }
                while (!v77);
              }
              v67 = v93;
              if (v93 == v123)
                goto LABEL_241;
            }
            std::string::basic_string[abi:ne180100]<0>(v112, v69[7]);
            std::string::basic_string[abi:ne180100]<0>(&__p, v70[7]);
            v71 = std::string::append(&__p, "_sampler");
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v111 = v71->__r_.__value_.__r.__words[2];
            v110 = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!v68)
            {
LABEL_188:
              v78 = v131;
              if (v78 + 24 != (const char *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(v131 + 16), (const void **)&v130.__r_.__value_.__l.__data_))
              {
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v79 = &v130;
                else
                  v79 = (std::string *)v130.__r_.__value_.__r.__words[0];
                MEMORY[0x2348B274C](&v104, v79);
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v124, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v104);
                if ((v104 & 7) != 0)
                {
                  v80 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v81 = __ldxr(v80);
                  while (__stlxr(v81 - 2, v80));
                }
                realityio::findPrimWhichOriginatedConnection((realityio *)&v104, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&__p);
                memset(&__str, 0, sizeof(__str));
                v102 = xmmword_230204CE0;
                v101 = 0;
                realityio::uvNameAndTransformForTexturePrim((uint64_t)&v104, &__str, &v102, &v101);
                REMaterialAssetBuilderSetTextureFromAsset();
                v82 = *((id *)v131 + 5);
                REMaterialAssetBuilderSetSampler();

                REMaterialAssetBuilderBindTextureToSampler();
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                if (size
                  && std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&__str, (unsigned __int8 *)&v117)&& (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v116, "")|| std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v116, (unsigned __int8 *)&__str)))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v98, "geometry.primvars:");
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_str = &__str;
                  else
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v85 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  else
                    v85 = __str.__r_.__value_.__l.__size_;
                  v86 = std::string::append(&v98, (const std::string::value_type *)p_str, v85);
                  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                  v100 = v86->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v99 = v87;
                  v86->__r_.__value_.__l.__size_ = 0;
                  v86->__r_.__value_.__r.__words[2] = 0;
                  v86->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v98.__r_.__value_.__l.__data_);
                  std::string::operator=(&v116, &__str);
                  REMaterialAssetBuilderSetBufferFromBinding();
                  REMaterialAssetBuilderSetUVIndexForTexture();
                  if ((v96 & 1) == 0)
                  {
                    REMaterialAssetBuilderSetFloat4();
                    REMaterialAssetBuilderSetFloat2();
                  }
                  if (SHIBYTE(v100) < 0)
                    operator delete(v99[0]);
                  v96 = 1;
                }
                else
                {
                  if ((v97 & 1) == 0)
                  {
                    REMaterialAssetBuilderSetFloat4();
                    REMaterialAssetBuilderSetFloat2();
                  }
                  REMaterialAssetBuilderSetUVIndexForTexture();
                  v97 = 1;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if ((v107 & 7) != 0)
                {
                  v88 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v89 = __ldxr(v88);
                  while (__stlxr(v89 - 2, v88));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
                if (v105)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v105);
                if ((v109 & 7) != 0)
                {
                  v90 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v91 = __ldxr(v90);
                  while (__stlxr(v91 - 2, v90));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__r.__words[2]);
                if (__p.__r_.__value_.__l.__size_)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__p.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(v111) < 0)
                operator delete((void *)v110);
              if (v113 < 0)
                operator delete(v112[0]);
              goto LABEL_233;
            }
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v130.__r_.__value_.__l.__size_ == 8)
              {
                v73 = (std::string *)v130.__r_.__value_.__r.__words[0];
LABEL_174:
                if (v73->__r_.__value_.__r.__words[0] == 0x63696C6C6174656DLL)
                  goto LABEL_178;
              }
            }
            else if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) == 8)
            {
              v73 = &v130;
              goto LABEL_174;
            }
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v130, "occlusion")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v130, "roughness")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v130, "specularColor"))
            {
              goto LABEL_188;
            }
LABEL_178:
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v130.__r_.__value_.__l.__size_ == 9)
              {
                v74 = (std::string *)v130.__r_.__value_.__r.__words[0];
LABEL_183:
                v75 = v74->__r_.__value_.__r.__words[0];
                v76 = v74->__r_.__value_.__s.__data_[8];
                v77 = v75 == 0x6F6973756C63636FLL && v76 == 110;
                if (v77)
                  goto LABEL_188;
              }
            }
            else if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) == 9)
            {
              v74 = &v130;
              goto LABEL_183;
            }
            MEMORY[0x2348B4AD4](v112, "textureRMAS");
            MEMORY[0x2348B4AD4](&v110, "textureRMAS_sampler");
            goto LABEL_188;
          }
LABEL_241:
          std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v116, "");
          REMaterialAssetBuilderSetFunctionConstant();
          v94 = REAssetManagerMaterialAssetBuilderBuildAsync();
          *(_QWORD *)this = v94;
          if (v94)
          {
            RERetain();
            RERelease();
            v95 = *(_QWORD *)(*((_QWORD *)a3[5] + 2) + 40);
            if (v95)
              realityio::LiveSceneManager::queueForDeferredAssetLoad(v95, (uint64_t *)this);
          }
          std::__tree<std::string>::destroy((uint64_t)v114, v115);
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v117.__r_.__value_.__l.__data_);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118);
        }
        else
        {
          *(_QWORD *)this = v129;
          v129 = 0;
        }
        realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(v120);
      }
      else
      {
        *(_QWORD *)this = v129;
        v129 = 0;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v121);
      std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(v123[0]);
      goto LABEL_34;
    }
  }
  *(_QWORD *)this = v129;
  v129 = 0;
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v129);
}

void sub_22FF766C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a66;

  MEMORY[0x2348B20B0](&a63);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a66);
  _Unwind_Resume(a1);
}

_QWORD *realityio::createDefaultPbrMaterialAsset(_QWORD *result, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v5;
  uint64_t ServiceLocator;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  v13 = a2;
  v11 = a4;
  *result = 0;
  if (a3)
  {
    v5 = result;
    ServiceLocator = REEngineGetServiceLocator();
    v10 = MEMORY[0x2348B1264](ServiceLocator);
    v7 = *(_QWORD *)(a3 + 48);
    v8 = operator new(0x30uLL);
    *v8 = &off_24FDE5860;
    v8[1] = &v11;
    v8[2] = &v10;
    v8[3] = &v13;
    v8[4] = &v12;
    v8[5] = v5;
    v15 = v8;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v14);
    result = v15;
    if (v15 == v14)
    {
      v9 = 4;
      result = v14;
    }
    else
    {
      if (!v15)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_22FF76AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v17);
  _Unwind_Resume(a1);
}

uint64_t realityio::MaterialAssetDataT::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 != v5)
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a2 + 8) = v4;
  }
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return a1;
}

void realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDE58E0;
  v7[3] = &off_24FDE5930;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_22FF76C9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::clear(realityio::MaterialAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  realityio::MaterialAssetBuilder *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  std::string v20;
  uint64_t v21;
  __int128 v22;
  std::string __p;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::MaterialAssetBuilder::kMaterialDataName(this);
  realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v5, v8, (uint64_t)&v21);
  v10 = v21;
  if (!(_BYTE)v21)
  {
    v9 = (realityio::MaterialAssetBuilder *)&v20;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v5 = (std::mutex *)v20.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v21 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v20 = __p;
      v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v4)
    goto LABEL_14;
  v11 = (unint64_t *)&v4->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v10)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v10)
    {
LABEL_15:
      v14 = *((_QWORD *)this + 2);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v21 = v14;
      *(_QWORD *)&v22 = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (const void **)realityio::MaterialAssetBuilder::kMaterialDataName(v9);
      std::mutex::lock((std::mutex *)(v14 + 64));
      if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)v17);
      std::mutex::unlock((std::mutex *)(v14 + 64));
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v21 = 0;
      v22 = 0uLL;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v22 = 0uLL;
      realityio::MaterialAssetDataT::operator=((uint64_t)this + 280, (uint64_t)&v21);
      realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)&v21);
      return;
    }
  }
  if (v2 < 0)
    operator delete(v5);
}

void sub_22FF76EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a17 && a25 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

__n128 realityio::getShadeInputColor4WithFallback(__n128 *a1, pxrInternal__aapl__pxrReserved__::UsdObject *this, __n128 a3)
{
  unsigned int *v5;
  unsigned int v6;
  __n128 result;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
LABEL_16:
    result = a3;
    *a1 = a3;
    a1[1].n128_u8[0] = 0;
    return result;
  }
  realityio::findOriginalSourceAttribute(this, (uint64_t)v11);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v11)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v11))
  {
    if ((v14 & 7) != 0)
    {
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    if (v12)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    goto LABEL_16;
  }
  realityio::getColorAttributeAndGamut((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v11, a1, a3);
  if ((v14 & 7) != 0)
  {
    v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  return result;
}

void sub_22FF770D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::findPrimWhichOriginatedConnection(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  int IsValid;
  char v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  }
  realityio::findOriginalSourceAttribute(a2, (uint64_t)&v9);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9);
  v5 = IsValid;
  if (IsValid)
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, &v10, &v11);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  result = v10;
  if (v10)
    result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  if ((v5 & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)this, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  return result;
}

void sub_22FF771B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::findOriginalSourceAttributeName(std::string *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  uint64_t EmptyString;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  realityio::findOriginalSourceAttribute(a2, (uint64_t)v11);
  BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)v11);
  if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (v15 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v5 = *(_OWORD *)EmptyString;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if ((v15 & 7) != 0)
  {
    v6 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((v14 & 7) != 0)
  {
    v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  result = v12;
  if (v12)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  return result;
}

void sub_22FF772A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  v4 = *(_QWORD *)(v2 - 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

__n128 realityio::findTextureScaleFloat3(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  char v2;
  unint64_t Data;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  float32x2_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v19;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  float32x2_t v29;
  void *__p;
  char v31;

  v2 = (char)a2;
  realityio::findPrimWhichOriginatedConnection((realityio *)v24, this);
  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 240));
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)v20, (uint64_t)v28);
  if (v28[0])
  {
    *(float32x2_t *)&_Q0 = v29;
    v19 = _Q0;
  }
  else
  {
    __asm { FMOV            V0.2S, #1.0 }
    v19 = _Q0;
    if (v31 < 0)
      operator delete(__p);
  }
  if ((v23 & 7) != 0)
  {
    v9 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  if (v21)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
  if ((v2 & 1) == 0)
  {
    v11 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v11)
      v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 248));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)v20, (uint64_t)v28);
    if (v28[0])
    {
      v12 = v29;
    }
    else
    {
      v12 = 0;
      if (v31 < 0)
        operator delete(__p);
    }
    if ((v23 & 7) != 0)
    {
      v13 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if (v21)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
    *((_QWORD *)&v15 + 1) = *((_QWORD *)&v19 + 1);
    *(float32x2_t *)&v15 = vmul_f32(*(float32x2_t *)&v19, v12);
    v19 = v15;
  }
  if ((v27 & 7) != 0)
  {
    v16 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  return (__n128)v19;
}

void sub_22FF774CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

float realityio::findTextureScaleFloat(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  char v2;
  unint64_t Data;
  unsigned int *v10;
  unsigned int v11;
  realityio *OriginalSourceAttributeName;
  int v13;
  uint64_t v14;
  NSObject *v15;
  std::string *v16;
  float v17;
  unint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  void *__p;
  char v34;
  uint8_t buf[4];
  _BYTE v36[12];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = (char)a2;
  v39 = *MEMORY[0x24BDAC8D0];
  realityio::findPrimWhichOriginatedConnection((realityio *)v28, this);
  v27 = 0uLL;
  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 240));
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (uint64_t)&v32);
  if (v32.__r_.__value_.__s.__data_[0])
  {
    _Q0 = *(_OWORD *)&v32.__r_.__value_.__r.__words[1];
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    if (v34 < 0)
    {
      v25 = _Q0;
      operator delete(__p);
      _Q0 = v25;
    }
  }
  v27 = _Q0;
  if ((v38 & 7) != 0)
  {
    v10 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  if (*(_QWORD *)&v36[4])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v36[4]);
  OriginalSourceAttributeName = (realityio *)realityio::findOriginalSourceAttributeName(&v32, this);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v32.__r_.__value_.__l.__size_ != 1)
      goto LABEL_26;
    v13 = *v32.__r_.__value_.__l.__data_;
    switch(v13)
    {
      case 'b':
        v14 = 2;
        goto LABEL_37;
      case 'g':
        v14 = 1;
        goto LABEL_37;
      case 'r':
        v14 = 0;
        goto LABEL_37;
    }
  }
  else
  {
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_26;
    v13 = v32.__r_.__value_.__s.__data_[0];
    switch(v32.__r_.__value_.__s.__data_[0])
    {
      case 'b':
        v14 = 2;
        goto LABEL_38;
      case 'g':
        v14 = 1;
        goto LABEL_38;
      case 'r':
        v14 = 0;
        goto LABEL_38;
    }
  }
  if (v13 == 97)
  {
    v14 = 3;
    if ((*((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_26:
  v15 = *(NSObject **)(realityio::logObjects(OriginalSourceAttributeName) + 24);
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 0;
    if ((*((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  v16 = &v32;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)v36 = v16;
  _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Invalid USD texture shader node output %s for single texture component.", buf, 0xCu);
  v14 = 0;
  if ((*((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_37:
    operator delete(v32.__r_.__value_.__l.__data_);
LABEL_38:
  v17 = *(float *)((unint64_t)&v27 | (4 * v14));
  if ((v2 & 1) == 0)
  {
    v26 = 0uLL;
    v18 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 248));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (uint64_t)&v32);
    if (v32.__r_.__value_.__s.__data_[0])
    {
      v19 = *(_OWORD *)&v32.__r_.__value_.__r.__words[1];
    }
    else
    {
      v19 = xmmword_230204CF0;
      if (v34 < 0)
      {
        operator delete(__p);
        v19 = xmmword_230204CF0;
      }
    }
    v26 = v19;
    if ((v38 & 7) != 0)
    {
      v20 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    if (*(_QWORD *)&v36[4])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v36[4]);
    v17 = v17 * *(float *)((unint64_t)&v26 | (4 * v14));
  }
  if ((v31 & 7) != 0)
  {
    v22 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  if (v29)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  return v17;
}

void sub_22FF7784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a15);
  _Unwind_Resume(a1);
}

void sub_22FF778AC()
{
  JUMPOUT(0x22FF778A4);
}

uint64_t realityio::getBaseColorTintAndOpacity(float32x4_t *a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  unint64_t Data;
  unint64_t v7;
  unint64_t v8;
  __int8 v9;
  __int8 v15;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  int v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  const void **EmptyString;
  _BOOL8 v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  const void **v23;
  float32x4_t v24;
  _BOOL8 v25;
  __int32 v26;
  float v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t result;
  float32x4_t v35;
  float32x4_t v36;
  float ShadeInputValueWith;
  char v38[8];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 32));
  v7 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 80));
  v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 200));
  v50.i32[0] = 1065353216;
  ShadeInputValueWith = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v42, &v50);
  realityio::getShadeInputColor4WithFallback((__n128 *)&v50, (pxrInternal__aapl__pxrReserved__::UsdObject *)v46, (__n128)xmmword_230204D00);
  v35 = v50;
  v9 = v51;
  __asm { FMOV            V0.4S, #1.0 }
  realityio::getShadeInputColor4WithFallback((__n128 *)&v50, (pxrInternal__aapl__pxrReserved__::UsdObject *)v38, _Q0);
  v36 = v50;
  v15 = v51;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v46)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    v17 = MEMORY[0x2348B37CC](v46);
  }
  else
  {
    v17 = 0;
  }
  v18 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v18)
    v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  if (!realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v18 + 80), v16)&& pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v42)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()&& MEMORY[0x2348B37CC](v42))
  {
    v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v19)
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v19 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const void **)((*((_QWORD *)v19 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
    v21 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    ShadeInputValueWith = realityio::findTextureScaleFloat((realityio *)v42, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v21);
  }
  if (v17)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v22)
      v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v22 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
      v23 = (const void **)((*((_QWORD *)v22 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v23 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    v25 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v23);
    v24.i32[0] = realityio::findTextureScaleFloat3((realityio *)v46, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v25).n128_u32[0];
    v24.i32[1] = v26;
    *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v24.f32);
    v24.f32[2] = v36.f32[2] * v27;
    v9 = v15;
  }
  else
  {
    v24 = vmulq_f32(v35, v36);
  }
  v24.f32[3] = ShadeInputValueWith;
  *a1 = v24;
  a1[1].i8[0] = v9;
  if ((v41 & 7) != 0)
  {
    v28 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (v39)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
  if ((v45 & 7) != 0)
  {
    v30 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
  if (v43)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
  if ((v49 & 7) != 0)
  {
    v32 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
  result = v47;
  if (v47)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
  return result;
}

void sub_22FF77BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va1);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va2);
  _Unwind_Resume(a1);
}

float realityio::getShadeInputValueWithFallback<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD *a2)
{
  float v2;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  float v14;
  void *__p;
  char v16;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    return *(float *)a2;
  }
  realityio::findOriginalSourceAttribute(a1, (uint64_t)&v9);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v9))
  {
    realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9, (uint64_t)v13);
    if (v13[0])
    {
      v2 = v14;
    }
    else
    {
      v2 = *(float *)a2;
      if (v16 < 0)
        operator delete(__p);
    }
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  if (v5)
    return *(float *)a2;
  return v2;
}

void sub_22FF77D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  _Unwind_Resume(a1);
}

BOOL realityio::isTransparent(realityio *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *Data;
  const void **EmptyString;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  const void **v8;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL isConnectedToBaseColorAlpha;
  BOOL v14;
  _BOOL8 result;
  float32x4_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Data = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  if ((*((_QWORD *)Data + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((*((_QWORD *)Data + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a2, EmptyString);
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7)
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  if ((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (const void **)((*((_QWORD *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a2, v8);
  v11 = a2 + 8;
  v12 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  isConnectedToBaseColorAlpha = realityio::isConnectedToBaseColorAlpha(a1, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v12 + 80), v9);
  v14 = v11 != v6 && isConnectedToBaseColorAlpha;
  result = 1;
  if (!v14 && v11 == v10)
  {
    realityio::getBaseColorTintAndOpacity(&v16, a1, a2);
    return v16.f32[3] < 1.0;
  }
  return result;
}

BOOL realityio::isAlphaCutout(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  BOOL v2;
  unint64_t Data;
  int IsValid;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  float v21;
  void *__p;
  char v23;

  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 72));
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v16)
    || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    goto LABEL_17;
  }
  realityio::findOriginalSourceAttribute((realityio *)v16, (uint64_t)&v12);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12);
  v6 = IsValid;
  if (IsValid)
  {
    realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12, (uint64_t)v20);
    if (v20[0])
    {
      v2 = v21 > 0.0;
    }
    else
    {
      if (v23 < 0)
        operator delete(__p);
      v2 = 0;
    }
  }
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  if ((v6 & 1) == 0)
LABEL_17:
    v2 = 0;
  if ((v19 & 7) != 0)
  {
    v9 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  return v2;
}

void sub_22FF77FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::hasInvalidTextures(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdShadeInput *v2;
  const pxrInternal__aapl__pxrReserved__::UsdShadeInput *v3;
  pxrInternal__aapl__pxrReserved__ *FileResolvedPath;
  std::string::size_type size;
  char v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  _BYTE *v12;
  unint64_t v13;
  realityio *v14;
  realityio *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  NSObject *v19;
  std::string *v20;
  unsigned int *v21;
  unsigned int v22;
  std::string *v24;
  void *v25;
  unint64_t v26;
  unsigned __int8 v27;
  std::string v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const pxrInternal__aapl__pxrReserved__::UsdShadeInput *v33;
  const pxrInternal__aapl__pxrReserved__::UsdShadeInput *v34;
  __int128 __p;
  uint64_t v36;
  const char *v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(this);
  v2 = v33;
  v3 = v34;
  if (v33 == v34)
  {
LABEL_32:
    v18 = 0;
    goto LABEL_46;
  }
  while (1)
  {
    realityio::findPrimWhichOriginatedConnection((realityio *)v29, v2);
    FileResolvedPath = (pxrInternal__aapl__pxrReserved__ *)realityio::getFileResolvedPath(&v28);
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    v6 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v28.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_24;
    pxrInternal__aapl__pxrReserved__::ArGetResolver(FileResolvedPath);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
    v7 = (v27 & 0x80u) != 0;
    v8 = v27;
    if ((v27 & 0x80u) != 0)
      v8 = v26;
    if (v8)
    {
      v9 = 0;
      do
      {
        if (v7)
          v10 = (char *)v25;
        else
          v10 = (char *)&v25;
        v11 = __tolower(v10[v9]);
        if ((v27 & 0x80u) == 0)
          v12 = &v25;
        else
          v12 = v25;
        v12[v9++] = v11;
        v7 = (v27 & 0x80u) != 0;
        v13 = v27;
        if ((v27 & 0x80u) != 0)
          v13 = v26;
      }
      while (v13 > v9);
    }
    pxrInternal__aapl__pxrReserved__::TfStringToLower();
    v15 = v14;
    if (SHIBYTE(v36) < 0)
      operator delete((void *)__p);
    if (v15 - (realityio *)&realityio::isUsdzCompliantImageFileExtension(std::string const&)::allowedExtensions == 64)
      break;
    if ((char)v27 < 0)
      operator delete(v25);
    v6 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
LABEL_24:
    if (v6 < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if ((v32 & 7) != 0)
    {
      v16 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    v2 = (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v2 + 32);
    if (v2 == v3)
      goto LABEL_32;
  }
  v19 = *(NSObject **)realityio::logObjects(v14);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v24 = &v28;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v24;
    _os_log_error_impl(&dword_22FF26000, v19, OS_LOG_TYPE_ERROR, "%s is an invalid texture format for use in USDZ.", (uint8_t *)&__p, 0xCu);
  }
  *(_QWORD *)&__p = "Material/MaterialAssetBuilder.mm";
  *((_QWORD *)&__p + 1) = "hasInvalidTextures";
  v36 = 596;
  v37 = "BOOL realityio::hasInvalidTextures(const UsdShadeShader &)";
  v38 = 1;
  v39 = 6;
  v20 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, "%s is an invalid texture format for use in USDZ.", (const char *)v20);
  if ((char)v27 < 0)
    operator delete(v25);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((v32 & 7) != 0)
  {
    v21 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  if (v30)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
  v18 = 1;
LABEL_46:
  *(_QWORD *)&__p = &v33;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v18;
}

void sub_22FF7834C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::makeBaseNameToTextureDataMap(uint64_t this, realityio::Inputs *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::SdfPath **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath **v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t String;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  unsigned int *v20;
  unsigned int v21;
  std::string::size_type *v22;
  const void **v23;
  char *v24;
  char **v25;
  char **v26;
  char *v27;
  _BOOL4 v28;
  char *v29;
  const void **v30;
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  uint64_t EmptyString;
  __int128 v33;
  unsigned int *v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::TfToken *v38;
  uint64_t v39;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  std::string v48;
  char *v49;
  std::string v50;
  char v51[8];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  unint64_t v58;
  char **v59;
  char *v60;
  uint64_t v61;
  char v62[8];
  pxrInternal__aapl__pxrReserved__::SdfPath **v63;
  pxrInternal__aapl__pxrReserved__::SdfPath **v64;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = this + 8;
  if (a2)
  {
    v4 = *((_QWORD *)a3 + 1);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 57) & 8) == 0)
      {
        v6 = (uint64_t **)this;
        this = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(_QWORD *)a3 + 32))(a3);
        if ((this & 1) != 0)
        {
          v7 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)this);
          realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>((uint64_t)a2, v7, (uint64_t)v62);
          if (v62[0])
          {
            v8 = v63;
            v9 = v64;
            if (v63 != v64)
            {
              v60 = 0;
              v61 = 0;
              v59 = &v60;
              do
              {
                v10 = *v8;
                String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(*v8);
                if (*(char *)(String + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
                }
                else
                {
                  v12 = *(_OWORD *)String;
                  v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
                }
                v58 = (unint64_t)v10;
                std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>((uint64_t **)&v59, (const void **)&v57.__r_.__value_.__l.__data_, (__int128 *)&v57);
                if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v57.__r_.__value_.__l.__data_);
                ++v8;
              }
              while (v8 != v9);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a3);
              v13 = v55;
              v14 = v56;
              if (v55 != v56)
              {
                v15 = &v57.__r_.__value_.__r.__words[2];
                do
                {
                  LODWORD(v57.__r_.__value_.__l.__data_) = *(_DWORD *)v13;
                  v16 = *(_QWORD *)(v13 + 8);
                  v57.__r_.__value_.__l.__size_ = v16;
                  if (v16)
                  {
                    v17 = (unint64_t *)(v16 + 48);
                    do
                      v18 = __ldxr(v17);
                    while (__stxr(v18 + 1, v17));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, (_DWORD *)(v13 + 16));
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v57.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v13 + 20));
                  v19 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(v13 + 24);
                  v58 = (unint64_t)v19;
                  if ((v19 & 7) != 0)
                  {
                    v20 = (unsigned int *)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v21 = __ldxr(v20);
                    while (__stxr(v21 + 2, v20));
                    if ((v21 & 1) == 0)
                      v58 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v57))
                  {
                    realityio::findPrimWhichOriginatedConnection((realityio *)v51, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v13);
                    v22 = v15;
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v51))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v51, &v48);
                      v23 = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
                      v24 = v60;
                      if (v60)
                      {
                        v25 = &v60;
                        do
                        {
                          v26 = v25;
                          v27 = v24 + 32;
                          v28 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v61, (const void **)v24 + 4, v23);
                          v29 = v24 + 8;
                          if (!v28)
                          {
                            v29 = v24;
                            v25 = (char **)v24;
                          }
                          v24 = *(char **)v29;
                        }
                        while (*(_QWORD *)v29);
                        if (v25 != &v60)
                        {
                          v30 = v28 ? (const void **)(v26 + 4) : (const void **)v27;
                          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v61, v23, v30))
                          {
                            BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v57);
                            if ((v48.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
                              EmptyString = (v48.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
                            else
                              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
                            if (*(char *)(EmptyString + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
                            }
                            else
                            {
                              v33 = *(_OWORD *)EmptyString;
                              v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
                              *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
                            }
                            if ((v48.__r_.__value_.__s.__data_[0] & 7) != 0)
                            {
                              v34 = (unsigned int *)(v48.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                              do
                                v35 = __ldxr(v34);
                              while (__stlxr(v35 - 2, v34));
                            }
                            v36 = v25[7];
                            v37 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(v36 + 16), (const void **)&v50.__r_.__value_.__l.__data_);
                            if (v36 + 24 != (char *)v37 && *(_QWORD *)(v37 + 56))
                            {
                              v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v13);
                              if ((v47 & 0xFFFFFFFFFFFFFFF8) != 0)
                                v39 = (v47 & 0xFFFFFFFFFFFFFFF8) + 16;
                              else
                                v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
                              if (*(char *)(v39 + 23) < 0)
                              {
                                std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v39, *(_QWORD *)(v39 + 8));
                              }
                              else
                              {
                                v40 = *(_OWORD *)v39;
                                v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 16);
                                *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v40;
                              }
                              v49 = v25[7];
                              std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>(v6, (const void **)&v48.__r_.__value_.__l.__data_, (__int128 *)&v48);
                              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v48.__r_.__value_.__l.__data_);
                              if ((v47 & 7) != 0)
                              {
                                v41 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v42 = __ldxr(v41);
                                while (__stlxr(v42 - 2, v41));
                              }
                            }
                            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v50.__r_.__value_.__l.__data_);
                          }
                        }
                      }
                    }
                    if ((v54 & 7) != 0)
                    {
                      v43 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v44 = __ldxr(v43);
                      while (__stlxr(v44 - 2, v43));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    v15 = v22;
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
                    if (v52)
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
                  }
                  if ((v58 & 7) != 0)
                  {
                    v45 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v46 = __ldxr(v45);
                    while (__stlxr(v46 - 2, v45));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
                  if (v57.__r_.__value_.__l.__size_)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57.__r_.__value_.__l.__size_);
                  v13 += 32;
                }
                while (v13 != v14);
              }
              v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
              std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(v60);
            }
          }
          return realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v62);
        }
      }
    }
  }
  return this;
}

void sub_22FF78850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  unsigned int *v44;
  unsigned int v45;

  if ((a16 & 7) != 0)
  {
    v44 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  if (a29 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a30);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a37);
  a37 = &a34;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*(char **)(v42 - 152));
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v42 - 136);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*a10);
  _Unwind_Resume(a1);
}

void realityio::Inputs::getAccumulatedValues<realityio::TextureBuilder::TextureDataT const*>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::mutex *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void **EmptyString;
  int v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string::size_type size;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  _QWORD *v27;
  std::string::size_type v28;
  char *v29;
  std::string::size_type v30;
  uint64_t v31;
  void *v32;
  std::string *v33;
  __int128 v34;
  uint64_t String;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string::size_type v43;
  unsigned int *v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string v50;
  std::string v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  void *__p[2];
  std::string v57;
  _BYTE v58[24];
  std::string v59;

  v53 = 0;
  v54 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    v54 = std::__shared_weak_count::lock(v6);
    if (v54)
      v53 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v55, a2);
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v53);
  v8 = v7;
  v10 = v9;
  v11 = v58;
  if (v7 != v9)
  {
    memset(&v52, 0, sizeof(v52));
    v49 = a3;
    while (1)
    {
      v12 = *((_QWORD *)v8 + 5);
      v14 = *(std::mutex **)(v12 + 16);
      v13 = *(std::__shared_weak_count **)(v12 + 24);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      v51.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      if ((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const void **)((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      realityio::Outputs::getRawValue<realityio::TextureBuilder::TextureDataT const*>(v14, EmptyString, (uint64_t)v58);
      v18 = v58[0];
      if (v58[0])
      {
        v19 = *(void **)&v58[8];
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)&v58[8];
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
          v19 = __p[0];
          v11 = (_BYTE *)v57.__r_.__value_.__r.__words[0];
          LOBYTE(a3) = *((_BYTE *)&v57.__r_.__value_.__s + 23);
          if (!v58[0] && SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
        }
        else
        {
          v57 = v59;
          v19 = __p[0];
          v11 = (_BYTE *)v59.__r_.__value_.__r.__words[0];
          LOBYTE(a3) = *((_BYTE *)&v59.__r_.__value_.__s + 23);
        }
      }
      if (!v13)
        goto LABEL_23;
      v20 = (unint64_t *)&v13->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (!v18)
        {
LABEL_35:
          if ((a3 & 0x80) != 0)
            operator delete(v11);
          goto LABEL_44;
        }
      }
      else
      {
LABEL_23:
        if (!v18)
          goto LABEL_35;
      }
      size = v52.__r_.__value_.__l.__size_;
      if (v52.__r_.__value_.__l.__size_ >= v52.__r_.__value_.__r.__words[2])
      {
        v23 = (uint64_t)(v52.__r_.__value_.__l.__size_ - v52.__r_.__value_.__r.__words[0]) >> 3;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v25 = v52.__r_.__value_.__r.__words[2] - v52.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v52.__r_.__value_.__r.__words[2] - v52.__r_.__value_.__r.__words[0]) >> 2 > v24)
          v24 = v25 >> 2;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
          v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v52.__r_.__value_.__r.__words[2], v26);
        else
          v7 = 0;
        v27 = (_QWORD *)((char *)v7 + 8 * v23);
        *v27 = v19;
        v28 = (std::string::size_type)(v27 + 1);
        v29 = (char *)v52.__r_.__value_.__l.__size_;
        v30 = v52.__r_.__value_.__r.__words[0];
        if (v52.__r_.__value_.__l.__size_ != v52.__r_.__value_.__r.__words[0])
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v27 = v31;
          }
          while (v29 != (char *)v30);
          v29 = (char *)v52.__r_.__value_.__r.__words[0];
        }
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        v52.__r_.__value_.__l.__size_ = v28;
        v52.__r_.__value_.__r.__words[2] = (std::string::size_type)v7 + 8 * v26;
        if (v29)
          operator delete(v29);
        v52.__r_.__value_.__l.__size_ = v28;
      }
      else
      {
        *(_QWORD *)v52.__r_.__value_.__l.__size_ = v19;
        v52.__r_.__value_.__l.__size_ = size + 8;
      }
LABEL_44:
      v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
      if (v8 == v10)
      {
        memset(v58, 0, sizeof(v58));
        std::vector<realityio::TextureBuilder::TextureDataT const*>::__init_with_size[abi:ne180100]<realityio::TextureBuilder::TextureDataT const**,realityio::TextureBuilder::TextureDataT const**>(v58, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_, (uint64_t)(v52.__r_.__value_.__l.__size_ - v52.__r_.__value_.__r.__words[0]) >> 3);
        *(_BYTE *)v49 = 1;
        *(_OWORD *)(v49 + 8) = *(_OWORD *)v58;
        *(_QWORD *)(v49 + 24) = *(_QWORD *)&v58[16];
        v32 = (void *)v52.__r_.__value_.__r.__words[0];
        if (v52.__r_.__value_.__r.__words[0])
        {
          v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
        goto LABEL_62;
      }
    }
  }
  std::operator+<char>();
  v33 = std::string::append(&v50, ") at prim path (");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
  v36 = *(char *)(String + 23);
  if (v36 >= 0)
    v37 = (const std::string::value_type *)String;
  else
    v37 = *(const std::string::value_type **)String;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(String + 23);
  else
    v38 = *(_QWORD *)(String + 8);
  v39 = std::string::append(&v51, v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v52, ")");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[0] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  realityio::DetailedError::DetailedError(v58, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v58;
  v43 = v59.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v58[16];
  *(_QWORD *)(a3 + 32) = v43;
  *(_QWORD *)(a3 + 39) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
  LOBYTE(v43) = v59.__r_.__value_.__s.__data_[15];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)&v58[16] = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v43;
  if (v57.__r_.__value_.__s.__data_[7] < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_61:
    operator delete(v32);
  }
LABEL_62:
  if ((v55 & 7) != 0)
  {
    v44 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  v46 = v54;
  if (v54)
  {
    v47 = (unint64_t *)&v54->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_22FF78DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  unsigned int *v34;
  unsigned int v35;

  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if ((a33 & 7) != 0)
  {
    v34 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t realityio::setMaterialConstantsFromUsdPreviewSurface(int a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  unint64_t Data;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  pxrInternal__aapl__pxrReserved__::UsdObject *v10;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const void **EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  const void **v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  const void **v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::TfToken *v32;
  const void **v33;
  pxrInternal__aapl__pxrReserved__::TfToken *v34;
  const void **v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t result;
  _BOOL8 v56;
  _BOOL8 v58;
  _BOOL8 v59;
  _BOOL8 v60;
  _BOOL8 v61;
  unsigned int v62;
  unsigned int v63;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v64;
  _BYTE v65[8];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[8];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[8];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  __n128 v86;
  _BYTE v87[8];
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 40));
  v6 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 16));
  v7 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 24));
  v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 56));
  v9 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 64));
  realityio::getBaseColorTintAndOpacity(&v85, this, a3);
  REMaterialAssetBuilderSetColor4F();
  v10 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v86, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v10, &v62);
  v11 = bswap64(0x9E3779B97F4A7C55* (v63 + ((v63 + (unint64_t)v62 + (v63 + (unint64_t)v62) * (v63 + (unint64_t)v62)) >> 1)));
  v64.__x_[0] = v11;
  for (i = 1; i != 624; ++i)
  {
    v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
    v64.__x_[i] = v11;
  }
  v64.__i_ = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
  if ((v88 & 7) != 0)
  {
    v13 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
  if (v86.n128_u64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v64);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v64);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v64);
  REMaterialAssetBuilderSetColor3F();
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v81)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v81) & 1) != 0)
  {
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v15)
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const void **)((*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    v56 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    realityio::findTextureScaleFloat3((realityio *)v81, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v56);
    __asm { FMOV            V3.4S, #1.0 }
    REMaterialAssetBuilderSetFloat4();
  }
  else
  {
    realityio::getShadeInputColor4WithFallback(&v86, (pxrInternal__aapl__pxrReserved__::UsdObject *)v81, (__n128)xmmword_230204CF0);
    REMaterialAssetBuilderSetColor3F();
    __asm { FMOV            V0.4S, #1.0 }
    REMaterialAssetBuilderSetFloat4();
  }
  REMaterialAssetBuilderSetFloat();
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v77)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v77) & 1) != 0)
  {
    v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v22)
      v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v22 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
      v23 = (const void **)((*((_QWORD *)v22 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v23 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    v58 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v23);
    realityio::findTextureScaleFloat((realityio *)v77, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v58);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    v24 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 16));
    v62 = 0;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, &v62);
    if ((v88 & 7) != 0)
    {
      v25 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
    if (v86.n128_u64[1])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v73)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v73) & 1) != 0)
  {
    v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v27)
      v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v27 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
      v28 = (const void **)((*((_QWORD *)v27 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v28 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
    v59 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v28);
    realityio::findTextureScaleFloat((realityio *)v73, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v59);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    v29 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v29)
      v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v29 + 24));
    v62 = 1056964608;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, &v62);
    if ((v88 & 7) != 0)
    {
      v30 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
    if (v86.n128_u64[1])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v69)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v69) & 1) != 0)
  {
    v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v32)
      v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v32 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
      v33 = (const void **)((*((_QWORD *)v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v33 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
    v60 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v33);
    realityio::findTextureScaleFloat((realityio *)v69, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v60);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    v86.n128_u32[0] = 0;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, &v86);
    REMaterialAssetBuilderSetFloat();
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v65)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v65) & 1) != 0)
  {
    v34 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v34)
      v34 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v34 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
      v35 = (const void **)((*((_QWORD *)v34 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v35 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v34);
    v61 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, v35);
    realityio::findTextureScaleFloat((realityio *)v65, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v61);
    REMaterialAssetBuilderSetFloat();
  }
  else
  {
    v36 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v36)
      v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v36 + 64));
    v62 = 1008981770;
    realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, &v62);
    if ((v88 & 7) != 0)
    {
      v37 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
    if (v86.n128_u64[1])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
    REMaterialAssetBuilderSetFloat();
  }
  v39 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v39)
    v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v39 + 72));
  v62 = 0;
  realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, &v62);
  if ((v88 & 7) != 0)
  {
    v40 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
  if (v86.n128_u64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
  REMaterialAssetBuilderSetFloat();
  v42 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v42)
    v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v42 + 168));
  v62 = 1069547520;
  realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86, &v62);
  if ((v88 & 7) != 0)
  {
    v43 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v87);
  if (v86.n128_u64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86.n128_i64[1]);
  REMaterialAssetBuilderSetFloat();
  if ((v68 & 7) != 0)
  {
    v45 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
  if (v66)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
  if ((v72 & 7) != 0)
  {
    v47 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  if (v70)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  if ((v76 & 7) != 0)
  {
    v49 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
  if (v74)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74);
  if ((v80 & 7) != 0)
  {
    v51 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
  if (v78)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
  if ((v84 & 7) != 0)
  {
    v53 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
  result = v82;
  if (v82)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v82);
  return result;
}

void sub_22FF79854(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&STACK[0x9D0]);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&STACK[0x9F0]);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 256));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 224));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v1 - 192));
  _Unwind_Resume(a1);
}

uint64_t *realityio::setFunctionConstantsFromScene(int a1, pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  std::string::size_type size;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(this);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v2);
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v4 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "realityio:functionConstants");
  ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v8)
      return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v21, 0);
  }
  else if (!ValueAtPath)
  {
    return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v21, 0);
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v8))
  {
    v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(v8);
    MEMORY[0x2348B1C60](&v20, v9);
    v18 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v20);
    v19 = v10;
    v11 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v20);
    v13 = v12;
    while (1)
    {
      v14 = !v13 || v18 == v11;
      v15 = v14;
      if (v19 == v13 && v15)
        break;
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&__p, (__int128 *)(v18 + 32));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v23))
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        REMaterialAssetBuilderSetFunctionConstant();
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v18);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v20, 0);
  }
  return std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v21, 0);
}

void sub_22FF79B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a11, 0);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a12, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12VtDictionaryE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t realityio::setFunctionConstantsFromUsdPreviewSurface(int a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, uint64_t a3)
{
  unint64_t Data;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  const pxrInternal__aapl__pxrReserved__::TfToken *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  const pxrInternal__aapl__pxrReserved__::TfToken *v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unint64_t v39;
  pxrInternal__aapl__pxrReserved__::TfToken *v40;
  const void **EmptyString;
  float TextureScaleFloat;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  float ShadeInputValueWith;
  unsigned int *v47;
  unsigned int v48;
  uint64_t result;
  _BOOL8 v50;
  int v51;
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 32));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v6 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v8 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 88));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v9 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v11 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v11)
    v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 40));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v12 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v14 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 24));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v15 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v17 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v17 + 16));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v18 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v20 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 184));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v21 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v23 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v23 + 192));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v24 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v26 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v26)
    v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v26 + 80));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2348B37CC](v52))
  {
    v28 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v28 + 80), v27);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v29 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v31 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v31)
    v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v31 + 56));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    MEMORY[0x2348B37CC](v52);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v32 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  if (realityio::isRMABundled(a3))
  {
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
    REMaterialAssetBuilderSetFunctionConstant();
  }
  v34 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v34)
    v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v34 + 208));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2348B37CC](v52))
  {
    v36 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v36)
      v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::isConnectedToBaseColorAlpha(this, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v36 + 208), v35);
  }
  REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v37 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v39 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v39)
    v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v39 + 56));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v52)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && (MEMORY[0x2348B37CC](v52) & 1) != 0)
  {
    v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
    if (!v40)
      v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
    if ((*((_QWORD *)v40 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const void **)((*((_QWORD *)v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
    v50 = a3 + 8 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a3, EmptyString);
    TextureScaleFloat = realityio::findTextureScaleFloat((realityio *)v52, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v50);
  }
  else
  {
    v51 = 0;
    TextureScaleFloat = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v51);
  }
  if (TextureScaleFloat > 0.0)
    REMaterialAssetBuilderSetFunctionConstant();
  if ((v55 & 7) != 0)
  {
    v43 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  if (v53)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  v45 = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!v45)
    v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v45 + 72));
  v51 = 0;
  ShadeInputValueWith = realityio::getShadeInputValueWithFallback<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v51);
  if ((v55 & 7) != 0)
  {
    v47 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  result = v53;
  if (v53)
    result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  if (ShadeInputValueWith > 0.0)
    return REMaterialAssetBuilderSetFunctionConstant();
  return result;
}

void sub_22FF7A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::isRMABundled(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BOOL4 v45;
  _BOOL4 v47;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  char *v56;
  char *v57;

  std::string::basic_string[abi:ne180100]<0>(&__p, "metallic");
  v2 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "occlusion");
  v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "roughness");
  v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "specularColor");
  v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1, (const void **)&__p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  v6 = a1 + 8;
  if (v6 == v2)
  {
    v7 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(_QWORD **)(v2 + 56));
    v7 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  if (v6 == v4)
  {
    v8 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(_QWORD **)(v4 + 56));
    v8 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(_QWORD **)(v5 + 56));
    v9 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  v54 = v2;
  if (v6 == v3)
  {
    v10 = 0;
  }
  else
  {
    realityio::TextureBuilder::TextureDataT::getOneTextureAsset(&__p, *(_QWORD **)(v3 + 56));
    v10 = __p;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&__p);
  }
  v11 = 0;
  v12 = 0;
  if (v7)
    v13 = v7;
  else
    v13 = v8;
  if (!v13)
    v13 = v9;
  if (v13)
    v14 = v13;
  else
    v14 = v10;
  if (v6 != v3 && v10 != v14)
  {
    v3 = v6;
    v10 = 0;
  }
  __p = 0;
  v56 = 0;
  v57 = 0;
  if (v7 == v14)
  {
    v11 = (char *)operator new(8uLL);
    *(_QWORD *)v11 = v7;
    v12 = v11 + 8;
    v56 = v11 + 8;
    v57 = v11 + 8;
    __p = v11;
  }
  if (v8 == v14)
  {
    v16 = v12 - v11;
    v17 = (v12 - v11) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_125;
    if (v16 >> 2 > v18)
      v18 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v19);
    else
      v20 = 0;
    v21 = &v20[8 * v17];
    v22 = &v20[8 * v19];
    *(_QWORD *)v21 = v8;
    v12 = v21 + 8;
    v24 = (char *)__p;
    v23 = v56;
    if (v56 != __p)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v21 - 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)__p;
    }
    __p = v21;
    v56 = v12;
    v57 = v22;
    if (v23)
      operator delete(v23);
    v56 = v12;
  }
  if (v9 == v14)
  {
    if (v12 >= v57)
    {
      v26 = (v12 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_125;
      v27 = (v57 - (_BYTE *)__p) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if ((unint64_t)(v57 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v28);
      else
        v29 = 0;
      v30 = &v29[8 * v26];
      v31 = &v29[8 * v28];
      *(_QWORD *)v30 = v9;
      v12 = v30 + 8;
      v33 = (char *)__p;
      v32 = v56;
      if (v56 != __p)
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v30 - 1) = v34;
          v30 -= 8;
        }
        while (v32 != v33);
        v32 = (char *)__p;
      }
      __p = v30;
      v56 = v12;
      v57 = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)v12 = v9;
      v12 += 8;
    }
    v56 = v12;
  }
  if (v10 != v14)
  {
LABEL_87:
    v39 = (char *)__p;
    goto LABEL_88;
  }
  if (v12 < v57)
  {
    *(_QWORD *)v12 = v14;
    v12 += 8;
    goto LABEL_87;
  }
  v35 = (v12 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v35 + 1) >> 61)
LABEL_125:
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  v36 = (v57 - (_BYTE *)__p) >> 2;
  if (v36 <= v35 + 1)
    v36 = v35 + 1;
  if ((unint64_t)(v57 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
    v37 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v37 = v36;
  if (v37)
    v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v57, v37);
  else
    v38 = 0;
  v39 = &v38[8 * v35];
  v40 = &v38[8 * v37];
  *(_QWORD *)v39 = v14;
  v12 = v39 + 8;
  v42 = (char *)__p;
  v41 = v56;
  if (v56 != __p)
  {
    do
    {
      v43 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v39 - 1) = v43;
      v39 -= 8;
    }
    while (v41 != v42);
    v41 = (char *)__p;
  }
  __p = v39;
  v56 = v12;
  v57 = v40;
  if (v41)
  {
    operator delete(v41);
    goto LABEL_87;
  }
LABEL_88:
  v45 = v6 == v54 || v7 == v14;
  v47 = v6 == v4 || v8 == v14;
  v49 = v3 == v6 || v10 == v14;
  v50 = v9 == v14 || v6 == v5;
  if (!v50 || !v47 || !v45 || (unint64_t)(v12 - v39) < 9 || !v49)
  {
    if (v6 == v4
      || v6 == v54
      || v3 == v6
      || (v53 = *(_QWORD *)(v54 + 56), v53 != *(_QWORD *)(v3 + 56)) && v53 != *(_QWORD *)(v4 + 56))
    {
      v51 = 0;
      if (!v39)
        return v51;
      goto LABEL_116;
    }
  }
  v51 = 1;
  if (v39)
  {
LABEL_116:
    v56 = v39;
    operator delete(v39);
  }
  return v51;
}

void sub_22FF7AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::getShaderType(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x2348B274C]();
  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v10 = MEMORY[0x24BEE9D38] + 16;
    if (v11
      && (*(_BYTE *)(v11 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D38] + 48))(&v10))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v10);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v6))
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((v9 & 7) != 0)
      {
        v4 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
      if (v7)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    }
    return MEMORY[0x2348B1EC4](&v10);
  }
  return result;
}

void sub_22FF7AE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a6);
  MEMORY[0x2348B1EC4](va);
  if ((*v6 & 7) != 0)
  {
    v8 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

void realityio::gatherUVSetNamesInBindOrder(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int *v6;
  int *v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v49;
  std::type_info *v50;
  const std::string *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  void *v72;
  int v73;
  uint64_t v74;
  std::string v75;
  void *v76;
  uint64_t v77;
  void *__p;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _BYTE v98[4];
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[8];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int *v118;
  int *v119;
  std::string v120;
  uint64_t *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v122 = 0;
  v123 = 0;
  v121 = (uint64_t *)&v122;
  memset(&v120, 0, sizeof(v120));
  v4 = *((_QWORD *)this + 1);
  if (v4
    && (*(_BYTE *)(v4 + 57) & 8) == 0
    && ((*(uint64_t (**)(realityio *, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(_QWORD *)this + 32))(this, a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(this);
    v6 = v118;
    v7 = v119;
    if (v118 != v119)
    {
      v8 = (void *)(MEMORY[0x24BEE9D38] + 16);
      while (1)
      {
        v113 = *v6;
        v9 = *((_QWORD *)v6 + 1);
        v114 = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 48);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115, v6 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v116, v6 + 5);
        v12 = *((_QWORD *)v6 + 3);
        v117 = v12;
        if ((v12 & 7) != 0)
        {
          v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 2, v13));
          if ((v14 & 1) == 0)
            v117 &= 0xFFFFFFFFFFFFFFF8;
        }
        realityio::findPrimWhichOriginatedConnection((realityio *)v109, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v113);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v109))
          goto LABEL_135;
        realityio::getShaderType((realityio *)&v76, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v109);
        v15 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v76 & 7) != 0)
        {
          v16 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if (!v15)
          goto LABEL_135;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v76 = v8;
        MEMORY[0x2348B274C](&v101, "st");
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v76, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v101);
        if ((v101 & 7) != 0)
        {
          v18 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        MEMORY[0x2348B1EC4](&v76);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v105)
          || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0)
        {
          if ((v108 & 7) != 0)
          {
            v32 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
            do
              v33 = __ldxr(v32);
            while (__stlxr(v33 - 2, v32));
          }
          goto LABEL_133;
        }
        realityio::findOriginalSourceAttribute((realityio *)&v105, (uint64_t)&v101);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v101))
        {
          if ((_DWORD)v101 != v105
            || v102 != v106
            || v103 != v107
            || (v104 & 0xFFFFFFFFFFFFFFF8) != (v108 & 0xFFFFFFFFFFFFFFF8))
          {
            break;
          }
        }
LABEL_125:
        if ((v104 & 7) != 0)
        {
          v64 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
        if (v102)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v102);
        if ((v108 & 7) != 0)
        {
          v66 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
          do
            v67 = __ldxr(v66);
          while (__stlxr(v67 - 2, v66));
        }
LABEL_133:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
        if (v106)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v106);
LABEL_135:
        if ((v112 & 7) != 0)
        {
          v68 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
          do
            v69 = __ldxr(v68);
          while (__stlxr(v69 - 2, v68));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
        if (v110)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110);
        if ((v117 & 7) != 0)
        {
          v70 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
          do
            v71 = __ldxr(v70);
          while (__stlxr(v71 - 2, v70));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
        if (v114)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v114);
        v6 += 8;
        if (v6 == v7)
          goto LABEL_151;
      }
      v96 = 1;
      v97 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v100 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v91, &v102, &v103);
      realityio::getShaderType((realityio *)&v90, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v91);
      MEMORY[0x2348B274C](&v76, "UsdPrimvarReader_float2");
      v20 = v90;
      v21 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
      if ((v76 & 7) != 0)
      {
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      if ((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8) == v21)
      {
        v96 = v91;
        v34 = v92;
        if (v92)
        {
          v35 = (unint64_t *)(v92 + 48);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = v97;
        v97 = v34;
        if (v37)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v98, &v93);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v99, &v94);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v100, &v95);
      }
      else
      {
        MEMORY[0x2348B274C](&v76, "UsdTransform2d");
        v23 = v90;
        v24 = (unsigned int *)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8);
        if ((v76 & 7) != 0)
        {
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        if ((unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8) == v24)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v86 = MEMORY[0x24BEE9D38] + 16;
          MEMORY[0x2348B274C](&v82, "in");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v86, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
          if ((v82 & 7) != 0)
          {
            v26 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v27 = __ldxr(v26);
            while (__stlxr(v27 - 2, v26));
          }
          MEMORY[0x2348B1EC4](&v86);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v76)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            realityio::findOriginalSourceAttribute((realityio *)&v76, (uint64_t)&v86);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86)
              && ((_DWORD)v86 != (_DWORD)v76
               || v87 != v77
               || v88 != __p
               || (v89 & 0xFFFFFFFFFFFFFFF8) != (v79 & 0xFFFFFFFFFFFFFFF8)))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v82, &v87, &v88);
              realityio::getShaderType((realityio *)&v124, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v82);
              MEMORY[0x2348B274C](&v81, "UsdPrimvarReader_float2");
              v28 = v124;
              v29 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
              if ((v81 & 7) != 0)
              {
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
                v31 = v124;
              }
              else
              {
                v31 = v124;
              }
              if ((v31 & 7) != 0)
              {
                v38 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
                do
                  v39 = __ldxr(v38);
                while (__stlxr(v39 - 2, v38));
              }
              if ((unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8) == v29)
                pxrInternal__aapl__pxrReserved__::UsdPrim::operator=((uint64_t)&v96, (uint64_t)&v82);
              if ((v85 & 7) != 0)
              {
                v40 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
                do
                  v41 = __ldxr(v40);
                while (__stlxr(v41 - 2, v40));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
              if (v83)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
            }
            if ((v89 & 7) != 0)
            {
              v42 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
              do
                v43 = __ldxr(v42);
              while (__stlxr(v43 - 2, v42));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
            if (v87)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v87);
          }
          if ((v79 & 7) != 0)
          {
            v44 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v77)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v96))
      {
LABEL_112:
        if ((v90 & 7) != 0)
        {
          v58 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
          do
            v59 = __ldxr(v58);
          while (__stlxr(v59 - 2, v58));
        }
        if ((v95 & 7) != 0)
        {
          v60 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
          do
            v61 = __ldxr(v60);
          while (__stlxr(v61 - 2, v60));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
        if (v92)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v92);
        if ((v100 & 7) != 0)
        {
          v62 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
          do
            v63 = __ldxr(v62);
          while (__stlxr(v63 - 2, v62));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v98);
        if (v97)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v97);
        goto LABEL_125;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v76 = (void *)(MEMORY[0x24BEE9D38] + 16);
      MEMORY[0x2348B274C](&v82, "varname");
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v76, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
      if ((v82 & 7) != 0)
      {
        v46 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      MEMORY[0x2348B1EC4](&v76);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v86)
        || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
LABEL_107:
        if ((v89 & 7) != 0)
        {
          v56 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
        if (v87)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v87);
        goto LABEL_112;
      }
      realityio::findOriginalSourceAttribute((realityio *)&v86, (uint64_t)&v82);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v82))
      {
LABEL_102:
        if ((v85 & 7) != 0)
        {
          v54 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
        if (v83)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v83);
        goto LABEL_107;
      }
      v125 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      if (!v125)
      {
LABEL_101:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
        goto LABEL_102;
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v124) & 1) == 0)
      {
        Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
          v72 = &v76;
          if (SHIBYTE(__p) < 0)
            v72 = v76;
          NSLog(CFSTR("Warning: invalid varname type %s"), v72);
          if (SHIBYTE(__p) < 0)
            operator delete(v76);
          goto LABEL_91;
        }
        v50 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v124, v50);
      }
      v51 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v124);
      std::string::operator=(&v120, v51);
LABEL_91:
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v75, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
      else
        v75 = v120;
      realityio::TexcoordID::TexcoordID((uint64_t)&v76, (uint64_t)&v75, -1, 0);
      std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(&v121, (realityio::TexcoordID *)&v76, (uint64_t)&v76);
      if (v80 < 0)
        operator delete(__p);
      if ((v77 & 7) != 0)
      {
        v52 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      goto LABEL_101;
    }
LABEL_151:
    v76 = &v118;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    v73 = v123;
    if ((int)v123 >= 8)
      v73 = 8;
    v74 = v73;
    std::vector<realityio::TexcoordID>::reserve(a3, v73);
    v76 = v121;
    std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>((_QWORD **)&v76, v74);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v113, v121, v76, a3);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v121, v122);
}

void sub_22FF7B990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  unsigned int *v63;
  unsigned int v64;

  if (a35 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a40);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a44);
  if ((a48 & 7) != 0)
  {
    v63 = (unsigned int *)(a48 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a49);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a53);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a57);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a61);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v61 - 248));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v61 - 216));
  __p = (void *)(v61 - 184);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v61 - 137) < 0)
    operator delete(*(void **)(v61 - 160));
  std::__tree<realityio::TexcoordID>::destroy(v61 - 136, *(_QWORD **)(v61 - 128));
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, (_DWORD *)(a2 + 20));
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void sub_22FF7BF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<realityio::TexcoordID>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_22FF7BFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::findFirstUVMeshAttributeNameFromShader(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t EmptyString;
  __int128 v10;
  unsigned int v11;
  uint64_t v12[3];
  void **v13;

  realityio::gatherUVSetNamesInBindOrder(this, a2, v12);
  if (v12[0] == v12[1])
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v12[0] + 8);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v5 &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t)(v8 + 4);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
    }
    else
    {
      v10 = *(_OWORD *)EmptyString;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
    if ((v5 & 7) != 0)
    {
      do
        v11 = __ldxr(v8);
      while (__stlxr(v11 - 2, v8));
    }
  }
  v13 = (void **)v12;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](&v13);
}

uint64_t realityio::getShaderID(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5))
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  if ((v8 & 7) != 0)
  {
    v2 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  result = v6;
  if (v6)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  return result;
}

void sub_22FF7C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a9);
  if ((*v9 & 7) != 0)
  {
    v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::uvNameAndTransformForTexturePrim(uint64_t a1, std::string *a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int IsValid;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  float v53;
  uint64_t v54;
  float v55;
  __float2 v56;
  float v61;
  float v62;
  float v63;
  __int128 v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v97;
  pxrInternal__aapl__pxrReserved__::VtValue *v98;
  const std::string *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  _BYTE v109[32];
  __int128 v110;
  __int128 v111;
  int v112;
  __int128 v113;
  __int128 v114;
  int v115;
  char v116[36];
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135[8];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139[8];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  int v147;
  char v148;
  __int128 v149;
  __int128 v150;
  int v151;
  __int128 v152;
  __int128 v153;
  int v154;
  __int128 v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  __int128 v162;
  __int128 v163;
  int v164;
  __int128 v165;
  __int128 v166;
  int v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v7 = MEMORY[0x24BEE9D38];
  v143 = MEMORY[0x24BEE9D38] + 16;
  if (v144)
  {
    if ((*(_BYTE *)(v144 + 57) & 8) == 0)
    {
      v8 = *(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D38] + 48);
      if (v8(&v143))
      {
        realityio::getShaderID((realityio *)&v145, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v143);
        MEMORY[0x2348B274C](&v162, "UsdUVTexture");
        v9 = v145;
        v10 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
        if ((v162 & 7) != 0)
        {
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
          v12 = v145;
        }
        else
        {
          v12 = v145;
        }
        v13 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 7) != 0)
        {
          v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        if ((unsigned int *)v13 == v10)
        {
          MEMORY[0x2348B274C](&v145, "st");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v145);
          if ((v145 & 7) != 0)
          {
            v16 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v139)
            && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
          {
            realityio::findPrimWhichOriginatedConnection((realityio *)v135, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v139);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v133 = v7 + 16;
            if (v134 && (*(_BYTE *)(v134 + 57) & 8) == 0 && (v8(&v133) & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133);
              IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v145);
              if ((BYTE8(v146) & 7) != 0)
              {
                v19 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v20 = __ldxr(v19);
                while (__stlxr(v20 - 2, v19));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
              if (*((_QWORD *)&v145 + 1))
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
              if (IsValid)
              {
                realityio::getShaderID((realityio *)&v132, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133);
                MEMORY[0x2348B274C](&v145, "UsdTransform2d");
                v21 = v132 & 0xFFFFFFFFFFFFFFF8;
                v22 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
                if ((v145 & 7) != 0)
                {
                  do
                    v23 = __ldxr(v22);
                  while (__stlxr(v23 - 2, v22));
                }
                if ((unsigned int *)v21 == v22)
                {
                  MEMORY[0x2348B274C](&v162, "scale");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
                  v127 = v145;
                  v128 = *((_QWORD *)&v145 + 1);
                  if (*((_QWORD *)&v145 + 1))
                  {
                    v24 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 48);
                    do
                      v25 = __ldxr(v24);
                    while (__stxr(v25 + 1, v24));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v129, &v146);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v130, (_DWORD *)&v146 + 1);
                  v131 = *((_QWORD *)&v146 + 1);
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v26 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v27 = __ldxr(v26);
                    while (__stxr(v27 + 2, v26));
                    if ((v27 & 1) == 0)
                      v131 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v28 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v29 = __ldxr(v28);
                    while (__stlxr(v29 - 2, v28));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
                  if (*((_QWORD *)&v145 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
                  if ((v162 & 7) != 0)
                  {
                    v30 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v31 = __ldxr(v30);
                    while (__stlxr(v31 - 2, v30));
                  }
                  MEMORY[0x2348B274C](&v162, "rotation");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
                  v122 = v145;
                  v123 = *((_QWORD *)&v145 + 1);
                  if (*((_QWORD *)&v145 + 1))
                  {
                    v32 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 48);
                    do
                      v33 = __ldxr(v32);
                    while (__stxr(v33 + 1, v32));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v124, &v146);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v125, (_DWORD *)&v146 + 1);
                  v126 = *((_QWORD *)&v146 + 1);
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v34 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v35 = __ldxr(v34);
                    while (__stxr(v35 + 2, v34));
                    if ((v35 & 1) == 0)
                      v126 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v36 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v37 = __ldxr(v36);
                    while (__stlxr(v37 - 2, v36));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
                  if (*((_QWORD *)&v145 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
                  if ((v162 & 7) != 0)
                  {
                    v38 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v39 = __ldxr(v38);
                    while (__stlxr(v39 - 2, v38));
                  }
                  MEMORY[0x2348B274C](&v162, "translation");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
                  v117 = v145;
                  v118 = *((_QWORD *)&v145 + 1);
                  if (*((_QWORD *)&v145 + 1))
                  {
                    v40 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 48);
                    do
                      v41 = __ldxr(v40);
                    while (__stxr(v41 + 1, v40));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v119, &v146);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v120, (_DWORD *)&v146 + 1);
                  v121 = *((_QWORD *)&v146 + 1);
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v42 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v43 = __ldxr(v42);
                    while (__stxr(v43 + 2, v42));
                    if ((v43 & 1) == 0)
                      v121 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v44 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v45 = __ldxr(v44);
                    while (__stlxr(v45 - 2, v44));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
                  if (*((_QWORD *)&v145 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
                  if ((v162 & 7) != 0)
                  {
                    v46 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v47 = __ldxr(v46);
                    while (__stlxr(v47 - 2, v46));
                  }
                  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v127, (uint64_t)&v145);
                  if ((_BYTE)v145)
                  {
                    _D9 = *((_QWORD *)&v145 + 1);
                  }
                  else
                  {
                    __asm { FMOV            V9.2S, #1.0 }
                    if (v148 < 0)
                      operator delete(*((void **)&v146 + 1));
                  }
                  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v122, (uint64_t)&v145);
                  if ((_BYTE)v145)
                  {
                    v53 = *((float *)&v145 + 2);
                  }
                  else
                  {
                    v53 = 0.0;
                    if (v148 < 0)
                      operator delete(*((void **)&v146 + 1));
                  }
                  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v117, (uint64_t)&v145);
                  if ((_BYTE)v145)
                  {
                    v54 = *((_QWORD *)&v145 + 1);
                  }
                  else
                  {
                    v54 = 0;
                    if (v148 < 0)
                      operator delete(*((void **)&v146 + 1));
                  }
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v116, 1.0);
                  *(_QWORD *)&v145 = _D9;
                  DWORD2(v145) = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale();
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v113, 1.0);
                  v55 = v53 / 180.0 * 3.14159265;
                  v56 = __sincosf_stret(v55 * 0.5);
                  _Q0 = vmulq_n_f32((float32x4_t)xmmword_230201510, v56.__sinval);
                  _S2 = _Q0.i32[1];
                  _S4 = _Q0.i32[2];
                  __asm { FMLS            S3, S4, V0.S[2] }
                  v61 = vmlas_n_f32(vmuls_lane_f32(v56.__cosval, _Q0, 2), _Q0.f32[1], _Q0.f32[0]);
                  v62 = vmlas_n_f32(-(float)(v56.__cosval * _Q0.f32[1]), _Q0.f32[2], _Q0.f32[0]);
                  v63 = vmlas_n_f32(-(float)(v56.__cosval * _Q0.f32[2]), _Q0.f32[1], _Q0.f32[0]);
                  __asm
                  {
                    FMLA            S5, S2, V0.S[1]
                    FMLS            S5, S0, V0.S[0]
                    FMLA            S18, S4, V0.S[1]
                    FMLA            S7, S0, V0.S[2]
                    FMLA            S19, S4, V0.S[1]
                    FMLA            S1, S4, V0.S[2]
                  }
                  *(float *)&v113 = _S3 + (float)(v56.__cosval * v56.__cosval);
                  *((float *)&v113 + 1) = v61 + v61;
                  __asm { FMLS            S1, S0, V0.S[0] }
                  *((float *)&v113 + 2) = v62 + v62;
                  *((float *)&v113 + 3) = v63 + v63;
                  LODWORD(v114) = _S5;
                  *((float *)&v114 + 1) = _S18 + _S18;
                  __asm { FMLS            S1, S2, V0.S[1] }
                  *((float *)&v114 + 2) = _S7 + _S7;
                  *((float *)&v114 + 3) = _S19 + _S19;
                  v115 = _S1;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v110, 1.0);
                  *((_QWORD *)&v111 + 1) = v54;
                  v145 = v110;
                  v146 = v111;
                  v147 = v112;
                  *((float *)&v146 + 3) = -*((float *)&v54 + 1);
                  v162 = v113;
                  v163 = v114;
                  v164 = v115;
                  *((float *)&v162 + 1) = -*((float *)&v113 + 1);
                  *((float *)&v162 + 3) = -*((float *)&v113 + 3);
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v165, 1.0);
                  *((_QWORD *)&v166 + 1) = 0xBF80000000000000;
                  v167 = 1065353216;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v158, 1.0);
                  v160 = 0x3F80000000000000;
                  v161 = 1065353216;
                  v149 = v165;
                  v150 = v166;
                  v151 = v167;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  v152 = v149;
                  v153 = v150;
                  v154 = v151;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  v155 = v152;
                  v156 = v153;
                  v157 = v154;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_OWORD *)v109 = v155;
                  *(_OWORD *)&v109[16] = v156;
                  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
                  *(_QWORD *)&v72 = *(_QWORD *)v109;
                  *((_QWORD *)&v72 + 1) = *(_QWORD *)&v109[12];
                  *a3 = v72;
                  *a4 = *(_QWORD *)&v109[24];
                  MEMORY[0x2348B274C](&v162, "in");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
                  if ((v162 & 7) != 0)
                  {
                    v73 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v74 = __ldxr(v73);
                    while (__stlxr(v74 - 2, v73));
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v145)
                    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
                    && MEMORY[0x2348B37CC](&v145))
                  {
                    realityio::findOriginalSourceAttribute((realityio *)&v145, (uint64_t)&v162);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v162))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v165, (uint64_t *)&v162 + 1, &v163);
                      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                      v158 = v7 + 16;
                      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v165);
                      if (v159
                        && (*(_BYTE *)(v159 + 57) & 8) == 0
                        && (*(unsigned int (**)(uint64_t *))(v158 + 32))(&v158))
                      {
                        pxrInternal__aapl__pxrReserved__::UsdShadeShader::operator=((uint64_t)&v133, (uint64_t)&v158);
                        realityio::getShaderID((realityio *)&v165, (const pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133);
                        if ((v132 & 7) != 0)
                        {
                          v75 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v76 = __ldxr(v75);
                          while (__stlxr(v76 - 2, v75));
                        }
                        v132 = v165;
                      }
                      MEMORY[0x2348B1EC4](&v158);
                    }
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v162);
                  }
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v77 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v78 = __ldxr(v77);
                    while (__stlxr(v78 - 2, v77));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
                  if (*((_QWORD *)&v145 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
                  if ((v121 & 7) != 0)
                  {
                    v79 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v80 = __ldxr(v79);
                    while (__stlxr(v80 - 2, v79));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v119);
                  if (v118)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v118);
                  if ((v126 & 7) != 0)
                  {
                    v81 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v82 = __ldxr(v81);
                    while (__stlxr(v82 - 2, v81));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124);
                  if (v123)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v123);
                  if ((v131 & 7) != 0)
                  {
                    v83 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v84 = __ldxr(v83);
                    while (__stlxr(v84 - 2, v83));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
                  if (v128)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v128);
                }
                MEMORY[0x2348B274C](&v145, "UsdPrimvarReader_float2");
                v85 = v132 & 0xFFFFFFFFFFFFFFF8;
                v86 = (unsigned int *)(v145 & 0xFFFFFFFFFFFFFFF8);
                if ((v145 & 7) != 0)
                {
                  do
                    v87 = __ldxr(v86);
                  while (__stlxr(v87 - 2, v86));
                }
                if ((unsigned int *)v85 == v86)
                {
                  MEMORY[0x2348B274C](&v165, "varname");
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v133, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165);
                  LODWORD(v145) = v162;
                  *((_QWORD *)&v145 + 1) = *((_QWORD *)&v162 + 1);
                  if (*((_QWORD *)&v162 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 48);
                    do
                      v89 = __ldxr(v88);
                    while (__stxr(v89 + 1, v88));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v146, &v163);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v146 + 1, (_DWORD *)&v163 + 1);
                  *((_QWORD *)&v146 + 1) = *((_QWORD *)&v163 + 1);
                  if ((BYTE8(v163) & 7) != 0)
                  {
                    v90 = (unsigned int *)(*((_QWORD *)&v163 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v91 = __ldxr(v90);
                    while (__stxr(v91 + 2, v90));
                    if ((v91 & 1) == 0)
                      *((_QWORD *)&v146 + 1) &= 0xFFFFFFFFFFFFFFF8;
                  }
                  if ((BYTE8(v163) & 7) != 0)
                  {
                    v92 = (unsigned int *)(*((_QWORD *)&v163 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v93 = __ldxr(v92);
                    while (__stlxr(v93 - 2, v92));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v163);
                  if (*((_QWORD *)&v162 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v162 + 1));
                  if ((v165 & 7) != 0)
                  {
                    v94 = (unsigned int *)(v165 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v95 = __ldxr(v94);
                    while (__stlxr(v95 - 2, v94));
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v145))
                  {
                    realityio::findOriginalSourceAttribute((realityio *)&v145, (uint64_t)&v162);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v162)
                      && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v162))
                    {
                      *((_QWORD *)&v165 + 1) = 0;
                      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
                      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v165);
                      {
                        v98 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165);
                        v99 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v98);
                        std::string::operator=(a2, v99);
                      }
                      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v165);
                    }
                    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v162);
                  }
                  if ((BYTE8(v146) & 7) != 0)
                  {
                    v100 = (unsigned int *)(*((_QWORD *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v101 = __ldxr(v100);
                    while (__stlxr(v101 - 2, v100));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
                  if (*((_QWORD *)&v145 + 1))
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v145 + 1));
                }
                if ((v132 & 7) != 0)
                {
                  v102 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v103 = __ldxr(v102);
                  while (__stlxr(v103 - 2, v102));
                }
              }
            }
            MEMORY[0x2348B1EC4](&v133);
            if ((v138 & 7) != 0)
            {
              v104 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
              do
                v105 = __ldxr(v104);
              while (__stlxr(v105 - 2, v104));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
            if (v136)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v136);
          }
          if ((v142 & 7) != 0)
          {
            v106 = (unsigned int *)(v142 & 0xFFFFFFFFFFFFFFF8);
            do
              v107 = __ldxr(v106);
            while (__stlxr(v107 - 2, v106));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
          if (v140)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v140);
        }
      }
    }
  }
  return MEMORY[0x2348B1EC4](&v143);
}

void sub_22FF7CF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  unsigned int *v61;
  unsigned int v62;

  MEMORY[0x2348B1EC4](v59 - 248);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v59 - 208));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a59);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a32);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a36);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a40);
  if ((a44 & 7) != 0)
  {
    v61 = (unsigned int *)(a44 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  MEMORY[0x2348B1EC4](&a45);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a48);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a52);
  MEMORY[0x2348B1EC4](&a56);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, (_DWORD *)(a2 + 20));
  return a1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 1;
    return memcmp(a1, __s, v4) != 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t *realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t IsA;
  realityio *v8;
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v9;
  _BOOL4 isCatmullClarkSurface;
  uint64_t v11;
  int BoundSubsetsAndCoverage;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v17;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v18;
  uint64_t **v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int v24;
  void ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v29;
  uint64_t **v30;
  BOOL v31;
  BOOL v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v46;
  unsigned int *v47;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  int v70;
  int v71;
  BOOL v72;

  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0)
    goto LABEL_7;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0)
    goto LABEL_7;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0)
    goto LABEL_7;
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)IsA),
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
        (IsA & 1) != 0)
    || (pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)IsA),
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
        (_DWORD)IsA))
  {
LABEL_7:
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    v46 = a2;
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      v8 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(_QWORD *)&v59 = MEMORY[0x24BEE9CF0] + 16;
      isCatmullClarkSurface = realityio::isCatmullClarkSurface(v8, v9);
      MEMORY[0x2348B1AF8](&v59);
    }
    else
    {
      isCatmullClarkSurface = 0;
    }
    v53 = 0uLL;
    *(_QWORD *)&v54 = 0;
    v72 = 0;
    v11 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v59 = MEMORY[0x24BEE9D10] + 16;
    BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage(v11, (void **)&v53, &v72);
    MEMORY[0x2348B1BE8](&v59);
    v13 = MEMORY[0x24BEE9DC8];
    if ((isCatmullClarkSurface & BoundSubsetsAndCoverage) == 1)
    {
      if (v72)
      {
        v15 = *((_QWORD *)&v53 + 1);
        v14 = v53;
        for (LOWORD(isCatmullClarkSurface) = 1; v14 != v15; v14 += 24)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v60 + 1) = 0;
          *(_QWORD *)&v59 = v13 + 16;
          Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v59, Data, 0);
          if (realityio::isMaterialX((realityio *)&v56, v17))
            LOWORD(isCatmullClarkSurface) = 0;
          MEMORY[0x2348B20B0](&v56);
          MEMORY[0x2348B24C4](&v59);
        }
      }
      else
      {
        LOWORD(isCatmullClarkSurface) = 0;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)&v60 + 1) = 0;
    *(_QWORD *)&v59 = v13 + 16;
    v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v59, v18, 0);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v56, &v50, &v51);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v56, &v70);
    v19 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70);
    if (a3 + 1 == v19)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, &v70);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v71);
      v69 = !isCatmullClarkSurface || isCatmullClarkSurface << 8;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&v67);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
    }
    else
    {
      v20 = *((unsigned __int16 *)v19 + 18);
      v21 = !isCatmullClarkSurface;
      if (*((_WORD *)v19 + 18))
        v21 = 1;
      LOBYTE(v67) = v21;
      v22 = v20 > 0xFF || isCatmullClarkSurface;
      BYTE1(v67) = v22;
      std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, &v67);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
    if ((BYTE8(v57) & 7) != 0)
    {
      v23 = (unsigned int *)(*((_QWORD *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
    if (*((_QWORD *)&v56 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v56 + 1));
    MEMORY[0x2348B20B0](v49);
    v25 = (void ***)MEMORY[0x2348B24C4](&v59);
    v27 = *((_QWORD *)&v53 + 1);
    v26 = v53;
    if ((_QWORD)v53 != *((_QWORD *)&v53 + 1))
    {
      v28 = v13 + 16;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((_QWORD *)&v60 + 1) = 0;
        *(_QWORD *)&v59 = v28;
        v29 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!v29)
          v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v59, v29, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v56, &v50, &v51);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v56, &v70);
        v30 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70);
        if (a3 + 1 == v30)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, &v70);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v71);
          v69 = !isCatmullClarkSurface || isCatmullClarkSurface << 8;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&v67);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
        }
        else
        {
          v31 = isCatmullClarkSurface;
          v32 = !isCatmullClarkSurface;
          v33 = *((unsigned __int16 *)v30 + 18);
          if (*((_WORD *)v30 + 18))
            v32 = 1;
          LOBYTE(v67) = v32;
          if (v33 > 0xFF)
            v31 = 1;
          BYTE1(v67) = v31;
          std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, &v67);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
        if ((BYTE8(v57) & 7) != 0)
        {
          v34 = (unsigned int *)(*((_QWORD *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
        if (*((_QWORD *)&v56 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v56 + 1));
        MEMORY[0x2348B20B0](v49);
        v25 = (void ***)MEMORY[0x2348B24C4](&v59);
        v26 += 24;
      }
      while (v26 != v27);
    }
    *(_QWORD *)&v59 = &v53;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](v25);
    a2 = v46;
  }
  v59 = 0uLL;
  LOBYTE(v60) = 0;
  v36 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 0);
  *(_QWORD *)&v57 = *(_QWORD *)(v36 + 16);
  v56 = *(_OWORD *)v36;
  v59 = v56;
  LOBYTE(v60) = v57;
  v37 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 1);
  *(_QWORD *)&v54 = *(_QWORD *)(v37 + 16);
  v53 = *(_OWORD *)v37;
  v59 = v53;
  LOBYTE(v60) = v54;
  v38 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v59, 0x100000005);
  v39 = *v38;
  v40 = v38[1];
  v41 = v38[2];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  *(_QWORD *)&v56 = v39 & 0xFFFFFFFFFFFFDFFFLL;
  *((_QWORD *)&v56 + 1) = v40 | 0x2000;
  *(_QWORD *)&v57 = v41;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, (uint64_t *)&v56, (uint64_t)&v59);
  *(_QWORD *)&v56 = v59;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v56 + 2, (_DWORD *)&v59 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v56 + 3, (_DWORD *)&v59 + 3);
  v57 = v60;
  v58 = v61;
  *(_QWORD *)&v53 = v62;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v53 + 2, &v63);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v53 + 3, &v64);
  v54 = v65;
  v55 = v66;
  while (v56 != v53 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v57, (uint64_t)&v54))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v56, (uint64_t)v49);
    v47 = *(unsigned int **)a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v47);
    realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap(v48, &v47, v49, a3);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)v48, (_QWORD *)v48[1]);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v47);
    if ((v52 & 7) != 0)
    {
      v42 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
    if (v50)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v56);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59 + 8);
  return std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100](a4, (uint64_t)a3);
}

void sub_22FF7DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::~pair(v31 - 112);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v31 - 100));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  MEMORY[0x2348B20B0](&a21);
  MEMORY[0x2348B24C4](v31 - 192);
  *(_QWORD *)(v31 - 192) = &a25;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 192));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert_or_assign[abi:ne180100]<std::pair<BOOL,BOOL>&>(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, _WORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t **v12;
  _DWORD *v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;

  v7 = (uint64_t *)(a1 + 1);
  v6 = a1[1];
  v8 = (uint64_t *)(a1 + 1);
  if (!v6)
    goto LABEL_8;
  v8 = (uint64_t *)(a1 + 1);
  do
  {
    v9 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 28), a2);
    v10 = (uint64_t **)(v6 + 1);
    if (!v9)
    {
      v10 = (uint64_t **)v6;
      v8 = v6;
    }
    v6 = *v10;
  }
  while (*v10);
  if (v8 == v7
    || (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28)) & 1) != 0)
  {
LABEL_8:
    v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, v8, &v17, &v16, a2);
    if (!*v11)
    {
      v12 = (uint64_t **)v11;
      v13 = operator new(0x28uLL);
      v14[1] = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 7, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 8, (_DWORD *)a2 + 1);
      *((_WORD *)v13 + 18) = *a3;
      v15 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v17, v12, (uint64_t *)v13);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    }
  }
  else
  {
    *((_WORD *)v8 + 18) = *a3;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

unsigned int **realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v15 = (unsigned int *)*a1;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v15);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v5);
  realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v15, (uint64_t)&v11, (uint64_t **)a2, (uint64_t *)&v16);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a2, *(_QWORD **)(a2 + 8));
  v6 = v17;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = v18;
  *(_QWORD *)(a2 + 16) = v18;
  if (v7)
  {
    v6[2] = v4;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    v6 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v4;
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v16, v6);
  if ((v14 & 7) != 0)
  {
    v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (v12)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v15);
}

void sub_22FF7DF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a13);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v13, *(_QWORD **)(v13 + 8));
  _Unwind_Resume(a1);
}

void realityio::MaterialAssetBuilder::~MaterialAssetBuilder(void **this)
{
  realityio::MaterialAssetBuilder::~MaterialAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::MaterialAssetBuilder *v2;
  uint64_t v3;
  realityio::MaterialAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDE5658;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)(this + 35));
  *this = off_24FDE1CA0;
  v2 = (realityio::MaterialAssetBuilder *)this[34];
  if (v2 == (realityio::MaterialAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::MaterialAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::MaterialAssetBuilder *)this[30];
  if (v4 == (realityio::MaterialAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::MaterialAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void realityio::MaterialAssetDataT::~MaterialAssetDataT(realityio::MaterialAssetDataT *this)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::MaterialAssetDataT::MaterialAssetDataT(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, a2 + 1);
  v9 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v9)
    RERetain();
  v10 = *a4;
  *(_QWORD *)(a1 + 16) = *a4;
  if (v10)
    RERetain();
  return a1;
}

void sub_22FF7E09C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  _QWORD *v2;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

BOOL realityio::isConnectedToBaseColorAlpha(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t Data;
  _BOOL8 v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  std::string __p;
  std::string v17;
  std::string v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  Data = atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 32));
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(this, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v31)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v27)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
    && MEMORY[0x2348B37CC](v31)
    && (MEMORY[0x2348B37CC](v27) & 1) != 0)
  {
    realityio::findPrimWhichOriginatedConnection((realityio *)v23, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v31);
    realityio::findPrimWhichOriginatedConnection((realityio *)v19, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v27);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v23)
      && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v19))
    {
      realityio::getFileResolvedPath(&v18);
      realityio::getFileResolvedPath(&v17);
      if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v18, (unsigned __int8 *)&v17))
      {
        realityio::findOriginalSourceAttributeName(&__p, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v27);
        v6 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "a");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v6 = 0;
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
    else
    {
      v6 = 0;
    }
    if ((v22 & 7) != 0)
    {
      v12 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    if (v20)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
    if ((v26 & 7) != 0)
    {
      v14 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    if (v24)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  }
  else
  {
    v6 = 0;
  }
  if ((v30 & 7) != 0)
  {
    v7 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (v28)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
  if ((v34 & 7) != 0)
  {
    v9 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  if (v32)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
  return v6;
}

void sub_22FF7E32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a25);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a29);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v29 - 80));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v29 - 48));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&this[1], (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)a2 + 24));
  return this;
}

void sub_22FF7E450(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::TextureBuilder::TextureDataT::getOneTextureAsset(_QWORD *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
  {
    *this = v2;
    return (_QWORD *)RERetain();
  }
  if (a2[4])
  {
    v3 = *(_QWORD *)(a2[2] + 56);
    *this = v3;
    if (v3)
      return (_QWORD *)RERetain();
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  realityio::TexcoordID::setIndex((realityio::TexcoordID *)a1, a3);
  *(_BYTE *)(a1 + 40) = a4;
  MEMORY[0x2348B2764](&v14, a2);
  if (&v14 == v8)
  {
    if ((v14 & 7) != 0)
    {
      v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  else
  {
    if ((*v8 & 7) != 0)
    {
      v9 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    *v8 = v14;
  }
  realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)a1);
  if (a3 == -1)
    realityio::TexcoordID::getIndexFromName((realityio::TexcoordID *)a1);
  return a1;
}

void sub_22FF7E588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int *v4;
  unsigned int v5;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  _Unwind_Resume(exception_object);
}

void realityio::TexcoordID::setIndex(realityio::TexcoordID *this, int a2)
{
  NSObject *v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2 < 8)
  {
    *((_DWORD *)this + 1) = a2;
    if (a2 != -1 && !*((_QWORD *)this + 1))
      realityio::TexcoordID::computeNormalizedName(this);
  }
  else
  {
    v3 = *(NSObject **)(realityio::logObjects(this) + 24);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109376;
      v4[1] = a2;
      v5 = 1024;
      v6 = 7;
      _os_log_impl(&dword_22FF26000, v3, OS_LOG_TYPE_DEFAULT, "Attempt to use a material buffer with index %d, which is greater that the largest allowed value %d.", (uint8_t *)v4, 0xEu);
    }
  }
}

void sub_22FF7E6B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD **std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 1;
  if ((pxrInternal__aapl__pxrReserved__::operator==(a1, (uint64_t)v7) & 1) == 0)
  {
    v4 = 1 << a2;
    if ((*(_QWORD *)a1 & (1 << a2)) != 0)
    {
      if ((BYTE4(a2) & 1) == ((*(_QWORD *)(a1 + 8) & v4) != 0))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 16) = 1;
      }
    }
    else
    {
      *(_QWORD *)a1 |= v4;
      if ((a2 & 0x100000000) != 0)
        v5 = *(_QWORD *)(a1 + 8) & ~v4;
      else
        v5 = *(_QWORD *)(a1 + 8) | v4;
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;

  v15 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)(a1 + 20));
  if (!pxrInternal__aapl__pxrReserved__::Usd_MoveToChild<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, 0, a2))
  {
    v15 = 0;
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v13, (int *)&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator((uint64_t)v10, &v15, &v13, (__int128 *)a2);
  v12 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator((uint64_t)v8, &v12, &v7, (__int128 *)a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::UsdPrimSubtreeRange(a3, (uint64_t)v10, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_22FF7E980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a15);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::UsdPrimSiblingIterator(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  __int128 v7;

  *(_QWORD *)a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  v7 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  if (*(_QWORD *)a1
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 16), a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)a1);
  }
  return a1;
}

void sub_22FF7EA34(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this)
{
  char *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (char *)this + 8;
  result = pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)this, (pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)((char *)this + 8), 0, (uint64_t *)this + 2);
  if ((_DWORD)result)
  {
    *(_QWORD *)this = 0;
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v2, (int *)&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)this;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v8, (_DWORD *)this + 2);
  result = v8;
  if (v8)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return result;
}

void sub_22FF7EB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *result;

  result = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::~UsdShadeTokensType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>::New()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2348B21F4]();
  return v0;
}

void sub_22FF7ED08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::~UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  void **v115;

  v115 = (void **)((char *)this + 304);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v115);
  v2 = *((_QWORD *)this + 37);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 36);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 35);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 34);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 33);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 32);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 31);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 30);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 29);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 28);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 27);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 26);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 25);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 24);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 23);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 22);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 21);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 20);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 19);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 18);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 17);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 16);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 15);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 14);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 13);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 12);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 11);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 10);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 9);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 8);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 7);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 6);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 5);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 4);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 3);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 2);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 1);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v113 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<std::string>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<std::string>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType *v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v0 = (realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType *)operator new();
  MEMORY[0x2348B2758](v0, "UsdPreviewSurface", 0);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)v0 + 184, "occlusion", 0);
  MEMORY[0x2348B2758]((char *)v0 + 192, "specularColor", 0);
  MEMORY[0x2348B2758]((char *)v0 + 200, "realitykit:tint", 0);
  MEMORY[0x2348B2758]((char *)v0 + 208, "realitykit:tintMask", 0);
  MEMORY[0x2348B2758]((char *)v0 + 216, "mtlx", 0);
  MEMORY[0x2348B2758]((char *)v0 + 224, "inputs:translation", 0);
  MEMORY[0x2348B2758]((char *)v0 + 232, "inputs:rotation", 0);
  MEMORY[0x2348B2758]((char *)v0 + 240, "inputs:scale", 0);
  MEMORY[0x2348B2758]((char *)v0 + 248, "inputs:fallback", 0);
  v1 = *(_QWORD *)v0;
  v109 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  v4 = *((_QWORD *)v0 + 1);
  v110 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = *((_QWORD *)v0 + 2);
  v111 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *((_QWORD *)v0 + 3);
  v112 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = *((_QWORD *)v0 + 4);
  v113 = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = *((_QWORD *)v0 + 5);
  v114 = v16;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = *((_QWORD *)v0 + 6);
  v115 = v19;
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if ((v21 & 1) == 0)
      v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  v22 = *((_QWORD *)v0 + 7);
  v116 = v22;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  v25 = *((_QWORD *)v0 + 8);
  v117 = v25;
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 2, v26));
    if ((v27 & 1) == 0)
      v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  v28 = *((_QWORD *)v0 + 9);
  v118 = v28;
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
      v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  v31 = *((_QWORD *)v0 + 10);
  v119 = v31;
  if ((v31 & 7) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 2, v32));
    if ((v33 & 1) == 0)
      v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v34 = *((_QWORD *)v0 + 11);
  v120 = v34;
  if ((v34 & 7) != 0)
  {
    v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 2, v35));
    if ((v36 & 1) == 0)
      v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  v37 = *((_QWORD *)v0 + 12);
  v121 = v37;
  if ((v37 & 7) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 2, v38));
    if ((v39 & 1) == 0)
      v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  v40 = *((_QWORD *)v0 + 13);
  v122 = v40;
  if ((v40 & 7) != 0)
  {
    v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 2, v41));
    if ((v42 & 1) == 0)
      v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  v43 = *((_QWORD *)v0 + 14);
  v123 = v43;
  if ((v43 & 7) != 0)
  {
    v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 2, v44));
    if ((v45 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v46 = *((_QWORD *)v0 + 15);
  v124 = v46;
  if ((v46 & 7) != 0)
  {
    v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 2, v47));
    if ((v48 & 1) == 0)
      v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  v49 = *((_QWORD *)v0 + 16);
  v125 = v49;
  if ((v49 & 7) != 0)
  {
    v50 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 2, v50));
    if ((v51 & 1) == 0)
      v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  v52 = *((_QWORD *)v0 + 17);
  v126 = v52;
  if ((v52 & 7) != 0)
  {
    v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 2, v53));
    if ((v54 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  v55 = *((_QWORD *)v0 + 18);
  v127 = v55;
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 2, v56));
    if ((v57 & 1) == 0)
      v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  v58 = *((_QWORD *)v0 + 19);
  v128 = v58;
  if ((v58 & 7) != 0)
  {
    v59 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 2, v59));
    if ((v60 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v61 = *((_QWORD *)v0 + 20);
  v129 = v61;
  if ((v61 & 7) != 0)
  {
    v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 2, v62));
    if ((v63 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  v64 = *((_QWORD *)v0 + 21);
  v130 = v64;
  if ((v64 & 7) != 0)
  {
    v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 2, v65));
    if ((v66 & 1) == 0)
      v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  v67 = *((_QWORD *)v0 + 22);
  v131 = v67;
  if ((v67 & 7) != 0)
  {
    v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 2, v68));
    if ((v69 & 1) == 0)
      v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  v70 = *((_QWORD *)v0 + 23);
  v132 = v70;
  if ((v70 & 7) != 0)
  {
    v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 2, v71));
    if ((v72 & 1) == 0)
      v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  v73 = *((_QWORD *)v0 + 24);
  v133 = v73;
  if ((v73 & 7) != 0)
  {
    v74 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 2, v74));
    if ((v75 & 1) == 0)
      v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  v76 = *((_QWORD *)v0 + 25);
  v134 = v76;
  if ((v76 & 7) != 0)
  {
    v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 2, v77));
    if ((v78 & 1) == 0)
      v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  v79 = *((_QWORD *)v0 + 26);
  v135 = v79;
  if ((v79 & 7) != 0)
  {
    v80 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 2, v80));
    if ((v81 & 1) == 0)
      v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  v82 = *((_QWORD *)v0 + 27);
  v136 = v82;
  if ((v82 & 7) != 0)
  {
    v83 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 2, v83));
    if ((v84 & 1) == 0)
      v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  v85 = *((_QWORD *)v0 + 28);
  v137 = v85;
  if ((v85 & 7) != 0)
  {
    v86 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 2, v86));
    if ((v87 & 1) == 0)
      v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  v88 = *((_QWORD *)v0 + 29);
  v138 = v88;
  if ((v88 & 7) != 0)
  {
    v89 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 2, v89));
    if ((v90 & 1) == 0)
      v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  v91 = *((_QWORD *)v0 + 30);
  v139 = v91;
  if ((v91 & 7) != 0)
  {
    v92 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 2, v92));
    if ((v93 & 1) == 0)
      v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  v94 = *((_QWORD *)v0 + 31);
  v140 = v94;
  if ((v94 & 7) != 0)
  {
    v95 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 2, v95));
    if ((v96 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)v0 + 32) = 0;
  *((_QWORD *)v0 + 33) = 0;
  *((_QWORD *)v0 + 34) = 0;
  v97 = operator new(0x100uLL);
  v98 = 0;
  *((_QWORD *)v0 + 32) = v97;
  *((_QWORD *)v0 + 33) = v97;
  *((_QWORD *)v0 + 34) = v97 + 32;
  do
  {
    v99 = *(&v109 + v98);
    *v97 = v99;
    if ((v99 & 7) != 0)
    {
      v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 2, v100));
      if ((v101 & 1) == 0)
        *v97 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v98;
    ++v97;
  }
  while (v98 != 32);
  v102 = &v141;
  *((_QWORD *)v0 + 33) = v97;
  do
  {
    v104 = *--v102;
    v103 = v104;
    if ((v104 & 7) != 0)
    {
      v105 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
      do
        v106 = __ldxr(v105);
      while (__stlxr(v106 - 2, v105));
    }
  }
  while (v102 != &v109);
  while (!__ldaxr(&realityio::tokens::MaterialAssetBuilderTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::MaterialAssetBuilderTokens))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType::~MaterialAssetBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&realityio::tokens::MaterialAssetBuilderTokens);
}

void sub_22FF7FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,void **a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a33);
  v77 = (char *)&a67;
  while (1)
  {
    v79 = *((_QWORD *)v77 - 1);
    v77 -= 8;
    v78 = v79;
    if ((v79 & 7) != 0)
    {
      v80 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stlxr(v81 - 2, v80));
    }
    if (v77 == &a35)
    {
      if ((*v71 & 7) != 0)
      {
        v82 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v70 & 7) != 0)
      {
        v84 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v69 & 7) != 0)
      {
        v86 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v68 & 7) != 0)
      {
        v88 = (unsigned int *)(*v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v76 & 7) != 0)
      {
        v90 = (unsigned int *)(*v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v75 & 7) != 0)
      {
        v92 = (unsigned int *)(*v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*v74 & 7) != 0)
      {
        v94 = (unsigned int *)(*v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*v73 & 7) != 0)
      {
        v96 = (unsigned int *)(*v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*v72 & 7) != 0)
      {
        v98 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a11 & 7) != 0)
      {
        v100 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a12 & 7) != 0)
      {
        v102 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a13 & 7) != 0)
      {
        v104 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a14 & 7) != 0)
      {
        v106 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a15 & 7) != 0)
      {
        v108 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a16 & 7) != 0)
      {
        v110 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a17 & 7) != 0)
      {
        v112 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a18 & 7) != 0)
      {
        v114 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a19 & 7) != 0)
      {
        v116 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a20 & 7) != 0)
      {
        v118 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a21 & 7) != 0)
      {
        v120 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a22 & 7) != 0)
      {
        v122 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a23 & 7) != 0)
      {
        v124 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a24 & 7) != 0)
      {
        v126 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a25 & 7) != 0)
      {
        v128 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a26 & 7) != 0)
      {
        v130 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a27 & 7) != 0)
      {
        v132 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a28 & 7) != 0)
      {
        v134 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a29 & 7) != 0)
      {
        v136 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a30 & 7) != 0)
      {
        v138 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a31 & 7) != 0)
      {
        v140 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*a32 & 7) != 0)
      {
        v142 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      if ((*v67 & 7) != 0)
      {
        v144 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      MEMORY[0x2348B4E1C](v67, 0x60C40ADBF550FLL);
      _Unwind_Resume(a1);
    }
  }
}

void sub_22FF8036C()
{
  JUMPOUT(0x22FF80014);
}

void sub_22FF80374()
{
  JUMPOUT(0x22FF80038);
}

void sub_22FF8037C()
{
  JUMPOUT(0x22FF8005CLL);
}

void sub_22FF80384()
{
  JUMPOUT(0x22FF80080);
}

void sub_22FF8038C()
{
  JUMPOUT(0x22FF800A4);
}

void sub_22FF80394()
{
  JUMPOUT(0x22FF800C8);
}

void sub_22FF8039C()
{
  JUMPOUT(0x22FF800ECLL);
}

void sub_22FF803A4()
{
  JUMPOUT(0x22FF80110);
}

void sub_22FF803AC()
{
  JUMPOUT(0x22FF80134);
}

void sub_22FF803B4()
{
  JUMPOUT(0x22FF80158);
}

void sub_22FF803BC()
{
  JUMPOUT(0x22FF8017CLL);
}

void sub_22FF803C4()
{
  JUMPOUT(0x22FF801A0);
}

void sub_22FF803CC()
{
  JUMPOUT(0x22FF801C4);
}

void sub_22FF803D4()
{
  JUMPOUT(0x22FF801E8);
}

void sub_22FF803DC()
{
  JUMPOUT(0x22FF8020CLL);
}

void sub_22FF803E4()
{
  JUMPOUT(0x22FF80230);
}

void sub_22FF803EC()
{
  JUMPOUT(0x22FF80254);
}

void sub_22FF803F4()
{
  JUMPOUT(0x22FF80278);
}

void sub_22FF803FC()
{
  JUMPOUT(0x22FF8029CLL);
}

void sub_22FF80404()
{
  JUMPOUT(0x22FF802C0);
}

void sub_22FF8040C()
{
  JUMPOUT(0x22FF802E4);
}

void sub_22FF80414()
{
  JUMPOUT(0x22FF80308);
}

void sub_22FF8041C()
{
  JUMPOUT(0x22FF8032CLL);
}

void sub_22FF80424()
{
  JUMPOUT(0x22FF8034CLL);
}

void std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE56D0;
  return result;
}

void std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE56D0;
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t *);
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  BOOL v12;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::UsdStage *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v21;
  int IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t result;
  _OWORD *v44;
  _QWORD *v45;
  _OWORD *v46;
  BOOL v47;
  _OWORD v49[2];
  int v50;
  _BYTE v51[8];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  void **v74[2];
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v51))
    goto LABEL_64;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v51);
  v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(&v81);
  if (v4 & 1 | (unint64_t)v3)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v81);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v5);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v71);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v6);
    v7 = *((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v8 = (unsigned int *)(*((_QWORD *)&v71 + 1) + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*((_QWORD *)Data + 11) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
    ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    v14 = (uint64_t)ValueAtPath;
    if (!ValueAtPath || !pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
      goto LABEL_20;
    v15 = *(_QWORD *)(v14 + 8);
    if ((v15 & 4) != 0)
      v14 = (*(uint64_t (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
    if (*(_BYTE *)v14)
    {
      v12 = 1;
    }
    else
    {
LABEL_20:
      v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v81);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v16);
      v71 = 0uLL;
      LOBYTE(v72) = 1;
      v17 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v71, 0);
      v69 = *(_OWORD *)v17;
      v70 = *(_QWORD *)(v17 + 16);
      v71 = v69;
      LOBYTE(v72) = v70;
      v18 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v71, 8);
      v19 = *(_OWORD *)v18;
      v65 = *(_QWORD *)(v18 + 16);
      v64 = v19;
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v74, (uint64_t)&v76, &v64);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)&v71, 8uLL, &v69);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)&v69, 8uLL, &v64);
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v74, (uint64_t)&v64);
      v20 = MEMORY[0x24BEE9DC8] + 16;
      while (1)
      {
        *(void ***)&v61 = v74[1];
        *((_QWORD *)&v61 + 1) = v74;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        LODWORD(v63) = 0;
        WORD2(v63) = 0;
        if (v64 == v61)
        {
          v12 = 1;
          if (v65 == v62 && !v66 && !v67)
            v12 = v68 != 0;
        }
        else
        {
          v12 = 1;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
        if (!v12)
          break;
        v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v61);
        pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v21);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
        {
          IsA = 1;
        }
        else
        {
          v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v64, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v57);
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v23);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((v60 & 7) != 0)
          {
            v24 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
          if (v58)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
        }
        if ((v63 & 7) != 0)
        {
          v26 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
        if (*((_QWORD *)&v61 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v61 + 1));
        if (IsA)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v64, (uint64_t)v57);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v63 = 0;
          *(_QWORD *)&v61 = v20;
          if ((v60 & 7) != 0)
          {
            v28 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
          if (v58)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
          if (!atomic_load(&realityio::tokens::MaterialAssetBuilderTokens))
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialAssetBuilderTokens_StaticTokenType>>::_TryToCreateData();
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v57, &v56);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v51, &v55);
          v31 = v55;
          v32 = v56;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
          MEMORY[0x2348B20B0](v57);
          MEMORY[0x2348B24C4](&v61);
          if (v32 == v31)
            break;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v64);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&v69, v33);
      tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&v71, v34);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
      if ((v79 & 7) != 0)
      {
        v35 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
      if (v77)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v80, 0);
  }
  else
  {
    v12 = 0;
  }
  v37 = v82;
  if (v82)
  {
    v38 = (unsigned int *)(v82 + 8);
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  if (v12)
  {
    if (realityio::hasMaterialXSurface((realityio *)v51, v4))
    {
      realityio::generateMtlxInputsDescriptorPaths((realityio *)v51, a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      realityio::createMaterialInputs((const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v76, (uint64_t)&v69);
      v44 = (_OWORD *)v69;
      if ((__int128 *)v69 != (__int128 *)((char *)&v69 + 8))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v71, (_DWORD *)v44 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v71 + 1, (_DWORD *)v44 + 9);
          *((_QWORD *)&v71 + 1) = 0;
          v72 = 0;
          v73 = 0;
          std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)((char *)&v71 + 8), *((__int128 **)v44 + 5), *((__int128 **)v44 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v44 + 6) - *((_QWORD *)v44 + 5)) >> 4));
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v49, (unsigned int *)&v71, &v71);
          v74[0] = (void **)&v71 + 1;
          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v74);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
          v45 = (_QWORD *)*((_QWORD *)v44 + 1);
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = (_QWORD *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (_OWORD *)*((_QWORD *)v44 + 2);
              v47 = *(_QWORD *)v46 == (_QWORD)v44;
              v44 = v46;
            }
            while (!v47);
          }
          v44 = v46;
        }
        while (v46 != (__int128 *)((char *)&v69 + 8));
      }
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v49, &v76, &v76);
      std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(a3, (uint64_t)v49);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(*((_QWORD **)&v69 + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
    }
  }
  else
  {
LABEL_64:
    std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(a3, (uint64_t)v49);
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v49);
  if ((v54 & 7) != 0)
  {
    v41 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
  result = v52;
  if (v52)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
  return result;
}

void sub_22FF80BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36)
{
  uint64_t v36;
  unsigned int *v38;
  unsigned int v39;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(a36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v36 - 144);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&a11);
  if ((a20 & 7) != 0)
  {
    v38 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a19);
  if (a18)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a18);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::generateInputsDescriptor(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;

  v4 = *(_QWORD *)this;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)this + 5);
  v5 = *((_DWORD *)this + 12);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = this;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)a1;
  if (v12)
  {
    v3 = (unint64_t *)(v12 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v8, &v12, (_DWORD *)(a1 + 16));
  if (v12)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v8);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  result = v9;
  if (v9)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return result;
}

void sub_22FF8109C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, &v8, (_DWORD *)(a1 + 16));
  result = v8;
  if (v8)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return result;
}

void sub_22FF81124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(exception_object);
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::_FetchPointer;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::_FetchPointer(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  if ((pxrInternal__aapl__pxrReserved__::operator==(a1, (uint64_t)v7) & 1) == 0)
  {
    v4 = 1 << a2;
    if ((*(_QWORD *)a1 & (1 << a2)) != 0)
    {
      if (((a2 & 0x100000000) == 0) == ((*(_QWORD *)(a1 + 8) & v4) != 0))
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 16) = 0;
      }
    }
    else
    {
      *(_QWORD *)a1 |= v4;
      if ((a2 & 0x100000000) != 0)
        v5 = *(_QWORD *)(a1 + 8) | v4;
      else
        v5 = *(_QWORD *)(a1 + 8) & ~v4;
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  BOOL v13;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(v6 + 40) & 7;
  v8 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 0;
  if (v9)
    goto LABEL_21;
  if (!v7 || v8 == 0)
  {
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 40);
    v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0)
      break;
    if (v8)
      v13 = (v11 & 7) == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_20;
  }
LABEL_21:
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_22FF81328(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _BYTE v13[16];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, a4 + 1);
  v8 = *a5;
  v9 = a5[1];
  if (*(_QWORD *)a1)
  {
    v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((_BYTE *)a5 + 16);
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)a1, (uint64_t)v12);
  if (v12[0] != *(_QWORD *)(a1 + 8)
    && !pxrInternal__aapl__pxrReserved__::Usd_EvalPredicate<pxrInternal__aapl__pxrReserved__::Usd_PrimData const*>((uint64_t *)(a1 + 24), (uint64_t)v12))
  {
    v13[12] = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v12);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
}

void sub_22FF81448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin(pxrInternal__aapl__pxrReserved__::UsdPrimRange *this, const pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *a2)
{
  uint64_t result;

  if (*((_BYTE *)a2 + 29))
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  *(_QWORD *)this = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 16, (_DWORD *)a2 + 4);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 20, (_DWORD *)a2 + 5);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 6);
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_22FF81634(_Unwind_Exception *a1)
{
  uint64_t v1;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::~split_ordered_list(uint64_t a1)
{
  tbb::internal *v2;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::clear(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::clear(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::destroy_node(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 24) & 1) != 0)
    tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::node>::destroy(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3(this, this);
}

uint64_t tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::node>::destroy(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *v3 = 0;
  if (v4)
    std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>::operator()[abi:ne180100]((uint64_t)v3, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 8);
}

uint64_t std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](&v5);
    v5 = (void **)(a2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](&v5);
    v3 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    if (v3)
      std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding>::operator()[abi:ne180100](a2, v3);
    return MEMORY[0x2348B4E1C](a2, 0x20C400FA29667);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(v4 - 48));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::~CollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::default_delete<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  if (a2)
  {
    v3 = a2[5];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v6 = a2[4];
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 3));
    v9 = a2[2];
    if (v9)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a2);
    JUMPOUT(0x2348B4E1CLL);
  }
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v5[3] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1, 0, &v11);
  return a1;
}

void sub_22FF81A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(uint64_t a1)
{
  tbb::internal *v2;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::clear(a1);
  v2 = *(tbb::internal **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(a1, v2);
  return a1;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::clear(uint64_t result)
{
  uint64_t v1;
  tbb::internal **v2;
  tbb::internal *v3;
  tbb::internal *v4;

  v1 = result;
  v2 = *(tbb::internal ***)(result + 16);
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = *(tbb::internal **)v3;
      result = tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(v1, v3);
      v3 = v4;
    }
    while (v4);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::destroy_node(uint64_t a1, tbb::internal *this)
{
  if ((*((_BYTE *)this + 24) & 1) != 0)
    tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::node>::destroy(a1, (uint64_t)this);
  return tbb::internal::deallocate_via_handler_v3(this, this);
}

uint64_t tbb::tbb_allocator<tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::node>::destroy(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *v3 = 0;
  if (v4)
    std::default_delete<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>::operator()[abi:ne180100]((uint64_t)v3, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 8);
}

void std::default_delete<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  if (a2)
  {
    v10 = (void **)(a2 + 120);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>>::__destroy_vector::operator()[abi:ne180100](&v10);
    v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(_QWORD *)(a2 + 104) = v3;
      operator delete(v3);
    }
    v4 = *(unsigned int **)(a2 + 88);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2 + 48, *(_QWORD **)(a2 + 56));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~__hash_table(a2 + 8);
    if ((*(_QWORD *)a2 & 7) != 0)
    {
      v8 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    MEMORY[0x2348B4E1C](a2, 0x10F0C4054F5A275);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfPathExpressionEval<pxrInternal__aapl__pxrReserved__::UsdObject>::_PatternImpl>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v6;

  v6 = (void **)(a2 + 112);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a2 + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::ArchRegex>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a2 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = v4;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPredicateProgram<pxrInternal__aapl__pxrReserved__::UsdObject>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void std::vector<pxrInternal__aapl__pxrReserved__::ArchRegex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = MEMORY[0x2348B2B84](v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1, *a2);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  return this;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(uint64_t a1, void *a2)
{
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::internal_clear(a1, a2);
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(a1 + 16);
  return a1;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::internal_clear(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  tbb::internal **v5;
  uint64_t v6;
  uint64_t v7;
  tbb::internal *v8;

  v2 = result;
  for (i = 0; i != 64; ++i)
  {
    v4 = v2 + 8 * i;
    v6 = *(_QWORD *)(v4 + 48);
    v5 = (tbb::internal **)(v4 + 48);
    __dmb(0xBu);
    if (v6)
    {
      v7 = 1 << i;
      if (!i)
        v7 = 2;
      do
      {
        __dmb(0xBu);
        --v7;
      }
      while (v7);
      v8 = *v5;
      __dmb(0xBu);
      result = tbb::internal::deallocate_via_handler_v3(v8, a2);
      __dmb(0xBu);
      *v5 = 0;
    }
  }
  return result;
}

uint64_t tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(uint64_t a1, void *a2)
{
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::internal_clear(a1, a2);
  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>>::~split_ordered_list(a1 + 16);
  return a1;
}

uint64_t std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_22FF82204(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22FF82280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22FF8237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22FF82408(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<std::pair<std::string,std::string>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<std::pair<std::string,std::string>>>,0>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22FF8265C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::CustomInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,std::allocator<realityio::CustomInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  char v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDE4958;
  std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_22FF826C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::CustomInputDescriptor>::construct[abi:ne180100]<realityio::CustomInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string __p;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v15, a5);
  realityio::CustomInputDescriptor::CustomInputDescriptor(a2, (uint64_t)&__p, a4, (uint64_t)v15, *a6);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v12 + 8 * v13))(v12, v10, v11);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22FF827C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDE5750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDE5750;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v20[0] = &off_24FDE56D0;
  v21 = v20;
  v4 = realityio::TextureBuilder::kOutputName((realityio::TextureBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v16) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 37, (uint64_t)v20, (int *)&v16, &v18);
  v16 = v18;
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v16);
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  result = v21;
  if (v21 == v20)
  {
    v15 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v15))(result);
}

void sub_22FF82A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::__shared_weak_count *v17;
  unint64_t *v18;
  char *v20;
  uint64_t v21;
  unint64_t v22;

  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  do
LABEL_6:
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDE57D0;
  return result;
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDE57D0;
}

void std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::MaterialAssetBuilder::kMaterialDataName((realityio::MaterialAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 22, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22FF82D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MaterialAssetBuilder::MaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE58E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE58E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::MaterialAssetDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF82F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_22FF8313C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  _OWORD *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_OWORD *)(a3 + 8) = *v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(v13);
          *(_BYTE *)a3 = 1;
          *(_OWORD *)(a3 + 8) = *v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_22FF83548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<float>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_22FF83870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  int v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB788], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(v13);
          *(_BYTE *)a3 = 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_22FF83C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB788]);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<float>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB788], v1, v2);
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<float>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<float>;
  a1[2] = MEMORY[0x24BEDB788];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<float>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

void std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void realityio::Outputs::getRawValue<realityio::TextureBuilder::TextureDataT const*>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_22FF83FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<realityio::TextureBuilder::TextureDataT const*>::__init_with_size[abi:ne180100]<realityio::TextureBuilder::TextureDataT const**,realityio::TextureBuilder::TextureDataT const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22FF84084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,realityio::TextureBuilder::TextureDataT const*>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  uint64_t *result;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v12 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v13 = *((_QWORD *)a3 + 2);
    v14 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 2) = 0;
    v11[2] = v12;
    *((_QWORD *)v11 + 6) = v13;
    *((_QWORD *)v11 + 7) = v14;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = (uint64_t *)v11;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v16 = *v6;
    }
    else
    {
      v16 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_DefaultValueHolder::Create<pxrInternal__aapl__pxrReserved__::VtDictionary>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::VtDictionary>(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  return v2(0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::New<pxrInternal__aapl__pxrReserved__::VtDictionary>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v5;
  int v6;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v5);
  result = (uint64_t)malloc_type_malloc(8uLL, 0x77B8077EuLL);
  v3 = (_QWORD *)result;
  while (v6--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  *v3 = 0;
  *a1 = v3;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtDictionary>;
  return result;
}

void sub_22FF84318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t *a1)
{
  if (a1)
  {
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](a1, 0);
    free(a1);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v6[4];
  char v7;
  int v8;

  v1 = result[1];
  if (v1)
  {
    v2 = (_QWORD *)*result;
    v3 = *(_QWORD **)(*result + 8);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *result = v4;
    if (v4 == (_QWORD *)(v1 + 8))
      result[1] = 0;
  }
  else
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "increment";
    v6[2] = 159;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInternal__aapl__pxrRe"
            "served__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_type<std::strin"
            "g, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__"
            "aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = std::map<std::string, pxr"
            "Internal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std::__map_iterator<std::__"
            "tree_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<st"
            "d::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>]";
    v7 = 0;
    v8 = 4;
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, "Attempted invalid increment operation on a VtDictionary iterator");
  }
  return result;
}

_BYTE *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<BOOL>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<BOOL>;
  a1[2] = MEMORY[0x24BEDB770];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<BOOL>(uint64_t result)
{
  if (result)
    JUMPOUT(0x2348B4E1CLL);
  return result;
}

void std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<realityio::TexcoordID>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 48)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    v5 = *(_QWORD *)(i - 40);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__tree<realityio::TexcoordID>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<realityio::TexcoordID>::destroy(a1, *a2);
    std::__tree<realityio::TexcoordID>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
}

_OWORD *std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(uint64_t **a1, realityio::TexcoordID *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v10[1] = a1 + 1;
    v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((_QWORD *)v6 + 8) = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *((_BYTE *)v6 + 72) = *(_BYTE *)(a3 + 40);
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

_QWORD *std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>(uint64_t a1, _QWORD *a2, realityio::TexcoordID *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  realityio::TexcoordID *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (realityio::TexcoordID *)(v4 + 4);
        if (!realityio::TexcoordID::operator<(a3, (realityio::TexcoordID *)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!realityio::TexcoordID::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<realityio::TexcoordID,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>,std::reverse_iterator<realityio::TexcoordID*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 48);
      a3 -= 48;
      *(_QWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(a3 + 40);
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<realityio::TexcoordID>,std::reverse_iterator<realityio::TexcoordID*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<realityio::TexcoordID>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>,std::reverse_iterator<std::reverse_iterator<realityio::TexcoordID*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*(char *)(i + 39) < 0)
      operator delete(*(void **)(i + 16));
    v6 = *(_QWORD *)(i + 8);
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    i = *(_QWORD *)(a2 + 32) + 48;
  }
}

uint64_t std::__split_buffer<realityio::TexcoordID>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<realityio::TexcoordID>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<realityio::TexcoordID>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    v5 = *(_QWORD *)(i - 40);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    std::back_insert_iterator<std::vector<realityio::TexcoordID>>::operator=[abi:ne180100](&v10, (uint64_t)(v4 + 4));
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

uint64_t **std::back_insert_iterator<std::vector<realityio::TexcoordID>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v5 = std::vector<realityio::TexcoordID>::__push_back_slow_path<realityio::TexcoordID const&>(*a1, a2);
  }
  else
  {
    realityio::TexcoordID::TexcoordID((*a1)[1], a2);
    v5 = v4 + 48;
    v3[1] = v4 + 48;
  }
  v3[1] = v5;
  return a1;
}

void sub_22FF84B30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::TexcoordID>::__push_back_slow_path<realityio::TexcoordID const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  realityio::TexcoordID::TexcoordID((uint64_t)v14, a2);
  v15 = v14 + 48;
  std::vector<realityio::TexcoordID>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_22FF84C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::TexcoordID>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_22FF84E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  _QWORD *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = *v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(v13);
          *(_BYTE *)a3 = 1;
          *(_QWORD *)(a3 + 8) = *v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_22FF85278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69)
    return 1;
  if ((v1 & 4) != 0)
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

_QWORD *realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(_QWORD *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t std::map<std::string,char const*>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,char const*> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_22FF854C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,char const*> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__construct_node<std::pair<std::string const,char const*> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,char const*>,std::__map_value_compare<std::string,std::__value_type<std::string,char const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,char const*>>>::__construct_node<std::pair<std::string const,char const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22FF855E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDE5860;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDE5860;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssetHandle;

  AssetHandle = REAssetManagerCreateAssetHandle();
  if (AssetHandle)
  {
    RERetain();
    RERelease();
    v2 = **(uint64_t ***)(a1 + 24);
    v16 = AssetHandle;
    RERetain();
    realityio::Builder::addAsset(v2, &v16, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v16);
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 40) + 16) + 40);
    if (v3)
      realityio::LiveSceneManager::queueForDeferredAssetLoad(v3, &AssetHandle);
    v15 = REMaterialAssetBuilderCreate();
    if (v15)
    {
      RERetain();
      RERelease();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(**(_QWORD **)(a1 + 32) + 32));
      REMaterialAssetBuilderSetName();
      REMaterialAssetBuilderSetMaterialDefinition();
      REMaterialAssetBuilderSetColor4F();
      REMaterialAssetBuilderSetColor3F();
      __asm { FMOV            V0.4S, #1.0 }
      REMaterialAssetBuilderSetFloat4();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFloat();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      REMaterialAssetBuilderSetFunctionConstant();
      v9 = REAssetManagerMaterialAssetBuilderBuildAsync();
      v14 = v9;
      if (v9)
        RERetain();
      v10 = *(uint64_t **)(a1 + 40);
      v11 = *v10;
      if (*v10 != v9)
      {
        *v10 = v9;
        v14 = v11;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v14);
      v12 = *(uint64_t **)(a1 + 40);
      if (*v12)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 40) + 16) + 40))
          realityio::LiveSceneManager::queueForDeferredAssetLoad(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 40) + 16) + 40), v12);
        RERelease();
      }
    }
    realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef(&v15);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&AssetHandle);
}

void sub_22FF85A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  realityio::WrappedRERef<REMaterialAssetBuilder *>::~WrappedRERef((uint64_t *)va);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0,std::allocator<realityio::createDefaultPbrMaterialAsset(realityio::MaterialAssetBuilder *,realityio::Inputs *,BOOL)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  _DWORD *v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 7, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v7 + 8, (_DWORD *)(a3 + 4));
    *((_WORD *)v7 + 18) = *(_WORD *)(a3 + 8);
    v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>>,0>((uint64_t)v2 + 28);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 28), a5))goto LABEL_16;
    return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28)))return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FF85DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (uint64_t)v4 + 28);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::pair<BOOL,BOOL>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 7, (_DWORD *)a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)(a2 + 4));
  *((_WORD *)v6 + 18) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t realityio::UsdStageStateTracker::UsdStageStateTracker(uint64_t a1, _QWORD *a2)
{
  unsigned int **v3;
  _QWORD **v5;
  _QWORD *v6[2];
  unsigned int *v7;

  *(_QWORD *)a1 = &off_24FDE5990;
  *(_QWORD *)(a1 + 8) = *a2;
  v3 = (unsigned int **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 8));
  v7 = *v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v7);
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  realityio::UsdStageDelta::UsdStageDelta((_QWORD *)(a1 + 16), &v7, (uint64_t)&v5);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v5, v6[0]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v7);
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  return a1;
}

void sub_22FF86024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, unsigned int *a12)
{
  unsigned int **v12;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&a9, a10);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a12);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v12);
  _Unwind_Resume(a1);
}

void realityio::UsdStageStateTracker::updateWithStageDelta(realityio::UsdStageStateTracker *this, const realityio::UsdStageDelta *a2)
{
  std::mutex *v4;

  if (*((_BYTE *)this + 168))
  {
    v4 = (std::mutex *)((char *)this + 104);
    std::mutex::lock((std::mutex *)((char *)this + 104));
    realityio::UsdStageDelta::updateWithStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16), a2);
    std::mutex::unlock(v4);
  }
}

void realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta(realityio::UsdStageStateTracker *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD **v7;
  _QWORD *v8[2];
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11[2];
  _QWORD v12[7];
  int v13;

  v4 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  v5 = *((_QWORD *)this + 3);
  *a2 = &off_24FDE8388;
  a2[1] = v5;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a2 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](a2 + 2, (uint64_t)this + 32);
  a2[5] = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a2 + 6), (uint64_t)this + 64);
  v9 = (unsigned int *)*((_QWORD *)this + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v9);
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  realityio::UsdStageDelta::UsdStageDelta(&v10, &v9, (uint64_t)&v7);
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v11[0];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)this + 24, v6);
  if ((uint64_t *)((char *)this + 16) != &v10)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>((uint64_t *)this + 4, (_QWORD *)v11[1], v12);
    *((_DWORD *)this + 24) = v13;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>((_QWORD *)this + 8, (_QWORD *)v12[5], 0);
  }
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v10);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v7, v8[0]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v9);
  std::mutex::unlock(v4);
}

void sub_22FF86200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  realityio::UsdStageDelta *v2;
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)va, v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va1);
  realityio::UsdStageDelta::~UsdStageDelta(v2);
  _Unwind_Resume(a1);
}

CFStringRef realityio::UsdStageStateTracker::description@<X0>(realityio::UsdStageStateTracker *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef result;

  *a2 = 0;
  result = CFStringCreateWithFormat(0, 0, CFSTR("<UsdStageStateTracker: %p { stage: %p }>"), this, (char *)this + 8);
  *a2 = result;
  return result;
}

void sub_22FF862AC(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::UsdStageStateTracker::~UsdStageStateTracker(realityio::UsdStageStateTracker *this)
{
  unsigned int **v2;

  *(_QWORD *)this = &off_24FDE5990;
  v2 = (unsigned int **)((char *)this + 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v2);
}

{
  unsigned int **v2;

  *(_QWORD *)this = &off_24FDE5990;
  v2 = (unsigned int **)((char *)this + 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageStateTracker *)((char *)this + 16));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v2);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FF8639C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), a5))goto LABEL_16;
    return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 4)))return std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22FF866A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = &off_24FDF6CC0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100]((uint64_t *)(a1 + 32), a2 + 32);
  *(_QWORD *)(a1 + 56) = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(a1 + 64, a2 + 64);
  return a1;
}

void sub_22FF86758(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v3, *((_QWORD **)v1 + 5));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_22FF867D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t v12;

  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))goto LABEL_16;
    return std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, a3, a5);
  }
  if (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))return std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>::pair[abi:ne180100](v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22FF86AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>::pair[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = a2[2];
  a1[1] = (uint64_t)&off_24FDF1338;
  a1[2] = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      a1[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[3] = (uint64_t)&off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>,0>(v2 + 4);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>,0>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  a1[1] = &off_24FDF1338;
  a1[3] = &off_24FDF4548;
  result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)(a1 + 4));
  v3 = a1[2];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((*a1 & 7) != 0)
  {
    v6 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>(uint64_t a1)
{
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::UsdPrimDelta::~UsdPrimDelta(realityio::UsdPrimDelta *this)
{
  *(_QWORD *)this = &off_24FDF6CC0;
  *((_QWORD *)this + 6) = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 56);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
}

{
  realityio::UsdPrimDelta::~UsdPrimDelta(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *> *,long>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;

  if (a1[2])
  {
    v6 = *a1;
    v8 = (uint64_t **)(a1 + 1);
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(_QWORD **)(v6 + 8);
    else
      v9 = (_QWORD *)v6;
    v22 = a1;
    v23 = v9;
    v24 = v9;
    if (v9)
    {
      v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v9 + 4), (_DWORD *)v10 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v9 + 36, (_DWORD *)v10 + 9);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v9 + 6), (_DWORD *)v10 + 12);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v9 + 52, (_DWORD *)v10 + 13);
          *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
          if (v9 != v10)
          {
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v9 + 8, (_QWORD *)v10[8], v10 + 9);
            *((_DWORD *)v9 + 32) = *((_DWORD *)v10 + 32);
            std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v9 + 12, (_QWORD *)v10[14], 0);
            v9 = v24;
          }
          v11 = *v8;
          v12 = (uint64_t **)(a1 + 1);
          v13 = (uint64_t **)(a1 + 1);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v12 = (uint64_t **)v11;
                if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 4)))break;
                v11 = *v12;
                v13 = v12;
                if (!*v12)
                  goto LABEL_16;
              }
              v11 = v12[1];
            }
            while (v11);
            v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v9);
          v9 = v23;
          v24 = v23;
          if (v23)
            v23 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          v14 = (_QWORD *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v10[2];
              v15 = *a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v15);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::UsdPrimDelta> const&>((uint64_t)a1, (uint64_t)(a2 + 4), (uint64_t)&v22);
      v16 = (uint64_t *)a1[1];
      v17 = (uint64_t **)(a1 + 1);
      v18 = (uint64_t **)(a1 + 1);
      if (v16)
      {
        v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 4);
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v16 + 4)))break;
            v16 = *v17;
            v18 = v17;
            if (!*v17)
              goto LABEL_34;
          }
          v16 = v17[1];
        }
        while (v16);
        v18 = v17 + 1;
      }
LABEL_34:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v17, v18, v22);
      v22 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22, 0);
      v20 = (_QWORD *)a2[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)a2[2];
          v15 = *v21 == (_QWORD)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
}

void sub_22FF87084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 5);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, v18[0], leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, a2 + 4);
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_22FF87228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::TfToken::operator=(*(_QWORD **)a1, (_QWORD *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(v4 + 8), (_QWORD *)(a2 + 16));
  if (v4 != a2 + 8)
  {
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 64);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>((_QWORD *)(v4 + 24), *(_QWORD **)(a2 + 48), 0);
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = v4;
        if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7, a3, v4 + 4))break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_22FF873D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8 + 2, v4 + 2);
        v10 = (_QWORD *)*v8;
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(a1, v8);
        v4 = (_QWORD *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_22FF8750C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  __cxa_begin_catch(a1);
  while (1)
  {
    v2 = (_QWORD *)*v1;
    v3 = v1[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    operator delete(v1);
    v1 = v2;
    if (!v2)
      __cxa_rethrow();
  }
}

void sub_22FF8754C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  a2[1] = v5;
  inserted = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && (v16[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8);
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v13[2] & 0xFFFFFFFFFFFFFFF8));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::TfToken const&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi(a1, v4);
}

void sub_22FF87A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 16;
  result = operator new(0x18uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *result = 0;
  result[1] = 0;
  v7 = *a2;
  result[2] = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    v7 = result[2];
    if ((v9 & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      result[2] = v7;
    }
  }
  *(_BYTE *)(a3 + 16) = 1;
  result[1] = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void realityio::UsdStageDelta::~UsdStageDelta(realityio::UsdStageDelta *this)
{
  *(_QWORD *)this = &off_24FDE8388;
  *((_QWORD *)this + 5) = &off_24FDF4548;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this + 48);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 1);
}

{
  realityio::UsdStageDelta::~UsdStageDelta(this);
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::tokens::TextureBuilderTokens_StaticTokenType::~TextureBuilderTokens_StaticTokenType(realityio::tokens::TextureBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  void **v91;

  v91 = (void **)((char *)this + 240);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v91);
  v2 = *((_QWORD *)this + 29);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 27);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 26);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 25);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 24);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 23);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 22);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 21);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 20);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 19);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 18);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 17);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 16);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 15);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 14);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 13);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 12);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 11);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 10);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 9);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 8);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 7);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 6);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 5);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 4);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 3);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 2);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 1);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v89 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
}

realityio::tokens::TextureBuilderTokens_StaticTokenType *realityio::tokens::TextureBuilderTokens_StaticTokenType::TextureBuilderTokens_StaticTokenType(realityio::tokens::TextureBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v103 = (uint64_t *)(MEMORY[0x2348B2758](this, "Shader", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 168, "in", 0);
  MEMORY[0x2348B2758]((char *)this + 176, "color3", 0);
  MEMORY[0x2348B2758]((char *)this + 184, "color4", 0);
  MEMORY[0x2348B2758]((char *)this + 192, "float", 0);
  MEMORY[0x2348B2758]((char *)this + 200, "vector2", 0);
  MEMORY[0x2348B2758]((char *)this + 208, "vector3", 0);
  MEMORY[0x2348B2758]((char *)this + 216, "vector4", 0);
  MEMORY[0x2348B2758]((char *)this + 224, "asset", 0);
  MEMORY[0x2348B2758]((char *)this + 232, "raw", 0);
  v2 = *(_QWORD *)this;
  v104 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v103;
  v105 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v106 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v107 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v108 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v109 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v110 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v111 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v112 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v113 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v114 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v115 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v116 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v117 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v118 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v119 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v120 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v121 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v122 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v123 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v124 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v125 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v126 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v127 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v128 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v129 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v130 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v131 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v132 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v133 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  v92 = operator new(0xF0uLL);
  v93 = 0;
  *((_QWORD *)this + 30) = v92;
  *((_QWORD *)this + 31) = v92;
  *((_QWORD *)this + 32) = v92 + 30;
  do
  {
    v94 = *(&v104 + v93);
    *v92 = v94;
    if ((v94 & 7) != 0)
    {
      v95 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 2, v95));
      if ((v96 & 1) == 0)
        *v92 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v93;
    ++v92;
  }
  while (v93 != 30);
  v97 = &v134;
  *((_QWORD *)this + 31) = v92;
  do
  {
    v99 = *--v97;
    v98 = v99;
    if ((v99 & 7) != 0)
    {
      v100 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
  }
  while (v97 != &v104);
  return this;
}

void sub_22FF889D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,void **a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a31);
  v73 = (char *)&a63;
  while (1)
  {
    v75 = *((_QWORD *)v73 - 1);
    v73 -= 8;
    v74 = v75;
    if ((v75 & 7) != 0)
    {
      v76 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
    if (v73 == &a33)
    {
      if ((*v65 & 7) != 0)
      {
        v78 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v64 & 7) != 0)
      {
        v80 = (unsigned int *)(*v64 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*v72 & 7) != 0)
      {
        v82 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*v71 & 7) != 0)
      {
        v84 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*v70 & 7) != 0)
      {
        v86 = (unsigned int *)(*v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v69 & 7) != 0)
      {
        v88 = (unsigned int *)(*v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v68 & 7) != 0)
      {
        v90 = (unsigned int *)(*v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v67 & 7) != 0)
      {
        v92 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*v66 & 7) != 0)
      {
        v94 = (unsigned int *)(*v66 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a11 & 7) != 0)
      {
        v96 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a12 & 7) != 0)
      {
        v98 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*a13 & 7) != 0)
      {
        v100 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*a14 & 7) != 0)
      {
        v102 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a15 & 7) != 0)
      {
        v104 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a16 & 7) != 0)
      {
        v106 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a17 & 7) != 0)
      {
        v108 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a18 & 7) != 0)
      {
        v110 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a19 & 7) != 0)
      {
        v112 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a20 & 7) != 0)
      {
        v114 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a21 & 7) != 0)
      {
        v116 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a22 & 7) != 0)
      {
        v118 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a23 & 7) != 0)
      {
        v120 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a24 & 7) != 0)
      {
        v122 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a25 & 7) != 0)
      {
        v124 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a26 & 7) != 0)
      {
        v126 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a27 & 7) != 0)
      {
        v128 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a28 & 7) != 0)
      {
        v130 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a29 & 7) != 0)
      {
        v132 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a30 & 7) != 0)
      {
        v134 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*v63 & 7) != 0)
      {
        v136 = (unsigned int *)(*v63 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_22FF88E6C()
{
  JUMPOUT(0x22FF88B74);
}

void sub_22FF88E74()
{
  JUMPOUT(0x22FF88B98);
}

void sub_22FF88E7C()
{
  JUMPOUT(0x22FF88BBCLL);
}

void sub_22FF88E84()
{
  JUMPOUT(0x22FF88BE0);
}

void sub_22FF88E8C()
{
  JUMPOUT(0x22FF88C04);
}

void sub_22FF88E94()
{
  JUMPOUT(0x22FF88C28);
}

void sub_22FF88E9C()
{
  JUMPOUT(0x22FF88C4CLL);
}

void sub_22FF88EA4()
{
  JUMPOUT(0x22FF88C70);
}

void sub_22FF88EAC()
{
  JUMPOUT(0x22FF88C94);
}

void sub_22FF88EB4()
{
  JUMPOUT(0x22FF88CB8);
}

void sub_22FF88EBC()
{
  JUMPOUT(0x22FF88CDCLL);
}

void sub_22FF88EC4()
{
  JUMPOUT(0x22FF88D00);
}

void sub_22FF88ECC()
{
  JUMPOUT(0x22FF88D24);
}

void sub_22FF88ED4()
{
  JUMPOUT(0x22FF88D48);
}

void sub_22FF88EDC()
{
  JUMPOUT(0x22FF88D6CLL);
}

void sub_22FF88EE4()
{
  JUMPOUT(0x22FF88D90);
}

void sub_22FF88EEC()
{
  JUMPOUT(0x22FF88DB4);
}

void sub_22FF88EF4()
{
  JUMPOUT(0x22FF88DD8);
}

void sub_22FF88EFC()
{
  JUMPOUT(0x22FF88DFCLL);
}

void sub_22FF88F04()
{
  JUMPOUT(0x22FF88E20);
}

void sub_22FF88F0C()
{
  JUMPOUT(0x22FF88E44);
}

void realityio::generateTextureDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *Data;
  _QWORD *v11;
  _QWORD *v12;
  void **v13[3];
  _QWORD *v14[3];
  __int128 v15;
  _QWORD *v16[3];
  _QWORD *v17[3];
  __int128 v18;
  _QWORD *v19[3];
  uint64_t v20;
  uint64_t v21;
  void ***v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54588);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54588))
  {
    v12 = a1;
    v7 = operator new();
    v8 = operator new();
    memset(v17, 0, sizeof(v17));
    v9 = (_BYTE *)operator new();
    Data = (uint64_t *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!Data)
      Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    memset(v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, Data, v14, v13);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v15, (uint64_t)v9);
    v23 = v15;
    v15 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v16, &v23, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v17, v16);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v18, v8);
    v24 = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v19, &v24, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v19);
    v11 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v20, v7);
    _MergedGlobals_4 = v20;
    unk_255E54580 = v21;
    v20 = 0;
    v21 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v11);
    v22 = (void ***)v19;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v24);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    v22 = (void ***)v16;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v15);
    v22 = v13;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    v13[0] = (void **)v14;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v13);
    v16[0] = v17;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
    __cxa_guard_release(&qword_255E54588);
    a1 = v12;
  }
  v4 = unk_255E54580;
  *a1 = _MergedGlobals_4;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_22FF8918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x2348B4E1C](v24, 0x10A1C40F82F910ELL);
  a19 = (void **)&a22;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  MEMORY[0x2348B4E1C](v23, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v22, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54588);
  _Unwind_Resume(a1);
}

realityio::tokens::TextureBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::TextureBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::TextureBuilderTokens_StaticTokenType::~TextureBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::TextureBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::TextureBuilderTokens_StaticTokenType::TextureBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_22FF893A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40C0C8C49ELL);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityInputName(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  const char *v2;

  v1 = realityio::EntityBuilder::kInputName(a1);
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityOutputName(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  const char *v2;

  v1 = realityio::EntityBuilder::kOutputName(a1);
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

CFStringRef RIOBuilderEntityBuilderCopyEntityOutputIdentifier()
{
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t v1;
  const char *v2;

  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v1 = *((_QWORD *)Data + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

std::mutex *RIOBuilderEntityBuilderGetOutputEntity(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  realityio::EntityBuilder *v6;
  unint64_t *v7;
  unint64_t v8;
  std::mutex *size;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const void **v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string v22[2];
  std::mutex *v23;
  std::__shared_weak_count *v24;
  realityio::EntityBuilder *v25;
  std::__shared_weak_count *v26;
  const void *v27;
  std::__shared_weak_count *v28;

  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v27 = v2;
  v28 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    size = 0;
    if (!v3)
      return size;
    goto LABEL_31;
  }
  if (v6)
  {
    v25 = v6;
    v26 = v3;
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    size = (std::mutex *)*((_QWORD *)v6 + 2);
    v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 3);
    v23 = size;
    v24 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (size)
    {
      v13 = (const void **)realityio::EntityBuilder::kOutputName(v6);
      realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(size, v13, v22);
      if (v22[0].__r_.__value_.__s.__data_[0])
        size = (std::mutex *)v22[0].__r_.__value_.__l.__size_;
      else
        size = 0;
      realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v22);
    }
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    size = 0;
  }
  v3 = v28;
  if (v28)
  {
LABEL_31:
    v19 = (unint64_t *)&v3->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return size;
}

void sub_22FF8961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v7 - 48);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v7 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *New;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((12 * a3) >> 2);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == v6)
    return a1;
  if (!a3)
    goto LABEL_18;
  v8 = *(_QWORD **)(a1 + 32);
  if (v8)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v9 = atomic_load(v8 - 2);
      if (v9 == 1)
      {
        if (v7 < v6)
        {
          v10 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(v10 - 8) < v6)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
            v8 = New;
            if (v7)
            {
              v12 = 0;
              do
              {
                v13 = (char *)New + v12;
                v14 = *(_QWORD *)(v10 + v12);
                *((_DWORD *)v13 + 2) = *(_DWORD *)(v10 + v12 + 8);
                *(_QWORD *)v13 = v14;
                v12 += 12;
              }
              while (12 * v7 != v12);
            }
          }
          v15 = 12 * v7;
          v16 = 12 * a3;
          do
          {
            v17 = (char *)v8 + v15;
            v18 = *a2;
            *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
            *(_QWORD *)v17 = v18;
            a2 = (uint64_t *)((char *)a2 + 12);
            v15 += 12;
            v16 -= 12;
          }
          while (v16);
        }
        v19 = v8;
        goto LABEL_29;
      }
      v8 = *(_QWORD **)(a1 + 32);
    }
    v24 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
    v19 = v24;
    if (v7 >= v6)
      v25 = 0xAAAAAAAAAAAAAAABLL * ((12 * a3) >> 2);
    else
      v25 = v7;
    if (v25)
    {
      v26 = 12 * v25;
      v27 = v24;
      do
      {
        v28 = *v8;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v8 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v8 = (_QWORD *)((char *)v8 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v7 < v6)
    {
      v29 = 12 * v7;
      v30 = 12 * a3;
      do
      {
        v31 = (char *)v24 + v29;
        v32 = *a2;
        *((_DWORD *)v31 + 2) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v31 = v32;
        a2 = (uint64_t *)((char *)a2 + 12);
        v29 += 12;
        v30 -= 12;
      }
      while (v30);
    }
    goto LABEL_29;
  }
  if (v6 >= 0x1555555555555556)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
    return a1;
  }
  v20 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(a1, v6);
  v19 = v20;
  v21 = 0;
  do
  {
    v22 = (char *)v20 + v21;
    v23 = *(uint64_t *)((char *)a2 + v21);
    *((_DWORD *)v22 + 2) = *(_DWORD *)((char *)a2 + v21 + 8);
    *(_QWORD *)v22 = v23;
    v21 += 12;
  }
  while (12 * a3 != v21);
LABEL_29:
  if (v19 != *(_QWORD **)(a1 + 32))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(_QWORD *)(a1 + 32) = v19;
  }
  *(_QWORD *)a1 = v6;
  return a1;
}

void sub_22FF89878(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *New;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
  v6 = 4 * a3;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == (4 * a3) >> 2)
    return a1;
  if (!a3)
    goto LABEL_18;
  v8 = v6 >> 2;
  v9 = *(unint64_t **)(a1 + 32);
  if (v9)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v10 = atomic_load(v9 - 2);
      if (v10 == 1)
      {
        if (v7 < v8)
        {
          v11 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(v11 - 8) < v8)
          {
            New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
            v9 = New;
            if (v7)
            {
              v13 = 0;
              do
              {
                *(_DWORD *)((char *)New + v13) = *(_DWORD *)(v11 + v13);
                v13 += 4;
              }
              while (4 * v7 != v13);
            }
          }
          v14 = 4 * v7;
          v15 = 4 * a3;
          do
          {
            v16 = *a2++;
            *(_DWORD *)((char *)v9 + v14) = v16;
            v14 += 4;
            v15 -= 4;
          }
          while (v15);
        }
        v17 = v9;
        goto LABEL_29;
      }
      v9 = *(unint64_t **)(a1 + 32);
    }
    v20 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
    v17 = v20;
    if (v7 >= v8)
      v21 = v8;
    else
      v21 = v7;
    if (v21)
    {
      v22 = 4 * v21;
      v23 = v20;
      do
      {
        v24 = *(_DWORD *)v9;
        v9 = (unint64_t *)((char *)v9 + 4);
        *(_DWORD *)v23 = v24;
        v23 = (unint64_t *)((char *)v23 + 4);
        v22 -= 4;
      }
      while (v22);
    }
    if (v7 < v8)
    {
      v25 = 4 * v7;
      v26 = 4 * a3;
      do
      {
        v27 = *a2++;
        *(_DWORD *)((char *)v20 + v25) = v27;
        v25 += 4;
        v26 -= 4;
      }
      while (v26);
    }
    goto LABEL_29;
  }
  if (v6 / v8 != 4)
  {
LABEL_18:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear((_QWORD *)a1);
    return a1;
  }
  v18 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v8);
  v17 = v18;
  v19 = 0;
  do
  {
    *(_DWORD *)((char *)v18 + v19 * 4) = a2[v19];
    ++v19;
  }
  while (a3 != v19);
LABEL_29:
  if (v17 != *(unint64_t **)(a1 + 32))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(_QWORD *)(a1 + 32) = v17;
  }
  *(_QWORD *)a1 = v8;
  return a1;
}

void sub_22FF89A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v1);
  _Unwind_Resume(a1);
}

unsigned int **RIOImportSessionRunSampleScene(unsigned int **result, realityio::ImportSession *a2)
{
  if (result)
    return realityio::updateStageOnRepeat((realityio *)(result + 2), a2);
  return result;
}

unsigned int **realityio::updateStageOnRepeat(realityio *this, realityio::ImportSession *a2)
{
  unsigned int **result;
  uint64_t v7;
  uint64_t **v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _BOOL4 v13;
  uint64_t **v14;
  const void **v15;
  char *v16;
  uint64_t *v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::UsdStage *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::UsdStage *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t **v65;
  __int128 v66;
  pxrInternal__aapl__pxrReserved__::UsdStage *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t *Copy;
  std::string::size_type v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  _OWORD *v116;
  float v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  double v122;
  double *v123;
  uint64_t **v124;
  uint64_t **v125;
  double v126;
  void *v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  _QWORD *v150;
  _OWORD *v151;
  float64x2_t v152;
  double v153;
  float64_t v154;
  double v155;
  int v157;
  dispatch_time_t v158;
  NSObject *v159;
  id v160;
  uint64_t **v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  uint64_t *v186;
  uint64_t **v187;
  int v188;
  double v189;
  double v190;
  unint64_t *v191;
  unint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  double v195;
  double *v196;
  uint64_t **v197;
  uint64_t **v198;
  double v199;
  void *v200;
  uint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  uint64_t v221;
  NSObject *v222;
  double v223;
  dispatch_time_t v224;
  NSObject *v225;
  __int128 *v226;
  __int128 *v227;
  uint64_t v228;
  NSObject *v229;
  double v230;
  dispatch_time_t v231;
  NSObject *v232;
  __int128 *v233;
  __int128 *v234;
  dispatch_time_t v235;
  NSObject *v236;
  id v237;
  float64x2_t v238;
  uint64_t **v239;
  uint64_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _QWORD v243[5];
  _QWORD v244[4];
  _QWORD v245[4];
  _QWORD v246[4];
  _QWORD v247[4];
  _QWORD block[4];
  unsigned int *v249[2];
  int v250;
  int v251;
  float64_t v252;
  std::string v253;
  __int128 v254;
  _BYTE v255[8];
  uint64_t v256;
  __int128 v257;
  int v258;
  int v259;
  unint64_t v260;
  char *v261;
  uint64_t **v262;
  char v263[8];
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  std::string __p;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  std::string v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  __int128 v294;
  unint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  void *v299;
  char *v300;
  _BYTE v301[8];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t **v305;
  uint64_t *v306;
  uint64_t v307;
  unsigned int *v308;
  float v309[2];
  uint64_t v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314[3];
  int v315;
  uint64_t v316[3];
  int v317;
  uint64_t v318[3];
  int v319;
  uint64_t v320[3];
  int v321;
  uint64_t v322[3];
  int v323;
  uint64_t v324[3];
  int v325;
  uint64_t v326[3];
  int v327;
  uint64_t v328[3];
  int v329;
  uint64_t v330[3];
  int v331;
  uint64_t v332[3];
  int v333;
  uint64_t v334[3];
  int v335;
  _QWORD v336[3];
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341[3];
  int v342;
  uint64_t v343[3];
  int v344;
  uint64_t v345[3];
  int v346;
  uint64_t v347[3];
  int v348;
  uint64_t v349[3];
  int v350;
  uint64_t v351[3];
  int v352;
  uint64_t v353[3];
  int v354;
  uint64_t v355[3];
  int v356;
  uint64_t v357[3];
  int v358;
  uint64_t v359[3];
  int v360;
  uint64_t v361[3];
  int v362;
  _QWORD v363[3];
  uint64_t v364;
  _UNKNOWN **v365;
  int v366;
  int v367;
  unint64_t v368;
  int v369;
  uint64_t v370[3];
  int v371;
  uint64_t v372[3];
  int v373;
  uint64_t v374[3];
  int v375;
  uint64_t v376[3];
  int v377;
  uint64_t v378[3];
  int v379;
  uint64_t v380[3];
  int v381;
  uint64_t v382[3];
  int v383;
  uint64_t v384[3];
  int v385;
  uint64_t v386[3];
  int v387;
  uint64_t v388[3];
  int v389;
  uint64_t v390[3];
  int v391;
  _QWORD v392[3];
  __int128 v393;
  __int128 v394;
  unint64_t *v395;
  uint64_t v396[3];
  int v397;
  uint64_t v398[3];
  int v399;
  uint64_t v400[3];
  int v401;
  uint64_t v402[3];
  int v403;
  uint64_t v404[3];
  int v405;
  uint64_t v406[3];
  int v407;
  uint64_t v408[3];
  int v409;
  uint64_t v410[3];
  int v411;
  uint64_t v412[3];
  int v413;
  uint64_t v414[3];
  int v415;
  uint64_t v416[3];
  int v417;
  uint64_t v418[4];
  uint64_t v419;
  char *v420;
  uint64_t v421;
  __int128 v422;
  _OWORD v423[2];
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429[3];
  int v430;
  uint64_t v431[3];
  int v432;
  uint64_t v433[3];
  int v434;
  uint64_t v435[3];
  int v436;
  uint64_t v437[3];
  int v438;
  uint64_t v439[3];
  int v440;
  uint64_t v441[3];
  int v442;
  uint64_t v443[3];
  int v444;
  uint64_t v445[3];
  int v446;
  uint64_t v447[3];
  int v448;
  uint64_t v449[3];
  int v450;
  _QWORD v451[3];
  std::string v452;
  unint64_t v453;
  float64x2_t v454;
  double v455;
  int v456;
  uint64_t v457[3];
  int v458;
  uint64_t v459[3];
  int v460;
  uint64_t v461[3];
  int v462;
  uint64_t v463;
  int v464;
  uint64_t v465[3];
  int v466;
  uint64_t v467[3];
  int v468;
  uint64_t v469[3];
  int v470;
  uint64_t v471[3];
  _DWORD v472[2];
  _QWORD v473[3];
  _DWORD v474[2];
  uint64_t v475[3];
  int v476;
  uint64_t v477[3];
  __int128 v478;
  _BYTE v479[56];
  std::string v480;
  unsigned int v481;
  char v482;
  std::string v483[4];
  std::string v484[4];
  std::string v485[4];
  std::string v486[4];
  uint64_t v487;

  result = (unsigned int **)MEMORY[0x24BDAC7A8](this, a2);
  v487 = *MEMORY[0x24BDAC8D0];
  if (!result)
    return result;
  v240 = (uint64_t)result;
  v308 = *(unsigned int **)(*((_QWORD *)result[2] + 1) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v308);
  std::string::basic_string[abi:ne180100]<0>(&v257, "/Cone");
  LODWORD(v452.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v452.__r_.__value_.__l.__size_, "Cone");
  LODWORD(v454.f64[0]) = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(&v454.f64[1], "Cylinder");
  v456 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v457, "Capsule");
  v458 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v459, "Cube");
  v460 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v461, "Preliminary_Text");
  v462 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(&v463, "Sphere");
  v464 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v465, "Cone");
  v466 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v467, "Cylinder");
  v468 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v469, "Capsule");
  v470 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v471, "Cube");
  v472[0] = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v473, "Preliminary_Text");
  v474[0] = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v475, "Sphere");
  v476 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v477, "Cone");
  std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&v299, (float *)&v452, 13);
  v302 = xmmword_2302053E0;
  v303 = xmmword_2302053F0;
  v304 = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>((std::string *)&v478, &v257, (uint64_t)&v299);
  std::string::basic_string[abi:ne180100]<0>(&v254, "/Sphere");
  LODWORD(v424) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v425, "Sphere");
  v428 = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(v429, "Cone");
  v430 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v431, "Cylinder");
  v432 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v433, "Capsule");
  v434 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v435, "Cube");
  v436 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(v437, "Preliminary_Text");
  v438 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v439, "Sphere");
  v440 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v441, "Cone");
  v442 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v443, "Cylinder");
  v444 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v445, "Capsule");
  v446 = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v447, "Cube");
  v448 = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v449, "Preliminary_Text");
  v450 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v451, "Sphere");
  std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&v294, (float *)&v424, 13);
  v296 = xmmword_230205410;
  v297 = xmmword_230205420;
  v298 = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(&v480, &v254, (uint64_t)&v294);
  std::string::basic_string[abi:ne180100]<0>(&v292, "/Text");
  LODWORD(v393) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v393 + 1, "Preliminary_Text");
  LODWORD(v395) = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(v396, "Sphere");
  v397 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v398, "Cone");
  v399 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v400, "Cylinder");
  v401 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v402, "Capsule");
  v403 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(v404, "Cube");
  v405 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v406, "Preliminary_Text");
  v407 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v408, "Sphere");
  v409 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v410, "Cone");
  v411 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v412, "Cylinder");
  v413 = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v414, "Capsule");
  v415 = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v416, "Cube");
  v417 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v418, "Preliminary_Text");
  std::map<float,std::string>::map[abi:ne180100](&v419, (float *)&v393, 13);
  v422 = xmmword_230205430;
  __asm { FMOV            V0.2D, #1.0 }
  v423[0] = _Q0;
  v423[1] = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v483, &v292, (uint64_t)&v419);
  std::string::basic_string[abi:ne180100]<0>(&v290, "/Cube");
  LODWORD(v364) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v365, "Cube");
  v369 = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(v370, "Preliminary_Text");
  v371 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v372, "Sphere");
  v373 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v374, "Cone");
  v375 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v376, "Cylinder");
  v377 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(v378, "Capsule");
  v379 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v380, "Cube");
  v381 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v382, "Preliminary_Text");
  v383 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v384, "Sphere");
  v385 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v386, "Cone");
  v387 = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v388, "Cylinder");
  v389 = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v390, "Capsule");
  v391 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v392, "Cube");
  std::map<float,std::string>::map[abi:ne180100](&v284, (float *)&v364, 13);
  v287 = xmmword_230205440;
  v288 = xmmword_230205450;
  v289 = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v484, &v290, (uint64_t)&v284);
  std::string::basic_string[abi:ne180100]<0>(&v283, "/Capsule");
  LODWORD(v337) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v337 + 1, "Capsule");
  v340 = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(v341, "Cube");
  v342 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v343, "Preliminary_Text");
  v344 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v345, "Sphere");
  v346 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v347, "Cone");
  v348 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(v349, "Cylinder");
  v350 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v351, "Capsule");
  v352 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v353, "Cube");
  v354 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v355, "Preliminary_Text");
  v356 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v357, "Sphere");
  v358 = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v359, "Cone");
  v360 = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v361, "Cylinder");
  v362 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v363, "Capsule");
  std::map<float,std::string>::map[abi:ne180100](&v277, (float *)&v337, 13);
  v280 = xmmword_230205460;
  v281 = xmmword_230205470;
  v282 = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v485, (__int128 *)&v283, (uint64_t)&v277);
  std::string::basic_string[abi:ne180100]<0>(&__p, "/Cylinder");
  v309[0] = 0.0;
  std::string::basic_string[abi:ne180100]<0>(&v310, "Cylinder");
  v313 = 1056964608;
  std::string::basic_string[abi:ne180100]<0>(v314, "Capsule");
  v315 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v316, "Cube");
  v317 = 1069547520;
  std::string::basic_string[abi:ne180100]<0>(v318, "Preliminary_Text");
  v319 = 0x40000000;
  std::string::basic_string[abi:ne180100]<0>(v320, "Sphere");
  v321 = 1075838976;
  std::string::basic_string[abi:ne180100]<0>(v322, "Cone");
  v323 = 1077936128;
  std::string::basic_string[abi:ne180100]<0>(v324, "Cylinder");
  v325 = 1080033280;
  std::string::basic_string[abi:ne180100]<0>(v326, "Capsule");
  v327 = 1082130432;
  std::string::basic_string[abi:ne180100]<0>(v328, "Cube");
  v329 = 1083179008;
  std::string::basic_string[abi:ne180100]<0>(v330, "Preliminary_Text");
  v331 = 1084227584;
  std::string::basic_string[abi:ne180100]<0>(v332, "Sphere");
  v333 = 1085276160;
  std::string::basic_string[abi:ne180100]<0>(v334, "Cone");
  v335 = 1086324736;
  std::string::basic_string[abi:ne180100]<0>(v336, "Cylinder");
  std::map<float,std::string>::map[abi:ne180100](&v270, v309, 13);
  v273 = xmmword_230205480;
  v274 = xmmword_230205490;
  v275 = xmmword_230205400;
  std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::pair[abi:ne180100]<true,0>(v486, (__int128 *)&__p, (uint64_t)&v270);
  v7 = 0;
  v8 = &v306;
  v307 = 0;
  v306 = 0;
  v305 = &v306;
  do
  {
    v9 = &v479[96 * v7 - 16];
    v10 = v306;
    if (v305 == &v306)
    {
      v12 = &v306;
    }
    else
    {
      v11 = &v306;
      if (v306)
      {
        do
        {
          v12 = (uint64_t **)v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v12 = (uint64_t **)v11[2];
          _ZF = *v12 == (uint64_t *)v11;
          v11 = v12;
        }
        while (_ZF);
      }
      v13 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v307, (const void **)v12 + 4, (const void **)&v479[96 * v7 - 16]);
      v10 = v306;
      if (!v13)
      {
        v14 = &v306;
        if (v306)
        {
          v8 = &v306;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v10;
              v15 = (const void **)(v10 + 4);
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v307, (const void **)&v479[96 * v7 - 16], (const void **)v10 + 4))break;
              v10 = *v14;
              v8 = v14;
              if (!*v14)
                goto LABEL_21;
            }
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v307, v15, (const void **)&v479[96 * v7 - 16]))break;
            v8 = v14 + 1;
            v10 = v14[1];
            if (!v10)
              goto LABEL_21;
          }
LABEL_20:
          if (*v8)
            goto LABEL_27;
          goto LABEL_21;
        }
        goto LABEL_21;
      }
    }
    v14 = &v306;
    if (v10)
    {
      v8 = v12 + 1;
      v14 = v12;
      goto LABEL_20;
    }
LABEL_21:
    v16 = (char *)operator new(0x80uLL);
    v17 = (uint64_t *)v16;
    v261 = v16;
    v262 = &v306;
    v263[0] = 0;
    if ((char)v9[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v16 + 32), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      *((_OWORD *)v16 + 2) = *(_OWORD *)v9;
      *((_QWORD *)v16 + 6) = *((_QWORD *)v9 + 2);
    }
    std::map<float,std::string>::map[abi:ne180100](v17 + 7, &v479[96 * v7 + 8]);
    v18 = &v479[96 * v7 - 16];
    v19 = v18[4];
    *((_OWORD *)v17 + 5) = v18[3];
    *((_OWORD *)v17 + 6) = v19;
    *((_OWORD *)v17 + 7) = v18[5];
    v263[0] = 1;
    *v17 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v14;
    *v8 = v17;
    if (*v305)
    {
      v305 = (uint64_t **)*v305;
      v17 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v306, v17);
    ++v307;
    v261 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,void *>>>>::reset[abi:ne180100]((uint64_t)&v261);
LABEL_27:
    ++v7;
    v8 = &v306;
  }
  while (v7 != 6);
  v20 = 576;
  do
  {
    std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(char **)&v474[v20 / 4]);
    if (SHIBYTE(v473[v20 / 8 + 1]) < 0)
      operator delete(*(void **)&v472[v20 / 4]);
    v20 -= 96;
  }
  while (v20);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(v271);
  v21 = 104;
  do
  {
    if (SHIBYTE(v309[v21 - 1]) < 0)
      operator delete((&v306)[v21 / 2]);
    v21 -= 8;
  }
  while (v21 * 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(v278);
  v22 = 52;
  do
  {
    if (*((char *)&v337 + v22 * 8 - 1) < 0)
      operator delete((void *)v336[v22]);
    v22 -= 4;
  }
  while (v22 * 8);
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(v285);
  v23 = 52;
  do
  {
    if (*((char *)&v364 + v23 * 8 - 1) < 0)
      operator delete((void *)v363[v23]);
    v23 -= 4;
  }
  while (v23 * 8);
  if (SHIBYTE(v291) < 0)
    operator delete((void *)v290);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(v420);
  v24 = 52;
  do
  {
    if (*((char *)&v393 + v24 * 8 - 1) < 0)
      operator delete((void *)v392[v24]);
    v24 -= 4;
  }
  while (v24 * 8);
  if (SHIBYTE(v293) < 0)
    operator delete((void *)v292);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*((char **)&v294 + 1));
  v25 = 26;
  do
  {
    if (*((char *)&v424 + v25 * 16 - 1) < 0)
      operator delete(*((void **)&v423[v25] + 1));
    v25 -= 2;
  }
  while (v25 * 16);
  if ((v255[7] & 0x80000000) != 0)
    operator delete((void *)v254);
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(v300);
  v26 = 52;
  do
  {
    if (v452.__r_.__value_.__s.__data_[v26 * 8 - 1] < 0)
      operator delete((void *)v451[v26]);
    v26 -= 4;
  }
  while (v26 * 8);
  if (SHIBYTE(v259) < 0)
    operator delete((void *)v257);
  v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v308);
  MEMORY[0x2348B274C](&v452, "metersPerUnit");
  *((_QWORD *)&v478 + 1) = &unk_24FDE5B2B;
  *(_QWORD *)&v478 = 0x3FF0000000000000;
  pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v452, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v478);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v478);
  if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v28 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  v30 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v308);
  MEMORY[0x2348B274C](&v452, "upAxis");
  MEMORY[0x2348B274C](&v424, "Y");
  *((_QWORD *)&v478 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                         + 1;
  *(_QWORD *)&v478 = v424;
  if ((v424 & 7) != 0)
  {
    v31 = (unsigned int *)(v424 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 2, v31));
    if ((v32 & 1) == 0)
      *(_QWORD *)&v478 = v31;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(v30, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v452, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v478);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v478);
  if ((v424 & 7) != 0)
  {
    v33 = (unsigned int *)(v424 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v35 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  v269 = v308;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v269);
  std::string::basic_string[abi:ne180100]<0>(&v299, "/someQuad");
  MEMORY[0x2348B26F8](&v267, &v299);
  v294 = xmmword_2302054A0;
  v295 = 0xC049000000000000;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v284, &v267);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v284 + 1, &v268);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v478, (uint64_t *)&v269);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
  v37 = *((_QWORD *)&v478 + 1);
  if (*((_QWORD *)&v478 + 1))
  {
    v38 = (unsigned int *)(*((_QWORD *)&v478 + 1) + 8);
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  v478 = xmmword_2302054DC;
  *(_OWORD *)v479 = *(_OWORD *)algn_2302054EC;
  *(_OWORD *)&v479[16] = xmmword_2302054FC;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)&v452, (uint64_t *)&v478, 4);
  *((_QWORD *)&v393 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v393, (uint64_t)&v452);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v309, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v393);
  if ((v427 & 7) != 0)
  {
    v41 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v426);
  if (v425)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v425);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v393);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v452);
  LODWORD(v364) = 4;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)&v478, (int *)&v364, 1);
  *((_QWORD *)&v393 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy((uint64_t *)&v393, (uint64_t)&v478);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v309, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v393);
  if ((v453 & 7) != 0)
  {
    v43 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v452.__r_.__value_.__r.__words[2]);
  if (v452.__r_.__value_.__l.__size_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v452.__r_.__value_.__l.__size_);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v393);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v478);
  v337 = xmmword_2302054B0;
  pxrInternal__aapl__pxrReserved__::VtArray<int>::VtArray((uint64_t)&v478, (int *)&v337, 4);
  v365 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy(&v364, (uint64_t)&v478);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v309, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v364);
  if ((BYTE8(v394) & 7) != 0)
  {
    v45 = (unsigned int *)(*((_QWORD *)&v394 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v394);
  if (*((_QWORD *)&v393 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v393 + 1));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v364);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v478);
  v337 = xmmword_23020550C;
  v338 = 0x40A0000041200000;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::VtArray((uint64_t)&v478, (uint64_t *)&v337, 2);
  v420 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy(&v419, (uint64_t)&v478);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v309, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v419);
  if ((v368 & 7) != 0)
  {
    v47 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v366);
  if (v365)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v365);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v419);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v478);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v478, &v310, &v311);
  MEMORY[0x2348B274C](&v419, "RE:mesh:v1:reorderVertexCaching");
  *((_QWORD *)&v337 + 1) = &unk_24FDE59C3;
  LOBYTE(v337) = 1;
  pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v478, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v419, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v337);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v337);
  if ((v419 & 7) != 0)
  {
    v49 = (unsigned int *)(v419 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  MEMORY[0x2348B274C](&v419, "RE:mesh:v1:decimationFactor");
  *((_QWORD *)&v337 + 1) = &unk_24FDE5F5B;
  LODWORD(v337) = 1063675494;
  pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v478, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v419, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v337);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v337);
  if ((v419 & 7) != 0)
  {
    v51 = (unsigned int *)(v419 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if ((v479[8] & 7) != 0)
  {
    v53 = (unsigned int *)(*(_QWORD *)&v479[8] & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v479);
  if (*((_QWORD *)&v478 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v478 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v284);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v478, &v310, &v311);
  MEMORY[0x2348B274C](&v452, "xformOp:translate");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v478, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v452);
  if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v55 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  if ((v479[8] & 7) != 0)
  {
    v57 = (unsigned int *)(*(_QWORD *)&v479[8] & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v479);
  if (*((_QWORD *)&v478 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v478 + 1));
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v424) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
  }
  else
  {
    v364 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp();
    if (v482)
    {
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdGeom/xformOp.h";
      v452.__r_.__value_.__l.__size_ = (std::string::size_type)"Set";
      v452.__r_.__value_.__r.__words[2] = 399;
      v453 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const "
                               "[T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v454.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v478);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      if ((v393 & 7) != 0)
      {
        v59 = (unsigned int *)(v393 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
    }
    else
    {
      if (v481 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&v393;
      ((void (*)(std::string *, __int128 *))*(&off_24FDE5C98 + v481))(&v452, &v478);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v478);
    if ((v364 & 7) != 0)
    {
      v61 = (unsigned int *)(v364 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stlxr(v62 - 2, v61));
    }
  }
  if ((v427 & 7) != 0)
  {
    v63 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v426);
  if (v425)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v425);
  MEMORY[0x2348B1AF8](v309);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v267);
  if ((v301[7] & 0x80000000) != 0)
    operator delete(v299);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v269);
  v293 = 0;
  *((_QWORD *)&v292 + 1) = 0;
  *(_QWORD *)&v292 = (char *)&v292 + 8;
  v291 = 0;
  *((_QWORD *)&v290 + 1) = 0;
  *(_QWORD *)&v290 = (char *)&v290 + 8;
  v65 = v305;
  if (v305 != &v306)
  {
    v238 = (float64x2_t)vdupq_n_s64(0x3F66C16C16C16C17uLL);
    while (1)
    {
      if (*((char *)v65 + 55) < 0)
        std::string::__init_copy_ctor_external(&v283, (const std::string::value_type *)v65[4], (std::string::size_type)v65[5]);
      else
        v283 = *(std::string *)(v65 + 4);
      std::map<float,std::string>::map[abi:ne180100]((uint64_t *)&v478, v65 + 7);
      v66 = *((_OWORD *)v65 + 6);
      *(_OWORD *)&v479[8] = *((_OWORD *)v65 + 5);
      *(_OWORD *)&v479[24] = v66;
      *(_OWORD *)&v479[40] = *((_OWORD *)v65 + 7);
      MEMORY[0x2348B26F8](&v265, &v283);
      v67 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v308);
      MEMORY[0x2348B274C](&v452, "Xform");
      pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v67, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v265, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v452);
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v68 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      MEMORY[0x2348B274C](&v452, "size");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v71 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      v452.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<double>();
      MEMORY[0x2348B274C](&v452, "radius");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v74 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      LODWORD(v452.__r_.__value_.__l.__data_) = 1056964608;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      MEMORY[0x2348B274C](&v452, "height");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v77 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      LODWORD(v452.__r_.__value_.__l.__data_) = 1065353216;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      MEMORY[0x2348B274C](&v452, "content");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v80 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      std::string::basic_string[abi:ne180100]<0>(&__p, "Arial Black");
      MEMORY[0x2348B274C](&v452, "font");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v83 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v452, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v452 = __p;
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::VtArray((uint64_t)&v424, (uint64_t)&v452, 1);
      if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v452.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
      MEMORY[0x2348B274C](&v452, "width");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v86 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      LODWORD(v452.__r_.__value_.__l.__data_) = 1065353216;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      MEMORY[0x2348B274C](&v452, "pointSize");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v89 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      LODWORD(v452.__r_.__value_.__l.__data_) = 1060320051;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      MEMORY[0x2348B274C](&v452, "verticalAlignment");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v92 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      MEMORY[0x2348B274C](&v452, "depth");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v95 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      LODWORD(v452.__r_.__value_.__l.__data_) = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
      MEMORY[0x2348B274C](&v452, "xformOp:translate");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v98 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
      MEMORY[0x2348B274C](&v452, "xformOpOrder");
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v101 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      MEMORY[0x2348B274C](&v452, "xformOp:translate");
      v395 = 0;
      v394 = 0u;
      v393 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(&v393);
      v103 = v393;
      if ((_QWORD)v393 != 1)
        break;
LABEL_238:
      if ((v452.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v114 = (unsigned int *)(v452.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      v452.__r_.__value_.__l.__size_ = (std::string::size_type)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy((uint64_t *)&v452, (uint64_t)&v393);
      v239 = v65;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v452);
      v116 = (_OWORD *)v478;
      if ((__int128 *)v478 != (__int128 *)((char *)&v478 + 8))
      {
        while (1)
        {
          v117 = *((float *)v116 + 8);
          if (*((char *)v116 + 63) < 0)
            std::string::__init_copy_ctor_external(&v253, *((const std::string::value_type **)v116 + 5), *((_QWORD *)v116 + 6));
          else
            v253 = *(std::string *)((char *)v116 + 40);
          MEMORY[0x2348B2764](&v252, &v253);
          LODWORD(v452.__r_.__value_.__l.__data_) = v364;
          v452.__r_.__value_.__l.__size_ = (std::string::size_type)v365;
          if (v365)
          {
            v118 = (unint64_t *)(v365 + 6);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v452.__r_.__value_.__r.__words[2], &v366);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v452.__r_.__value_.__r.__words[2] + 1, &v367);
          v453 = v368;
          if ((v368 & 7) != 0)
          {
            v120 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 2, v120));
            if ((v121 & 1) == 0)
              v453 &= 0xFFFFFFFFFFFFFFF8;
          }
          v122 = v117;
          v454.f64[0] = v252;
          v123 = (double *)*((_QWORD *)&v292 + 1);
          v124 = (uint64_t **)&v292 + 1;
          while (1)
          {
            v125 = v124;
            if (!v123)
              break;
            while (1)
            {
              v124 = (uint64_t **)v123;
              v126 = v123[4];
              if (v126 > v122)
                break;
              if (v126 >= v122)
              {
                v127 = v123;
                goto LABEL_264;
              }
              v123 = (double *)*((_QWORD *)v123 + 1);
              if (!v123)
              {
                v125 = v124 + 1;
                goto LABEL_261;
              }
            }
            v123 = *(double **)v123;
          }
LABEL_261:
          v127 = operator new(0x40uLL);
          *((double *)v127 + 4) = v122;
          *((_QWORD *)v127 + 6) = 0;
          *((_QWORD *)v127 + 7) = 0;
          *((_QWORD *)v127 + 5) = 0;
          *(_QWORD *)v127 = 0;
          *((_QWORD *)v127 + 1) = 0;
          *((_QWORD *)v127 + 2) = v124;
          *v125 = (uint64_t *)v127;
          v128 = (uint64_t *)v127;
          if (*(_QWORD *)v292)
          {
            *(_QWORD *)&v292 = *(_QWORD *)v292;
            v128 = *v125;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v292 + 1), v128);
          ++v293;
LABEL_264:
          v129 = *((_QWORD *)v127 + 6);
          v130 = *((_QWORD *)v127 + 7);
          if (v129 >= v130)
            break;
          v131 = std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](v129, (uint64_t)&v452)+ 40;
          *((_QWORD *)v127 + 6) = v131;
LABEL_282:
          *((_QWORD *)v127 + 6) = v131;
          if ((LOBYTE(v454.f64[0]) & 7) != 0)
          {
            v146 = (unsigned int *)(*(_QWORD *)&v454.f64[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v147 = __ldxr(v146);
            while (__stlxr(v147 - 2, v146));
          }
          if ((v453 & 7) != 0)
          {
            v148 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFFFF8);
            do
              v149 = __ldxr(v148);
            while (__stlxr(v149 - 2, v148));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v452.__r_.__value_.__r.__words[2]);
          if (v452.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v452.__r_.__value_.__l.__size_);
          if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v253.__r_.__value_.__l.__data_);
          v150 = (_QWORD *)*((_QWORD *)v116 + 1);
          if (v150)
          {
            do
            {
              v151 = v150;
              v150 = (_QWORD *)*v150;
            }
            while (v150);
          }
          else
          {
            do
            {
              v151 = (_OWORD *)*((_QWORD *)v116 + 2);
              _ZF = *(_QWORD *)v151 == (_QWORD)v116;
              v116 = v151;
            }
            while (!_ZF);
          }
          v116 = v151;
          if (v151 == (__int128 *)((char *)&v478 + 8))
            goto LABEL_302;
        }
        v132 = *((_QWORD *)v127 + 5);
        v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v129 - v132) >> 3);
        v134 = v133 + 1;
        if (v133 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v135 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v130 - v132) >> 3);
        if (2 * v135 > v134)
          v134 = 2 * v135;
        if (v135 >= 0x333333333333333)
          v136 = 0x666666666666666;
        else
          v136 = v134;
        if (v136)
          v136 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>(v136);
        else
          v137 = 0;
        v138 = v136 + 40 * v133;
        v139 = v136 + 40 * v137;
        std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](v138, (uint64_t)&v452);
        v131 = v138 + 40;
        v140 = (char *)*((_QWORD *)v127 + 5);
        v141 = (char *)*((_QWORD *)v127 + 6);
        if (v141 == v140)
        {
          *((_QWORD *)v127 + 5) = v138;
          *((_QWORD *)v127 + 6) = v131;
          *((_QWORD *)v127 + 7) = v139;
        }
        else
        {
          v142 = 0;
          do
          {
            v143 = v138 + v142;
            v144 = &v141[v142];
            *(_DWORD *)(v143 - 40) = *(_DWORD *)&v141[v142 - 40];
            *(_QWORD *)(v143 - 32) = *(_QWORD *)&v141[v142 - 32];
            *(_QWORD *)&v141[v142 - 32] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v138 + v142 - 24), &v141[v142 - 24]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v138 + v142 - 20), &v141[v142 - 20]);
            *(_QWORD *)(v143 - 16) = *(_QWORD *)&v141[v142 - 16];
            *((_QWORD *)v144 - 2) = 0;
            *(_QWORD *)(v143 - 8) = *(_QWORD *)&v141[v142 - 8];
            *((_QWORD *)v144 - 1) = 0;
            v142 -= 40;
          }
          while (&v141[v142] != v140);
          v141 = (char *)*((_QWORD *)v127 + 5);
          v145 = (char *)*((_QWORD *)v127 + 6);
          *((_QWORD *)v127 + 5) = v138 + v142;
          *((_QWORD *)v127 + 6) = v131;
          *((_QWORD *)v127 + 7) = v139;
          if (v145 != v141)
          {
            do
            {
              v145 -= 40;
              std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](v145);
            }
            while (v145 != v141);
            if (!v141)
              goto LABEL_282;
LABEL_281:
            operator delete(v141);
            goto LABEL_282;
          }
        }
        if (!v141)
          goto LABEL_282;
        goto LABEL_281;
      }
LABEL_302:
      v152.f64[0] = *(float64_t *)&v479[8];
      if (*(double *)&v479[32] != *(double *)&v479[8])
      {
        v153 = *(double *)&v479[48];
        v154 = *(double *)&v479[16];
        v155 = *(double *)&v479[24];
LABEL_380:
        v188 = 0;
        v152.f64[1] = v154;
        v241 = vmulq_f64(vsubq_f64(*(float64x2_t *)&v479[32], v152), v238);
        v189 = (v153 - v155) * 0.00277777778;
        while (2)
        {
          v242 = *(float64x2_t *)&v479[8];
          v190 = *(double *)&v479[24];
          LODWORD(v452.__r_.__value_.__l.__data_) = v257;
          v452.__r_.__value_.__l.__size_ = *((_QWORD *)&v257 + 1);
          if (*((_QWORD *)&v257 + 1))
          {
            v191 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 48);
            do
              v192 = __ldxr(v191);
            while (__stxr(v192 + 1, v191));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v452.__r_.__value_.__r.__words[2], &v258);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v452.__r_.__value_.__r.__words[2] + 1, &v259);
          v453 = v260;
          if ((v260 & 7) != 0)
          {
            v193 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
            do
              v194 = __ldxr(v193);
            while (__stxr(v194 + 2, v193));
            if ((v194 & 1) == 0)
              v453 &= 0xFFFFFFFFFFFFFFF8;
          }
          v195 = (double)v188 * 0.0166666667;
          v454 = vaddq_f64(v242, vmulq_n_f64(v241, (double)v188));
          v455 = v189 * (double)v188 + v190;
          v196 = (double *)*((_QWORD *)&v290 + 1);
          v197 = (uint64_t **)&v290 + 1;
          while (1)
          {
            v198 = v197;
            if (!v196)
              break;
            while (1)
            {
              v197 = (uint64_t **)v196;
              v199 = v196[4];
              if (v199 > v195)
                break;
              if (v199 >= v195)
              {
                v200 = v196;
                goto LABEL_400;
              }
              v196 = (double *)*((_QWORD *)v196 + 1);
              if (!v196)
              {
                v198 = v197 + 1;
                goto LABEL_397;
              }
            }
            v196 = *(double **)v196;
          }
LABEL_397:
          v200 = operator new(0x40uLL);
          *((double *)v200 + 4) = v195;
          *((_QWORD *)v200 + 6) = 0;
          *((_QWORD *)v200 + 7) = 0;
          *((_QWORD *)v200 + 5) = 0;
          *(_QWORD *)v200 = 0;
          *((_QWORD *)v200 + 1) = 0;
          *((_QWORD *)v200 + 2) = v197;
          *v198 = (uint64_t *)v200;
          v201 = (uint64_t *)v200;
          if (*(_QWORD *)v290)
          {
            *(_QWORD *)&v290 = *(_QWORD *)v290;
            v201 = *v198;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v290 + 1), v201);
          ++v291;
LABEL_400:
          v202 = *((_QWORD *)v200 + 6);
          v203 = *((_QWORD *)v200 + 7);
          if (v202 < v203)
          {
            v204 = std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100](v202, (uint64_t)&v452)+ 56;
            *((_QWORD *)v200 + 6) = v204;
            goto LABEL_418;
          }
          v205 = *((_QWORD *)v200 + 5);
          v206 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v202 - v205) >> 3);
          v207 = v206 + 1;
          if ((unint64_t)(v206 + 1) > 0x492492492492492)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v208 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v203 - v205) >> 3);
          if (2 * v208 > v207)
            v207 = 2 * v208;
          if (v208 >= 0x249249249249249)
            v209 = 0x492492492492492;
          else
            v209 = v207;
          if (v209)
            v209 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>(v209);
          else
            v210 = 0;
          v211 = v209 + 56 * v206;
          v212 = v209 + 56 * v210;
          std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::pair[abi:ne180100](v211, (uint64_t)&v452);
          v204 = v211 + 56;
          v213 = (char *)*((_QWORD *)v200 + 5);
          v214 = (char *)*((_QWORD *)v200 + 6);
          if (v214 == v213)
          {
            *((_QWORD *)v200 + 5) = v211;
            *((_QWORD *)v200 + 6) = v204;
            *((_QWORD *)v200 + 7) = v212;
          }
          else
          {
            v215 = 0;
            do
            {
              v216 = v211 + v215;
              *(_DWORD *)(v216 - 56) = *(_DWORD *)&v214[v215 - 56];
              *(_QWORD *)(v216 - 48) = *(_QWORD *)&v214[v215 - 48];
              *(_QWORD *)&v214[v215 - 48] = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v211 + v215 - 40), &v214[v215 - 40]);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v211 + v215 - 36), &v214[v215 - 36]);
              *(_QWORD *)(v216 - 32) = *(_QWORD *)&v214[v215 - 32];
              *(_QWORD *)&v214[v215 - 32] = 0;
              v217 = *(_OWORD *)&v214[v215 - 24];
              *(_QWORD *)(v216 - 8) = *(_QWORD *)&v214[v215 - 8];
              *(_OWORD *)(v216 - 24) = v217;
              v215 -= 56;
            }
            while (&v214[v215] != v213);
            v214 = (char *)*((_QWORD *)v200 + 5);
            v218 = *((_QWORD *)v200 + 6);
            *((_QWORD *)v200 + 5) = v211 + v215;
            *((_QWORD *)v200 + 6) = v204;
            *((_QWORD *)v200 + 7) = v212;
            if ((char *)v218 != v214)
            {
              do
              {
                v218 -= 56;
                std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::destroy[abi:ne180100](v218);
              }
              while ((char *)v218 != v214);
              if (v214)
LABEL_417:
                operator delete(v214);
LABEL_418:
              *((_QWORD *)v200 + 6) = v204;
              if ((v453 & 7) != 0)
              {
                v219 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFFFF8);
                do
                  v220 = __ldxr(v219);
                while (__stlxr(v220 - 2, v219));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v452.__r_.__value_.__r.__words[2]);
              if (v452.__r_.__value_.__l.__size_)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v452.__r_.__value_.__l.__size_);
              if (++v188 == 360)
                goto LABEL_308;
              continue;
            }
          }
          break;
        }
        if (v214)
          goto LABEL_417;
        goto LABEL_418;
      }
      v153 = *(double *)&v479[48];
      v154 = *(double *)&v479[16];
      v155 = *(double *)&v479[24];
      _ZF = *(double *)&v479[40] == *(double *)&v479[16] && *(double *)&v479[48] == *(double *)&v479[24];
      if (!_ZF)
        goto LABEL_380;
LABEL_308:
      v157 = rand();
      v158 = dispatch_time(0, (uint64_t)(float)((float)((float)((float)(v157 % 10 + 10) / 10.0) + 6.0) * 1000000000.0));
      v159 = MEMORY[0x24BDAC9B8];
      v160 = MEMORY[0x24BDAC9B8];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3321888768;
      block[2] = ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke;
      block[3] = &__block_descriptor_56_ea8_32c64_ZTSN32pxrInternal__aapl__pxrReserved__8TfRefPtrINS_8UsdStageEEE48c48_ZTSN32pxrInternal__aapl__pxrReserved__7SdfPathE_e5_v8__0l;
      v249[0] = v308;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v249);
      v161 = v239;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v250, &v265);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v251, &v266);
      v249[1] = (unsigned int *)v240;
      dispatch_after(v158, v159, block);

      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v250);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v249);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v393);
      if ((v256 & 7) != 0)
      {
        v162 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v255);
      if (*((_QWORD *)&v254 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v254 + 1));
      if ((v260 & 7) != 0)
      {
        v164 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFFFF8);
        do
          v165 = __ldxr(v164);
        while (__stlxr(v165 - 2, v164));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v258);
      if (*((_QWORD *)&v257 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v257 + 1));
      if ((v264 & 7) != 0)
      {
        v166 = (unsigned int *)(v264 & 0xFFFFFFFFFFFFFFF8);
        do
          v167 = __ldxr(v166);
        while (__stlxr(v167 - 2, v166));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v263);
      if (v262)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v262);
      if ((v273 & 7) != 0)
      {
        v168 = (unsigned int *)(v273 & 0xFFFFFFFFFFFFFFF8);
        do
          v169 = __ldxr(v168);
        while (__stlxr(v169 - 2, v168));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v272);
      if (v271)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v271);
      if ((v280 & 7) != 0)
      {
        v170 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFF8);
        do
          v171 = __ldxr(v170);
        while (__stlxr(v171 - 2, v170));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v279);
      if (v278)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v278);
      if ((v287 & 7) != 0)
      {
        v172 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
        do
          v173 = __ldxr(v172);
        while (__stlxr(v173 - 2, v172));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v286);
      if (v285)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v285);
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v424);
      if ((v422 & 7) != 0)
      {
        v174 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stlxr(v175 - 2, v174));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421);
      if (v420)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v420);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v296 & 7) != 0)
      {
        v176 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFFFF8);
        do
          v177 = __ldxr(v176);
        while (__stlxr(v177 - 2, v176));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v295);
      if (*((_QWORD *)&v294 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v294 + 1));
      if ((v302 & 7) != 0)
      {
        v178 = (unsigned int *)(v302 & 0xFFFFFFFFFFFFFFF8);
        do
          v179 = __ldxr(v178);
        while (__stlxr(v179 - 2, v178));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v301);
      if (v300)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v300);
      if ((v312 & 7) != 0)
      {
        v180 = (unsigned int *)(v312 & 0xFFFFFFFFFFFFFFF8);
        do
          v181 = __ldxr(v180);
        while (__stlxr(v181 - 2, v180));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v311);
      if (v310)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v310);
      if ((v339 & 7) != 0)
      {
        v182 = (unsigned int *)(v339 & 0xFFFFFFFFFFFFFFF8);
        do
          v183 = __ldxr(v182);
        while (__stlxr(v183 - 2, v182));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
      if (*((_QWORD *)&v337 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v337 + 1));
      if ((v368 & 7) != 0)
      {
        v184 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
        do
          v185 = __ldxr(v184);
        while (__stlxr(v185 - 2, v184));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v366);
      if (v365)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v365);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v265);
      std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*((char **)&v478 + 1));
      if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v283.__r_.__value_.__l.__data_);
      v186 = v239[1];
      if (v186)
      {
        do
        {
          v187 = (uint64_t **)v186;
          v186 = (uint64_t *)*v186;
        }
        while (v186);
      }
      else
      {
        do
        {
          v187 = (uint64_t **)v161[2];
          _ZF = *v187 == (uint64_t *)v161;
          v161 = v187;
        }
        while (!_ZF);
      }
      v65 = v187;
      if (v187 == &v306)
        goto LABEL_429;
    }
    v104 = (uint64_t *)v395;
    if (v395)
    {
      if (!*((_QWORD *)&v394 + 1))
      {
        v105 = atomic_load(v395 - 2);
        if (v105 == 1)
        {
          if ((_QWORD)v393)
          {
            v106 = (uint64_t *)&v395[v393];
            v107 = (uint64_t *)(v395 + 1);
            do
            {
              if ((*v107 & 7) != 0)
              {
                v108 = (unsigned int *)(*v107 & 0xFFFFFFFFFFFFFFF8);
                do
                  v109 = __ldxr(v108);
                while (__stlxr(v109 - 2, v108));
              }
              ++v107;
            }
            while (v107 != v106);
            goto LABEL_235;
          }
          if (*(v395 - 1))
            goto LABEL_230;
          Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v393, (uint64_t *)v395, 1uLL, 0);
LABEL_225:
          v104 = Copy;
          goto LABEL_230;
        }
        v104 = (uint64_t *)v395;
      }
      v104 = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v393, v104, 1uLL, v393 != 0);
      if (v103)
      {
LABEL_235:
        if (v104 != (uint64_t *)v395)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v393);
          v395 = (unint64_t *)v104;
        }
        *(_QWORD *)&v393 = 1;
        goto LABEL_238;
      }
LABEL_230:
      v111 = v452.__r_.__value_.__r.__words[0];
      *v104 = v452.__r_.__value_.__r.__words[0];
      if ((v111 & 7) != 0)
      {
        v112 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 2, v112));
        if ((v113 & 1) == 0)
          *v104 &= 0xFFFFFFFFFFFFFFF8;
      }
      goto LABEL_235;
    }
    Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)&v393, 1uLL);
    goto LABEL_225;
  }
LABEL_429:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v240 + 16) + 24))(*(_QWORD *)(v240 + 16), 0);
  v221 = v292;
  if ((__int128 *)v292 != (__int128 *)((char *)&v292 + 8))
  {
    v222 = MEMORY[0x24BDAC9B8];
    do
    {
      v223 = *(double *)(v221 + 32);
      v478 = 0uLL;
      *(_QWORD *)v479 = 0;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(&v478, *(_QWORD *)(v221 + 40), *(_QWORD *)(v221 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v221 + 48) - *(_QWORD *)(v221 + 40)) >> 3));
      v224 = dispatch_time(0, (uint64_t)(v223 * 1000000000.0));
      v225 = v222;
      v246[0] = MEMORY[0x24BDAC760];
      v246[1] = 3321888768;
      v246[2] = ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_37;
      v246[3] = &__block_descriptor_64_ea8_32c108_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__7UsdPrimENS2_7TfTokenEEENS_9allocatorIS5_EEEE_e5_v8__0l;
      memset(v247, 0, 24);
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(v247, v478, *((uint64_t *)&v478 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v478 + 1) - v478) >> 3));
      v247[3] = v240;
      dispatch_after(v224, v222, v246);

      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
      v226 = *(__int128 **)(v221 + 8);
      if (v226)
      {
        do
        {
          v227 = v226;
          v226 = *(__int128 **)v226;
        }
        while (v226);
      }
      else
      {
        do
        {
          v227 = *(__int128 **)(v221 + 16);
          _ZF = *(_QWORD *)v227 == v221;
          v221 = (uint64_t)v227;
        }
        while (!_ZF);
      }
      v221 = (uint64_t)v227;
    }
    while (v227 != (__int128 *)((char *)&v292 + 8));
  }
  v228 = v290;
  if ((__int128 *)v290 != (__int128 *)((char *)&v290 + 8))
  {
    v229 = MEMORY[0x24BDAC9B8];
    do
    {
      v230 = *(double *)(v228 + 32);
      v478 = 0uLL;
      *(_QWORD *)v479 = 0;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(&v478, *(_QWORD *)(v228 + 40), *(_QWORD *)(v228 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v228 + 48) - *(_QWORD *)(v228 + 40)) >> 3));
      v231 = dispatch_time(0, (uint64_t)(v230 * 1000000000.0));
      v232 = v229;
      v244[0] = MEMORY[0x24BDAC760];
      v244[1] = 3321888768;
      v244[2] = ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_39;
      v244[3] = &__block_descriptor_64_ea8_32c114_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS2_7GfVec3dEEENS_9allocatorIS5_EEEE_e5_v8__0l;
      memset(v245, 0, 24);
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(v245, v478, *((uint64_t *)&v478 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v478 + 1) - v478) >> 3));
      v245[3] = v240;
      dispatch_after(v231, v229, v244);

      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
      v452.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v452);
      v233 = *(__int128 **)(v228 + 8);
      if (v233)
      {
        do
        {
          v234 = v233;
          v233 = *(__int128 **)v233;
        }
        while (v233);
      }
      else
      {
        do
        {
          v234 = *(__int128 **)(v228 + 16);
          _ZF = *(_QWORD *)v234 == v228;
          v228 = (uint64_t)v234;
        }
        while (!_ZF);
      }
      v228 = (uint64_t)v234;
    }
    while (v234 != (__int128 *)((char *)&v290 + 8));
  }
  v235 = dispatch_time(0, 0x218711800);
  v236 = MEMORY[0x24BDAC9B8];
  v237 = MEMORY[0x24BDAC9B8];
  v243[0] = MEMORY[0x24BDAC760];
  v243[1] = 3221225472;
  v243[2] = ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_41;
  v243[3] = &__block_descriptor_40_e5_v8__0l;
  v243[4] = v240;
  dispatch_after(v235, v236, v243);

  std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>>>>::destroy(*((char **)&v290 + 1));
  std::__tree<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::__map_value_compare<double,std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>,std::less<double>,true>,std::allocator<std::__value_type<double,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>>>>::destroy(*((char **)&v292 + 1));
  std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy(v306);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v308);
}

void sub_22FF8C9A0(_Unwind_Exception *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if ((STACK[0x9C0] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x9C0] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::UsdAttributeQuery>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0xEF0]);
  if ((STACK[0x820] & 7) != 0)
  {
    v4 = (unsigned int *)(STACK[0x820] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0xBB0]);
  MEMORY[0x2348B1AF8](&STACK[0x4E0]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x2E8]);
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete((void *)STACK[0x478]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&STACK[0x2F0]);
  std::__tree<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::LiveSessionPrimDescriptor>>>::destroy((_QWORD *)STACK[0x4C8]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&STACK[0x4D8]);
  _Unwind_Resume(a1);
}

uint64_t RIOImportSessionDumpDiagnostics(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v2 = a1;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v2 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v2 + 32) + 80))(*(_QWORD *)(v2 + 32), __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_22FF8D6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOImportSessionDumpDependencies(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  v2 = a1;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v2 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v2 + 32) + 88))(*(_QWORD *)(v2 + 32), __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_22FF8D750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_CopyInit(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Move(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Hash(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_Equal(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_EqualPtr(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetTypeid()
{
  return MEMORY[0x24BEDB770];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedTypeid()
{
  return MEMORY[0x24BEDB770];
}

_BYTE *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<BOOL,BOOL,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<BOOL>>::_GetProxiedAsVtValue@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24FDE59C3;
  *(_BYTE *)a2 = *result;
  return result;
}

uint64_t std::pair<std::string const,realityio::LiveSessionPrimDescriptor>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtArray<std::string>::VtArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::assign<std::string const*>((unint64_t *)a1, a2, a2 + 24 * a3);
  return a1;
}

void sub_22FF8D90C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>::~pair(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[3];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  v8 = a1[1];
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>::~pair(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  return a1;
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 32));
  result = MEMORY[0x2348B2A70](v2, a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16), 0);
  return result;
}

_DWORD *__copy_helper_block_ea8_32c64_ZTSN32pxrInternal__aapl__pxrReserved__8TfRefPtrINS_8UsdStageEEE48c48_ZTSN32pxrInternal__aapl__pxrReserved__7SdfPathE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = a1 + 32;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 16), (_DWORD *)(a2 + 48));
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 20), (_DWORD *)(a2 + 52));
}

unsigned int **__destroy_helper_block_ea8_32c64_ZTSN32pxrInternal__aapl__pxrReserved__8TfRefPtrINS_8UsdStageEEE48c48_ZTSN32pxrInternal__aapl__pxrReserved__7SdfPathE(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(a1 + 32));
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_37(uint64_t result)
{
  uint64_t v1;
  int *v2;
  int *i;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v1 = result;
  v2 = *(int **)(result + 32);
  for (i = *(int **)(result + 40); v2 != i; v2 += 10)
  {
    v19 = *v2;
    v4 = *((_QWORD *)v2 + 1);
    v20 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 48);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, v2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, v2 + 5);
    v7 = *((_QWORD *)v2 + 3);
    v23 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 = *((_QWORD *)v2 + 4);
    v18 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19))
      pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
    if ((v18 & 7) != 0)
    {
      v13 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    if ((v23 & 7) != 0)
    {
      v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    result = v20;
    if (v20)
      result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  v17 = *(_QWORD *)(v1 + 56);
  if (v17)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 16) + 24))(*(_QWORD *)(v17 + 16), 0);
  return result;
}

void sub_22FF8DC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t Data;

  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 448));
}

_QWORD *__copy_helper_block_ea8_32c108_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__7UsdPrimENS2_7TfTokenEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>*>(v2, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
}

void __destroy_helper_block_ea8_32c108_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__7UsdPrimENS2_7TfTokenEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN9realityioL19updateStageOnRepeatEPNS_13ImportSessionE_block_invoke_39(uint64_t result)
{
  uint64_t v1;
  int *v2;
  int *i;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v1 = result;
  v2 = *(int **)(result + 32);
  for (i = *(int **)(result + 40); v2 != i; v2 += 14)
  {
    v13 = *v2;
    v4 = *((_QWORD *)v2 + 1);
    v14 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 48);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, v2 + 5);
    v7 = *((_QWORD *)v2 + 3);
    v17 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13))
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
    if ((v17 & 7) != 0)
    {
      v10 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    result = v14;
    if (v14)
      result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  v12 = *(_QWORD *)(v1 + 56);
  if (v12)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v12 + 16) + 24))(*(_QWORD *)(v12 + 16), 0);
  return result;
}

void sub_22FF8DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c114_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS2_7GfVec3dEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*,std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>*>(v2, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
}

void __destroy_helper_block_ea8_32c114_ZTSNSt3__16vectorINS_4pairIN32pxrInternal__aapl__pxrReserved__12UsdAttributeENS2_7GfVec3dEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 32);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::UsdAttribute,pxrInternal__aapl__pxrReserved__::GfVec3d>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t *std::map<float,std::string>::map[abi:ne180100](uint64_t *a1, float *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(a1, v4, (uint64_t)a2, *a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_22FF8DFC4(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<float,std::string>,std::__map_value_compare<float,std::__value_type<float,std::string>,std::less<float>,true>,std::allocator<std::__value_type<float,std::string>>>::__emplace_hint_unique_key_args<float,std::pair<float const,std::string> const&>(uint64_t *result, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t *v5;
  uint64_t *v6;
  float *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  float v19;
  float *v20;
  uint64_t *v21;
  float v22;
  char *v23;
  std::string *v24;
  uint64_t v25;

  v5 = a2;
  v6 = result;
  v7 = (float *)(result + 1);
  if (result + 1 != a2)
  {
    v8 = *((float *)a2 + 8);
    if (v8 <= a4)
    {
      if (v8 >= a4)
        return result;
      v13 = a2 + 1;
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
          v5 = v13;
          v14 = (float *)v13;
        }
        while (v12);
      }
      else
      {
        v14 = (float *)a2;
        do
        {
          v20 = v14;
          v14 = (float *)*((_QWORD *)v14 + 2);
        }
        while (*(float **)v14 != v20);
      }
      if (v14 == v7)
        goto LABEL_42;
      if (v14[8] > a4)
        goto LABEL_42;
      v21 = *(uint64_t **)v7;
      v13 = result + 1;
      v5 = result + 1;
      if (!*(_QWORD *)v7)
        goto LABEL_42;
      while (1)
      {
        while (1)
        {
          v5 = v21;
          v22 = *((float *)v21 + 8);
          if (v22 <= a4)
            break;
          v21 = (uint64_t *)*v21;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v22 >= a4)
          return result;
        v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }
  v9 = (uint64_t *)*a2;
  if ((uint64_t *)*result == a2)
  {
    v11 = a2;
  }
  else
  {
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((float *)v11 + 8) >= a4)
    {
      v18 = *(uint64_t **)v7;
      v13 = result + 1;
      v5 = result + 1;
      if (!*(_QWORD *)v7)
        goto LABEL_42;
      while (1)
      {
        while (1)
        {
          v5 = v18;
          v19 = *((float *)v18 + 8);
          if (v19 <= a4)
            break;
          v18 = (uint64_t *)*v18;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v19 >= a4)
          return result;
        v18 = (uint64_t *)v18[1];
        if (!v18)
          goto LABEL_30;
      }
    }
  }
  if (v9)
    v17 = v11;
  else
    v17 = a2;
  if (v9)
    v13 = v11 + 1;
  else
    v13 = a2;
  if (!*v13)
  {
    v5 = v17;
LABEL_42:
    v23 = (char *)operator new(0x40uLL);
    *((_DWORD *)v23 + 8) = *(_DWORD *)a3;
    v24 = (std::string *)(v23 + 40);
    if (*(char *)(a3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
      *((_QWORD *)v23 + 7) = *(_QWORD *)(a3 + 24);
    }
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v5;
    *v13 = (uint64_t)v23;
    v25 = *(_QWORD *)*v6;
    if (v25)
    {
      *v6 = v25;
      v23 = (char *)*v13;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], (uint64_t *)v23);
    ++v6[2];
  }
  return result;
}

